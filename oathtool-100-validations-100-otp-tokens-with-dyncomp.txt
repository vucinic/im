===========================================================================
.._oath_hotp_generate2():::ENTER
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
secret == ""
secret_length == 1
moving_factor >= 0
digits == 6
add_checksum == false
truncation_offset == -1
flags == 0
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
.._oath_hotp_generate2():::EXIT
::exit_failure == orig(::exit_failure)
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
return == 0
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(::program_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
===========================================================================
.._oath_strcmp_callback():::ENTER
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
handle has only one value
handle != null
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
.._oath_strcmp_callback():::EXIT
::exit_failure == orig(::exit_failure)
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
return one of { 0, 1 }
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(::program_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
===========================================================================
..cmdline_parser():::ENTER
::exit_failure == size(argv[])
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
argc == 5
argv has only one value
argv != null
argv[] == [./oathtool]
argv[] elements == "./oathtool"
args_info has only one value
args_info != null
size(argv[]) == 1
::program_name in argv[]
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
..cmdline_parser():::EXIT
::exit_failure == orig(::exit_failure)
::exit_failure == orig(size(argv[]))
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
return == size(argv[])-1
size(argv[])-1 == args_info[::exit_failure-1].base32_flag
size(argv[])-1 == args_info[::exit_failure-1].verbose_flag
size(argv[])-1 == args_info[return].base32_flag
size(argv[])-1 == args_info[orig(::exit_failure)-1].base32_flag
size(argv[])-1 == args_info[return].verbose_flag
size(argv[])-1 == args_info[orig(::exit_failure)-1].verbose_flag
orig(size(argv[])) == args_info[::exit_failure-1].hotp_flag
orig(size(argv[])) == args_info[return].hotp_flag
orig(size(argv[])) == args_info[orig(::exit_failure)-1].hotp_flag
args_info[::exit_failure-1] == args_info[return]
args_info[::exit_failure-1].window_arg == args_info[return].window_arg
args_info[::exit_failure-1].help_given == args_info[return].help_given
args_info[::exit_failure-1].version_given == args_info[return].help_given
args_info[::exit_failure-1].hotp_given == args_info[return].help_given
args_info[::exit_failure-1].totp_given == args_info[return].help_given
args_info[::exit_failure-1].base32_given == args_info[return].help_given
args_info[::exit_failure-1].counter_given == args_info[return].help_given
args_info[::exit_failure-1].time_step_size_given == args_info[return].help_given
args_info[::exit_failure-1].start_time_given == args_info[return].help_given
args_info[::exit_failure-1].now_given == args_info[return].help_given
args_info[::exit_failure-1].digits_given == args_info[return].help_given
args_info[::exit_failure-1].window_given == args_info[return].window_given
args_info[::exit_failure-1].verbose_given == args_info[return].help_given
args_info[::exit_failure-1].inputs == args_info[return].inputs
args_info[::exit_failure-1].inputs_num == args_info[return].inputs_num
args_info[return] == args_info[orig(::exit_failure)-1]
args_info[return].window_arg == args_info[orig(::exit_failure)-1].window_arg
args_info[return].help_given == args_info[orig(::exit_failure)-1].help_given
args_info[return].help_given == args_info[return].version_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].version_given
args_info[return].help_given == args_info[return].hotp_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].hotp_given
args_info[return].help_given == args_info[return].totp_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].totp_given
args_info[return].help_given == args_info[return].base32_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].base32_given
args_info[return].help_given == args_info[return].counter_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].counter_given
args_info[return].help_given == args_info[return].time_step_size_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].time_step_size_given
args_info[return].help_given == args_info[return].start_time_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].start_time_given
args_info[return].help_given == args_info[return].now_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].now_given
args_info[return].help_given == args_info[return].digits_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].digits_given
args_info[return].help_given == args_info[return].verbose_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].verbose_given
args_info[return].window_given == args_info[orig(::exit_failure)-1].window_given
args_info[return].inputs == args_info[orig(::exit_failure)-1].inputs
args_info[return].inputs_num == args_info[orig(::exit_failure)-1].inputs_num
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
argv[] == [./oathtool]
argv[] elements == "./oathtool"
args_info[] contains no nulls and has only one value, of length 1
args_info[] elements has only one value
args_info[] elements != null
args_info[].help_help == [  -h, --help                    Print help and exit]
args_info[].help_help elements == "  -h, --help                    Print help and exit"
args_info[].version_help == [  -V, --version                 Print version and exit]
args_info[].version_help elements == "  -V, --version                 Print version and exit"
args_info[].hotp_flag == [1]
args_info[].hotp_flag elements == 1
args_info[].hotp_help == [      --hotp                    use event-based HOTP mode  (default=on)]
args_info[].hotp_help elements == "      --hotp                    use event-based HOTP mode  (default=on)"
args_info[].totp_arg == [sha1]
args_info[].totp_arg elements == "sha1"
args_info[].totp_help == [      --totp[=STRING]           use time-variant TOTP mode  (possible
                                  values="sha1", "sha256", "sha512"
                                  default=`sha1')]
args_info[].totp_help elements == "      --totp[=STRING]           use time-variant TOTP mode  (possible\n                                  values=\"sha1\", \"sha256\", \"sha512\"\n                                  default=`sha1')"
args_info[].base32_flag == [0]
args_info[].base32_flag elements == 0
args_info[].base32_help == [  -b, --base32                  use base32 encoding of KEY instead of hex
                                  (default=off)]
args_info[].base32_help elements == "  -b, --base32                  use base32 encoding of KEY instead of hex\n                                  (default=off)"
args_info[].counter_help == [  -c, --counter=COUNTER         HOTP counter value]
args_info[].counter_help elements == "  -c, --counter=COUNTER         HOTP counter value"
args_info[].time_step_size_arg == [30s]
args_info[].time_step_size_arg elements == "30s"
args_info[].time_step_size_help == [  -s, --time-step-size=DURATION TOTP time-step duration  (default=`30s')]
args_info[].time_step_size_help elements == "  -s, --time-step-size=DURATION TOTP time-step duration  (default=`30s')"
args_info[].start_time_arg == [1970-01-01 00:00:00 UTC]
args_info[].start_time_arg elements == "1970-01-01 00:00:00 UTC"
args_info[].start_time_help == [  -S, --start-time=TIME         when to start counting time steps for TOTP
                                  (default=`1970-01-01 00:00:00 UTC')]
args_info[].start_time_help elements == "  -S, --start-time=TIME         when to start counting time steps for TOTP\n                                  (default=`1970-01-01 00:00:00 UTC')"
args_info[].now_arg == [now]
args_info[].now_arg elements == "now"
args_info[].now_help == [  -N, --now=TIME                use this time as current time for TOTP
                                  (default=`now')]
args_info[].now_help elements == "  -N, --now=TIME                use this time as current time for TOTP\n                                  (default=`now')"
args_info[].digits_help == [  -d, --digits=DIGITS           number of digits in one-time password]
args_info[].digits_help elements == "  -d, --digits=DIGITS           number of digits in one-time password"
args_info[].window_arg == [100]
args_info[].window_arg elements == 100
args_info[].window_orig == [100]
args_info[].window_orig elements == "100"
args_info[].window_help == [  -w, --window=WIDTH            window of counter values to test when
                                  validating OTPs]
args_info[].window_help elements == "  -w, --window=WIDTH            window of counter values to test when\n                                  validating OTPs"
args_info[].verbose_flag == [0]
args_info[].verbose_flag elements == 0
args_info[].verbose_help == [  -v, --verbose                 explain what is being done  (default=off)]
args_info[].verbose_help elements == "  -v, --verbose                 explain what is being done  (default=off)"
args_info[].help_given == [0]
args_info[].help_given elements == 0
args_info[].version_given == [0]
args_info[].version_given elements == 0
args_info[].hotp_given == [0]
args_info[].hotp_given elements == 0
args_info[].totp_given == [0]
args_info[].totp_given elements == 0
args_info[].base32_given == [0]
args_info[].base32_given elements == 0
args_info[].counter_given == [0]
args_info[].counter_given elements == 0
args_info[].time_step_size_given == [0]
args_info[].time_step_size_given elements == 0
args_info[].start_time_given == [0]
args_info[].start_time_given elements == 0
args_info[].now_given == [0]
args_info[].now_given elements == 0
args_info[].digits_given == [0]
args_info[].digits_given elements == 0
args_info[].window_given == [1]
args_info[].window_given elements == 1
args_info[].verbose_given == [0]
args_info[].verbose_given elements == 0
args_info[].inputs contains no nulls and has only one value, of length 1
args_info[].inputs elements has only one value
args_info[].inputs elements != null
args_info[].inputs[0] == [00]
args_info[].inputs[0] elements == "00"
args_info[].inputs_num == [2]
args_info[].inputs_num elements == 2
return == 0
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == ::package_name
::program_name in argv[]
::program_name == orig(::program_name)
::exit_failure in args_info[].hotp_flag
args_info[].hotp_flag elements == ::exit_failure
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
args_info[] elements == args_info[return]
args_info[].hotp_flag elements == orig(size(argv[]))
args_info[].base32_flag elements == return
return in args_info[].base32_flag
args_info[].base32_flag elements == size(argv[])-1
args_info[].window_arg elements == args_info[return].window_arg
args_info[].verbose_flag elements == return
return in args_info[].verbose_flag
args_info[].verbose_flag elements == size(argv[])-1
args_info[].help_given elements == args_info[return].help_given
args_info[].version_given elements == args_info[return].help_given
args_info[].hotp_given elements == args_info[return].help_given
args_info[].totp_given elements == args_info[return].help_given
args_info[].base32_given elements == args_info[return].help_given
args_info[].counter_given elements == args_info[return].help_given
args_info[].time_step_size_given elements == args_info[return].help_given
args_info[].start_time_given elements == args_info[return].help_given
args_info[].now_given elements == args_info[return].help_given
args_info[].digits_given elements == args_info[return].help_given
args_info[].window_given elements == args_info[return].window_given
args_info[].verbose_given elements == args_info[return].help_given
args_info[].inputs elements == args_info[return].inputs
args_info[].inputs_num elements == args_info[return].inputs_num
===========================================================================
..cmdline_parser2():::ENTER
::exit_failure == size(argv[])
override == size(argv[])-1
initialize == size(argv[])
check_required == size(argv[])
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
argc == 5
argv has only one value
argv != null
argv[] == [./oathtool]
argv[] elements == "./oathtool"
args_info has only one value
args_info != null
override == 0
initialize == 1
check_required == 1
size(argv[]) == 1
::program_name in argv[]
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
..cmdline_parser2():::EXIT
::exit_failure == orig(::exit_failure)
::exit_failure == orig(size(argv[]))
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
return == size(argv[])-1
orig(override) == size(argv[])-1
size(argv[])-1 == args_info[::exit_failure-1].base32_flag
size(argv[])-1 == args_info[::exit_failure-1].verbose_flag
size(argv[])-1 == args_info[return].base32_flag
size(argv[])-1 == args_info[orig(::exit_failure)-1].base32_flag
size(argv[])-1 == args_info[orig(override)].base32_flag
size(argv[])-1 == args_info[orig(initialize)-1].base32_flag
size(argv[])-1 == args_info[orig(check_required)-1].base32_flag
size(argv[])-1 == args_info[return].verbose_flag
size(argv[])-1 == args_info[orig(::exit_failure)-1].verbose_flag
size(argv[])-1 == args_info[orig(override)].verbose_flag
size(argv[])-1 == args_info[orig(initialize)-1].verbose_flag
size(argv[])-1 == args_info[orig(check_required)-1].verbose_flag
orig(size(argv[])) == args_info[::exit_failure-1].hotp_flag
orig(size(argv[])) == args_info[return].hotp_flag
orig(size(argv[])) == args_info[orig(::exit_failure)-1].hotp_flag
orig(size(argv[])) == args_info[orig(override)].hotp_flag
orig(size(argv[])) == args_info[orig(initialize)-1].hotp_flag
orig(size(argv[])) == args_info[orig(check_required)-1].hotp_flag
args_info[::exit_failure-1] == args_info[return]
args_info[::exit_failure-1].window_arg == args_info[return].window_arg
args_info[::exit_failure-1].help_given == args_info[return].help_given
args_info[::exit_failure-1].version_given == args_info[return].help_given
args_info[::exit_failure-1].hotp_given == args_info[return].help_given
args_info[::exit_failure-1].totp_given == args_info[return].help_given
args_info[::exit_failure-1].base32_given == args_info[return].help_given
args_info[::exit_failure-1].counter_given == args_info[return].help_given
args_info[::exit_failure-1].time_step_size_given == args_info[return].help_given
args_info[::exit_failure-1].start_time_given == args_info[return].help_given
args_info[::exit_failure-1].now_given == args_info[return].help_given
args_info[::exit_failure-1].digits_given == args_info[return].help_given
args_info[::exit_failure-1].window_given == args_info[return].window_given
args_info[::exit_failure-1].verbose_given == args_info[return].help_given
args_info[::exit_failure-1].inputs == args_info[return].inputs
args_info[::exit_failure-1].inputs_num == args_info[return].inputs_num
args_info[return] == args_info[orig(::exit_failure)-1]
args_info[return] == args_info[orig(override)]
args_info[return] == args_info[orig(initialize)-1]
args_info[return] == args_info[orig(check_required)-1]
args_info[return].window_arg == args_info[orig(::exit_failure)-1].window_arg
args_info[return].window_arg == args_info[orig(override)].window_arg
args_info[return].window_arg == args_info[orig(initialize)-1].window_arg
args_info[return].window_arg == args_info[orig(check_required)-1].window_arg
args_info[return].help_given == args_info[orig(::exit_failure)-1].help_given
args_info[return].help_given == args_info[orig(override)].help_given
args_info[return].help_given == args_info[orig(initialize)-1].help_given
args_info[return].help_given == args_info[orig(check_required)-1].help_given
args_info[return].help_given == args_info[return].version_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].version_given
args_info[return].help_given == args_info[orig(override)].version_given
args_info[return].help_given == args_info[orig(initialize)-1].version_given
args_info[return].help_given == args_info[orig(check_required)-1].version_given
args_info[return].help_given == args_info[return].hotp_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].hotp_given
args_info[return].help_given == args_info[orig(override)].hotp_given
args_info[return].help_given == args_info[orig(initialize)-1].hotp_given
args_info[return].help_given == args_info[orig(check_required)-1].hotp_given
args_info[return].help_given == args_info[return].totp_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].totp_given
args_info[return].help_given == args_info[orig(override)].totp_given
args_info[return].help_given == args_info[orig(initialize)-1].totp_given
args_info[return].help_given == args_info[orig(check_required)-1].totp_given
args_info[return].help_given == args_info[return].base32_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].base32_given
args_info[return].help_given == args_info[orig(override)].base32_given
args_info[return].help_given == args_info[orig(initialize)-1].base32_given
args_info[return].help_given == args_info[orig(check_required)-1].base32_given
args_info[return].help_given == args_info[return].counter_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].counter_given
args_info[return].help_given == args_info[orig(override)].counter_given
args_info[return].help_given == args_info[orig(initialize)-1].counter_given
args_info[return].help_given == args_info[orig(check_required)-1].counter_given
args_info[return].help_given == args_info[return].time_step_size_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].time_step_size_given
args_info[return].help_given == args_info[orig(override)].time_step_size_given
args_info[return].help_given == args_info[orig(initialize)-1].time_step_size_given
args_info[return].help_given == args_info[orig(check_required)-1].time_step_size_given
args_info[return].help_given == args_info[return].start_time_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].start_time_given
args_info[return].help_given == args_info[orig(override)].start_time_given
args_info[return].help_given == args_info[orig(initialize)-1].start_time_given
args_info[return].help_given == args_info[orig(check_required)-1].start_time_given
args_info[return].help_given == args_info[return].now_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].now_given
args_info[return].help_given == args_info[orig(override)].now_given
args_info[return].help_given == args_info[orig(initialize)-1].now_given
args_info[return].help_given == args_info[orig(check_required)-1].now_given
args_info[return].help_given == args_info[return].digits_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].digits_given
args_info[return].help_given == args_info[orig(override)].digits_given
args_info[return].help_given == args_info[orig(initialize)-1].digits_given
args_info[return].help_given == args_info[orig(check_required)-1].digits_given
args_info[return].help_given == args_info[return].verbose_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].verbose_given
args_info[return].help_given == args_info[orig(override)].verbose_given
args_info[return].help_given == args_info[orig(initialize)-1].verbose_given
args_info[return].help_given == args_info[orig(check_required)-1].verbose_given
args_info[return].window_given == args_info[orig(::exit_failure)-1].window_given
args_info[return].window_given == args_info[orig(override)].window_given
args_info[return].window_given == args_info[orig(initialize)-1].window_given
args_info[return].window_given == args_info[orig(check_required)-1].window_given
args_info[return].inputs == args_info[orig(::exit_failure)-1].inputs
args_info[return].inputs == args_info[orig(override)].inputs
args_info[return].inputs == args_info[orig(initialize)-1].inputs
args_info[return].inputs == args_info[orig(check_required)-1].inputs
args_info[return].inputs_num == args_info[orig(::exit_failure)-1].inputs_num
args_info[return].inputs_num == args_info[orig(override)].inputs_num
args_info[return].inputs_num == args_info[orig(initialize)-1].inputs_num
args_info[return].inputs_num == args_info[orig(check_required)-1].inputs_num
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
argv[] == [./oathtool]
argv[] elements == "./oathtool"
args_info[] contains no nulls and has only one value, of length 1
args_info[] elements has only one value
args_info[] elements != null
args_info[].help_help == [  -h, --help                    Print help and exit]
args_info[].help_help elements == "  -h, --help                    Print help and exit"
args_info[].version_help == [  -V, --version                 Print version and exit]
args_info[].version_help elements == "  -V, --version                 Print version and exit"
args_info[].hotp_flag == [1]
args_info[].hotp_flag elements == 1
args_info[].hotp_help == [      --hotp                    use event-based HOTP mode  (default=on)]
args_info[].hotp_help elements == "      --hotp                    use event-based HOTP mode  (default=on)"
args_info[].totp_arg == [sha1]
args_info[].totp_arg elements == "sha1"
args_info[].totp_help == [      --totp[=STRING]           use time-variant TOTP mode  (possible
                                  values="sha1", "sha256", "sha512"
                                  default=`sha1')]
args_info[].totp_help elements == "      --totp[=STRING]           use time-variant TOTP mode  (possible\n                                  values=\"sha1\", \"sha256\", \"sha512\"\n                                  default=`sha1')"
args_info[].base32_flag == [0]
args_info[].base32_flag elements == 0
args_info[].base32_help == [  -b, --base32                  use base32 encoding of KEY instead of hex
                                  (default=off)]
args_info[].base32_help elements == "  -b, --base32                  use base32 encoding of KEY instead of hex\n                                  (default=off)"
args_info[].counter_help == [  -c, --counter=COUNTER         HOTP counter value]
args_info[].counter_help elements == "  -c, --counter=COUNTER         HOTP counter value"
args_info[].time_step_size_arg == [30s]
args_info[].time_step_size_arg elements == "30s"
args_info[].time_step_size_help == [  -s, --time-step-size=DURATION TOTP time-step duration  (default=`30s')]
args_info[].time_step_size_help elements == "  -s, --time-step-size=DURATION TOTP time-step duration  (default=`30s')"
args_info[].start_time_arg == [1970-01-01 00:00:00 UTC]
args_info[].start_time_arg elements == "1970-01-01 00:00:00 UTC"
args_info[].start_time_help == [  -S, --start-time=TIME         when to start counting time steps for TOTP
                                  (default=`1970-01-01 00:00:00 UTC')]
args_info[].start_time_help elements == "  -S, --start-time=TIME         when to start counting time steps for TOTP\n                                  (default=`1970-01-01 00:00:00 UTC')"
args_info[].now_arg == [now]
args_info[].now_arg elements == "now"
args_info[].now_help == [  -N, --now=TIME                use this time as current time for TOTP
                                  (default=`now')]
args_info[].now_help elements == "  -N, --now=TIME                use this time as current time for TOTP\n                                  (default=`now')"
args_info[].digits_help == [  -d, --digits=DIGITS           number of digits in one-time password]
args_info[].digits_help elements == "  -d, --digits=DIGITS           number of digits in one-time password"
args_info[].window_arg == [100]
args_info[].window_arg elements == 100
args_info[].window_orig == [100]
args_info[].window_orig elements == "100"
args_info[].window_help == [  -w, --window=WIDTH            window of counter values to test when
                                  validating OTPs]
args_info[].window_help elements == "  -w, --window=WIDTH            window of counter values to test when\n                                  validating OTPs"
args_info[].verbose_flag == [0]
args_info[].verbose_flag elements == 0
args_info[].verbose_help == [  -v, --verbose                 explain what is being done  (default=off)]
args_info[].verbose_help elements == "  -v, --verbose                 explain what is being done  (default=off)"
args_info[].help_given == [0]
args_info[].help_given elements == 0
args_info[].version_given == [0]
args_info[].version_given elements == 0
args_info[].hotp_given == [0]
args_info[].hotp_given elements == 0
args_info[].totp_given == [0]
args_info[].totp_given elements == 0
args_info[].base32_given == [0]
args_info[].base32_given elements == 0
args_info[].counter_given == [0]
args_info[].counter_given elements == 0
args_info[].time_step_size_given == [0]
args_info[].time_step_size_given elements == 0
args_info[].start_time_given == [0]
args_info[].start_time_given elements == 0
args_info[].now_given == [0]
args_info[].now_given elements == 0
args_info[].digits_given == [0]
args_info[].digits_given elements == 0
args_info[].window_given == [1]
args_info[].window_given elements == 1
args_info[].verbose_given == [0]
args_info[].verbose_given elements == 0
args_info[].inputs contains no nulls and has only one value, of length 1
args_info[].inputs elements has only one value
args_info[].inputs elements != null
args_info[].inputs[0] == [00]
args_info[].inputs[0] elements == "00"
args_info[].inputs_num == [2]
args_info[].inputs_num elements == 2
return == 0
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == ::package_name
::program_name in argv[]
::program_name == orig(::program_name)
::exit_failure in args_info[].hotp_flag
args_info[].hotp_flag elements == ::exit_failure
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
args_info[] elements == args_info[return]
args_info[].hotp_flag elements == orig(initialize)
orig(initialize) in args_info[].hotp_flag
args_info[].hotp_flag elements == orig(check_required)
orig(check_required) in args_info[].hotp_flag
args_info[].hotp_flag elements == orig(size(argv[]))
args_info[].base32_flag elements == return
return in args_info[].base32_flag
args_info[].base32_flag elements == orig(override)
orig(override) in args_info[].base32_flag
args_info[].base32_flag elements == size(argv[])-1
args_info[].window_arg elements == args_info[return].window_arg
args_info[].verbose_flag elements == return
return in args_info[].verbose_flag
args_info[].verbose_flag elements == orig(override)
orig(override) in args_info[].verbose_flag
args_info[].verbose_flag elements == size(argv[])-1
args_info[].help_given elements == args_info[return].help_given
args_info[].version_given elements == args_info[return].help_given
args_info[].hotp_given elements == args_info[return].help_given
args_info[].totp_given elements == args_info[return].help_given
args_info[].base32_given elements == args_info[return].help_given
args_info[].counter_given elements == args_info[return].help_given
args_info[].time_step_size_given elements == args_info[return].help_given
args_info[].start_time_given elements == args_info[return].help_given
args_info[].now_given elements == args_info[return].help_given
args_info[].digits_given elements == args_info[return].help_given
args_info[].window_given elements == args_info[return].window_given
args_info[].verbose_given elements == args_info[return].help_given
args_info[].inputs elements == args_info[return].inputs
args_info[].inputs_num elements == args_info[return].inputs_num
===========================================================================
..cmdline_parser_init():::ENTER
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
args_info != null
::program_name == ::package_name
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
..cmdline_parser_init():::EXIT
::exit_failure == orig(::exit_failure)
::exit_failure == args_info[::exit_failure-1].hotp_flag
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
size(args_info[])-1 == args_info[::exit_failure-1].base32_flag
size(args_info[])-1 == args_info[::exit_failure-1].verbose_flag
size(args_info[])-1 == args_info[orig(::exit_failure)-1].base32_flag
size(args_info[])-1 == args_info[orig(::exit_failure)-1].verbose_flag
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].version_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].hotp_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].totp_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].base32_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].counter_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].time_step_size_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].start_time_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].now_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].digits_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].window_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].verbose_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].inputs_num
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].version_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].hotp_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].totp_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].base32_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].counter_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].time_step_size_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].start_time_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].now_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].digits_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].window_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].verbose_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].inputs_num
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
args_info[] elements != null
args_info[].help_help == [  -h, --help                    Print help and exit]
args_info[].help_help elements == "  -h, --help                    Print help and exit"
args_info[].version_help == [  -V, --version                 Print version and exit]
args_info[].version_help elements == "  -V, --version                 Print version and exit"
args_info[].hotp_flag == [1]
args_info[].hotp_flag elements == 1
args_info[].hotp_help == [      --hotp                    use event-based HOTP mode  (default=on)]
args_info[].hotp_help elements == "      --hotp                    use event-based HOTP mode  (default=on)"
args_info[].totp_arg == [sha1]
args_info[].totp_arg elements == "sha1"
args_info[].totp_help == [      --totp[=STRING]           use time-variant TOTP mode  (possible
                                  values="sha1", "sha256", "sha512"
                                  default=`sha1')]
args_info[].totp_help elements == "      --totp[=STRING]           use time-variant TOTP mode  (possible\n                                  values=\"sha1\", \"sha256\", \"sha512\"\n                                  default=`sha1')"
args_info[].base32_flag == [0]
args_info[].base32_flag elements == 0
args_info[].base32_help == [  -b, --base32                  use base32 encoding of KEY instead of hex
                                  (default=off)]
args_info[].base32_help elements == "  -b, --base32                  use base32 encoding of KEY instead of hex\n                                  (default=off)"
args_info[].counter_help == [  -c, --counter=COUNTER         HOTP counter value]
args_info[].counter_help elements == "  -c, --counter=COUNTER         HOTP counter value"
args_info[].time_step_size_arg == [30s]
args_info[].time_step_size_arg elements == "30s"
args_info[].time_step_size_help == [  -s, --time-step-size=DURATION TOTP time-step duration  (default=`30s')]
args_info[].time_step_size_help elements == "  -s, --time-step-size=DURATION TOTP time-step duration  (default=`30s')"
args_info[].start_time_arg == [1970-01-01 00:00:00 UTC]
args_info[].start_time_arg elements == "1970-01-01 00:00:00 UTC"
args_info[].start_time_help == [  -S, --start-time=TIME         when to start counting time steps for TOTP
                                  (default=`1970-01-01 00:00:00 UTC')]
args_info[].start_time_help elements == "  -S, --start-time=TIME         when to start counting time steps for TOTP\n                                  (default=`1970-01-01 00:00:00 UTC')"
args_info[].now_arg == [now]
args_info[].now_arg elements == "now"
args_info[].now_help == [  -N, --now=TIME                use this time as current time for TOTP
                                  (default=`now')]
args_info[].now_help elements == "  -N, --now=TIME                use this time as current time for TOTP\n                                  (default=`now')"
args_info[].digits_help == [  -d, --digits=DIGITS           number of digits in one-time password]
args_info[].digits_help elements == "  -d, --digits=DIGITS           number of digits in one-time password"
args_info[].window_help == [  -w, --window=WIDTH            window of counter values to test when
                                  validating OTPs]
args_info[].window_help elements == "  -w, --window=WIDTH            window of counter values to test when\n                                  validating OTPs"
args_info[].verbose_flag == [0]
args_info[].verbose_flag elements == 0
args_info[].verbose_help == [  -v, --verbose                 explain what is being done  (default=off)]
args_info[].verbose_help elements == "  -v, --verbose                 explain what is being done  (default=off)"
args_info[].help_given == [0]
args_info[].help_given elements == 0
args_info[].version_given == [0]
args_info[].version_given elements == 0
args_info[].hotp_given == [0]
args_info[].hotp_given elements == 0
args_info[].totp_given == [0]
args_info[].totp_given elements == 0
args_info[].base32_given == [0]
args_info[].base32_given elements == 0
args_info[].counter_given == [0]
args_info[].counter_given elements == 0
args_info[].time_step_size_given == [0]
args_info[].time_step_size_given elements == 0
args_info[].start_time_given == [0]
args_info[].start_time_given elements == 0
args_info[].now_given == [0]
args_info[].now_given elements == 0
args_info[].digits_given == [0]
args_info[].digits_given elements == 0
args_info[].window_given == [0]
args_info[].window_given elements == 0
args_info[].verbose_given == [0]
args_info[].verbose_given elements == 0
args_info[].inputs == [null]
args_info[].inputs elements == null
args_info[].inputs_num == [0]
args_info[].inputs_num elements == 0
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == ::package_name
::program_name == orig(::program_name)
::program_name == orig(::package_name)
::exit_failure in args_info[].hotp_flag
args_info[].hotp_flag elements == ::exit_failure
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
args_info[] elements == args_info[::exit_failure-1]
args_info[].hotp_flag elements == args_info[::exit_failure-1].hotp_flag
args_info[].base32_flag elements == size(args_info[])-1
args_info[].verbose_flag elements == size(args_info[])-1
args_info[].help_given elements == args_info[::exit_failure-1].help_given
args_info[].version_given elements == args_info[::exit_failure-1].help_given
args_info[].hotp_given elements == args_info[::exit_failure-1].help_given
args_info[].totp_given elements == args_info[::exit_failure-1].help_given
args_info[].base32_given elements == args_info[::exit_failure-1].help_given
args_info[].counter_given elements == args_info[::exit_failure-1].help_given
args_info[].time_step_size_given elements == args_info[::exit_failure-1].help_given
args_info[].start_time_given elements == args_info[::exit_failure-1].help_given
args_info[].now_given elements == args_info[::exit_failure-1].help_given
args_info[].digits_given elements == args_info[::exit_failure-1].help_given
args_info[].window_given elements == args_info[::exit_failure-1].help_given
args_info[].verbose_given elements == args_info[::exit_failure-1].help_given
args_info[].inputs elements == args_info[::exit_failure-1].inputs
args_info[].inputs_num elements == args_info[::exit_failure-1].help_given
===========================================================================
..gc_done():::ENTER
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
..gc_done():::EXIT
::exit_failure == orig(::exit_failure)
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(::program_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
===========================================================================
..gc_hmac_sha1():::ENTER
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
key has only one value
key != null
keylen == 1
in has only one value
in != null
inlen == 8
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
..gc_hmac_sha1():::EXIT
::exit_failure == orig(::exit_failure)
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
return == 0
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(::program_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
===========================================================================
..gc_init():::ENTER
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
..gc_init():::EXIT
::exit_failure == orig(::exit_failure)
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
return == 0
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(::program_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
===========================================================================
..hmac_sha1():::ENTER
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
key has only one value
key != null
keylen == 1
in has only one value
in != null
inlen == 8
resbuf has only one value
resbuf != null
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
..hmac_sha1():::EXIT
::exit_failure == orig(::exit_failure)
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
return == 0
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(::program_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
===========================================================================
..main():::ENTER
::exit_failure == size(argv[])
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
argc == 5
argv has only one value
argv != null
argv[] == [./oathtool]
argv[] elements == "./oathtool"
size(argv[]) == 1
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
..main():::EXIT
::exit_failure == orig(::exit_failure)
::exit_failure == orig(size(argv[]))
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
return == size(argv[])-1
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
argv[] == [./oathtool]
argv[] elements == "./oathtool"
return == 0
::version_etc_copyright == orig(::version_etc_copyright)
::program_name in argv[]
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
===========================================================================
..memxor():::ENTER
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
dest has only one value
dest != null
src has only one value
src != null
n == 1
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
..memxor():::EXIT
::exit_failure == orig(::exit_failure)
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
return == orig(dest)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
return has only one value
return != null
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(::program_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
===========================================================================
..oath_done():::ENTER
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
..oath_done():::EXIT
::exit_failure == orig(::exit_failure)
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
return == 0
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(::program_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
===========================================================================
..oath_hex2bin():::ENTER
::exit_failure == size(binlen[])
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
hexstr == "00"
binlen has only one value
binlen != null
binlen[] == [2]
binlen[] elements == 2
size(binlen[]) == 1
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
binlen[] elements == binlen[::exit_failure-1]
===========================================================================
..oath_hex2bin():::EXIT
::exit_failure == orig(::exit_failure)
::exit_failure == orig(size(binlen[]))
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
return == size(binlen[])-1
binlen[::exit_failure-1] == binlen[return]
orig(binlen[post(::exit_failure)-1]) == orig(binlen[post(return)])
binlen[return] == binlen[orig(::exit_failure)-1]
orig(binlen[post(return)]) == orig(binlen[::exit_failure-1])
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
binlen[] == [1]
binlen[] elements == 1
return == 0
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(::program_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
binlen[] elements == binlen[return]
orig(binlen[]) elements == orig(binlen[post(return)])
===========================================================================
..oath_hotp_generate():::ENTER
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
secret == ""
secret_length == 1
moving_factor >= 0
digits == 6
add_checksum == false
truncation_offset == -1
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
..oath_hotp_generate():::EXIT
::exit_failure == orig(::exit_failure)
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
return == 0
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(::program_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
===========================================================================
..oath_hotp_validate():::ENTER
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
secret == ""
secret_length == 1
start_moving_factor == 0
window == 100
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
..oath_hotp_validate():::EXIT
::exit_failure == orig(::exit_failure)
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(::program_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
===========================================================================
..oath_hotp_validate_callback():::ENTER
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
secret == ""
secret_length == 1
start_moving_factor == 0
window == 100
digits == 6
strcmp_otp has only one value
strcmp_otp != null
strcmp_handle has only one value
strcmp_handle != null
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
..oath_hotp_validate_callback():::EXIT
::exit_failure == orig(::exit_failure)
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(::program_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
===========================================================================
..oath_init():::ENTER
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
..oath_init():::EXIT
::exit_failure == orig(::exit_failure)
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
return == 0
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(::program_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
===========================================================================
..set_program_name():::ENTER
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
argv0 == "./oathtool"
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
..set_program_name():::EXIT
::exit_failure == orig(::exit_failure)
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(argv0)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
===========================================================================
..sha1_finish_ctx():::ENTER
::exit_failure == size(ctx[])
size(ctx[]) == size(ctx[].total[0])
size(ctx[]) == size(ctx[].total[0][0])
size(ctx[]) == size(ctx[].total[1])
size(ctx[]) == size(ctx[].total[1][0])
size(ctx[]) == size(ctx[].buffer[0])
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::fillbuf has only one value
::fillbuf[] == [128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::fillbuf[] elements one of { 0, 128 }
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
ctx != null
ctx[] elements != null
ctx[].A elements one of { 2542412964L, 3388456279L }
ctx[].A one of { [2542412964], [3388456279] }
ctx[].B elements one of { 1645991739, 1893397715 }
ctx[].B one of { [1645991739], [1893397715] }
ctx[].C elements one of { 333561480, 3926911697L }
ctx[].C one of { [333561480], [3926911697] }
ctx[].D elements one of { 947659313, 1101373746 }
ctx[].D one of { [947659313], [1101373746] }
ctx[].E elements one of { 1313814045, 1951813997 }
ctx[].E one of { [1313814045], [1951813997] }
ctx[].total[0] elements != null
ctx[].total[0][0] == [64]
ctx[].total[0][0] elements == 64
ctx[].total[1] elements != null
ctx[].total[1][0] == [0]
ctx[].total[1][0] elements == 0
ctx[].buflen elements one of { 8, 20 }
ctx[].buflen one of { [8], [20] }
ctx[].buffer elements != null
ctx[].buffer[0] elements >= 0
resbuf != null
size(::fillbuf[]) == 64
size(ctx[]) == 1
::fillbuf[::exit_failure] == 0
::fillbuf[::exit_failure-1] == 128
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
ctx[] elements == ctx[::exit_failure-1]
ctx[].A elements == ctx[::exit_failure-1].A
ctx[].B elements == ctx[::exit_failure-1].B
ctx[].C elements == ctx[::exit_failure-1].C
ctx[].D elements == ctx[::exit_failure-1].D
ctx[].E elements == ctx[::exit_failure-1].E
ctx[].total[0] elements == ctx[::exit_failure-1].total[0]
ctx[].total[0][0] elements == ctx[::exit_failure-1].total[0][0]
ctx[].total[1] elements == ctx[::exit_failure-1].total[1]
ctx[].total[1][0] elements == ctx[::exit_failure-1].total[1][0]
ctx[].buflen elements == ctx[::exit_failure-1].buflen
ctx[].buffer elements == ctx[::exit_failure-1].buffer
ctx[].buffer[0] elements == ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].A > ctx[::exit_failure-1].B
ctx[::exit_failure-1].A != ctx[::exit_failure-1].C
ctx[::exit_failure-1].A > ctx[::exit_failure-1].D
ctx[::exit_failure-1].A > ctx[::exit_failure-1].E
ctx[::exit_failure-1].A > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].A > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].A > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].A != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].B != ctx[::exit_failure-1].C
ctx[::exit_failure-1].B > ctx[::exit_failure-1].D
ctx[::exit_failure-1].B != ctx[::exit_failure-1].E
ctx[::exit_failure-1].B > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].B > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].B > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].B != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].C != ctx[::exit_failure-1].D
ctx[::exit_failure-1].C != ctx[::exit_failure-1].E
ctx[::exit_failure-1].C > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].C > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].C > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].C != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].D < ctx[::exit_failure-1].E
ctx[::exit_failure-1].D > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].D > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].D > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].D != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].E > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].E > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].E > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].E != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].total[0][0] > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].total[0][0] != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].total[1][0] < ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].total[1][0] <= ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].buflen != ctx[::exit_failure-1].buffer[0]
===========================================================================
..sha1_finish_ctx():::EXIT
::fillbuf == orig(::fillbuf)
::fillbuf[] == orig(::fillbuf[])
::exit_failure == orig(::exit_failure)
::exit_failure == orig(size(ctx[]))
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
ctx[] == orig(ctx[])
ctx[].total[0] == orig(ctx[].total[0])
ctx[].total[1] == orig(ctx[].total[1])
ctx[].total[1][0] == orig(ctx[].total[1][0])
ctx[].buflen == orig(ctx[].buflen)
ctx[].buffer == orig(ctx[].buffer)
ctx[].buffer[0] == orig(ctx[].buffer[0])
return == orig(resbuf)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::fillbuf has only one value
::fillbuf[] == [128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::fillbuf[] elements one of { 0, 128 }
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
ctx[] elements != null
ctx[].total[0] elements != null
ctx[].total[0][0] elements one of { 136, 148 }
ctx[].total[0][0] one of { [136], [148] }
ctx[].total[1] elements != null
ctx[].total[1][0] == [0]
ctx[].total[1][0] elements == 0
ctx[].buflen elements one of { 8, 20 }
ctx[].buflen one of { [8], [20] }
ctx[].buffer elements != null
ctx[].buffer[0] elements >= 0
return != null
size(::fillbuf[]) == 64
::fillbuf[::exit_failure] == 0
::fillbuf[::exit_failure-1] == 128
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(::program_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
ctx[] elements == ctx[::exit_failure-1]
ctx[].A elements == ctx[::exit_failure-1].A
ctx[].B elements == ctx[::exit_failure-1].B
ctx[].C elements == ctx[::exit_failure-1].C
ctx[].D elements == ctx[::exit_failure-1].D
ctx[].E elements == ctx[::exit_failure-1].E
ctx[].total[0] elements == ctx[::exit_failure-1].total[0]
ctx[].total[0][0] elements == ctx[::exit_failure-1].total[0][0]
ctx[].total[1] elements == ctx[::exit_failure-1].total[1]
ctx[].total[1][0] elements == ctx[::exit_failure-1].total[1][0]
ctx[].buflen elements == ctx[::exit_failure-1].buflen
ctx[].buffer elements == ctx[::exit_failure-1].buffer
ctx[].buffer[0] elements == ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].A != ctx[::exit_failure-1].B
ctx[::exit_failure-1].A != ctx[::exit_failure-1].C
ctx[::exit_failure-1].A != ctx[::exit_failure-1].D
ctx[::exit_failure-1].A != ctx[::exit_failure-1].E
ctx[::exit_failure-1].A > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].A > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].A > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].A != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].A != orig(ctx[::exit_failure-1].A)
ctx[::exit_failure-1].A != orig(ctx[::exit_failure-1].B)
ctx[::exit_failure-1].A != orig(ctx[::exit_failure-1].C)
ctx[::exit_failure-1].A != orig(ctx[::exit_failure-1].D)
ctx[::exit_failure-1].A != orig(ctx[::exit_failure-1].E)
ctx[::exit_failure-1].A > orig(ctx[::exit_failure-1].total[0][0])
ctx[::exit_failure-1].B != ctx[::exit_failure-1].C
ctx[::exit_failure-1].B != ctx[::exit_failure-1].D
ctx[::exit_failure-1].B != ctx[::exit_failure-1].E
ctx[::exit_failure-1].B > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].B > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].B > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].B != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].B != orig(ctx[::exit_failure-1].A)
ctx[::exit_failure-1].B != orig(ctx[::exit_failure-1].B)
ctx[::exit_failure-1].B != orig(ctx[::exit_failure-1].C)
ctx[::exit_failure-1].B != orig(ctx[::exit_failure-1].D)
ctx[::exit_failure-1].B != orig(ctx[::exit_failure-1].E)
ctx[::exit_failure-1].B > orig(ctx[::exit_failure-1].total[0][0])
ctx[::exit_failure-1].C != ctx[::exit_failure-1].D
ctx[::exit_failure-1].C != ctx[::exit_failure-1].E
ctx[::exit_failure-1].C > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].C > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].C > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].C != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].C != orig(ctx[::exit_failure-1].A)
ctx[::exit_failure-1].C != orig(ctx[::exit_failure-1].B)
ctx[::exit_failure-1].C != orig(ctx[::exit_failure-1].C)
ctx[::exit_failure-1].C != orig(ctx[::exit_failure-1].D)
ctx[::exit_failure-1].C != orig(ctx[::exit_failure-1].E)
ctx[::exit_failure-1].C > orig(ctx[::exit_failure-1].total[0][0])
ctx[::exit_failure-1].D != ctx[::exit_failure-1].E
ctx[::exit_failure-1].D > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].D > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].D > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].D != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].D != orig(ctx[::exit_failure-1].A)
ctx[::exit_failure-1].D != orig(ctx[::exit_failure-1].B)
ctx[::exit_failure-1].D != orig(ctx[::exit_failure-1].C)
ctx[::exit_failure-1].D != orig(ctx[::exit_failure-1].D)
ctx[::exit_failure-1].D != orig(ctx[::exit_failure-1].E)
ctx[::exit_failure-1].D > orig(ctx[::exit_failure-1].total[0][0])
ctx[::exit_failure-1].E > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].E > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].E > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].E != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].E != orig(ctx[::exit_failure-1].A)
ctx[::exit_failure-1].E != orig(ctx[::exit_failure-1].B)
ctx[::exit_failure-1].E != orig(ctx[::exit_failure-1].C)
ctx[::exit_failure-1].E != orig(ctx[::exit_failure-1].D)
ctx[::exit_failure-1].E != orig(ctx[::exit_failure-1].E)
ctx[::exit_failure-1].E > orig(ctx[::exit_failure-1].total[0][0])
ctx[::exit_failure-1].total[0][0] > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].total[0][0] > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].total[0][0] != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].total[0][0] < orig(ctx[::exit_failure-1].A)
ctx[::exit_failure-1].total[0][0] < orig(ctx[::exit_failure-1].B)
ctx[::exit_failure-1].total[0][0] < orig(ctx[::exit_failure-1].C)
ctx[::exit_failure-1].total[0][0] < orig(ctx[::exit_failure-1].D)
ctx[::exit_failure-1].total[0][0] < orig(ctx[::exit_failure-1].E)
ctx[::exit_failure-1].total[0][0] > orig(ctx[::exit_failure-1].total[0][0])
ctx[::exit_failure-1].total[1][0] < ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].total[1][0] <= ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].total[1][0] < orig(ctx[::exit_failure-1].A)
ctx[::exit_failure-1].total[1][0] < orig(ctx[::exit_failure-1].B)
ctx[::exit_failure-1].total[1][0] < orig(ctx[::exit_failure-1].C)
ctx[::exit_failure-1].total[1][0] < orig(ctx[::exit_failure-1].D)
ctx[::exit_failure-1].total[1][0] < orig(ctx[::exit_failure-1].E)
ctx[::exit_failure-1].buflen != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].buflen < orig(ctx[::exit_failure-1].A)
ctx[::exit_failure-1].buflen < orig(ctx[::exit_failure-1].B)
ctx[::exit_failure-1].buflen < orig(ctx[::exit_failure-1].C)
ctx[::exit_failure-1].buflen < orig(ctx[::exit_failure-1].D)
ctx[::exit_failure-1].buflen < orig(ctx[::exit_failure-1].E)
ctx[::exit_failure-1].buflen < orig(ctx[::exit_failure-1].total[0][0])
ctx[::exit_failure-1].buffer[0] != orig(ctx[::exit_failure-1].A)
ctx[::exit_failure-1].buffer[0] != orig(ctx[::exit_failure-1].B)
ctx[::exit_failure-1].buffer[0] != orig(ctx[::exit_failure-1].C)
ctx[::exit_failure-1].buffer[0] != orig(ctx[::exit_failure-1].D)
ctx[::exit_failure-1].buffer[0] != orig(ctx[::exit_failure-1].E)
ctx[::exit_failure-1].buffer[0] != orig(ctx[::exit_failure-1].total[0][0])
===========================================================================
..sha1_init_ctx():::ENTER
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::fillbuf has only one value
::fillbuf[] == [128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::fillbuf[] elements one of { 0, 128 }
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
ctx != null
size(::fillbuf[]) == 64
::fillbuf[::exit_failure] == 0
::fillbuf[::exit_failure-1] == 128
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
..sha1_init_ctx():::EXIT
::fillbuf == orig(::fillbuf)
::fillbuf[] == orig(::fillbuf[])
::exit_failure == orig(::exit_failure)
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
ctx[].total[0][0] == ctx[].buflen
ctx[].total[1][0] == ctx[].buflen
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::fillbuf has only one value
::fillbuf[] == [128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::fillbuf[] elements one of { 0, 128 }
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
ctx[] elements != null
ctx[].A == [1732584193]
ctx[].A elements == 1732584193
ctx[].B == [4023233417]
ctx[].B elements == 4023233417L
ctx[].C == [2562383102]
ctx[].C elements == 2562383102L
ctx[].D == [271733878]
ctx[].D elements == 271733878
ctx[].E == [3285377520]
ctx[].E elements == 3285377520L
ctx[].total[0] elements != null
ctx[].total[1] elements != null
ctx[].buflen == [0]
ctx[].buflen elements == 0
size(::fillbuf[]) == 64
::fillbuf[::exit_failure] == 0
::fillbuf[::exit_failure-1] == 128
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(::program_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
ctx[] elements == ctx[::exit_failure-1]
ctx[].A elements == ctx[::exit_failure-1].A
ctx[].B elements == ctx[::exit_failure-1].B
ctx[].C elements == ctx[::exit_failure-1].C
ctx[].D elements == ctx[::exit_failure-1].D
ctx[].E elements == ctx[::exit_failure-1].E
ctx[].total[0] elements == ctx[::exit_failure-1].total[0]
ctx[].total[1] elements == ctx[::exit_failure-1].total[1]
ctx[].buflen elements == ctx[::exit_failure-1].buflen
===========================================================================
..sha1_process_block():::ENTER
::exit_failure == size(ctx[])
::exit_failure == size(ctx[].buffer[0])
size(ctx[]) == size(ctx[].total[0])
size(ctx[]) == size(ctx[].total[0][0])
size(ctx[]) == size(ctx[].total[1])
size(ctx[]) == size(ctx[].total[1][0])
size(ctx[]) == size(ctx[].buffer[0])
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::fillbuf has only one value
::fillbuf[] == [128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::fillbuf[] elements one of { 0, 128 }
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
buffer != null
len == 64
ctx != null
ctx[] elements != null
ctx[].A elements one of { 1732584193, 2542412964L, 3388456279L }
ctx[].A one of { [1732584193], [2542412964], [3388456279] }
ctx[].B elements one of { 1645991739, 1893397715, 4023233417L }
ctx[].B one of { [1645991739], [1893397715], [4023233417] }
ctx[].C elements one of { 333561480, 2562383102L, 3926911697L }
ctx[].C one of { [333561480], [2562383102], [3926911697] }
ctx[].D elements one of { 271733878, 947659313, 1101373746 }
ctx[].D one of { [271733878], [947659313], [1101373746] }
ctx[].E elements one of { 1313814045, 1951813997, 3285377520L }
ctx[].E one of { [1313814045], [1951813997], [3285377520] }
ctx[].total[0] elements != null
ctx[].total[0][0] elements one of { 0, 72, 84 }
ctx[].total[0][0] one of { [0], [72], [84] }
ctx[].total[1] elements != null
ctx[].total[1][0] == [0]
ctx[].total[1][0] elements == 0
ctx[].buflen elements one of { 0, 8, 20 }
ctx[].buflen one of { [0], [8], [20] }
ctx[].buffer elements != null
ctx[].buffer[0] elements >= 0
size(::fillbuf[]) == 64
size(ctx[]) == 1
size(ctx[].buffer[0]) == 1
::fillbuf[::exit_failure] == 0
::fillbuf[::exit_failure-1] == 128
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
ctx[] elements == ctx[::exit_failure-1]
ctx[].A elements == ctx[::exit_failure-1].A
ctx[].B elements == ctx[::exit_failure-1].B
ctx[].C elements == ctx[::exit_failure-1].C
ctx[].D elements == ctx[::exit_failure-1].D
ctx[].E elements == ctx[::exit_failure-1].E
ctx[].total[0] elements == ctx[::exit_failure-1].total[0]
ctx[].total[0][0] elements == ctx[::exit_failure-1].total[0][0]
ctx[].total[1] elements == ctx[::exit_failure-1].total[1]
ctx[].total[1][0] elements == ctx[::exit_failure-1].total[1][0]
ctx[].buflen elements == ctx[::exit_failure-1].buflen
ctx[].buffer elements == ctx[::exit_failure-1].buffer
ctx[].buffer[0] elements == ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].A != ctx[::exit_failure-1].B
ctx[::exit_failure-1].A != ctx[::exit_failure-1].C
ctx[::exit_failure-1].A > ctx[::exit_failure-1].D
ctx[::exit_failure-1].A != ctx[::exit_failure-1].E
ctx[::exit_failure-1].A > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].A > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].A > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].A != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].B != ctx[::exit_failure-1].C
ctx[::exit_failure-1].B > ctx[::exit_failure-1].D
ctx[::exit_failure-1].B != ctx[::exit_failure-1].E
ctx[::exit_failure-1].B > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].B > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].B > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].B != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].C != ctx[::exit_failure-1].D
ctx[::exit_failure-1].C != ctx[::exit_failure-1].E
ctx[::exit_failure-1].C > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].C > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].C > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].C != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].D < ctx[::exit_failure-1].E
ctx[::exit_failure-1].D > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].D > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].D > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].D != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].E > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].E > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].E > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].E != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].total[0][0] >= ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].total[0][0] >= ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].total[0][0] != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].total[1][0] <= ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].total[1][0] <= ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].buflen != ctx[::exit_failure-1].buffer[0]
===========================================================================
..sha1_process_block():::EXIT
::fillbuf == orig(::fillbuf)
::fillbuf[] == orig(::fillbuf[])
::exit_failure == orig(::exit_failure)
::exit_failure == orig(size(ctx[]))
::exit_failure == orig(size(ctx[].buffer[0]))
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
ctx[] == orig(ctx[])
ctx[].total[0] == orig(ctx[].total[0])
ctx[].total[1] == orig(ctx[].total[1])
ctx[].total[1][0] == orig(ctx[].total[1][0])
ctx[].buflen == orig(ctx[].buflen)
ctx[].buffer == orig(ctx[].buffer)
ctx[].buffer[0] == orig(ctx[].buffer[0])
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::fillbuf has only one value
::fillbuf[] == [128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::fillbuf[] elements one of { 0, 128 }
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
ctx[] elements != null
ctx[].total[0] elements != null
ctx[].total[0][0] elements one of { 64, 136, 148 }
ctx[].total[0][0] one of { [64], [136], [148] }
ctx[].total[1] elements != null
ctx[].total[1][0] == [0]
ctx[].total[1][0] elements == 0
ctx[].buflen elements one of { 0, 8, 20 }
ctx[].buflen one of { [0], [8], [20] }
ctx[].buffer elements != null
ctx[].buffer[0] elements >= 0
size(::fillbuf[]) == 64
::fillbuf[::exit_failure] == 0
::fillbuf[::exit_failure-1] == 128
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(::program_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
ctx[] elements == ctx[::exit_failure-1]
ctx[].A elements == ctx[::exit_failure-1].A
ctx[].B elements == ctx[::exit_failure-1].B
ctx[].C elements == ctx[::exit_failure-1].C
ctx[].D elements == ctx[::exit_failure-1].D
ctx[].E elements == ctx[::exit_failure-1].E
ctx[].total[0] elements == ctx[::exit_failure-1].total[0]
ctx[].total[0][0] elements == ctx[::exit_failure-1].total[0][0]
ctx[].total[1] elements == ctx[::exit_failure-1].total[1]
ctx[].total[1][0] elements == ctx[::exit_failure-1].total[1][0]
ctx[].buflen elements == ctx[::exit_failure-1].buflen
ctx[].buffer elements == ctx[::exit_failure-1].buffer
ctx[].buffer[0] elements == ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].A != ctx[::exit_failure-1].B
ctx[::exit_failure-1].A != ctx[::exit_failure-1].C
ctx[::exit_failure-1].A != ctx[::exit_failure-1].D
ctx[::exit_failure-1].A != ctx[::exit_failure-1].E
ctx[::exit_failure-1].A > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].A > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].A > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].A != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].A != orig(ctx[::exit_failure-1].A)
ctx[::exit_failure-1].A != orig(ctx[::exit_failure-1].B)
ctx[::exit_failure-1].A != orig(ctx[::exit_failure-1].C)
ctx[::exit_failure-1].A != orig(ctx[::exit_failure-1].D)
ctx[::exit_failure-1].A != orig(ctx[::exit_failure-1].E)
ctx[::exit_failure-1].A > orig(ctx[::exit_failure-1].total[0][0])
ctx[::exit_failure-1].B != ctx[::exit_failure-1].C
ctx[::exit_failure-1].B != ctx[::exit_failure-1].D
ctx[::exit_failure-1].B != ctx[::exit_failure-1].E
ctx[::exit_failure-1].B > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].B > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].B > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].B != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].B != orig(ctx[::exit_failure-1].A)
ctx[::exit_failure-1].B != orig(ctx[::exit_failure-1].B)
ctx[::exit_failure-1].B != orig(ctx[::exit_failure-1].C)
ctx[::exit_failure-1].B != orig(ctx[::exit_failure-1].D)
ctx[::exit_failure-1].B != orig(ctx[::exit_failure-1].E)
ctx[::exit_failure-1].B > orig(ctx[::exit_failure-1].total[0][0])
ctx[::exit_failure-1].C != ctx[::exit_failure-1].D
ctx[::exit_failure-1].C != ctx[::exit_failure-1].E
ctx[::exit_failure-1].C > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].C > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].C > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].C != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].C != orig(ctx[::exit_failure-1].A)
ctx[::exit_failure-1].C != orig(ctx[::exit_failure-1].B)
ctx[::exit_failure-1].C != orig(ctx[::exit_failure-1].C)
ctx[::exit_failure-1].C != orig(ctx[::exit_failure-1].D)
ctx[::exit_failure-1].C != orig(ctx[::exit_failure-1].E)
ctx[::exit_failure-1].C > orig(ctx[::exit_failure-1].total[0][0])
ctx[::exit_failure-1].D != ctx[::exit_failure-1].E
ctx[::exit_failure-1].D > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].D > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].D > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].D != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].D != orig(ctx[::exit_failure-1].A)
ctx[::exit_failure-1].D != orig(ctx[::exit_failure-1].B)
ctx[::exit_failure-1].D != orig(ctx[::exit_failure-1].C)
ctx[::exit_failure-1].D != orig(ctx[::exit_failure-1].D)
ctx[::exit_failure-1].D != orig(ctx[::exit_failure-1].E)
ctx[::exit_failure-1].D > orig(ctx[::exit_failure-1].total[0][0])
ctx[::exit_failure-1].E > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].E > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].E > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].E != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].E != orig(ctx[::exit_failure-1].A)
ctx[::exit_failure-1].E != orig(ctx[::exit_failure-1].B)
ctx[::exit_failure-1].E != orig(ctx[::exit_failure-1].C)
ctx[::exit_failure-1].E != orig(ctx[::exit_failure-1].D)
ctx[::exit_failure-1].E != orig(ctx[::exit_failure-1].E)
ctx[::exit_failure-1].E > orig(ctx[::exit_failure-1].total[0][0])
ctx[::exit_failure-1].total[0][0] > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].total[0][0] > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].total[0][0] != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].total[0][0] < orig(ctx[::exit_failure-1].A)
ctx[::exit_failure-1].total[0][0] < orig(ctx[::exit_failure-1].B)
ctx[::exit_failure-1].total[0][0] < orig(ctx[::exit_failure-1].C)
ctx[::exit_failure-1].total[0][0] < orig(ctx[::exit_failure-1].D)
ctx[::exit_failure-1].total[0][0] < orig(ctx[::exit_failure-1].E)
ctx[::exit_failure-1].total[0][0] > orig(ctx[::exit_failure-1].total[0][0])
ctx[::exit_failure-1].total[1][0] <= ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].total[1][0] <= ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].total[1][0] < orig(ctx[::exit_failure-1].A)
ctx[::exit_failure-1].total[1][0] < orig(ctx[::exit_failure-1].B)
ctx[::exit_failure-1].total[1][0] < orig(ctx[::exit_failure-1].C)
ctx[::exit_failure-1].total[1][0] < orig(ctx[::exit_failure-1].D)
ctx[::exit_failure-1].total[1][0] < orig(ctx[::exit_failure-1].E)
ctx[::exit_failure-1].total[1][0] <= orig(ctx[::exit_failure-1].total[0][0])
ctx[::exit_failure-1].buflen != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].buflen < orig(ctx[::exit_failure-1].A)
ctx[::exit_failure-1].buflen < orig(ctx[::exit_failure-1].B)
ctx[::exit_failure-1].buflen < orig(ctx[::exit_failure-1].C)
ctx[::exit_failure-1].buflen < orig(ctx[::exit_failure-1].D)
ctx[::exit_failure-1].buflen < orig(ctx[::exit_failure-1].E)
ctx[::exit_failure-1].buflen <= orig(ctx[::exit_failure-1].total[0][0])
ctx[::exit_failure-1].buffer[0] != orig(ctx[::exit_failure-1].A)
ctx[::exit_failure-1].buffer[0] != orig(ctx[::exit_failure-1].B)
ctx[::exit_failure-1].buffer[0] != orig(ctx[::exit_failure-1].C)
ctx[::exit_failure-1].buffer[0] != orig(ctx[::exit_failure-1].D)
ctx[::exit_failure-1].buffer[0] != orig(ctx[::exit_failure-1].E)
ctx[::exit_failure-1].buffer[0] != orig(ctx[::exit_failure-1].total[0][0])
===========================================================================
..sha1_process_bytes():::ENTER
::exit_failure == size(ctx[])
ctx[].total[1][0] == ctx[].buflen
size(ctx[]) == size(ctx[].total[0])
size(ctx[]) == size(ctx[].total[0][0])
size(ctx[]) == size(ctx[].total[1])
size(ctx[]) == size(ctx[].total[1][0])
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::fillbuf has only one value
::fillbuf[] == [128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::fillbuf[] elements one of { 0, 128 }
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
buffer != null
len one of { 8, 20 }
ctx != null
ctx[] elements != null
ctx[].A elements one of { 2542412964L, 3388456279L }
ctx[].A one of { [2542412964], [3388456279] }
ctx[].B elements one of { 1645991739, 1893397715 }
ctx[].B one of { [1645991739], [1893397715] }
ctx[].C elements one of { 333561480, 3926911697L }
ctx[].C one of { [333561480], [3926911697] }
ctx[].D elements one of { 947659313, 1101373746 }
ctx[].D one of { [947659313], [1101373746] }
ctx[].E elements one of { 1313814045, 1951813997 }
ctx[].E one of { [1313814045], [1951813997] }
ctx[].total[0] elements != null
ctx[].total[0][0] == [64]
ctx[].total[0][0] elements == 64
ctx[].total[1] elements != null
ctx[].buflen == [0]
ctx[].buflen elements == 0
size(::fillbuf[]) == 64
size(ctx[]) == 1
::fillbuf[::exit_failure] == 0
::fillbuf[::exit_failure-1] == 128
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
ctx[] elements == ctx[::exit_failure-1]
ctx[].A elements == ctx[::exit_failure-1].A
ctx[].B elements == ctx[::exit_failure-1].B
ctx[].C elements == ctx[::exit_failure-1].C
ctx[].D elements == ctx[::exit_failure-1].D
ctx[].E elements == ctx[::exit_failure-1].E
ctx[].total[0] elements == ctx[::exit_failure-1].total[0]
ctx[].total[0][0] elements == ctx[::exit_failure-1].total[0][0]
ctx[].total[1] elements == ctx[::exit_failure-1].total[1]
ctx[].buflen elements == ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].A > ctx[::exit_failure-1].B
ctx[::exit_failure-1].A != ctx[::exit_failure-1].C
ctx[::exit_failure-1].A > ctx[::exit_failure-1].D
ctx[::exit_failure-1].A > ctx[::exit_failure-1].E
ctx[::exit_failure-1].A > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].A > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].B != ctx[::exit_failure-1].C
ctx[::exit_failure-1].B > ctx[::exit_failure-1].D
ctx[::exit_failure-1].B != ctx[::exit_failure-1].E
ctx[::exit_failure-1].B > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].B > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].C != ctx[::exit_failure-1].D
ctx[::exit_failure-1].C != ctx[::exit_failure-1].E
ctx[::exit_failure-1].C > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].C > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].D < ctx[::exit_failure-1].E
ctx[::exit_failure-1].D > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].D > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].E > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].E > ctx[::exit_failure-1].buflen
===========================================================================
..sha1_process_bytes():::EXIT
::fillbuf == orig(::fillbuf)
::fillbuf[] == orig(::fillbuf[])
::exit_failure == orig(::exit_failure)
::exit_failure == orig(size(ctx[]))
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
ctx[] == orig(ctx[])
ctx[].A == orig(ctx[].A)
ctx[].B == orig(ctx[].B)
ctx[].C == orig(ctx[].C)
ctx[].D == orig(ctx[].D)
ctx[].E == orig(ctx[].E)
ctx[].total[0] == orig(ctx[].total[0])
ctx[].total[0][0] == orig(ctx[].total[0][0])
ctx[].total[1] == orig(ctx[].total[1])
ctx[].total[1][0] == orig(ctx[].total[1][0])
ctx[].total[1][0] == orig(ctx[].buflen)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::fillbuf has only one value
::fillbuf[] == [128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::fillbuf[] elements one of { 0, 128 }
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
ctx[] elements != null
ctx[].A elements one of { 2542412964L, 3388456279L }
ctx[].A one of { [2542412964], [3388456279] }
ctx[].B elements one of { 1645991739, 1893397715 }
ctx[].B one of { [1645991739], [1893397715] }
ctx[].C elements one of { 333561480, 3926911697L }
ctx[].C one of { [333561480], [3926911697] }
ctx[].D elements one of { 947659313, 1101373746 }
ctx[].D one of { [947659313], [1101373746] }
ctx[].E elements one of { 1313814045, 1951813997 }
ctx[].E one of { [1313814045], [1951813997] }
ctx[].total[0] elements != null
ctx[].total[0][0] == [64]
ctx[].total[0][0] elements == 64
ctx[].total[1] elements != null
ctx[].total[1][0] == [0]
ctx[].total[1][0] elements == 0
ctx[].buflen elements one of { 8, 20 }
ctx[].buflen one of { [8], [20] }
ctx[].buffer elements != null
ctx[].buffer[0] elements >= 0
size(::fillbuf[]) == 64
::fillbuf[::exit_failure] == 0
::fillbuf[::exit_failure-1] == 128
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(::program_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
ctx[] elements == ctx[::exit_failure-1]
ctx[].A elements == ctx[::exit_failure-1].A
ctx[].B elements == ctx[::exit_failure-1].B
ctx[].C elements == ctx[::exit_failure-1].C
ctx[].D elements == ctx[::exit_failure-1].D
ctx[].E elements == ctx[::exit_failure-1].E
ctx[].total[0] elements == ctx[::exit_failure-1].total[0]
ctx[].total[0][0] elements == ctx[::exit_failure-1].total[0][0]
ctx[].total[1] elements == ctx[::exit_failure-1].total[1]
ctx[].total[1][0] elements == ctx[::exit_failure-1].total[1][0]
ctx[].buflen elements == ctx[::exit_failure-1].buflen
ctx[].buffer elements == ctx[::exit_failure-1].buffer
ctx[].buffer[0] elements == ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].A > ctx[::exit_failure-1].B
ctx[::exit_failure-1].A != ctx[::exit_failure-1].C
ctx[::exit_failure-1].A > ctx[::exit_failure-1].D
ctx[::exit_failure-1].A > ctx[::exit_failure-1].E
ctx[::exit_failure-1].A > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].A > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].A > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].A != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].B != ctx[::exit_failure-1].C
ctx[::exit_failure-1].B > ctx[::exit_failure-1].D
ctx[::exit_failure-1].B != ctx[::exit_failure-1].E
ctx[::exit_failure-1].B > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].B > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].B > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].B != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].C != ctx[::exit_failure-1].D
ctx[::exit_failure-1].C != ctx[::exit_failure-1].E
ctx[::exit_failure-1].C > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].C > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].C > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].C != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].D < ctx[::exit_failure-1].E
ctx[::exit_failure-1].D > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].D > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].D > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].D != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].E > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].E > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].E > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].E != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].total[0][0] > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].total[0][0] != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].total[1][0] < ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].total[1][0] <= ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].buflen != ctx[::exit_failure-1].buffer[0]
===========================================================================
..sha1_read_ctx():::ENTER
::exit_failure == size(ctx[])
size(ctx[]) == size(ctx[].total[0])
size(ctx[]) == size(ctx[].total[0][0])
size(ctx[]) == size(ctx[].total[1])
size(ctx[]) == size(ctx[].total[1][0])
size(ctx[]) == size(ctx[].buffer[0])
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::fillbuf has only one value
::fillbuf[] == [128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::fillbuf[] elements one of { 0, 128 }
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
ctx != null
ctx[] elements != null
ctx[].total[0] elements != null
ctx[].total[0][0] elements one of { 136, 148 }
ctx[].total[0][0] one of { [136], [148] }
ctx[].total[1] elements != null
ctx[].total[1][0] == [0]
ctx[].total[1][0] elements == 0
ctx[].buflen elements one of { 8, 20 }
ctx[].buflen one of { [8], [20] }
ctx[].buffer elements != null
ctx[].buffer[0] elements >= 0
resbuf != null
size(::fillbuf[]) == 64
size(ctx[]) == 1
::fillbuf[::exit_failure] == 0
::fillbuf[::exit_failure-1] == 128
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
ctx[] elements == ctx[::exit_failure-1]
ctx[].A elements == ctx[::exit_failure-1].A
ctx[].B elements == ctx[::exit_failure-1].B
ctx[].C elements == ctx[::exit_failure-1].C
ctx[].D elements == ctx[::exit_failure-1].D
ctx[].E elements == ctx[::exit_failure-1].E
ctx[].total[0] elements == ctx[::exit_failure-1].total[0]
ctx[].total[0][0] elements == ctx[::exit_failure-1].total[0][0]
ctx[].total[1] elements == ctx[::exit_failure-1].total[1]
ctx[].total[1][0] elements == ctx[::exit_failure-1].total[1][0]
ctx[].buflen elements == ctx[::exit_failure-1].buflen
ctx[].buffer elements == ctx[::exit_failure-1].buffer
ctx[].buffer[0] elements == ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].A != ctx[::exit_failure-1].B
ctx[::exit_failure-1].A != ctx[::exit_failure-1].C
ctx[::exit_failure-1].A != ctx[::exit_failure-1].D
ctx[::exit_failure-1].A != ctx[::exit_failure-1].E
ctx[::exit_failure-1].A > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].A > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].A > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].A != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].B != ctx[::exit_failure-1].C
ctx[::exit_failure-1].B != ctx[::exit_failure-1].D
ctx[::exit_failure-1].B != ctx[::exit_failure-1].E
ctx[::exit_failure-1].B > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].B > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].B > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].B != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].C != ctx[::exit_failure-1].D
ctx[::exit_failure-1].C != ctx[::exit_failure-1].E
ctx[::exit_failure-1].C > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].C > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].C > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].C != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].D != ctx[::exit_failure-1].E
ctx[::exit_failure-1].D > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].D > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].D > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].D != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].E > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].E > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].E > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].E != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].total[0][0] > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].total[0][0] > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].total[0][0] != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].total[1][0] < ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].total[1][0] <= ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].buflen != ctx[::exit_failure-1].buffer[0]
===========================================================================
..sha1_read_ctx():::EXIT
::fillbuf == orig(::fillbuf)
::fillbuf[] == orig(::fillbuf[])
::exit_failure == orig(::exit_failure)
::exit_failure == orig(size(ctx[]))
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
ctx[] == orig(ctx[])
ctx[].A == orig(ctx[].A)
ctx[].B == orig(ctx[].B)
ctx[].C == orig(ctx[].C)
ctx[].D == orig(ctx[].D)
ctx[].E == orig(ctx[].E)
ctx[].total[0] == orig(ctx[].total[0])
ctx[].total[0][0] == orig(ctx[].total[0][0])
ctx[].total[1] == orig(ctx[].total[1])
ctx[].total[1][0] == orig(ctx[].total[1][0])
ctx[].buflen == orig(ctx[].buflen)
ctx[].buffer == orig(ctx[].buffer)
ctx[].buffer[0] == orig(ctx[].buffer[0])
return == orig(resbuf)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::fillbuf has only one value
::fillbuf[] == [128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::fillbuf[] elements one of { 0, 128 }
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
ctx[] elements != null
ctx[].total[0] elements != null
ctx[].total[0][0] elements one of { 136, 148 }
ctx[].total[0][0] one of { [136], [148] }
ctx[].total[1] elements != null
ctx[].total[1][0] == [0]
ctx[].total[1][0] elements == 0
ctx[].buflen elements one of { 8, 20 }
ctx[].buflen one of { [8], [20] }
ctx[].buffer elements != null
ctx[].buffer[0] elements >= 0
return != null
size(::fillbuf[]) == 64
::fillbuf[::exit_failure] == 0
::fillbuf[::exit_failure-1] == 128
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(::program_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
ctx[] elements == ctx[::exit_failure-1]
ctx[].A elements == ctx[::exit_failure-1].A
ctx[].B elements == ctx[::exit_failure-1].B
ctx[].C elements == ctx[::exit_failure-1].C
ctx[].D elements == ctx[::exit_failure-1].D
ctx[].E elements == ctx[::exit_failure-1].E
ctx[].total[0] elements == ctx[::exit_failure-1].total[0]
ctx[].total[0][0] elements == ctx[::exit_failure-1].total[0][0]
ctx[].total[1] elements == ctx[::exit_failure-1].total[1]
ctx[].total[1][0] elements == ctx[::exit_failure-1].total[1][0]
ctx[].buflen elements == ctx[::exit_failure-1].buflen
ctx[].buffer elements == ctx[::exit_failure-1].buffer
ctx[].buffer[0] elements == ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].A != ctx[::exit_failure-1].B
ctx[::exit_failure-1].A != ctx[::exit_failure-1].C
ctx[::exit_failure-1].A != ctx[::exit_failure-1].D
ctx[::exit_failure-1].A != ctx[::exit_failure-1].E
ctx[::exit_failure-1].A > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].A > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].A > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].A != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].B != ctx[::exit_failure-1].C
ctx[::exit_failure-1].B != ctx[::exit_failure-1].D
ctx[::exit_failure-1].B != ctx[::exit_failure-1].E
ctx[::exit_failure-1].B > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].B > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].B > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].B != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].C != ctx[::exit_failure-1].D
ctx[::exit_failure-1].C != ctx[::exit_failure-1].E
ctx[::exit_failure-1].C > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].C > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].C > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].C != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].D != ctx[::exit_failure-1].E
ctx[::exit_failure-1].D > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].D > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].D > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].D != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].E > ctx[::exit_failure-1].total[0][0]
ctx[::exit_failure-1].E > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].E > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].E != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].total[0][0] > ctx[::exit_failure-1].total[1][0]
ctx[::exit_failure-1].total[0][0] > ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].total[0][0] != ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].total[1][0] < ctx[::exit_failure-1].buflen
ctx[::exit_failure-1].total[1][0] <= ctx[::exit_failure-1].buffer[0]
ctx[::exit_failure-1].buflen != ctx[::exit_failure-1].buffer[0]
===========================================================================
coding.c.hex_decode():::ENTER
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
hex == 48
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
coding.c.hex_decode():::EXIT
::exit_failure == orig(::exit_failure)
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
return == 0
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(::program_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
===========================================================================
oathtool_cmd.c.clear_args():::ENTER
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].version_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].hotp_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].totp_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].base32_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].counter_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].time_step_size_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].start_time_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].now_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].digits_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].window_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].verbose_given
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
args_info != null
args_info[].help_given == [0]
args_info[].help_given elements == 0
args_info[].version_given == [0]
args_info[].version_given elements == 0
args_info[].hotp_given == [0]
args_info[].hotp_given elements == 0
args_info[].totp_given == [0]
args_info[].totp_given elements == 0
args_info[].base32_given == [0]
args_info[].base32_given elements == 0
args_info[].counter_given == [0]
args_info[].counter_given elements == 0
args_info[].time_step_size_given == [0]
args_info[].time_step_size_given elements == 0
args_info[].start_time_given == [0]
args_info[].start_time_given elements == 0
args_info[].now_given == [0]
args_info[].now_given elements == 0
args_info[].digits_given == [0]
args_info[].digits_given elements == 0
args_info[].window_given == [0]
args_info[].window_given elements == 0
args_info[].verbose_given == [0]
args_info[].verbose_given elements == 0
::program_name == ::package_name
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
args_info[].help_given elements == args_info[::exit_failure-1].help_given
args_info[].version_given elements == args_info[::exit_failure-1].help_given
args_info[].hotp_given elements == args_info[::exit_failure-1].help_given
args_info[].totp_given elements == args_info[::exit_failure-1].help_given
args_info[].base32_given elements == args_info[::exit_failure-1].help_given
args_info[].counter_given elements == args_info[::exit_failure-1].help_given
args_info[].time_step_size_given elements == args_info[::exit_failure-1].help_given
args_info[].start_time_given elements == args_info[::exit_failure-1].help_given
args_info[].now_given elements == args_info[::exit_failure-1].help_given
args_info[].digits_given elements == args_info[::exit_failure-1].help_given
args_info[].window_given elements == args_info[::exit_failure-1].help_given
args_info[].verbose_given elements == args_info[::exit_failure-1].help_given
===========================================================================
oathtool_cmd.c.clear_args():::EXIT
::exit_failure == orig(::exit_failure)
::exit_failure == args_info[::exit_failure-1].hotp_flag
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
args_info[].help_given == orig(args_info[].help_given)
args_info[].version_given == orig(args_info[].version_given)
args_info[].hotp_given == orig(args_info[].hotp_given)
args_info[].totp_given == orig(args_info[].totp_given)
args_info[].base32_given == orig(args_info[].base32_given)
args_info[].counter_given == orig(args_info[].counter_given)
args_info[].time_step_size_given == orig(args_info[].time_step_size_given)
args_info[].start_time_given == orig(args_info[].start_time_given)
args_info[].now_given == orig(args_info[].now_given)
args_info[].digits_given == orig(args_info[].digits_given)
args_info[].window_given == orig(args_info[].window_given)
args_info[].verbose_given == orig(args_info[].verbose_given)
args_info[::exit_failure-1].base32_flag == args_info[::exit_failure-1].verbose_flag
args_info[::exit_failure-1].base32_flag == args_info[orig(::exit_failure)-1].verbose_flag
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].version_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].hotp_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].totp_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].base32_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].counter_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].time_step_size_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].start_time_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].now_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].digits_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].window_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].verbose_given
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].version_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].hotp_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].totp_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].base32_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].counter_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].time_step_size_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].start_time_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].now_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].digits_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].window_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].verbose_given)
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].version_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].hotp_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].totp_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].base32_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].counter_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].time_step_size_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].start_time_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].now_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].digits_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].window_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].verbose_given
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].version_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].hotp_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].totp_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].base32_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].counter_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].time_step_size_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].start_time_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].now_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].digits_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].window_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].verbose_given)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
args_info[].hotp_flag == [1]
args_info[].hotp_flag elements == 1
args_info[].totp_arg == [sha1]
args_info[].totp_arg elements == "sha1"
args_info[].base32_flag == [0]
args_info[].base32_flag elements == 0
args_info[].time_step_size_arg == [30s]
args_info[].time_step_size_arg elements == "30s"
args_info[].start_time_arg == [1970-01-01 00:00:00 UTC]
args_info[].start_time_arg elements == "1970-01-01 00:00:00 UTC"
args_info[].now_arg == [now]
args_info[].now_arg elements == "now"
args_info[].verbose_flag == [0]
args_info[].verbose_flag elements == 0
args_info[].help_given == [0]
args_info[].help_given elements == 0
args_info[].version_given == [0]
args_info[].version_given elements == 0
args_info[].hotp_given == [0]
args_info[].hotp_given elements == 0
args_info[].totp_given == [0]
args_info[].totp_given elements == 0
args_info[].base32_given == [0]
args_info[].base32_given elements == 0
args_info[].counter_given == [0]
args_info[].counter_given elements == 0
args_info[].time_step_size_given == [0]
args_info[].time_step_size_given elements == 0
args_info[].start_time_given == [0]
args_info[].start_time_given elements == 0
args_info[].now_given == [0]
args_info[].now_given elements == 0
args_info[].digits_given == [0]
args_info[].digits_given elements == 0
args_info[].window_given == [0]
args_info[].window_given elements == 0
args_info[].verbose_given == [0]
args_info[].verbose_given elements == 0
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == ::package_name
::program_name == orig(::program_name)
::program_name == orig(::package_name)
::exit_failure in args_info[].hotp_flag
args_info[].hotp_flag elements == ::exit_failure
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
args_info[].hotp_flag elements == args_info[::exit_failure-1].hotp_flag
args_info[].base32_flag elements == args_info[::exit_failure-1].base32_flag
args_info[].verbose_flag elements == args_info[::exit_failure-1].base32_flag
args_info[].help_given elements == args_info[::exit_failure-1].help_given
args_info[].version_given elements == args_info[::exit_failure-1].help_given
args_info[].hotp_given elements == args_info[::exit_failure-1].help_given
args_info[].totp_given elements == args_info[::exit_failure-1].help_given
args_info[].base32_given elements == args_info[::exit_failure-1].help_given
args_info[].counter_given elements == args_info[::exit_failure-1].help_given
args_info[].time_step_size_given elements == args_info[::exit_failure-1].help_given
args_info[].start_time_given elements == args_info[::exit_failure-1].help_given
args_info[].now_given elements == args_info[::exit_failure-1].help_given
args_info[].digits_given elements == args_info[::exit_failure-1].help_given
args_info[].window_given elements == args_info[::exit_failure-1].help_given
args_info[].verbose_given elements == args_info[::exit_failure-1].help_given
===========================================================================
oathtool_cmd.c.clear_given():::ENTER
::exit_failure == size(args_info[])
size(args_info[]) == args_info[::exit_failure-1].hotp_flag
size(args_info[])-1 == args_info[::exit_failure-1].base32_flag
size(args_info[])-1 == args_info[::exit_failure-1].verbose_flag
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].version_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].hotp_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].totp_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].base32_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].counter_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].time_step_size_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].start_time_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].now_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].digits_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].verbose_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].inputs_num
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
args_info != null
args_info[] contains no nulls and has only one value, of length 1
args_info[] elements has only one value
args_info[] elements != null
args_info[].help_help == [  -h, --help                    Print help and exit]
args_info[].help_help elements == "  -h, --help                    Print help and exit"
args_info[].version_help == [  -V, --version                 Print version and exit]
args_info[].version_help elements == "  -V, --version                 Print version and exit"
args_info[].hotp_flag == [1]
args_info[].hotp_flag elements == 1
args_info[].hotp_help == [      --hotp                    use event-based HOTP mode  (default=on)]
args_info[].hotp_help elements == "      --hotp                    use event-based HOTP mode  (default=on)"
args_info[].totp_help == [      --totp[=STRING]           use time-variant TOTP mode  (possible
                                  values="sha1", "sha256", "sha512"
                                  default=`sha1')]
args_info[].totp_help elements == "      --totp[=STRING]           use time-variant TOTP mode  (possible\n                                  values=\"sha1\", \"sha256\", \"sha512\"\n                                  default=`sha1')"
args_info[].base32_flag == [0]
args_info[].base32_flag elements == 0
args_info[].base32_help == [  -b, --base32                  use base32 encoding of KEY instead of hex
                                  (default=off)]
args_info[].base32_help elements == "  -b, --base32                  use base32 encoding of KEY instead of hex\n                                  (default=off)"
args_info[].counter_help == [  -c, --counter=COUNTER         HOTP counter value]
args_info[].counter_help elements == "  -c, --counter=COUNTER         HOTP counter value"
args_info[].time_step_size_help == [  -s, --time-step-size=DURATION TOTP time-step duration  (default=`30s')]
args_info[].time_step_size_help elements == "  -s, --time-step-size=DURATION TOTP time-step duration  (default=`30s')"
args_info[].start_time_help == [  -S, --start-time=TIME         when to start counting time steps for TOTP
                                  (default=`1970-01-01 00:00:00 UTC')]
args_info[].start_time_help elements == "  -S, --start-time=TIME         when to start counting time steps for TOTP\n                                  (default=`1970-01-01 00:00:00 UTC')"
args_info[].now_help == [  -N, --now=TIME                use this time as current time for TOTP
                                  (default=`now')]
args_info[].now_help elements == "  -N, --now=TIME                use this time as current time for TOTP\n                                  (default=`now')"
args_info[].digits_help == [  -d, --digits=DIGITS           number of digits in one-time password]
args_info[].digits_help elements == "  -d, --digits=DIGITS           number of digits in one-time password"
args_info[].window_help == [  -w, --window=WIDTH            window of counter values to test when
                                  validating OTPs]
args_info[].window_help elements == "  -w, --window=WIDTH            window of counter values to test when\n                                  validating OTPs"
args_info[].verbose_flag == [0]
args_info[].verbose_flag elements == 0
args_info[].verbose_help == [  -v, --verbose                 explain what is being done  (default=off)]
args_info[].verbose_help elements == "  -v, --verbose                 explain what is being done  (default=off)"
args_info[].help_given == [0]
args_info[].help_given elements == 0
args_info[].version_given == [0]
args_info[].version_given elements == 0
args_info[].hotp_given == [0]
args_info[].hotp_given elements == 0
args_info[].totp_given == [0]
args_info[].totp_given elements == 0
args_info[].base32_given == [0]
args_info[].base32_given elements == 0
args_info[].counter_given == [0]
args_info[].counter_given elements == 0
args_info[].time_step_size_given == [0]
args_info[].time_step_size_given elements == 0
args_info[].start_time_given == [0]
args_info[].start_time_given elements == 0
args_info[].now_given == [0]
args_info[].now_given elements == 0
args_info[].digits_given == [0]
args_info[].digits_given elements == 0
args_info[].window_given == [1]
args_info[].window_given elements == 1
args_info[].verbose_given == [0]
args_info[].verbose_given elements == 0
args_info[].inputs == [null]
args_info[].inputs elements == null
args_info[].inputs_num == [0]
args_info[].inputs_num elements == 0
size(args_info[]) == 1
::program_name == ::package_name
::exit_failure in args_info[].hotp_flag
args_info[].hotp_flag elements == ::exit_failure
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
args_info[] elements == args_info[::exit_failure-1]
args_info[].hotp_flag elements == size(args_info[])
args_info[].base32_flag elements == size(args_info[])-1
args_info[].verbose_flag elements == size(args_info[])-1
args_info[].help_given elements == args_info[::exit_failure-1].help_given
args_info[].version_given elements == args_info[::exit_failure-1].help_given
args_info[].hotp_given elements == args_info[::exit_failure-1].help_given
args_info[].totp_given elements == args_info[::exit_failure-1].help_given
args_info[].base32_given elements == args_info[::exit_failure-1].help_given
args_info[].counter_given elements == args_info[::exit_failure-1].help_given
args_info[].time_step_size_given elements == args_info[::exit_failure-1].help_given
args_info[].start_time_given elements == args_info[::exit_failure-1].help_given
args_info[].now_given elements == args_info[::exit_failure-1].help_given
args_info[].digits_given elements == args_info[::exit_failure-1].help_given
args_info[].window_given elements == args_info[::exit_failure-1].window_given
args_info[].verbose_given elements == args_info[::exit_failure-1].help_given
args_info[].inputs elements == args_info[::exit_failure-1].inputs
args_info[].inputs_num elements == args_info[::exit_failure-1].help_given
===========================================================================
oathtool_cmd.c.clear_given():::EXIT
::exit_failure == orig(::exit_failure)
::exit_failure == orig(size(args_info[]))
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
args_info[] == orig(args_info[])
args_info[].hotp_flag == orig(args_info[].hotp_flag)
args_info[].base32_flag == orig(args_info[].base32_flag)
args_info[].verbose_flag == orig(args_info[].verbose_flag)
args_info[].inputs == orig(args_info[].inputs)
args_info[].inputs_num == orig(args_info[].inputs_num)
size(args_info[])-1 == args_info[::exit_failure-1].base32_flag
size(args_info[])-1 == args_info[::exit_failure-1].verbose_flag
size(args_info[])-1 == orig(args_info[post(::exit_failure)-1].base32_flag)
size(args_info[])-1 == orig(args_info[post(::exit_failure)-1].verbose_flag)
size(args_info[])-1 == args_info[orig(::exit_failure)-1].base32_flag
size(args_info[])-1 == args_info[orig(::exit_failure)-1].verbose_flag
size(args_info[])-1 == orig(args_info[::exit_failure-1].base32_flag)
size(args_info[])-1 == orig(args_info[::exit_failure-1].verbose_flag)
orig(size(args_info[])) == args_info[::exit_failure-1].hotp_flag
orig(size(args_info[])) == orig(args_info[post(::exit_failure)-1].hotp_flag)
orig(size(args_info[])) == args_info[orig(::exit_failure)-1].hotp_flag
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].version_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].hotp_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].totp_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].base32_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].counter_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].time_step_size_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].start_time_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].now_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].digits_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].window_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].verbose_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].version_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].hotp_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].totp_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].base32_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].counter_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].time_step_size_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].start_time_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].now_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].digits_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].window_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].verbose_given
args_info[::exit_failure-1].inputs_num == orig(args_info[post(::exit_failure)-1].help_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[post(::exit_failure)-1].version_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[post(::exit_failure)-1].hotp_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[post(::exit_failure)-1].totp_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[post(::exit_failure)-1].base32_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[post(::exit_failure)-1].counter_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[post(::exit_failure)-1].time_step_size_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[post(::exit_failure)-1].start_time_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[post(::exit_failure)-1].now_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[post(::exit_failure)-1].digits_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[post(::exit_failure)-1].verbose_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[::exit_failure-1].help_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[::exit_failure-1].version_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[::exit_failure-1].hotp_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[::exit_failure-1].totp_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[::exit_failure-1].base32_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[::exit_failure-1].counter_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[::exit_failure-1].time_step_size_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[::exit_failure-1].start_time_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[::exit_failure-1].now_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[::exit_failure-1].digits_given)
args_info[::exit_failure-1].inputs_num == orig(args_info[::exit_failure-1].verbose_given)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
args_info[] contains no nulls and has only one value, of length 1
args_info[] elements has only one value
args_info[] elements != null
args_info[].help_help == [  -h, --help                    Print help and exit]
args_info[].help_help elements == "  -h, --help                    Print help and exit"
args_info[].version_help == [  -V, --version                 Print version and exit]
args_info[].version_help elements == "  -V, --version                 Print version and exit"
args_info[].hotp_flag == [1]
args_info[].hotp_flag elements == 1
args_info[].hotp_help == [      --hotp                    use event-based HOTP mode  (default=on)]
args_info[].hotp_help elements == "      --hotp                    use event-based HOTP mode  (default=on)"
args_info[].totp_help == [      --totp[=STRING]           use time-variant TOTP mode  (possible
                                  values="sha1", "sha256", "sha512"
                                  default=`sha1')]
args_info[].totp_help elements == "      --totp[=STRING]           use time-variant TOTP mode  (possible\n                                  values=\"sha1\", \"sha256\", \"sha512\"\n                                  default=`sha1')"
args_info[].base32_flag == [0]
args_info[].base32_flag elements == 0
args_info[].base32_help == [  -b, --base32                  use base32 encoding of KEY instead of hex
                                  (default=off)]
args_info[].base32_help elements == "  -b, --base32                  use base32 encoding of KEY instead of hex\n                                  (default=off)"
args_info[].counter_help == [  -c, --counter=COUNTER         HOTP counter value]
args_info[].counter_help elements == "  -c, --counter=COUNTER         HOTP counter value"
args_info[].time_step_size_help == [  -s, --time-step-size=DURATION TOTP time-step duration  (default=`30s')]
args_info[].time_step_size_help elements == "  -s, --time-step-size=DURATION TOTP time-step duration  (default=`30s')"
args_info[].start_time_help == [  -S, --start-time=TIME         when to start counting time steps for TOTP
                                  (default=`1970-01-01 00:00:00 UTC')]
args_info[].start_time_help elements == "  -S, --start-time=TIME         when to start counting time steps for TOTP\n                                  (default=`1970-01-01 00:00:00 UTC')"
args_info[].now_help == [  -N, --now=TIME                use this time as current time for TOTP
                                  (default=`now')]
args_info[].now_help elements == "  -N, --now=TIME                use this time as current time for TOTP\n                                  (default=`now')"
args_info[].digits_help == [  -d, --digits=DIGITS           number of digits in one-time password]
args_info[].digits_help elements == "  -d, --digits=DIGITS           number of digits in one-time password"
args_info[].window_help == [  -w, --window=WIDTH            window of counter values to test when
                                  validating OTPs]
args_info[].window_help elements == "  -w, --window=WIDTH            window of counter values to test when\n                                  validating OTPs"
args_info[].verbose_flag == [0]
args_info[].verbose_flag elements == 0
args_info[].verbose_help == [  -v, --verbose                 explain what is being done  (default=off)]
args_info[].verbose_help elements == "  -v, --verbose                 explain what is being done  (default=off)"
args_info[].help_given == [0]
args_info[].help_given elements == 0
args_info[].version_given == [0]
args_info[].version_given elements == 0
args_info[].hotp_given == [0]
args_info[].hotp_given elements == 0
args_info[].totp_given == [0]
args_info[].totp_given elements == 0
args_info[].base32_given == [0]
args_info[].base32_given elements == 0
args_info[].counter_given == [0]
args_info[].counter_given elements == 0
args_info[].time_step_size_given == [0]
args_info[].time_step_size_given elements == 0
args_info[].start_time_given == [0]
args_info[].start_time_given elements == 0
args_info[].now_given == [0]
args_info[].now_given elements == 0
args_info[].digits_given == [0]
args_info[].digits_given elements == 0
args_info[].window_given == [0]
args_info[].window_given elements == 0
args_info[].verbose_given == [0]
args_info[].verbose_given elements == 0
args_info[].inputs == [null]
args_info[].inputs elements == null
args_info[].inputs_num == [0]
args_info[].inputs_num elements == 0
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == ::package_name
::program_name == orig(::program_name)
::program_name == orig(::package_name)
::exit_failure in args_info[].hotp_flag
args_info[].hotp_flag elements == ::exit_failure
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
args_info[] elements == args_info[::exit_failure-1]
args_info[].hotp_flag elements == orig(size(args_info[]))
args_info[].base32_flag elements == size(args_info[])-1
args_info[].verbose_flag elements == size(args_info[])-1
args_info[].help_given == orig(args_info[].help_given) (elementwise)
args_info[].help_given is the reverse of orig(args_info[].help_given)
args_info[].help_given elements == args_info[::exit_failure-1].help_given
args_info[::exit_failure-1].inputs_num in args_info[].help_given
args_info[].help_given elements == args_info[::exit_failure-1].inputs_num
args_info[].version_given == orig(args_info[].version_given) (elementwise)
args_info[].version_given is the reverse of orig(args_info[].version_given)
args_info[].version_given elements == args_info[::exit_failure-1].help_given
args_info[::exit_failure-1].inputs_num in args_info[].version_given
args_info[].version_given elements == args_info[::exit_failure-1].inputs_num
args_info[].hotp_given == orig(args_info[].hotp_given) (elementwise)
args_info[].hotp_given is the reverse of orig(args_info[].hotp_given)
args_info[].hotp_given elements == args_info[::exit_failure-1].help_given
args_info[::exit_failure-1].inputs_num in args_info[].hotp_given
args_info[].hotp_given elements == args_info[::exit_failure-1].inputs_num
args_info[].totp_given == orig(args_info[].totp_given) (elementwise)
args_info[].totp_given is the reverse of orig(args_info[].totp_given)
args_info[].totp_given elements == args_info[::exit_failure-1].help_given
args_info[::exit_failure-1].inputs_num in args_info[].totp_given
args_info[].totp_given elements == args_info[::exit_failure-1].inputs_num
args_info[].base32_given == orig(args_info[].base32_given) (elementwise)
args_info[].base32_given is the reverse of orig(args_info[].base32_given)
args_info[].base32_given elements == args_info[::exit_failure-1].help_given
args_info[::exit_failure-1].inputs_num in args_info[].base32_given
args_info[].base32_given elements == args_info[::exit_failure-1].inputs_num
args_info[].counter_given == orig(args_info[].counter_given) (elementwise)
args_info[].counter_given is the reverse of orig(args_info[].counter_given)
args_info[].counter_given elements == args_info[::exit_failure-1].help_given
args_info[::exit_failure-1].inputs_num in args_info[].counter_given
args_info[].counter_given elements == args_info[::exit_failure-1].inputs_num
args_info[].time_step_size_given == orig(args_info[].time_step_size_given) (elementwise)
args_info[].time_step_size_given is the reverse of orig(args_info[].time_step_size_given)
args_info[].time_step_size_given elements == args_info[::exit_failure-1].help_given
args_info[::exit_failure-1].inputs_num in args_info[].time_step_size_given
args_info[].time_step_size_given elements == args_info[::exit_failure-1].inputs_num
args_info[].start_time_given == orig(args_info[].start_time_given) (elementwise)
args_info[].start_time_given is the reverse of orig(args_info[].start_time_given)
args_info[].start_time_given elements == args_info[::exit_failure-1].help_given
args_info[::exit_failure-1].inputs_num in args_info[].start_time_given
args_info[].start_time_given elements == args_info[::exit_failure-1].inputs_num
args_info[].now_given == orig(args_info[].now_given) (elementwise)
args_info[].now_given is the reverse of orig(args_info[].now_given)
args_info[].now_given elements == args_info[::exit_failure-1].help_given
args_info[::exit_failure-1].inputs_num in args_info[].now_given
args_info[].now_given elements == args_info[::exit_failure-1].inputs_num
args_info[].digits_given == orig(args_info[].digits_given) (elementwise)
args_info[].digits_given is the reverse of orig(args_info[].digits_given)
args_info[].digits_given elements == args_info[::exit_failure-1].help_given
args_info[::exit_failure-1].inputs_num in args_info[].digits_given
args_info[].digits_given elements == args_info[::exit_failure-1].inputs_num
args_info[].window_given elements == args_info[::exit_failure-1].help_given
args_info[::exit_failure-1].inputs_num in args_info[].window_given
args_info[].window_given elements == args_info[::exit_failure-1].inputs_num
args_info[].verbose_given == orig(args_info[].verbose_given) (elementwise)
args_info[].verbose_given is the reverse of orig(args_info[].verbose_given)
args_info[].verbose_given elements == args_info[::exit_failure-1].help_given
args_info[::exit_failure-1].inputs_num in args_info[].verbose_given
args_info[].verbose_given elements == args_info[::exit_failure-1].inputs_num
args_info[].inputs elements == args_info[::exit_failure-1].inputs
args_info[::exit_failure-1].help_given in args_info[].inputs_num
args_info[].inputs_num elements == args_info[::exit_failure-1].help_given
args_info[].inputs_num elements == args_info[::exit_failure-1].inputs_num
args_info[::exit_failure-1].help_given in orig(args_info[].help_given)
orig(args_info[].help_given) elements == args_info[::exit_failure-1].help_given
orig(args_info[].help_given) elements == args_info[::exit_failure-1].inputs_num
args_info[::exit_failure-1].help_given in orig(args_info[].version_given)
orig(args_info[].version_given) elements == args_info[::exit_failure-1].help_given
orig(args_info[].version_given) elements == args_info[::exit_failure-1].inputs_num
args_info[::exit_failure-1].help_given in orig(args_info[].hotp_given)
orig(args_info[].hotp_given) elements == args_info[::exit_failure-1].help_given
orig(args_info[].hotp_given) elements == args_info[::exit_failure-1].inputs_num
args_info[::exit_failure-1].help_given in orig(args_info[].totp_given)
orig(args_info[].totp_given) elements == args_info[::exit_failure-1].help_given
orig(args_info[].totp_given) elements == args_info[::exit_failure-1].inputs_num
args_info[::exit_failure-1].help_given in orig(args_info[].base32_given)
orig(args_info[].base32_given) elements == args_info[::exit_failure-1].help_given
orig(args_info[].base32_given) elements == args_info[::exit_failure-1].inputs_num
args_info[::exit_failure-1].help_given in orig(args_info[].counter_given)
orig(args_info[].counter_given) elements == args_info[::exit_failure-1].help_given
orig(args_info[].counter_given) elements == args_info[::exit_failure-1].inputs_num
args_info[::exit_failure-1].help_given in orig(args_info[].time_step_size_given)
orig(args_info[].time_step_size_given) elements == args_info[::exit_failure-1].help_given
orig(args_info[].time_step_size_given) elements == args_info[::exit_failure-1].inputs_num
args_info[::exit_failure-1].help_given in orig(args_info[].start_time_given)
orig(args_info[].start_time_given) elements == args_info[::exit_failure-1].help_given
orig(args_info[].start_time_given) elements == args_info[::exit_failure-1].inputs_num
args_info[::exit_failure-1].help_given in orig(args_info[].now_given)
orig(args_info[].now_given) elements == args_info[::exit_failure-1].help_given
orig(args_info[].now_given) elements == args_info[::exit_failure-1].inputs_num
args_info[::exit_failure-1].help_given in orig(args_info[].digits_given)
orig(args_info[].digits_given) elements == args_info[::exit_failure-1].help_given
orig(args_info[].digits_given) elements == args_info[::exit_failure-1].inputs_num
args_info[::exit_failure-1].help_given in orig(args_info[].verbose_given)
orig(args_info[].verbose_given) elements == args_info[::exit_failure-1].help_given
orig(args_info[].verbose_given) elements == args_info[::exit_failure-1].inputs_num
===========================================================================
oathtool_cmd.c.cmdline_parser_internal():::ENTER
::exit_failure == size(argv[])
size(argv[]) == size(params[])
size(argv[]) == params[::exit_failure-1].initialize
size(argv[]) == params[::exit_failure-1].check_required
size(argv[]) == params[::exit_failure-1].print_errors
size(argv[]) == ::long_options[argc].has_arg
size(argv[])-1 == ::long_options[::exit_failure].has_arg
size(params[])-1 == ::long_options[::exit_failure].has_arg
::long_options[::exit_failure].has_arg == ::long_options[::exit_failure-1].has_arg
::long_options[::exit_failure].has_arg == params[::exit_failure-1].override
::long_options[::exit_failure].has_arg == params[::exit_failure-1].check_ambiguity
::long_options[::exit_failure].has_arg == ::long_options[argc-1].has_arg
::long_options[::exit_failure].flag == ::long_options[::exit_failure-1].flag
::long_options[::exit_failure].flag == ::long_options[argc].flag
::long_options[::exit_failure].flag == ::long_options[argc-1].flag
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::long_options has only one value
::long_options[] contains no nulls and has only one value, of length 13
::long_options[] elements != null
::long_options[].has_arg == [0, 0, 0, 2, 0, 1, 1, 1, 1, 1, 1, 0, 0]
::long_options[].has_arg elements one of { 0, 1, 2 }
::long_options[].flag contains only nulls and has only one value, of length 13
::long_options[].flag elements == null
::long_options[].val == [104, 86, 0, 0, 98, 99, 115, 83, 78, 100, 119, 118, 0]
::long_options[].val elements >= 0
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
argc == 5
argv has only one value
argv != null
argv[] == [./oathtool]
argv[] elements == "./oathtool"
args_info has only one value
args_info != null
params has only one value
params != null
params[] contains no nulls and has only one value, of length 1
params[] elements has only one value
params[] elements != null
params[].override == [0]
params[].override elements == 0
params[].initialize == [1]
params[].initialize elements == 1
params[].check_required == [1]
params[].check_required elements == 1
params[].check_ambiguity == [0]
params[].check_ambiguity elements == 0
params[].print_errors == [1]
params[].print_errors elements == 1
size(::long_options[]) == 13
size(argv[]) == 1
::long_options[::exit_failure] has only one value
::long_options[::exit_failure-1] has only one value
::long_options[::exit_failure].val == 86
::long_options[::exit_failure-1].val == 104
::long_options[argc] has only one value
::long_options[argc-1] has only one value
::long_options[argc].val == 99
::long_options[argc-1].val == 98
::program_name in argv[]
::exit_failure in ::long_options[].has_arg
::exit_failure in params[].initialize
params[].initialize elements == ::exit_failure
::exit_failure in params[].check_required
params[].check_required elements == ::exit_failure
::exit_failure in params[].print_errors
params[].print_errors elements == ::exit_failure
::long_options[].has_arg elements < argc
::long_options[].has_arg elements < size(::long_options[])-1
::long_options[].has_arg elements >= ::long_options[::exit_failure].has_arg
::long_options[].has_arg elements < ::long_options[::exit_failure].val
::long_options[].has_arg elements < ::long_options[::exit_failure-1].val
::long_options[].has_arg elements < ::long_options[argc].val
::long_options[].has_arg elements < ::long_options[argc-1].val
::long_options[].flag elements == ::long_options[::exit_failure].flag
::long_options[::exit_failure].has_arg in ::long_options[].val
::long_options[].val elements >= ::long_options[::exit_failure].has_arg
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
params[] elements == params[::exit_failure-1]
params[].override elements == ::long_options[::exit_failure].has_arg
params[].initialize elements == size(argv[])
params[].check_required elements == size(argv[])
params[].check_ambiguity elements == ::long_options[::exit_failure].has_arg
params[].print_errors elements == size(argv[])
===========================================================================
oathtool_cmd.c.cmdline_parser_internal():::EXIT
::exit_failure == orig(::exit_failure)
::exit_failure == orig(size(argv[]))
::long_options == orig(::long_options)
::long_options[] == orig(::long_options[])
::long_options[].has_arg == orig(::long_options[].has_arg)
::long_options[].flag == orig(::long_options[].flag)
::long_options[].val == orig(::long_options[].val)
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
params[] == orig(params[])
params[].override == orig(params[].override)
params[].initialize == orig(params[].initialize)
params[].check_required == orig(params[].check_required)
params[].check_ambiguity == orig(params[].check_ambiguity)
params[].print_errors == orig(params[].print_errors)
return == size(argv[])-1
size(argv[])-1 == ::long_options[::exit_failure].has_arg
size(argv[])-1 == ::long_options[::exit_failure-1].has_arg
size(argv[])-1 == args_info[::exit_failure-1].base32_flag
size(argv[])-1 == args_info[::exit_failure-1].verbose_flag
size(argv[])-1 == params[::exit_failure-1].override
size(argv[])-1 == params[::exit_failure-1].check_ambiguity
size(argv[])-1 == orig(::long_options[post(::exit_failure)].has_arg)
size(argv[])-1 == orig(::long_options[post(::exit_failure)-1].has_arg)
size(argv[])-1 == orig(params[post(::exit_failure)-1].override)
size(argv[])-1 == orig(params[post(::exit_failure)-1].check_ambiguity)
size(argv[])-1 == ::long_options[return].has_arg
size(argv[])-1 == ::long_options[orig(::exit_failure)].has_arg
size(argv[])-1 == ::long_options[orig(::exit_failure)-1].has_arg
size(argv[])-1 == ::long_options[orig(argc)-1].has_arg
size(argv[])-1 == orig(::long_options[post(argc)-1].has_arg)
size(argv[])-1 == args_info[return].base32_flag
size(argv[])-1 == args_info[orig(::exit_failure)-1].base32_flag
size(argv[])-1 == args_info[return].verbose_flag
size(argv[])-1 == args_info[orig(::exit_failure)-1].verbose_flag
size(argv[])-1 == params[return].override
size(argv[])-1 == params[orig(::exit_failure)-1].override
size(argv[])-1 == params[return].check_ambiguity
size(argv[])-1 == params[orig(::exit_failure)-1].check_ambiguity
size(argv[])-1 == orig(::long_options[post(return)].has_arg)
size(argv[])-1 == orig(params[post(return)].override)
size(argv[])-1 == orig(params[post(return)].check_ambiguity)
size(argv[])-1 == orig(::long_options[::exit_failure].has_arg)
size(argv[])-1 == orig(::long_options[::exit_failure-1].has_arg)
size(argv[])-1 == orig(params[::exit_failure-1].override)
size(argv[])-1 == orig(params[::exit_failure-1].check_ambiguity)
size(argv[])-1 == orig(::long_options[argc-1].has_arg)
orig(size(argv[])) == args_info[::exit_failure-1].hotp_flag
orig(size(argv[])) == params[::exit_failure-1].initialize
orig(size(argv[])) == params[::exit_failure-1].check_required
orig(size(argv[])) == params[::exit_failure-1].print_errors
orig(size(argv[])) == orig(params[post(::exit_failure)-1].initialize)
orig(size(argv[])) == orig(params[post(::exit_failure)-1].check_required)
orig(size(argv[])) == orig(params[post(::exit_failure)-1].print_errors)
orig(size(argv[])) == ::long_options[orig(argc)].has_arg
orig(size(argv[])) == orig(::long_options[post(argc)].has_arg)
orig(size(argv[])) == args_info[return].hotp_flag
orig(size(argv[])) == args_info[orig(::exit_failure)-1].hotp_flag
orig(size(argv[])) == params[return].initialize
orig(size(argv[])) == params[orig(::exit_failure)-1].initialize
orig(size(argv[])) == params[return].check_required
orig(size(argv[])) == params[orig(::exit_failure)-1].check_required
orig(size(argv[])) == params[return].print_errors
orig(size(argv[])) == params[orig(::exit_failure)-1].print_errors
orig(size(argv[])) == orig(params[post(return)].initialize)
orig(size(argv[])) == orig(params[post(return)].check_required)
orig(size(argv[])) == orig(params[post(return)].print_errors)
::long_options[::exit_failure-1] == ::long_options[return]
::long_options[::exit_failure].flag == ::long_options[::exit_failure-1].flag
::long_options[::exit_failure].flag == orig(::long_options[post(::exit_failure)-1].flag)
::long_options[::exit_failure].flag == ::long_options[return].flag
::long_options[::exit_failure].flag == ::long_options[orig(::exit_failure)-1].flag
::long_options[::exit_failure].flag == ::long_options[orig(argc)].flag
::long_options[::exit_failure].flag == ::long_options[orig(argc)-1].flag
::long_options[::exit_failure].flag == orig(::long_options[post(argc)].flag)
::long_options[::exit_failure].flag == orig(::long_options[post(argc)-1].flag)
::long_options[::exit_failure].flag == orig(::long_options[post(return)].flag)
::long_options[::exit_failure].flag == orig(::long_options[::exit_failure-1].flag)
::long_options[::exit_failure].flag == orig(::long_options[argc].flag)
::long_options[::exit_failure].flag == orig(::long_options[argc-1].flag)
::long_options[::exit_failure-1].val == ::long_options[return].val
args_info[::exit_failure-1] == args_info[return]
args_info[::exit_failure-1].window_arg == args_info[return].window_arg
args_info[::exit_failure-1].help_given == args_info[return].help_given
args_info[::exit_failure-1].version_given == args_info[return].help_given
args_info[::exit_failure-1].hotp_given == args_info[return].help_given
args_info[::exit_failure-1].totp_given == args_info[return].help_given
args_info[::exit_failure-1].base32_given == args_info[return].help_given
args_info[::exit_failure-1].counter_given == args_info[return].help_given
args_info[::exit_failure-1].time_step_size_given == args_info[return].help_given
args_info[::exit_failure-1].start_time_given == args_info[return].help_given
args_info[::exit_failure-1].now_given == args_info[return].help_given
args_info[::exit_failure-1].digits_given == args_info[return].help_given
args_info[::exit_failure-1].window_given == args_info[return].window_given
args_info[::exit_failure-1].verbose_given == args_info[return].help_given
args_info[::exit_failure-1].inputs == args_info[return].inputs
args_info[::exit_failure-1].inputs_num == args_info[return].inputs_num
params[::exit_failure-1] == params[return]
orig(::long_options[post(::exit_failure)-1]) == ::long_options[return]
orig(::long_options[post(::exit_failure)-1].val) == ::long_options[return].val
orig(params[post(::exit_failure)-1]) == params[return]
::long_options[return] == ::long_options[orig(::exit_failure)-1]
::long_options[return] == orig(::long_options[::exit_failure-1])
::long_options[return].val == ::long_options[orig(::exit_failure)-1].val
::long_options[return].val == orig(::long_options[::exit_failure-1].val)
args_info[return] == args_info[orig(::exit_failure)-1]
args_info[return].window_arg == args_info[orig(::exit_failure)-1].window_arg
args_info[return].help_given == args_info[orig(::exit_failure)-1].help_given
args_info[return].help_given == args_info[return].version_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].version_given
args_info[return].help_given == args_info[return].hotp_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].hotp_given
args_info[return].help_given == args_info[return].totp_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].totp_given
args_info[return].help_given == args_info[return].base32_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].base32_given
args_info[return].help_given == args_info[return].counter_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].counter_given
args_info[return].help_given == args_info[return].time_step_size_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].time_step_size_given
args_info[return].help_given == args_info[return].start_time_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].start_time_given
args_info[return].help_given == args_info[return].now_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].now_given
args_info[return].help_given == args_info[return].digits_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].digits_given
args_info[return].help_given == args_info[return].verbose_given
args_info[return].help_given == args_info[orig(::exit_failure)-1].verbose_given
args_info[return].window_given == args_info[orig(::exit_failure)-1].window_given
args_info[return].inputs == args_info[orig(::exit_failure)-1].inputs
args_info[return].inputs_num == args_info[orig(::exit_failure)-1].inputs_num
params[return] == params[orig(::exit_failure)-1]
params[return] == orig(params[::exit_failure-1])
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::long_options has only one value
::long_options[] contains no nulls and has only one value, of length 13
::long_options[] elements != null
::long_options[].has_arg == [0, 0, 0, 2, 0, 1, 1, 1, 1, 1, 1, 0, 0]
::long_options[].has_arg elements one of { 0, 1, 2 }
::long_options[].flag contains only nulls and has only one value, of length 13
::long_options[].flag elements == null
::long_options[].val == [104, 86, 0, 0, 98, 99, 115, 83, 78, 100, 119, 118, 0]
::long_options[].val elements >= 0
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
argv[] == [./oathtool]
argv[] elements == "./oathtool"
args_info[] contains no nulls and has only one value, of length 1
args_info[] elements has only one value
args_info[] elements != null
args_info[].help_help == [  -h, --help                    Print help and exit]
args_info[].help_help elements == "  -h, --help                    Print help and exit"
args_info[].version_help == [  -V, --version                 Print version and exit]
args_info[].version_help elements == "  -V, --version                 Print version and exit"
args_info[].hotp_flag == [1]
args_info[].hotp_flag elements == 1
args_info[].hotp_help == [      --hotp                    use event-based HOTP mode  (default=on)]
args_info[].hotp_help elements == "      --hotp                    use event-based HOTP mode  (default=on)"
args_info[].totp_arg == [sha1]
args_info[].totp_arg elements == "sha1"
args_info[].totp_help == [      --totp[=STRING]           use time-variant TOTP mode  (possible
                                  values="sha1", "sha256", "sha512"
                                  default=`sha1')]
args_info[].totp_help elements == "      --totp[=STRING]           use time-variant TOTP mode  (possible\n                                  values=\"sha1\", \"sha256\", \"sha512\"\n                                  default=`sha1')"
args_info[].base32_flag == [0]
args_info[].base32_flag elements == 0
args_info[].base32_help == [  -b, --base32                  use base32 encoding of KEY instead of hex
                                  (default=off)]
args_info[].base32_help elements == "  -b, --base32                  use base32 encoding of KEY instead of hex\n                                  (default=off)"
args_info[].counter_help == [  -c, --counter=COUNTER         HOTP counter value]
args_info[].counter_help elements == "  -c, --counter=COUNTER         HOTP counter value"
args_info[].time_step_size_arg == [30s]
args_info[].time_step_size_arg elements == "30s"
args_info[].time_step_size_help == [  -s, --time-step-size=DURATION TOTP time-step duration  (default=`30s')]
args_info[].time_step_size_help elements == "  -s, --time-step-size=DURATION TOTP time-step duration  (default=`30s')"
args_info[].start_time_arg == [1970-01-01 00:00:00 UTC]
args_info[].start_time_arg elements == "1970-01-01 00:00:00 UTC"
args_info[].start_time_help == [  -S, --start-time=TIME         when to start counting time steps for TOTP
                                  (default=`1970-01-01 00:00:00 UTC')]
args_info[].start_time_help elements == "  -S, --start-time=TIME         when to start counting time steps for TOTP\n                                  (default=`1970-01-01 00:00:00 UTC')"
args_info[].now_arg == [now]
args_info[].now_arg elements == "now"
args_info[].now_help == [  -N, --now=TIME                use this time as current time for TOTP
                                  (default=`now')]
args_info[].now_help elements == "  -N, --now=TIME                use this time as current time for TOTP\n                                  (default=`now')"
args_info[].digits_help == [  -d, --digits=DIGITS           number of digits in one-time password]
args_info[].digits_help elements == "  -d, --digits=DIGITS           number of digits in one-time password"
args_info[].window_arg == [100]
args_info[].window_arg elements == 100
args_info[].window_orig == [100]
args_info[].window_orig elements == "100"
args_info[].window_help == [  -w, --window=WIDTH            window of counter values to test when
                                  validating OTPs]
args_info[].window_help elements == "  -w, --window=WIDTH            window of counter values to test when\n                                  validating OTPs"
args_info[].verbose_flag == [0]
args_info[].verbose_flag elements == 0
args_info[].verbose_help == [  -v, --verbose                 explain what is being done  (default=off)]
args_info[].verbose_help elements == "  -v, --verbose                 explain what is being done  (default=off)"
args_info[].help_given == [0]
args_info[].help_given elements == 0
args_info[].version_given == [0]
args_info[].version_given elements == 0
args_info[].hotp_given == [0]
args_info[].hotp_given elements == 0
args_info[].totp_given == [0]
args_info[].totp_given elements == 0
args_info[].base32_given == [0]
args_info[].base32_given elements == 0
args_info[].counter_given == [0]
args_info[].counter_given elements == 0
args_info[].time_step_size_given == [0]
args_info[].time_step_size_given elements == 0
args_info[].start_time_given == [0]
args_info[].start_time_given elements == 0
args_info[].now_given == [0]
args_info[].now_given elements == 0
args_info[].digits_given == [0]
args_info[].digits_given elements == 0
args_info[].window_given == [1]
args_info[].window_given elements == 1
args_info[].verbose_given == [0]
args_info[].verbose_given elements == 0
args_info[].inputs contains no nulls and has only one value, of length 1
args_info[].inputs elements has only one value
args_info[].inputs elements != null
args_info[].inputs[0] == [00]
args_info[].inputs[0] elements == "00"
args_info[].inputs_num == [2]
args_info[].inputs_num elements == 2
params[] contains no nulls and has only one value, of length 1
params[] elements has only one value
params[] elements != null
params[].override == [0]
params[].override elements == 0
params[].initialize == [1]
params[].initialize elements == 1
params[].check_required == [1]
params[].check_required elements == 1
params[].check_ambiguity == [0]
params[].check_ambiguity elements == 0
params[].print_errors == [1]
params[].print_errors elements == 1
return == 0
size(::long_options[]) == 13
::long_options[::exit_failure] has only one value
::long_options[::exit_failure].val == 86
::long_options[return] has only one value
::long_options[orig(argc)] has only one value
::long_options[orig(argc)-1] has only one value
::long_options[return].val == 104
::long_options[orig(argc)].val == 99
::long_options[orig(argc)-1].val == 98
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == ::package_name
::program_name in argv[]
::program_name == orig(::program_name)
::exit_failure in ::long_options[].has_arg
::exit_failure in args_info[].hotp_flag
args_info[].hotp_flag elements == ::exit_failure
::exit_failure in params[].initialize
params[].initialize elements == ::exit_failure
::exit_failure in params[].check_required
params[].check_required elements == ::exit_failure
::exit_failure in params[].print_errors
params[].print_errors elements == ::exit_failure
::long_options[].has_arg elements >= return
return in ::long_options[].has_arg
::long_options[].has_arg elements < orig(argc)
::long_options[].has_arg elements < size(::long_options[])-1
::long_options[].has_arg elements >= size(argv[])-1
::long_options[].has_arg elements < ::long_options[::exit_failure].val
::long_options[].has_arg elements < ::long_options[return].val
::long_options[].has_arg elements < ::long_options[orig(argc)].val
::long_options[].has_arg elements < ::long_options[orig(argc)-1].val
::long_options[].has_arg elements < args_info[return].window_arg
::long_options[].flag elements == ::long_options[::exit_failure].flag
::long_options[].val elements >= return
return in ::long_options[].val
::long_options[].val elements >= size(argv[])-1
size(argv[])-1 in ::long_options[].val
args_info[return].window_arg in ::long_options[].val
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
args_info[] elements == args_info[return]
args_info[].hotp_flag elements == orig(size(argv[]))
args_info[].base32_flag elements == return
return in args_info[].base32_flag
args_info[].base32_flag elements == size(argv[])-1
args_info[].window_arg elements == args_info[return].window_arg
args_info[].verbose_flag elements == return
return in args_info[].verbose_flag
args_info[].verbose_flag elements == size(argv[])-1
args_info[].help_given elements == args_info[return].help_given
args_info[].version_given elements == args_info[return].help_given
args_info[].hotp_given elements == args_info[return].help_given
args_info[].totp_given elements == args_info[return].help_given
args_info[].base32_given elements == args_info[return].help_given
args_info[].counter_given elements == args_info[return].help_given
args_info[].time_step_size_given elements == args_info[return].help_given
args_info[].start_time_given elements == args_info[return].help_given
args_info[].now_given elements == args_info[return].help_given
args_info[].digits_given elements == args_info[return].help_given
args_info[].window_given elements == args_info[return].window_given
args_info[].verbose_given elements == args_info[return].help_given
args_info[].inputs elements == args_info[return].inputs
args_info[].inputs_num elements == args_info[return].inputs_num
params[] elements == params[return]
params[].override elements == return
return in params[].override
params[].override elements == size(argv[])-1
params[].initialize elements == orig(size(argv[]))
params[].check_required elements == orig(size(argv[]))
params[].check_ambiguity elements == return
return in params[].check_ambiguity
params[].check_ambiguity elements == size(argv[])-1
params[].print_errors elements == orig(size(argv[]))
===========================================================================
oathtool_cmd.c.cmdline_parser_release():::ENTER
::exit_failure == size(args_info[])
size(args_info[]) == args_info[::exit_failure-1].hotp_flag
size(args_info[])-1 == args_info[::exit_failure-1].base32_flag
size(args_info[])-1 == args_info[::exit_failure-1].verbose_flag
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].version_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].hotp_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].totp_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].base32_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].counter_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].time_step_size_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].start_time_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].now_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].digits_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].verbose_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].inputs_num
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
args_info has only one value
args_info != null
args_info[] contains no nulls and has only one value, of length 1
args_info[] elements has only one value
args_info[] elements != null
args_info[].help_help == [  -h, --help                    Print help and exit]
args_info[].help_help elements == "  -h, --help                    Print help and exit"
args_info[].version_help == [  -V, --version                 Print version and exit]
args_info[].version_help elements == "  -V, --version                 Print version and exit"
args_info[].hotp_flag == [1]
args_info[].hotp_flag elements == 1
args_info[].hotp_help == [      --hotp                    use event-based HOTP mode  (default=on)]
args_info[].hotp_help elements == "      --hotp                    use event-based HOTP mode  (default=on)"
args_info[].totp_arg == [sha1]
args_info[].totp_arg elements == "sha1"
args_info[].totp_help == [      --totp[=STRING]           use time-variant TOTP mode  (possible
                                  values="sha1", "sha256", "sha512"
                                  default=`sha1')]
args_info[].totp_help elements == "      --totp[=STRING]           use time-variant TOTP mode  (possible\n                                  values=\"sha1\", \"sha256\", \"sha512\"\n                                  default=`sha1')"
args_info[].base32_flag == [0]
args_info[].base32_flag elements == 0
args_info[].base32_help == [  -b, --base32                  use base32 encoding of KEY instead of hex
                                  (default=off)]
args_info[].base32_help elements == "  -b, --base32                  use base32 encoding of KEY instead of hex\n                                  (default=off)"
args_info[].counter_help == [  -c, --counter=COUNTER         HOTP counter value]
args_info[].counter_help elements == "  -c, --counter=COUNTER         HOTP counter value"
args_info[].time_step_size_arg == [30s]
args_info[].time_step_size_arg elements == "30s"
args_info[].time_step_size_help == [  -s, --time-step-size=DURATION TOTP time-step duration  (default=`30s')]
args_info[].time_step_size_help elements == "  -s, --time-step-size=DURATION TOTP time-step duration  (default=`30s')"
args_info[].start_time_arg == [1970-01-01 00:00:00 UTC]
args_info[].start_time_arg elements == "1970-01-01 00:00:00 UTC"
args_info[].start_time_help == [  -S, --start-time=TIME         when to start counting time steps for TOTP
                                  (default=`1970-01-01 00:00:00 UTC')]
args_info[].start_time_help elements == "  -S, --start-time=TIME         when to start counting time steps for TOTP\n                                  (default=`1970-01-01 00:00:00 UTC')"
args_info[].now_arg == [now]
args_info[].now_arg elements == "now"
args_info[].now_help == [  -N, --now=TIME                use this time as current time for TOTP
                                  (default=`now')]
args_info[].now_help elements == "  -N, --now=TIME                use this time as current time for TOTP\n                                  (default=`now')"
args_info[].digits_help == [  -d, --digits=DIGITS           number of digits in one-time password]
args_info[].digits_help elements == "  -d, --digits=DIGITS           number of digits in one-time password"
args_info[].window_help == [  -w, --window=WIDTH            window of counter values to test when
                                  validating OTPs]
args_info[].window_help elements == "  -w, --window=WIDTH            window of counter values to test when\n                                  validating OTPs"
args_info[].verbose_flag == [0]
args_info[].verbose_flag elements == 0
args_info[].verbose_help == [  -v, --verbose                 explain what is being done  (default=off)]
args_info[].verbose_help elements == "  -v, --verbose                 explain what is being done  (default=off)"
args_info[].help_given == [0]
args_info[].help_given elements == 0
args_info[].version_given == [0]
args_info[].version_given elements == 0
args_info[].hotp_given == [0]
args_info[].hotp_given elements == 0
args_info[].totp_given == [0]
args_info[].totp_given elements == 0
args_info[].base32_given == [0]
args_info[].base32_given elements == 0
args_info[].counter_given == [0]
args_info[].counter_given elements == 0
args_info[].time_step_size_given == [0]
args_info[].time_step_size_given elements == 0
args_info[].start_time_given == [0]
args_info[].start_time_given elements == 0
args_info[].now_given == [0]
args_info[].now_given elements == 0
args_info[].digits_given == [0]
args_info[].digits_given elements == 0
args_info[].window_given == [1]
args_info[].window_given elements == 1
args_info[].verbose_given == [0]
args_info[].verbose_given elements == 0
args_info[].inputs == [null]
args_info[].inputs elements == null
args_info[].inputs_num == [0]
args_info[].inputs_num elements == 0
size(args_info[]) == 1
::program_name == ::package_name
::exit_failure in args_info[].hotp_flag
args_info[].hotp_flag elements == ::exit_failure
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
args_info[] elements == args_info[::exit_failure-1]
args_info[].hotp_flag elements == size(args_info[])
args_info[].base32_flag elements == size(args_info[])-1
args_info[].verbose_flag elements == size(args_info[])-1
args_info[].help_given elements == args_info[::exit_failure-1].help_given
args_info[].version_given elements == args_info[::exit_failure-1].help_given
args_info[].hotp_given elements == args_info[::exit_failure-1].help_given
args_info[].totp_given elements == args_info[::exit_failure-1].help_given
args_info[].base32_given elements == args_info[::exit_failure-1].help_given
args_info[].counter_given elements == args_info[::exit_failure-1].help_given
args_info[].time_step_size_given elements == args_info[::exit_failure-1].help_given
args_info[].start_time_given elements == args_info[::exit_failure-1].help_given
args_info[].now_given elements == args_info[::exit_failure-1].help_given
args_info[].digits_given elements == args_info[::exit_failure-1].help_given
args_info[].window_given elements == args_info[::exit_failure-1].window_given
args_info[].verbose_given elements == args_info[::exit_failure-1].help_given
args_info[].inputs elements == args_info[::exit_failure-1].inputs
args_info[].inputs_num elements == args_info[::exit_failure-1].help_given
===========================================================================
oathtool_cmd.c.cmdline_parser_release():::EXIT
::exit_failure == orig(::exit_failure)
::exit_failure == orig(size(args_info[]))
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
args_info[] == orig(args_info[])
args_info[].hotp_flag == orig(args_info[].hotp_flag)
args_info[].base32_flag == orig(args_info[].base32_flag)
args_info[].verbose_flag == orig(args_info[].verbose_flag)
args_info[].help_given == orig(args_info[].help_given)
args_info[].version_given == orig(args_info[].version_given)
args_info[].hotp_given == orig(args_info[].hotp_given)
args_info[].totp_given == orig(args_info[].totp_given)
args_info[].base32_given == orig(args_info[].base32_given)
args_info[].counter_given == orig(args_info[].counter_given)
args_info[].time_step_size_given == orig(args_info[].time_step_size_given)
args_info[].start_time_given == orig(args_info[].start_time_given)
args_info[].now_given == orig(args_info[].now_given)
args_info[].digits_given == orig(args_info[].digits_given)
args_info[].verbose_given == orig(args_info[].verbose_given)
args_info[].inputs == orig(args_info[].inputs)
args_info[].inputs_num == orig(args_info[].inputs_num)
size(args_info[])-1 == args_info[::exit_failure-1].base32_flag
size(args_info[])-1 == args_info[::exit_failure-1].verbose_flag
size(args_info[])-1 == orig(args_info[post(::exit_failure)-1].base32_flag)
size(args_info[])-1 == orig(args_info[post(::exit_failure)-1].verbose_flag)
size(args_info[])-1 == args_info[orig(::exit_failure)-1].base32_flag
size(args_info[])-1 == args_info[orig(::exit_failure)-1].verbose_flag
size(args_info[])-1 == orig(args_info[::exit_failure-1].base32_flag)
size(args_info[])-1 == orig(args_info[::exit_failure-1].verbose_flag)
orig(size(args_info[])) == args_info[::exit_failure-1].hotp_flag
orig(size(args_info[])) == orig(args_info[post(::exit_failure)-1].hotp_flag)
orig(size(args_info[])) == args_info[orig(::exit_failure)-1].hotp_flag
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].version_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].hotp_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].totp_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].base32_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].counter_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].time_step_size_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].start_time_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].now_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].digits_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].window_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].verbose_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].inputs_num
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].version_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].hotp_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].totp_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].base32_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].counter_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].time_step_size_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].start_time_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].now_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].digits_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].verbose_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].inputs_num)
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].version_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].hotp_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].totp_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].base32_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].counter_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].time_step_size_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].start_time_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].now_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].digits_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].window_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].verbose_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].inputs_num
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].version_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].hotp_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].totp_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].base32_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].counter_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].time_step_size_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].start_time_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].now_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].digits_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].verbose_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].inputs_num)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
args_info[] contains no nulls and has only one value, of length 1
args_info[] elements has only one value
args_info[] elements != null
args_info[].help_help == [  -h, --help                    Print help and exit]
args_info[].help_help elements == "  -h, --help                    Print help and exit"
args_info[].version_help == [  -V, --version                 Print version and exit]
args_info[].version_help elements == "  -V, --version                 Print version and exit"
args_info[].hotp_flag == [1]
args_info[].hotp_flag elements == 1
args_info[].hotp_help == [      --hotp                    use event-based HOTP mode  (default=on)]
args_info[].hotp_help elements == "      --hotp                    use event-based HOTP mode  (default=on)"
args_info[].totp_help == [      --totp[=STRING]           use time-variant TOTP mode  (possible
                                  values="sha1", "sha256", "sha512"
                                  default=`sha1')]
args_info[].totp_help elements == "      --totp[=STRING]           use time-variant TOTP mode  (possible\n                                  values=\"sha1\", \"sha256\", \"sha512\"\n                                  default=`sha1')"
args_info[].base32_flag == [0]
args_info[].base32_flag elements == 0
args_info[].base32_help == [  -b, --base32                  use base32 encoding of KEY instead of hex
                                  (default=off)]
args_info[].base32_help elements == "  -b, --base32                  use base32 encoding of KEY instead of hex\n                                  (default=off)"
args_info[].counter_help == [  -c, --counter=COUNTER         HOTP counter value]
args_info[].counter_help elements == "  -c, --counter=COUNTER         HOTP counter value"
args_info[].time_step_size_help == [  -s, --time-step-size=DURATION TOTP time-step duration  (default=`30s')]
args_info[].time_step_size_help elements == "  -s, --time-step-size=DURATION TOTP time-step duration  (default=`30s')"
args_info[].start_time_help == [  -S, --start-time=TIME         when to start counting time steps for TOTP
                                  (default=`1970-01-01 00:00:00 UTC')]
args_info[].start_time_help elements == "  -S, --start-time=TIME         when to start counting time steps for TOTP\n                                  (default=`1970-01-01 00:00:00 UTC')"
args_info[].now_help == [  -N, --now=TIME                use this time as current time for TOTP
                                  (default=`now')]
args_info[].now_help elements == "  -N, --now=TIME                use this time as current time for TOTP\n                                  (default=`now')"
args_info[].digits_help == [  -d, --digits=DIGITS           number of digits in one-time password]
args_info[].digits_help elements == "  -d, --digits=DIGITS           number of digits in one-time password"
args_info[].window_help == [  -w, --window=WIDTH            window of counter values to test when
                                  validating OTPs]
args_info[].window_help elements == "  -w, --window=WIDTH            window of counter values to test when\n                                  validating OTPs"
args_info[].verbose_flag == [0]
args_info[].verbose_flag elements == 0
args_info[].verbose_help == [  -v, --verbose                 explain what is being done  (default=off)]
args_info[].verbose_help elements == "  -v, --verbose                 explain what is being done  (default=off)"
args_info[].help_given == [0]
args_info[].help_given elements == 0
args_info[].version_given == [0]
args_info[].version_given elements == 0
args_info[].hotp_given == [0]
args_info[].hotp_given elements == 0
args_info[].totp_given == [0]
args_info[].totp_given elements == 0
args_info[].base32_given == [0]
args_info[].base32_given elements == 0
args_info[].counter_given == [0]
args_info[].counter_given elements == 0
args_info[].time_step_size_given == [0]
args_info[].time_step_size_given elements == 0
args_info[].start_time_given == [0]
args_info[].start_time_given elements == 0
args_info[].now_given == [0]
args_info[].now_given elements == 0
args_info[].digits_given == [0]
args_info[].digits_given elements == 0
args_info[].window_given == [0]
args_info[].window_given elements == 0
args_info[].verbose_given == [0]
args_info[].verbose_given elements == 0
args_info[].inputs == [null]
args_info[].inputs elements == null
args_info[].inputs_num == [0]
args_info[].inputs_num elements == 0
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == ::package_name
::program_name == orig(::program_name)
::program_name == orig(::package_name)
::exit_failure in args_info[].hotp_flag
args_info[].hotp_flag elements == ::exit_failure
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
args_info[] elements == args_info[::exit_failure-1]
args_info[].hotp_flag elements == orig(size(args_info[]))
args_info[].base32_flag elements == size(args_info[])-1
args_info[].verbose_flag elements == size(args_info[])-1
args_info[].help_given elements == args_info[::exit_failure-1].help_given
args_info[].version_given elements == args_info[::exit_failure-1].help_given
args_info[].hotp_given elements == args_info[::exit_failure-1].help_given
args_info[].totp_given elements == args_info[::exit_failure-1].help_given
args_info[].base32_given elements == args_info[::exit_failure-1].help_given
args_info[].counter_given elements == args_info[::exit_failure-1].help_given
args_info[].time_step_size_given elements == args_info[::exit_failure-1].help_given
args_info[].start_time_given elements == args_info[::exit_failure-1].help_given
args_info[].now_given elements == args_info[::exit_failure-1].help_given
args_info[].digits_given elements == args_info[::exit_failure-1].help_given
args_info[].window_given elements == args_info[::exit_failure-1].help_given
args_info[].verbose_given elements == args_info[::exit_failure-1].help_given
args_info[].inputs elements == args_info[::exit_failure-1].inputs
args_info[].inputs_num elements == args_info[::exit_failure-1].help_given
===========================================================================
oathtool_cmd.c.free_string_field():::ENTER
::exit_failure == size(s[])
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
s != null
size(s[]) == 1
::program_name == ::package_name
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
oathtool_cmd.c.free_string_field():::EXIT
::exit_failure == orig(::exit_failure)
::exit_failure == orig(size(s[]))
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == ::package_name
::program_name == orig(::program_name)
::program_name == orig(::package_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
===========================================================================
oathtool_cmd.c.gengetopt_strdup():::ENTER
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
::program_name == ::package_name
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
oathtool_cmd.c.gengetopt_strdup():::EXIT
::exit_failure == orig(::exit_failure)
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == ::package_name
::program_name == orig(::program_name)
::program_name == orig(::package_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
return == orig(s)
===========================================================================
oathtool_cmd.c.init_args_info():::ENTER
::exit_failure == args_info[::exit_failure-1].hotp_flag
args_info[::exit_failure-1].base32_flag == args_info[::exit_failure-1].verbose_flag
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].version_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].hotp_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].totp_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].base32_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].counter_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].time_step_size_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].start_time_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].now_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].digits_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].window_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].verbose_given
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
args_info != null
args_info[].hotp_flag == [1]
args_info[].hotp_flag elements == 1
args_info[].totp_arg == [sha1]
args_info[].totp_arg elements == "sha1"
args_info[].base32_flag == [0]
args_info[].base32_flag elements == 0
args_info[].time_step_size_arg == [30s]
args_info[].time_step_size_arg elements == "30s"
args_info[].start_time_arg == [1970-01-01 00:00:00 UTC]
args_info[].start_time_arg elements == "1970-01-01 00:00:00 UTC"
args_info[].now_arg == [now]
args_info[].now_arg elements == "now"
args_info[].verbose_flag == [0]
args_info[].verbose_flag elements == 0
args_info[].help_given == [0]
args_info[].help_given elements == 0
args_info[].version_given == [0]
args_info[].version_given elements == 0
args_info[].hotp_given == [0]
args_info[].hotp_given elements == 0
args_info[].totp_given == [0]
args_info[].totp_given elements == 0
args_info[].base32_given == [0]
args_info[].base32_given elements == 0
args_info[].counter_given == [0]
args_info[].counter_given elements == 0
args_info[].time_step_size_given == [0]
args_info[].time_step_size_given elements == 0
args_info[].start_time_given == [0]
args_info[].start_time_given elements == 0
args_info[].now_given == [0]
args_info[].now_given elements == 0
args_info[].digits_given == [0]
args_info[].digits_given elements == 0
args_info[].window_given == [0]
args_info[].window_given elements == 0
args_info[].verbose_given == [0]
args_info[].verbose_given elements == 0
::program_name == ::package_name
::exit_failure in args_info[].hotp_flag
args_info[].hotp_flag elements == ::exit_failure
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
args_info[].hotp_flag elements == args_info[::exit_failure-1].hotp_flag
args_info[].base32_flag elements == args_info[::exit_failure-1].base32_flag
args_info[].verbose_flag elements == args_info[::exit_failure-1].base32_flag
args_info[].help_given elements == args_info[::exit_failure-1].help_given
args_info[].version_given elements == args_info[::exit_failure-1].help_given
args_info[].hotp_given elements == args_info[::exit_failure-1].help_given
args_info[].totp_given elements == args_info[::exit_failure-1].help_given
args_info[].base32_given elements == args_info[::exit_failure-1].help_given
args_info[].counter_given elements == args_info[::exit_failure-1].help_given
args_info[].time_step_size_given elements == args_info[::exit_failure-1].help_given
args_info[].start_time_given elements == args_info[::exit_failure-1].help_given
args_info[].now_given elements == args_info[::exit_failure-1].help_given
args_info[].digits_given elements == args_info[::exit_failure-1].help_given
args_info[].window_given elements == args_info[::exit_failure-1].help_given
args_info[].verbose_given elements == args_info[::exit_failure-1].help_given
===========================================================================
oathtool_cmd.c.init_args_info():::EXIT
::exit_failure == orig(::exit_failure)
::exit_failure == args_info[::exit_failure-1].hotp_flag
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
args_info[].hotp_flag == orig(args_info[].hotp_flag)
args_info[].base32_flag == orig(args_info[].base32_flag)
args_info[].verbose_flag == orig(args_info[].verbose_flag)
args_info[].help_given == orig(args_info[].help_given)
args_info[].version_given == orig(args_info[].version_given)
args_info[].hotp_given == orig(args_info[].hotp_given)
args_info[].totp_given == orig(args_info[].totp_given)
args_info[].base32_given == orig(args_info[].base32_given)
args_info[].counter_given == orig(args_info[].counter_given)
args_info[].time_step_size_given == orig(args_info[].time_step_size_given)
args_info[].start_time_given == orig(args_info[].start_time_given)
args_info[].now_given == orig(args_info[].now_given)
args_info[].digits_given == orig(args_info[].digits_given)
args_info[].window_given == orig(args_info[].window_given)
args_info[].verbose_given == orig(args_info[].verbose_given)
size(args_info[])-1 == args_info[::exit_failure-1].base32_flag
size(args_info[])-1 == args_info[::exit_failure-1].verbose_flag
size(args_info[])-1 == orig(args_info[post(::exit_failure)-1].base32_flag)
size(args_info[])-1 == orig(args_info[post(::exit_failure)-1].verbose_flag)
size(args_info[])-1 == args_info[orig(::exit_failure)-1].base32_flag
size(args_info[])-1 == args_info[orig(::exit_failure)-1].verbose_flag
size(args_info[])-1 == orig(args_info[::exit_failure-1].base32_flag)
size(args_info[])-1 == orig(args_info[::exit_failure-1].verbose_flag)
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].version_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].hotp_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].totp_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].base32_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].counter_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].time_step_size_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].start_time_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].now_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].digits_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].window_given
args_info[::exit_failure-1].help_given == args_info[::exit_failure-1].verbose_given
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].version_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].hotp_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].totp_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].base32_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].counter_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].time_step_size_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].start_time_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].now_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].digits_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].window_given)
args_info[::exit_failure-1].help_given == orig(args_info[post(::exit_failure)-1].verbose_given)
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].version_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].hotp_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].totp_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].base32_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].counter_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].time_step_size_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].start_time_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].now_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].digits_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].window_given
args_info[::exit_failure-1].help_given == args_info[orig(::exit_failure)-1].verbose_given
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].version_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].hotp_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].totp_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].base32_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].counter_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].time_step_size_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].start_time_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].now_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].digits_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].window_given)
args_info[::exit_failure-1].help_given == orig(args_info[::exit_failure-1].verbose_given)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
args_info[] elements != null
args_info[].help_help == [  -h, --help                    Print help and exit]
args_info[].help_help elements == "  -h, --help                    Print help and exit"
args_info[].version_help == [  -V, --version                 Print version and exit]
args_info[].version_help elements == "  -V, --version                 Print version and exit"
args_info[].hotp_flag == [1]
args_info[].hotp_flag elements == 1
args_info[].hotp_help == [      --hotp                    use event-based HOTP mode  (default=on)]
args_info[].hotp_help elements == "      --hotp                    use event-based HOTP mode  (default=on)"
args_info[].totp_arg == [sha1]
args_info[].totp_arg elements == "sha1"
args_info[].totp_help == [      --totp[=STRING]           use time-variant TOTP mode  (possible
                                  values="sha1", "sha256", "sha512"
                                  default=`sha1')]
args_info[].totp_help elements == "      --totp[=STRING]           use time-variant TOTP mode  (possible\n                                  values=\"sha1\", \"sha256\", \"sha512\"\n                                  default=`sha1')"
args_info[].base32_flag == [0]
args_info[].base32_flag elements == 0
args_info[].base32_help == [  -b, --base32                  use base32 encoding of KEY instead of hex
                                  (default=off)]
args_info[].base32_help elements == "  -b, --base32                  use base32 encoding of KEY instead of hex\n                                  (default=off)"
args_info[].counter_help == [  -c, --counter=COUNTER         HOTP counter value]
args_info[].counter_help elements == "  -c, --counter=COUNTER         HOTP counter value"
args_info[].time_step_size_arg == [30s]
args_info[].time_step_size_arg elements == "30s"
args_info[].time_step_size_help == [  -s, --time-step-size=DURATION TOTP time-step duration  (default=`30s')]
args_info[].time_step_size_help elements == "  -s, --time-step-size=DURATION TOTP time-step duration  (default=`30s')"
args_info[].start_time_arg == [1970-01-01 00:00:00 UTC]
args_info[].start_time_arg elements == "1970-01-01 00:00:00 UTC"
args_info[].start_time_help == [  -S, --start-time=TIME         when to start counting time steps for TOTP
                                  (default=`1970-01-01 00:00:00 UTC')]
args_info[].start_time_help elements == "  -S, --start-time=TIME         when to start counting time steps for TOTP\n                                  (default=`1970-01-01 00:00:00 UTC')"
args_info[].now_arg == [now]
args_info[].now_arg elements == "now"
args_info[].now_help == [  -N, --now=TIME                use this time as current time for TOTP
                                  (default=`now')]
args_info[].now_help elements == "  -N, --now=TIME                use this time as current time for TOTP\n                                  (default=`now')"
args_info[].digits_help == [  -d, --digits=DIGITS           number of digits in one-time password]
args_info[].digits_help elements == "  -d, --digits=DIGITS           number of digits in one-time password"
args_info[].window_help == [  -w, --window=WIDTH            window of counter values to test when
                                  validating OTPs]
args_info[].window_help elements == "  -w, --window=WIDTH            window of counter values to test when\n                                  validating OTPs"
args_info[].verbose_flag == [0]
args_info[].verbose_flag elements == 0
args_info[].verbose_help == [  -v, --verbose                 explain what is being done  (default=off)]
args_info[].verbose_help elements == "  -v, --verbose                 explain what is being done  (default=off)"
args_info[].help_given == [0]
args_info[].help_given elements == 0
args_info[].version_given == [0]
args_info[].version_given elements == 0
args_info[].hotp_given == [0]
args_info[].hotp_given elements == 0
args_info[].totp_given == [0]
args_info[].totp_given elements == 0
args_info[].base32_given == [0]
args_info[].base32_given elements == 0
args_info[].counter_given == [0]
args_info[].counter_given elements == 0
args_info[].time_step_size_given == [0]
args_info[].time_step_size_given elements == 0
args_info[].start_time_given == [0]
args_info[].start_time_given elements == 0
args_info[].now_given == [0]
args_info[].now_given elements == 0
args_info[].digits_given == [0]
args_info[].digits_given elements == 0
args_info[].window_given == [0]
args_info[].window_given elements == 0
args_info[].verbose_given == [0]
args_info[].verbose_given elements == 0
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == ::package_name
::program_name == orig(::program_name)
::program_name == orig(::package_name)
::exit_failure in args_info[].hotp_flag
args_info[].hotp_flag elements == ::exit_failure
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
args_info[] elements == args_info[::exit_failure-1]
args_info[].hotp_flag elements == args_info[::exit_failure-1].hotp_flag
args_info[].base32_flag elements == size(args_info[])-1
args_info[].verbose_flag elements == size(args_info[])-1
args_info[].help_given elements == args_info[::exit_failure-1].help_given
args_info[].version_given elements == args_info[::exit_failure-1].help_given
args_info[].hotp_given elements == args_info[::exit_failure-1].help_given
args_info[].totp_given elements == args_info[::exit_failure-1].help_given
args_info[].base32_given elements == args_info[::exit_failure-1].help_given
args_info[].counter_given elements == args_info[::exit_failure-1].help_given
args_info[].time_step_size_given elements == args_info[::exit_failure-1].help_given
args_info[].start_time_given elements == args_info[::exit_failure-1].help_given
args_info[].now_given elements == args_info[::exit_failure-1].help_given
args_info[].digits_given elements == args_info[::exit_failure-1].help_given
args_info[].window_given elements == args_info[::exit_failure-1].help_given
args_info[].verbose_given elements == args_info[::exit_failure-1].help_given
===========================================================================
oathtool_cmd.c.update_arg():::ENTER
::exit_failure == size(field_given[])
check_ambiguity == size(field_given[])-1
override == size(field_given[])-1
no_free == size(field_given[])-1
multiple_option == size(field_given[])-1
size(field_given[]) == size(prev_given[])
field_given[::exit_failure-1] == field_given[check_ambiguity]
prev_given[::exit_failure-1] == field_given[check_ambiguity]
field_given[check_ambiguity] == field_given[override]
field_given[check_ambiguity] == field_given[no_free]
field_given[check_ambiguity] == field_given[multiple_option]
field_given[check_ambiguity] == prev_given[check_ambiguity]
field_given[check_ambiguity] == prev_given[override]
field_given[check_ambiguity] == prev_given[no_free]
field_given[check_ambiguity] == prev_given[multiple_option]
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
field has only one value
field != null
orig_field has only one value
orig_field != null
field_given has only one value
field_given != null
field_given[] == [0]
field_given[] elements == 0
prev_given has only one value
prev_given != null
prev_given[] == [0]
prev_given[] elements == 0
value == "100"
possible_values == null
arg_type == 3
check_ambiguity == 0
override == 0
no_free == 0
multiple_option == 0
long_opt == "window"
short_opt == 119
size(field_given[]) == 1
::program_name == ::package_name
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
field_given[] elements == field_given[check_ambiguity]
prev_given[] elements == field_given[check_ambiguity]
===========================================================================
oathtool_cmd.c.update_arg():::EXIT
::exit_failure == orig(::exit_failure)
::exit_failure == orig(size(field_given[]))
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
return == size(orig_field[])-1
orig(check_ambiguity) == size(orig_field[])-1
orig(override) == size(orig_field[])-1
orig(no_free) == size(orig_field[])-1
orig(multiple_option) == size(orig_field[])-1
field_given[::exit_failure-1] == field_given[return]
prev_given[::exit_failure-1] == field_given[return]
orig(field_given[post(::exit_failure)-1]) == orig(field_given[check_ambiguity])
orig(prev_given[post(::exit_failure)-1]) == orig(field_given[check_ambiguity])
field_given[return] == field_given[orig(::exit_failure)-1]
field_given[return] == field_given[orig(check_ambiguity)]
field_given[return] == field_given[orig(override)]
field_given[return] == field_given[orig(no_free)]
field_given[return] == field_given[orig(multiple_option)]
field_given[return] == prev_given[return]
field_given[return] == prev_given[orig(::exit_failure)-1]
field_given[return] == prev_given[orig(check_ambiguity)]
field_given[return] == prev_given[orig(override)]
field_given[return] == prev_given[orig(no_free)]
field_given[return] == prev_given[orig(multiple_option)]
orig(prev_given[post(check_ambiguity)]) == orig(field_given[check_ambiguity])
orig(field_given[post(override)]) == orig(field_given[check_ambiguity])
orig(prev_given[post(override)]) == orig(field_given[check_ambiguity])
orig(field_given[post(no_free)]) == orig(field_given[check_ambiguity])
orig(prev_given[post(no_free)]) == orig(field_given[check_ambiguity])
orig(field_given[post(multiple_option)]) == orig(field_given[check_ambiguity])
orig(prev_given[post(multiple_option)]) == orig(field_given[check_ambiguity])
orig(field_given[post(return)]) == orig(field_given[check_ambiguity])
orig(prev_given[post(return)]) == orig(field_given[check_ambiguity])
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
orig_field[] == [100]
orig_field[] elements == "100"
field_given[] == [1]
field_given[] elements == 1
prev_given[] == [1]
prev_given[] elements == 1
return == 0
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == ::package_name
::program_name == orig(::program_name)
::program_name == orig(::package_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)
orig(value) in orig_field[]
field_given[] elements == field_given[return]
prev_given[] elements == field_given[return]
===========================================================================
sha1.c.set_uint32():::ENTER
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::fillbuf has only one value
::fillbuf[] == [128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::fillbuf[] elements one of { 0, 128 }
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
size(::fillbuf[]) == 64
::fillbuf[::exit_failure] == 0
::fillbuf[::exit_failure-1] == 128
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
===========================================================================
sha1.c.set_uint32():::EXIT
::fillbuf == orig(::fillbuf)
::fillbuf[] == orig(::fillbuf[])
::exit_failure == orig(::exit_failure)
::gengetopt_args_info_help == orig(::gengetopt_args_info_help)
::cmdline_parser_totp_values == orig(::cmdline_parser_totp_values)
::version_etc_copyright == "Copyright %s %d Simon Josefsson."
::fillbuf has only one value
::fillbuf[] == [128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::fillbuf[] elements one of { 0, 128 }
::program_name == "./oathtool"
::exit_failure == 1
::gengetopt_args_info_purpose == "Generate and validate OATH one-time passwords."
::gengetopt_args_info_usage == "Usage: oathtool [OPTIONS]... [KEY [OTP]]..."
::gengetopt_args_info_description == ""
::gengetopt_args_info_help has only one value
::cmdline_parser_totp_values has only one value
size(::fillbuf[]) == 64
::fillbuf[::exit_failure] == 0
::fillbuf[::exit_failure-1] == 128
::version_etc_copyright == orig(::version_etc_copyright)
::program_name == orig(::program_name)
::gengetopt_args_info_purpose == orig(::gengetopt_args_info_purpose)
::gengetopt_args_info_usage == orig(::gengetopt_args_info_usage)
::gengetopt_args_info_description == ::gengetopt_args_info_versiontext
::gengetopt_args_info_description == orig(::gengetopt_args_info_description)
::gengetopt_args_info_description == orig(::gengetopt_args_info_versiontext)

