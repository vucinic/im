===========================================================================
..moveFlexiblePlayer():::ENTER
::crashedPlayers[].start == ::crashedPlayers[].end
::crashedPlayers[].start == ::playerSpace[].playerNodes->start->prev
::crashedPlayers[].start == ::playerSpace[].playerNodes->end->next
::crashedPlayers[].start == ::playerSpace[].guideNodes->start
::crashedPlayers[].start == ::playerSpace[].guideNodes->end
::crashedPlayers[].start == space[].playerNodes->start->prev
::crashedPlayers[].start == space[].playerNodes->end->next
::crashedPlayers[].start == space[].guideNodes->start
::crashedPlayers[].start == space[].guideNodes->end
::playerSpace == space
::playerSpace[] == space[]
::playerSpace[].playerNodes == space[].playerNodes
::playerSpace[].playerNodes[0] == space[].playerNodes[0]
::playerSpace[].playerNodes->start == space[].playerNodes->start
::playerSpace[].playerNodes->start[0] == space[].playerNodes->start[0]
::playerSpace[].playerNodes->start->next == space[].playerNodes->start->next
::playerSpace[].playerNodes->start->next[0] == space[].playerNodes->start->next[0]
::playerSpace[].playerNodes->start->data == space[].playerNodes->start->data
::playerSpace[].playerNodes->end == space[].playerNodes->end
::playerSpace[].playerNodes->end[0] == space[].playerNodes->end[0]
::playerSpace[].playerNodes->end->data == space[].playerNodes->end->data
::playerSpace[].playerNodes->end->prev == space[].playerNodes->end->prev
::playerSpace[].playerNodes->end->prev[0] == space[].playerNodes->end->prev[0]
::playerSpace[].playerMap == space[].playerMap
::playerSpace[].guideNodes == space[].guideNodes
::playerSpace[].guideNodes[0] == space[].guideNodes[0]
::playerSpace[].groundMap == space[].groundMap
::playerSpace[].actionGroup == space[].actionGroup
::playerSpace[].actionGroup[0] == space[].actionGroup[0]
::playerSpace[].actionGroup->numActions == space[].actionGroup->numActions
::players == ::players[::new_input].body.bodyPoints->player
::players[].id == ::players[].type
::players[].id == ::players[].retired
::players[].id == ::players[].impulse[2][0]
::players[].id == ::players[].impulse[4][0]
::players[].id == ::players[].impulse[6][0]
::players[].id == ::players[].impulse[8][0]
::players[].body.visible == ::players[].body.tangible
::input_n == ::input_i
::input_n == size(::crashedPlayers[])
::input_n == size(::playerSpace[])
::input_n == size(::playerSpace[].playerNodes[0])
::input_n == size(::playerSpace[].playerNodes->start[0])
::input_n == size(::playerSpace[].playerNodes->start->next[0])
::input_n == size(::playerSpace[].playerNodes->end[0])
::input_n == size(::playerSpace[].playerNodes->end->prev[0])
::input_n == size(::playerSpace[].guideNodes[0])
::input_n == size(::playerSpace[].actionGroup[0])
::input_n == size(space[])
::input_n == size(space[].playerNodes[0])
::input_n == size(space[].playerNodes->start[0])
::input_n == size(space[].playerNodes->start->next[0])
::input_n == size(space[].playerNodes->end[0])
::input_n == size(space[].playerNodes->end->prev[0])
::input_n == size(space[].guideNodes[0])
::input_n == size(space[].actionGroup[0])
::input_n == ::players[::input_n].body.type
::input_n == ::players[::input_i].body.type
::input_n == ::players[::input_n].body.visible
::input_n == ::players[::input_n-1].body.visible
::input_n == ::players[::input_i].body.visible
::input_n == ::players[::input_i-1].body.visible
::input_n == ::players[::new_input].body.visible
::input_n == ::players[::input_n].body.tangible
::input_n == ::players[::input_n-1].body.tangible
::input_n == ::players[::input_i].body.tangible
::input_n == ::players[::input_i-1].body.tangible
::input_n == ::players[::new_input].body.tangible
::input_n == ::players[::input_n].body.bodyMapsSize
::input_n == ::players[::input_i].body.bodyMapsSize
::input_n == ::players[::input_n].body.bodySize
::input_n == ::players[::input_i].body.bodySize
::input_n == ::players[::input_n-1].direction
::input_n == ::players[::input_i-1].direction
::input_n == ::players[::new_input].direction
::input_n == player[::input_n].body.type
::input_n == player[::input_n-1].body.type
::input_n == player[::input_n].body.visible
::input_n == player[::input_n-1].body.visible
::input_n == player[::input_n].body.tangible
::input_n == player[::input_n-1].body.tangible
::input_n == player[::input_n].body.bodyMapsSize
::input_n == player[::input_n-1].body.bodyMapsSize
::input_n == player[::input_n].body.bodySize
::input_n == player[::input_n-1].body.bodySize
::input_n == player[::input_i].body.type
::input_n == player[::input_i-1].body.type
::input_n == player[::input_i].body.visible
::input_n == player[::input_i-1].body.visible
::input_n == player[::input_i].body.tangible
::input_n == player[::input_i-1].body.tangible
::input_n == player[::input_i].body.bodyMapsSize
::input_n == player[::input_i-1].body.bodyMapsSize
::input_n == player[::input_i].body.bodySize
::input_n == player[::input_i-1].body.bodySize
::input_n == player[::new_input].body.type
::input_n == player[::new_input].body.visible
::input_n == player[::new_input].body.tangible
::input_n == player[::new_input].body.bodyMapsSize
::input_n == player[::new_input].body.bodySize
::new_input == size(::crashedPlayers[])-1
::new_input == size(::playerSpace[])-1
::new_input == size(::playerSpace[].playerNodes[0])-1
::new_input == size(::playerSpace[].playerNodes->start[0])-1
::new_input == size(::playerSpace[].playerNodes->start->next[0])-1
::new_input == size(::playerSpace[].playerNodes->end[0])-1
::new_input == size(::playerSpace[].playerNodes->end->prev[0])-1
::new_input == size(::playerSpace[].guideNodes[0])-1
::new_input == size(::playerSpace[].actionGroup[0])-1
::new_input == size(space[])-1
::new_input == size(space[].playerNodes[0])-1
::new_input == size(space[].playerNodes->start[0])-1
::new_input == size(space[].playerNodes->start->next[0])-1
::new_input == size(space[].playerNodes->end[0])-1
::new_input == size(space[].playerNodes->end->prev[0])-1
::new_input == size(space[].guideNodes[0])-1
::new_input == size(space[].actionGroup[0])-1
::new_input == ::playerSpace[::input_n-1].actionGroup->numActions
::new_input == ::playerSpace[::input_i-1].actionGroup->numActions
::new_input == ::playerSpace[::new_input].actionGroup->numActions
::new_input == ::players[::input_n].id
::new_input == ::players[::input_n-1].id
::new_input == ::players[::input_i].id
::new_input == ::players[::input_i-1].id
::new_input == ::players[::new_input].id
::new_input == ::players[::input_n].type
::new_input == ::players[::input_n-1].type
::new_input == ::players[::input_i].type
::new_input == ::players[::input_i-1].type
::new_input == ::players[::new_input].type
::new_input == ::players[::input_n].retired
::new_input == ::players[::input_n-1].retired
::new_input == ::players[::input_i].retired
::new_input == ::players[::input_i-1].retired
::new_input == ::players[::new_input].retired
::new_input == ::players[::input_n-1].body.type
::new_input == ::players[::input_i-1].body.type
::new_input == ::players[::new_input].body.type
::new_input == ::players[::input_n].body.bodyWidth
::new_input == ::players[::input_i].body.bodyWidth
::new_input == ::players[::input_n].body.bodyHeight
::new_input == ::players[::input_i].body.bodyHeight
::new_input == ::players[::input_n].body.color
::new_input == ::players[::input_i].body.color
::new_input == ::players[::input_n].basePosition.col
::new_input == ::players[::input_i].basePosition.col
::new_input == ::players[::input_n].impulse[0][0]
::new_input == ::players[::input_n-1].impulse[0][0]
::new_input == ::players[::input_i].impulse[0][0]
::new_input == ::players[::input_i-1].impulse[0][0]
::new_input == ::players[::new_input].impulse[0][0]
::new_input == ::players[::input_n].impulse[1][0]
::new_input == ::players[::input_n-1].impulse[1][0]
::new_input == ::players[::input_i].impulse[1][0]
::new_input == ::players[::input_i-1].impulse[1][0]
::new_input == ::players[::new_input].impulse[1][0]
::new_input == ::players[::input_n].impulse[2][0]
::new_input == ::players[::input_n-1].impulse[2][0]
::new_input == ::players[::input_i].impulse[2][0]
::new_input == ::players[::input_i-1].impulse[2][0]
::new_input == ::players[::new_input].impulse[2][0]
::new_input == ::players[::input_n].impulse[3][0]
::new_input == ::players[::input_n-1].impulse[3][0]
::new_input == ::players[::input_i].impulse[3][0]
::new_input == ::players[::input_i-1].impulse[3][0]
::new_input == ::players[::new_input].impulse[3][0]
::new_input == ::players[::input_n].impulse[4][0]
::new_input == ::players[::input_n-1].impulse[4][0]
::new_input == ::players[::input_i].impulse[4][0]
::new_input == ::players[::input_i-1].impulse[4][0]
::new_input == ::players[::new_input].impulse[4][0]
::new_input == ::players[::input_n].impulse[5][0]
::new_input == ::players[::input_n-1].impulse[5][0]
::new_input == ::players[::input_i].impulse[5][0]
::new_input == ::players[::input_i-1].impulse[5][0]
::new_input == ::players[::new_input].impulse[5][0]
::new_input == ::players[::input_n].impulse[6][0]
::new_input == ::players[::input_n-1].impulse[6][0]
::new_input == ::players[::input_i].impulse[6][0]
::new_input == ::players[::input_i-1].impulse[6][0]
::new_input == ::players[::new_input].impulse[6][0]
::new_input == ::players[::input_n].impulse[7][0]
::new_input == ::players[::input_n-1].impulse[7][0]
::new_input == ::players[::input_i].impulse[7][0]
::new_input == ::players[::input_i-1].impulse[7][0]
::new_input == ::players[::new_input].impulse[7][0]
::new_input == ::players[::input_n].impulse[8][0]
::new_input == ::players[::input_n-1].impulse[8][0]
::new_input == ::players[::input_i].impulse[8][0]
::new_input == ::players[::input_i-1].impulse[8][0]
::new_input == ::players[::new_input].impulse[8][0]
::new_input == ::players[::input_n].direction
::new_input == ::players[::input_i].direction
::new_input == ::players[::input_n-1].stepCounter
::new_input == ::players[::input_i-1].stepCounter
::new_input == ::players[::new_input].stepCounter
::new_input == space[::input_n-1].actionGroup->numActions
::new_input == player[::input_n].id
::new_input == player[::input_n-1].id
::new_input == player[::input_n].type
::new_input == player[::input_n-1].type
::new_input == player[::input_n].retired
::new_input == player[::input_n-1].retired
::new_input == player[::input_n].body.bodyWidth
::new_input == player[::input_n-1].body.bodyWidth
::new_input == player[::input_n].body.bodyHeight
::new_input == player[::input_n-1].body.bodyHeight
::new_input == player[::input_n-1].impulse[0][0]
::new_input == player[::input_n].impulse[2][0]
::new_input == player[::input_n-1].impulse[2][0]
::new_input == player[::input_n].impulse[4][0]
::new_input == player[::input_n-1].impulse[4][0]
::new_input == player[::input_n].impulse[6][0]
::new_input == player[::input_n-1].impulse[6][0]
::new_input == player[::input_n].impulse[7][0]
::new_input == player[::input_n-1].impulse[7][0]
::new_input == player[::input_n].impulse[8][0]
::new_input == player[::input_n-1].impulse[8][0]
::new_input == player[::input_n].direction
::new_input == space[::input_i-1].actionGroup->numActions
::new_input == player[::input_i].id
::new_input == player[::input_i-1].id
::new_input == player[::input_i].type
::new_input == player[::input_i-1].type
::new_input == player[::input_i].retired
::new_input == player[::input_i-1].retired
::new_input == player[::input_i].body.bodyWidth
::new_input == player[::input_i-1].body.bodyWidth
::new_input == player[::input_i].body.bodyHeight
::new_input == player[::input_i-1].body.bodyHeight
::new_input == player[::input_i-1].impulse[0][0]
::new_input == player[::input_i].impulse[2][0]
::new_input == player[::input_i-1].impulse[2][0]
::new_input == player[::input_i].impulse[4][0]
::new_input == player[::input_i-1].impulse[4][0]
::new_input == player[::input_i].impulse[6][0]
::new_input == player[::input_i-1].impulse[6][0]
::new_input == player[::input_i].impulse[7][0]
::new_input == player[::input_i-1].impulse[7][0]
::new_input == player[::input_i].impulse[8][0]
::new_input == player[::input_i-1].impulse[8][0]
::new_input == player[::input_i].direction
::new_input == space[::new_input].actionGroup->numActions
::new_input == player[::new_input].id
::new_input == player[::new_input].type
::new_input == player[::new_input].retired
::new_input == player[::new_input].body.bodyWidth
::new_input == player[::new_input].body.bodyHeight
::new_input == player[::new_input].impulse[0][0]
::new_input == player[::new_input].impulse[2][0]
::new_input == player[::new_input].impulse[4][0]
::new_input == player[::new_input].impulse[6][0]
::new_input == player[::new_input].impulse[7][0]
::new_input == player[::new_input].impulse[8][0]
player == player[::input_n-1].body.bodyPoints->player
player == player[::input_i-1].body.bodyPoints->player
player == player[::new_input].body.bodyPoints->player
player[].id == player[].type
player[].id == player[].retired
player[].id == player[].impulse[2][0]
player[].id == player[].impulse[4][0]
player[].id == player[].impulse[6][0]
player[].id == player[].impulse[8][0]
player[].body.visible == player[].body.tangible
player[].body.visible == player[].body.bodyMapsSize
size(::players[]) == size(::players[].body.bodyPoints[0])
size(::players[]) == size(::players[].body.bodyPoints->player[0])
size(::players[]) == size(::players[].impulse[0])
size(::players[]) == size(::players[].impulse[0][0])
size(::players[]) == size(::players[].impulse[1])
size(::players[]) == size(::players[].impulse[1][0])
size(::players[]) == size(::players[].impulse[2])
size(::players[]) == size(::players[].impulse[2][0])
size(::players[]) == size(::players[].impulse[3])
size(::players[]) == size(::players[].impulse[3][0])
size(::players[]) == size(::players[].impulse[4])
size(::players[]) == size(::players[].impulse[4][0])
size(::players[]) == size(::players[].impulse[5])
size(::players[]) == size(::players[].impulse[5][0])
size(::players[]) == size(::players[].impulse[6])
size(::players[]) == size(::players[].impulse[6][0])
size(::players[]) == size(::players[].impulse[7])
size(::players[]) == size(::players[].impulse[7][0])
size(::players[]) == size(::players[].impulse[8])
size(::players[]) == size(::players[].impulse[8][0])
size(::players[]) == size(::players[].magnetos[0])
size(player[]) == size(player[].body.bodyPoints[0])
size(player[]) == size(player[].body.bodyPoints->player[0])
size(player[]) == size(player[].impulse[0])
size(player[]) == size(player[].impulse[0][0])
size(player[]) == size(player[].impulse[1])
size(player[]) == size(player[].impulse[1][0])
size(player[]) == size(player[].impulse[2])
size(player[]) == size(player[].impulse[2][0])
size(player[]) == size(player[].impulse[3])
size(player[]) == size(player[].impulse[3][0])
size(player[]) == size(player[].impulse[4])
size(player[]) == size(player[].impulse[4][0])
size(player[]) == size(player[].impulse[5])
size(player[]) == size(player[].impulse[5][0])
size(player[]) == size(player[].impulse[6])
size(player[]) == size(player[].impulse[6][0])
size(player[]) == size(player[].impulse[7])
size(player[]) == size(player[].impulse[7][0])
size(player[]) == size(player[].impulse[8])
size(player[]) == size(player[].impulse[8][0])
size(player[]) == size(player[].magnetos[0])
::crashedPlayers[::input_n-1] == ::crashedPlayers[::new_input]
::crashedPlayers[::input_i-1] == ::crashedPlayers[::new_input]
::crashedPlayers[::input_n-1].start == ::crashedPlayers[::new_input].start
::crashedPlayers[::input_i-1].start == ::crashedPlayers[::new_input].start
::crashedPlayers[::new_input].start == ::crashedPlayers[::input_n-1].end
::crashedPlayers[::new_input].start == ::crashedPlayers[::input_i-1].end
::crashedPlayers[::new_input].start == ::playerSpace[::input_n-1].playerNodes->start->prev
::crashedPlayers[::new_input].start == ::playerSpace[::input_i-1].playerNodes->start->prev
::crashedPlayers[::new_input].start == ::playerSpace[::input_n-1].playerNodes->end->next
::crashedPlayers[::new_input].start == ::playerSpace[::input_i-1].playerNodes->end->next
::crashedPlayers[::new_input].start == ::playerSpace[::input_n-1].guideNodes->start
::crashedPlayers[::new_input].start == ::playerSpace[::input_i-1].guideNodes->start
::crashedPlayers[::new_input].start == ::playerSpace[::input_n-1].guideNodes->end
::crashedPlayers[::new_input].start == ::playerSpace[::input_i-1].guideNodes->end
::crashedPlayers[::new_input].start == space[::input_n-1].playerNodes->start->prev
::crashedPlayers[::new_input].start == space[::input_n-1].playerNodes->end->next
::crashedPlayers[::new_input].start == space[::input_n-1].guideNodes->start
::crashedPlayers[::new_input].start == space[::input_n-1].guideNodes->end
::crashedPlayers[::new_input].start == space[::input_i-1].playerNodes->start->prev
::crashedPlayers[::new_input].start == space[::input_i-1].playerNodes->end->next
::crashedPlayers[::new_input].start == space[::input_i-1].guideNodes->start
::crashedPlayers[::new_input].start == space[::input_i-1].guideNodes->end
::playerSpace[::input_n-1] == ::playerSpace[::new_input]
::playerSpace[::input_i-1] == ::playerSpace[::new_input]
::playerSpace[::new_input] == space[::input_n-1]
::playerSpace[::new_input] == space[::input_i-1]
::playerSpace[::input_n-1].playerNodes == ::playerSpace[::new_input].playerNodes
::playerSpace[::input_i-1].playerNodes == ::playerSpace[::new_input].playerNodes
::playerSpace[::new_input].playerNodes == space[::input_n-1].playerNodes
::playerSpace[::new_input].playerNodes == space[::input_i-1].playerNodes
::playerSpace[::input_n-1].playerNodes[0] == ::playerSpace[::new_input].playerNodes[0]
::playerSpace[::input_i-1].playerNodes[0] == ::playerSpace[::new_input].playerNodes[0]
::playerSpace[::new_input].playerNodes[0] == space[::input_n-1].playerNodes[0]
::playerSpace[::new_input].playerNodes[0] == space[::input_i-1].playerNodes[0]
::playerSpace[::input_n-1].playerNodes->start == ::playerSpace[::new_input].playerNodes->start
::playerSpace[::input_i-1].playerNodes->start == ::playerSpace[::new_input].playerNodes->start
::playerSpace[::new_input].playerNodes->start == space[::input_n-1].playerNodes->start
::playerSpace[::new_input].playerNodes->start == space[::input_i-1].playerNodes->start
::playerSpace[::input_n-1].playerNodes->start[0] == ::playerSpace[::new_input].playerNodes->start[0]
::playerSpace[::input_i-1].playerNodes->start[0] == ::playerSpace[::new_input].playerNodes->start[0]
::playerSpace[::new_input].playerNodes->start[0] == space[::input_n-1].playerNodes->start[0]
::playerSpace[::new_input].playerNodes->start[0] == space[::input_i-1].playerNodes->start[0]
::playerSpace[::input_n-1].playerNodes->start->next == ::playerSpace[::new_input].playerNodes->start->next
::playerSpace[::input_i-1].playerNodes->start->next == ::playerSpace[::new_input].playerNodes->start->next
::playerSpace[::new_input].playerNodes->start->next == space[::input_n-1].playerNodes->start->next
::playerSpace[::new_input].playerNodes->start->next == space[::input_i-1].playerNodes->start->next
::playerSpace[::input_n-1].playerNodes->start->next[0] == ::playerSpace[::new_input].playerNodes->start->next[0]
::playerSpace[::input_i-1].playerNodes->start->next[0] == ::playerSpace[::new_input].playerNodes->start->next[0]
::playerSpace[::new_input].playerNodes->start->next[0] == space[::input_n-1].playerNodes->start->next[0]
::playerSpace[::new_input].playerNodes->start->next[0] == space[::input_i-1].playerNodes->start->next[0]
::playerSpace[::input_n-1].playerNodes->start->data == ::playerSpace[::new_input].playerNodes->start->data
::playerSpace[::input_i-1].playerNodes->start->data == ::playerSpace[::new_input].playerNodes->start->data
::playerSpace[::new_input].playerNodes->start->data == space[::input_n-1].playerNodes->start->data
::playerSpace[::new_input].playerNodes->start->data == space[::input_i-1].playerNodes->start->data
::playerSpace[::input_n-1].playerNodes->end == ::playerSpace[::new_input].playerNodes->end
::playerSpace[::input_i-1].playerNodes->end == ::playerSpace[::new_input].playerNodes->end
::playerSpace[::new_input].playerNodes->end == space[::input_n-1].playerNodes->end
::playerSpace[::new_input].playerNodes->end == space[::input_i-1].playerNodes->end
::playerSpace[::input_n-1].playerNodes->end[0] == ::playerSpace[::new_input].playerNodes->end[0]
::playerSpace[::input_i-1].playerNodes->end[0] == ::playerSpace[::new_input].playerNodes->end[0]
::playerSpace[::new_input].playerNodes->end[0] == space[::input_n-1].playerNodes->end[0]
::playerSpace[::new_input].playerNodes->end[0] == space[::input_i-1].playerNodes->end[0]
::playerSpace[::input_n-1].playerNodes->end->data == ::playerSpace[::new_input].playerNodes->end->data
::playerSpace[::input_i-1].playerNodes->end->data == ::playerSpace[::new_input].playerNodes->end->data
::playerSpace[::new_input].playerNodes->end->data == space[::input_n-1].playerNodes->end->data
::playerSpace[::new_input].playerNodes->end->data == space[::input_i-1].playerNodes->end->data
::playerSpace[::input_n-1].playerNodes->end->prev == ::playerSpace[::new_input].playerNodes->end->prev
::playerSpace[::input_i-1].playerNodes->end->prev == ::playerSpace[::new_input].playerNodes->end->prev
::playerSpace[::new_input].playerNodes->end->prev == space[::input_n-1].playerNodes->end->prev
::playerSpace[::new_input].playerNodes->end->prev == space[::input_i-1].playerNodes->end->prev
::playerSpace[::input_n-1].playerNodes->end->prev[0] == ::playerSpace[::new_input].playerNodes->end->prev[0]
::playerSpace[::input_i-1].playerNodes->end->prev[0] == ::playerSpace[::new_input].playerNodes->end->prev[0]
::playerSpace[::new_input].playerNodes->end->prev[0] == space[::input_n-1].playerNodes->end->prev[0]
::playerSpace[::new_input].playerNodes->end->prev[0] == space[::input_i-1].playerNodes->end->prev[0]
::playerSpace[::input_n-1].playerMap == ::playerSpace[::new_input].playerMap
::playerSpace[::input_i-1].playerMap == ::playerSpace[::new_input].playerMap
::playerSpace[::new_input].playerMap == space[::input_n-1].playerMap
::playerSpace[::new_input].playerMap == space[::input_i-1].playerMap
::playerSpace[::input_n-1].guideNodes == ::playerSpace[::new_input].guideNodes
::playerSpace[::input_i-1].guideNodes == ::playerSpace[::new_input].guideNodes
::playerSpace[::new_input].guideNodes == space[::input_n-1].guideNodes
::playerSpace[::new_input].guideNodes == space[::input_i-1].guideNodes
::playerSpace[::input_n-1].guideNodes[0] == ::playerSpace[::new_input].guideNodes[0]
::playerSpace[::input_i-1].guideNodes[0] == ::playerSpace[::new_input].guideNodes[0]
::playerSpace[::new_input].guideNodes[0] == space[::input_n-1].guideNodes[0]
::playerSpace[::new_input].guideNodes[0] == space[::input_i-1].guideNodes[0]
::playerSpace[::input_n-1].groundMap == ::playerSpace[::new_input].groundMap
::playerSpace[::input_i-1].groundMap == ::playerSpace[::new_input].groundMap
::playerSpace[::new_input].groundMap == space[::input_n-1].groundMap
::playerSpace[::new_input].groundMap == space[::input_i-1].groundMap
::playerSpace[::input_n-1].actionGroup == ::playerSpace[::new_input].actionGroup
::playerSpace[::input_i-1].actionGroup == ::playerSpace[::new_input].actionGroup
::playerSpace[::new_input].actionGroup == space[::input_n-1].actionGroup
::playerSpace[::new_input].actionGroup == space[::input_i-1].actionGroup
::playerSpace[::input_n-1].actionGroup[0] == ::playerSpace[::new_input].actionGroup[0]
::playerSpace[::input_i-1].actionGroup[0] == ::playerSpace[::new_input].actionGroup[0]
::playerSpace[::new_input].actionGroup[0] == space[::input_n-1].actionGroup[0]
::playerSpace[::new_input].actionGroup[0] == space[::input_i-1].actionGroup[0]
::players[::input_n] == ::players[::input_n].body.bodyPoints->player[0]
::players[::input_n] == ::players[::input_i].body.bodyPoints->player[0]
::players[::input_n-1] == ::players[::new_input]
::players[::input_i-1] == ::players[::new_input]
::players[::new_input] == ::players[::input_n-1].body.bodyPoints->player[0]
::players[::new_input] == ::players[::input_i-1].body.bodyPoints->player[0]
::players[::new_input] == ::players[::new_input].body.bodyPoints->player[0]
::players[::input_n-1].body == ::players[::new_input].body
::players[::input_i-1].body == ::players[::new_input].body
::players[::input_n-1].body.bodyPoints == ::players[::new_input].body.bodyPoints
::players[::input_i-1].body.bodyPoints == ::players[::new_input].body.bodyPoints
::players[::input_n-1].body.bodyPoints[0] == ::players[::new_input].body.bodyPoints[0]
::players[::input_i-1].body.bodyPoints[0] == ::players[::new_input].body.bodyPoints[0]
::players[::input_n-1].body.bodyPoints->position == ::players[::new_input].body.bodyPoints->position
::players[::input_i-1].body.bodyPoints->position == ::players[::new_input].body.bodyPoints->position
::players[::input_n-1].body.bodyPoints->player == ::players[::new_input].body.bodyPoints->player
::players[::input_i-1].body.bodyPoints->player == ::players[::new_input].body.bodyPoints->player
::players[::input_n-1].body.bodyPoints->aspect == ::players[::new_input].body.bodyPoints->aspect
::players[::input_i-1].body.bodyPoints->aspect == ::players[::new_input].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMaps == ::players[::new_input].body.bodyMaps
::players[::input_i-1].body.bodyMaps == ::players[::new_input].body.bodyMaps
::players[::input_n-1].body.bodyMapsSize == ::players[::new_input].body.bodyMapsSize
::players[::input_i-1].body.bodyMapsSize == ::players[::new_input].body.bodyMapsSize
::players[::new_input].body.bodyMapsSize == ::players[::input_n-1].body.bodyHeight
::players[::new_input].body.bodyMapsSize == ::players[::input_i-1].body.bodyHeight
::players[::new_input].body.bodyMapsSize == ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodySize == ::players[::new_input].body.bodySize
::players[::input_i-1].body.bodySize == ::players[::new_input].body.bodySize
::players[::input_n-1].body.bodyWidth == ::players[::new_input].body.bodyWidth
::players[::input_i-1].body.bodyWidth == ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.color == ::players[::new_input].body.color
::players[::input_i-1].body.color == ::players[::new_input].body.color
::players[::input_n-1].basePosition == ::players[::new_input].basePosition
::players[::input_i-1].basePosition == ::players[::new_input].basePosition
::players[::input_n-1].basePosition.col == ::players[::new_input].basePosition.col
::players[::input_i-1].basePosition.col == ::players[::new_input].basePosition.col
::players[::input_n-1].basePosition.row == ::players[::input_n].stepCounter
::players[::input_i-1].basePosition.row == ::players[::input_n].stepCounter
::players[::new_input].basePosition.row == ::players[::input_n].stepCounter
::players[::input_n-1].impulse[0] == ::players[::new_input].impulse[0]
::players[::input_i-1].impulse[0] == ::players[::new_input].impulse[0]
::players[::input_n-1].impulse[1] == ::players[::new_input].impulse[1]
::players[::input_i-1].impulse[1] == ::players[::new_input].impulse[1]
::players[::input_n-1].impulse[2] == ::players[::new_input].impulse[2]
::players[::input_i-1].impulse[2] == ::players[::new_input].impulse[2]
::players[::input_n-1].impulse[3] == ::players[::new_input].impulse[3]
::players[::input_i-1].impulse[3] == ::players[::new_input].impulse[3]
::players[::input_n-1].impulse[4] == ::players[::new_input].impulse[4]
::players[::input_i-1].impulse[4] == ::players[::new_input].impulse[4]
::players[::input_n-1].impulse[5] == ::players[::new_input].impulse[5]
::players[::input_i-1].impulse[5] == ::players[::new_input].impulse[5]
::players[::input_n-1].impulse[6] == ::players[::new_input].impulse[6]
::players[::input_i-1].impulse[6] == ::players[::new_input].impulse[6]
::players[::input_n-1].impulse[7] == ::players[::new_input].impulse[7]
::players[::input_i-1].impulse[7] == ::players[::new_input].impulse[7]
::players[::input_n-1].impulse[8] == ::players[::new_input].impulse[8]
::players[::input_i-1].impulse[8] == ::players[::new_input].impulse[8]
::players[::input_n-1].magnetos == ::players[::new_input].magnetos
::players[::input_i-1].magnetos == ::players[::new_input].magnetos
::players[::input_n-1].magnetos[0] == ::players[::new_input].magnetos[0]
::players[::input_i-1].magnetos[0] == ::players[::new_input].magnetos[0]
::players[::input_n].pilot == player[::input_n].pilot
::players[::input_n].pilot == player[::input_n-1].pilot
::players[::input_n].pilot == player[::input_i].pilot
::players[::input_n].pilot == player[::input_i-1].pilot
::players[::input_n].pilot == player[::new_input].pilot
::players[::input_n-1].pilot == ::players[::new_input].pilot
::players[::input_i-1].pilot == ::players[::new_input].pilot
::players[::input_n-1].onCrash == ::players[::new_input].onCrash
::players[::input_i-1].onCrash == ::players[::new_input].onCrash
::players[::input_n].onPushed == ::players[::input_n-1].onPushed
::players[::input_n].onPushed == ::players[::input_i-1].onPushed
::players[::input_n].onPushed == ::players[::new_input].onPushed
::players[::input_n].onPushed == player[::input_n].onPushed
::players[::input_n].onPushed == player[::input_n-1].onPushed
::players[::input_n].onPushed == player[::input_i].onPushed
::players[::input_n].onPushed == player[::input_i-1].onPushed
::players[::input_n].onPushed == player[::new_input].onPushed
player[::input_n] == player[::input_n].body.bodyPoints->player[0]
player[::input_n] == player[::input_i].body.bodyPoints->player[0]
player[::input_n-1] == player[::new_input]
player[::input_n-1].body == player[::new_input].body
player[::input_n-1].body.bodyPoints == player[::new_input].body.bodyPoints
player[::input_n-1].body.bodyPoints[0] == player[::new_input].body.bodyPoints[0]
player[::input_n-1].body.bodyPoints->position == player[::new_input].body.bodyPoints->position
player[::input_n-1].body.bodyPoints->player[0] == player[::new_input]
player[::input_n-1].body.bodyPoints->aspect == player[::new_input].body.bodyPoints->aspect
player[::input_n-1].body.bodyMaps == player[::new_input].body.bodyMaps
player[::input_n-1].body.color == player[::new_input].body.color
player[::input_n-1].basePosition == player[::new_input].basePosition
player[::input_n-1].basePosition.col == player[::new_input].basePosition.col
player[::input_n-1].basePosition.row == player[::new_input].basePosition.row
player[::input_n-1].impulse[0] == player[::new_input].impulse[0]
player[::input_n].impulse[0][0] == player[::input_n-1].impulse[1][0]
player[::input_n].impulse[0][0] == player[::input_i-1].impulse[1][0]
player[::input_n].impulse[0][0] == player[::new_input].impulse[1][0]
player[::input_n-1].impulse[1] == player[::new_input].impulse[1]
player[::input_n-1].impulse[2] == player[::new_input].impulse[2]
player[::input_n-1].impulse[3] == player[::new_input].impulse[3]
player[::input_n-1].impulse[3][0] == player[::new_input].impulse[3][0]
player[::input_n-1].impulse[4] == player[::new_input].impulse[4]
player[::input_n-1].impulse[5] == player[::new_input].impulse[5]
player[::input_n-1].impulse[5][0] == player[::new_input].impulse[5][0]
player[::input_n-1].impulse[6] == player[::new_input].impulse[6]
player[::input_n-1].impulse[7] == player[::new_input].impulse[7]
player[::input_n-1].impulse[8] == player[::new_input].impulse[8]
player[::input_n-1].direction == player[::new_input].direction
player[::input_n-1].magnetos == player[::new_input].magnetos
player[::input_n-1].magnetos[0] == player[::new_input].magnetos[0]
player[::input_n-1].stepCounter == player[::new_input].stepCounter
player[::input_n-1].onCrash == player[::new_input].onCrash
player[::input_i-1] == player[::new_input]
player[::input_i-1].body == player[::new_input].body
player[::input_i-1].body.bodyPoints == player[::new_input].body.bodyPoints
player[::input_i-1].body.bodyPoints[0] == player[::new_input].body.bodyPoints[0]
player[::input_i-1].body.bodyPoints->position == player[::new_input].body.bodyPoints->position
player[::input_i-1].body.bodyPoints->player[0] == player[::new_input]
player[::input_i-1].body.bodyPoints->aspect == player[::new_input].body.bodyPoints->aspect
player[::input_i-1].body.bodyMaps == player[::new_input].body.bodyMaps
player[::input_i-1].body.color == player[::new_input].body.color
player[::input_i-1].basePosition == player[::new_input].basePosition
player[::input_i-1].basePosition.col == player[::new_input].basePosition.col
player[::input_i-1].basePosition.row == player[::new_input].basePosition.row
player[::input_i-1].impulse[0] == player[::new_input].impulse[0]
player[::input_i-1].impulse[1] == player[::new_input].impulse[1]
player[::input_i-1].impulse[2] == player[::new_input].impulse[2]
player[::input_i-1].impulse[3] == player[::new_input].impulse[3]
player[::input_i-1].impulse[3][0] == player[::new_input].impulse[3][0]
player[::input_i-1].impulse[4] == player[::new_input].impulse[4]
player[::input_i-1].impulse[5] == player[::new_input].impulse[5]
player[::input_i-1].impulse[5][0] == player[::new_input].impulse[5][0]
player[::input_i-1].impulse[6] == player[::new_input].impulse[6]
player[::input_i-1].impulse[7] == player[::new_input].impulse[7]
player[::input_i-1].impulse[8] == player[::new_input].impulse[8]
player[::input_i-1].direction == player[::new_input].direction
player[::input_i-1].magnetos == player[::new_input].magnetos
player[::input_i-1].magnetos[0] == player[::new_input].magnetos[0]
player[::input_i-1].stepCounter == player[::new_input].stepCounter
player[::input_i-1].onCrash == player[::new_input].onCrash
player[::new_input] == player[::new_input].body.bodyPoints->player[0]
::crashedPlayers has only one value
::crashedPlayers[] contains no nulls and has only one value, of length 1
::crashedPlayers[] elements has only one value
::crashedPlayers[].start == [null]
::crashedPlayers[].start elements == null
::playerSpace has only one value
::playerSpace[] contains no nulls and has only one value, of length 1
::playerSpace[] elements has only one value
::playerSpace[].playerNodes contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes elements has only one value
::playerSpace[].playerNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes[0] elements has only one value
::playerSpace[].playerNodes->start contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start elements has only one value
::playerSpace[].playerNodes->start[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start[0] elements has only one value
::playerSpace[].playerNodes->start->next contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next elements has only one value
::playerSpace[].playerNodes->start->next[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next[0] elements has only one value
::playerSpace[].playerNodes->start->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->data elements has only one value
::playerSpace[].playerNodes->end contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end elements has only one value
::playerSpace[].playerNodes->end[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end[0] elements has only one value
::playerSpace[].playerNodes->end->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->data elements has only one value
::playerSpace[].playerNodes->end->prev contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->prev elements has only one value
::playerSpace[].playerNodes->end->prev[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->prev[0] elements has only one value
::playerSpace[].playerMap contains no nulls and has only one value, of length 1
::playerSpace[].playerMap elements has only one value
::playerSpace[].guideNodes contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes elements has only one value
::playerSpace[].guideNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes[0] elements has only one value
::playerSpace[].groundMap contains no nulls and has only one value, of length 1
::playerSpace[].groundMap elements has only one value
::playerSpace[].actionGroup contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup elements has only one value
::playerSpace[].actionGroup[0] contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup[0] elements has only one value
::playerSpace[].actionGroup->numActions == [0]
::playerSpace[].actionGroup->numActions elements == 0
::players has only one value
::players[] contains no nulls and has only one value, of length 100
::players[].id == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].id elements == 0
::players[].body contains no nulls and has only one value, of length 100
::players[].body.type == [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.type elements one of { 0, 1 }
::players[].body.visible == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.visible elements one of { 0, 1 }
::players[].body.bodyPoints contains no nulls and has only one value, of length 100
::players[].body.bodyPoints[0] contains no nulls and has only one value, of length 100
::players[].body.bodyPoints->position contains no nulls and has only one value, of length 100
::players[].body.bodyPoints->player has only one value, of length 100
::players[].body.bodyPoints->player[0] has only one value, of length 100
::players[].body.bodyPoints->aspect == [46, 35, 35, 35, 35, 35, 86, 86, 86, 86, 86, 88, 91, 91, 91, 91, 91, 91, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyPoints->aspect elements >= 0
::players[].body.bodyMaps contains no nulls and has only one value, of length 100
::players[].body.bodyMapsSize == [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyMapsSize elements one of { 0, 1, 4 }
::players[].body.bodySize == [28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodySize elements >= 0
::players[].body.bodyWidth == [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyWidth elements one of { 0, 8, 14 }
::players[].body.bodyHeight == [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyHeight elements one of { 0, 4, 6 }
::players[].body.color == [3, 0, 1, 2, 3, 4, 0, 2, 4, 6, 8, 2, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.color elements >= 0
::players[].basePosition contains no nulls and has only one value, of length 100
::players[].basePosition.col elements >= 0
::players[].basePosition.row one of { [9, 10, 11, 12, 13, 13, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 10, 11, 12, 13, 13, 0, 2, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 10, 11, 12, 13, 14, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].basePosition.row elements >= 0
::players[].impulse[0] contains no nulls and has only one value, of length 100
::players[].impulse[0][0] elements one of { 0, 1 }
::players[].impulse[0][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[1] contains no nulls and has only one value, of length 100
::players[].impulse[1][0] elements one of { 0, 1, 5 }
::players[].impulse[1][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[2] contains no nulls and has only one value, of length 100
::players[].impulse[3] contains no nulls and has only one value, of length 100
::players[].impulse[3][0] elements one of { 0, 1 }
::players[].impulse[4] contains no nulls and has only one value, of length 100
::players[].impulse[5] contains no nulls and has only one value, of length 100
::players[].impulse[5][0] elements one of { 0, 1 }
::players[].impulse[5][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[6] contains no nulls and has only one value, of length 100
::players[].impulse[7] contains no nulls and has only one value, of length 100
::players[].impulse[7][0] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].impulse[7][0] elements one of { 0, 1 }
::players[].impulse[8] contains no nulls and has only one value, of length 100
::players[].direction elements >= 0
::players[].magnetos has only one value, of length 100
::players[].magnetos[0] has only one value, of length 100
::players[].stepCounter == [0, 9, 7, 7, 4, 8, 9, 1, 8, 7, 1, 4, 8, 2, 10, 4, 2, 9, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].stepCounter elements >= 0
::players[].pilot has only one value, of length 100
::players[].onCrash has only one value, of length 100
::players[].onPushed has only one value, of length 100
::snakeBodyMap has only one value
::trainBodyMap has only one value
::giantBodyMap has only one value
::squareBodyMap has only one value
::circleBodyMap has only one value
::input_n == 1
::input_key == "k"
::trace_pos == "(40, 10) -> (40, 9)\n"
player[].id elements == 0
player[].body.type elements one of { 0, 1 }
player[].body.visible elements one of { 0, 1 }
player[].body.bodyPoints->aspect elements >= 0
player[].body.bodySize elements >= 0
player[].body.bodyWidth elements one of { 0, 8, 14 }
player[].body.bodyHeight elements one of { 0, 4, 6 }
player[].body.color elements >= 0
player[].basePosition.col elements >= 0
player[].basePosition.row elements >= 0
player[].impulse[0][0] elements one of { 0, 1 }
player[].impulse[1][0] elements one of { 0, 1, 5 }
player[].impulse[3][0] elements one of { 0, 1 }
player[].impulse[5][0] elements one of { 0, 1 }
player[].impulse[7][0] elements one of { 0, 1 }
player[].direction elements >= 0
player[].stepCounter elements >= 0
size(::players[]) == 100
::players[::input_n] has only one value
::players[::new_input] has only one value
::players[::input_n].body has only one value
::players[::new_input].body has only one value
::players[::input_n].body.bodyPoints has only one value
::players[::new_input].body.bodyPoints has only one value
::players[::input_n].body.bodyPoints[0] has only one value
::players[::new_input].body.bodyPoints[0] has only one value
::players[::input_n].body.bodyPoints->position has only one value
::players[::new_input].body.bodyPoints->position has only one value
::players[::input_n].body.bodyPoints->player has only one value
::players[::new_input].body.bodyPoints->player has only one value
::players[::input_n].body.bodyPoints->aspect == 35
::players[::new_input].body.bodyPoints->aspect == 46
::players[::input_n].body.bodyMaps has only one value
::players[::new_input].body.bodyMaps has only one value
::players[::new_input].body.bodyMapsSize == 4
::players[::new_input].body.bodySize == 28
::players[::new_input].body.bodyWidth == 8
::players[::new_input].body.color == 3
::players[::input_n].basePosition has only one value
::players[::new_input].basePosition has only one value
::players[::new_input].basePosition.col == 40
::players[::input_n].basePosition.row == 10
::players[::input_n].impulse[0] has only one value
::players[::new_input].impulse[0] has only one value
::players[::input_n].impulse[1] has only one value
::players[::new_input].impulse[1] has only one value
::players[::input_n].impulse[2] has only one value
::players[::new_input].impulse[2] has only one value
::players[::input_n].impulse[3] has only one value
::players[::new_input].impulse[3] has only one value
::players[::input_n].impulse[4] has only one value
::players[::new_input].impulse[4] has only one value
::players[::input_n].impulse[5] has only one value
::players[::new_input].impulse[5] has only one value
::players[::input_n].impulse[6] has only one value
::players[::new_input].impulse[6] has only one value
::players[::input_n].impulse[7] has only one value
::players[::new_input].impulse[7] has only one value
::players[::input_n].impulse[8] has only one value
::players[::new_input].impulse[8] has only one value
::players[::input_n].magnetos has only one value
::players[::new_input].magnetos has only one value
::players[::input_n].magnetos[0] has only one value
::players[::new_input].magnetos[0] has only one value
::players[::input_n].stepCounter == 9
::players[::input_n].pilot has only one value
::players[::new_input].pilot has only one value
::players[::input_n].onCrash == null
::players[::new_input].onCrash has only one value
::players[::input_n].onPushed has only one value
player[::input_n].body.bodyPoints->aspect one of { 35, 86 }
player[::input_n].impulse[1][0] one of { 0, 1 }
player[::new_input].body.bodyPoints->aspect one of { 35, 86 }
player[::new_input].direction one of { 1, 3, 5 }
::crashedPlayers[] elements == ::crashedPlayers[::new_input]
::crashedPlayers[].start elements == ::crashedPlayers[::new_input].start
::playerSpace[] elements == ::playerSpace[::new_input]
::playerSpace[].playerNodes elements == ::playerSpace[::new_input].playerNodes
::playerSpace[].playerNodes[0] elements == ::playerSpace[::new_input].playerNodes[0]
::playerSpace[].playerNodes->start elements == ::playerSpace[::new_input].playerNodes->start
::playerSpace[].playerNodes->start[0] elements == ::playerSpace[::new_input].playerNodes->start[0]
::playerSpace[].playerNodes->start->next elements == ::playerSpace[::new_input].playerNodes->start->next
::playerSpace[].playerNodes->start->next[0] elements == ::playerSpace[::new_input].playerNodes->start->next[0]
::playerSpace[].playerNodes->start->data elements == ::playerSpace[::new_input].playerNodes->start->data
::playerSpace[].playerNodes->end elements == ::playerSpace[::new_input].playerNodes->end
::playerSpace[].playerNodes->end[0] elements == ::playerSpace[::new_input].playerNodes->end[0]
::playerSpace[].playerNodes->end->data elements == ::playerSpace[::new_input].playerNodes->end->data
::playerSpace[].playerNodes->end->prev elements == ::playerSpace[::new_input].playerNodes->end->prev
::playerSpace[].playerNodes->end->prev[0] elements == ::playerSpace[::new_input].playerNodes->end->prev[0]
::playerSpace[].playerMap elements == ::playerSpace[::new_input].playerMap
::playerSpace[].guideNodes elements == ::playerSpace[::new_input].guideNodes
::playerSpace[].guideNodes[0] elements == ::playerSpace[::new_input].guideNodes[0]
::playerSpace[].groundMap elements == ::playerSpace[::new_input].groundMap
::playerSpace[].actionGroup elements == ::playerSpace[::new_input].actionGroup
::playerSpace[].actionGroup[0] elements == ::playerSpace[::new_input].actionGroup[0]
::playerSpace[].actionGroup->numActions elements == ::new_input
::players in ::players[].body.bodyPoints->player
player[::input_n] in ::players[]
player[::new_input] in ::players[]
::players[].id elements == ::new_input
player[::input_n].body in ::players[].body
player[::new_input].body in ::players[].body
player[::input_n].impulse[0][0] in ::players[].body.type
player[::input_n].impulse[1][0] in ::players[].body.type
player[::input_n].impulse[3][0] in ::players[].body.type
player[::input_n].impulse[5][0] in ::players[].body.type
player[::new_input].impulse[3][0] in ::players[].body.type
player[::new_input].impulse[5][0] in ::players[].body.type
::new_input in ::players[].body.visible
player[::input_n].impulse[0][0] in ::players[].body.visible
player[::input_n].impulse[1][0] in ::players[].body.visible
player[::input_n].impulse[3][0] in ::players[].body.visible
player[::input_n].impulse[5][0] in ::players[].body.visible
player[::new_input].impulse[3][0] in ::players[].body.visible
player[::new_input].impulse[5][0] in ::players[].body.visible
player[::input_n].body.bodyPoints in ::players[].body.bodyPoints
player[::new_input].body.bodyPoints in ::players[].body.bodyPoints
player[::input_n].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
player[::new_input].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
::players[].body.bodyPoints->position - ::players[].basePosition + 7304 == 0
player[::input_n].body.bodyPoints->position in ::players[].body.bodyPoints->position
player[::new_input].body.bodyPoints->position in ::players[].body.bodyPoints->position
player in ::players[].body.bodyPoints->player
player[::input_n].body.bodyPoints->player in ::players[].body.bodyPoints->player
player[::input_n] in ::players[].body.bodyPoints->player[0]
player[::new_input] in ::players[].body.bodyPoints->player[0]
::new_input in ::players[].body.bodyPoints->aspect
player[::input_n].body.bodyPoints->aspect in ::players[].body.bodyPoints->aspect
player[::new_input].body.bodyPoints->aspect in ::players[].body.bodyPoints->aspect
player[::input_n].body.bodyMaps in ::players[].body.bodyMaps
player[::new_input].body.bodyMaps in ::players[].body.bodyMaps
::new_input in ::players[].body.bodyMapsSize
player[::input_n].impulse[0][0] in ::players[].body.bodyMapsSize
player[::input_n].impulse[1][0] in ::players[].body.bodyMapsSize
player[::input_n].impulse[3][0] in ::players[].body.bodyMapsSize
player[::input_n].impulse[5][0] in ::players[].body.bodyMapsSize
player[::new_input].impulse[3][0] in ::players[].body.bodyMapsSize
player[::new_input].impulse[5][0] in ::players[].body.bodyMapsSize
::new_input in ::players[].body.bodySize
player[::input_n].impulse[0][0] in ::players[].body.bodySize
player[::input_n].impulse[1][0] in ::players[].body.bodySize
player[::input_n].impulse[3][0] in ::players[].body.bodySize
player[::input_n].impulse[5][0] in ::players[].body.bodySize
player[::new_input].impulse[3][0] in ::players[].body.bodySize
player[::new_input].impulse[5][0] in ::players[].body.bodySize
::input_n in ::players[].body.color
::players[::new_input].body.bodyMapsSize in ::players[].body.color
::players[::new_input].body.bodyWidth in ::players[].body.color
player[::input_n].body.color in ::players[].body.color
player[::input_n].impulse[0][0] in ::players[].body.color
player[::input_n].impulse[1][0] in ::players[].body.color
player[::input_n].impulse[3][0] in ::players[].body.color
player[::input_n].impulse[5][0] in ::players[].body.color
player[::new_input].body.color in ::players[].body.color
player[::new_input].basePosition.col in ::players[].body.color
player[::new_input].impulse[3][0] in ::players[].body.color
player[::new_input].impulse[5][0] in ::players[].body.color
player[::new_input].direction in ::players[].body.color
player[::new_input].stepCounter in ::players[].body.color
player[::input_n].basePosition in ::players[].basePosition
player[::new_input].basePosition in ::players[].basePosition
::players[::new_input].body.bodyMapsSize in ::players[].basePosition.col
::players[::new_input].body.bodyWidth in ::players[].basePosition.col
::players[::input_n].basePosition.row in ::players[].basePosition.col
player[::input_n].basePosition.col in ::players[].basePosition.col
player[::new_input].basePosition.col in ::players[].basePosition.col
::input_n in ::players[].basePosition.row
::new_input in ::players[].basePosition.row
::players[::new_input].body.bodyMapsSize in ::players[].basePosition.row
::players[::new_input].body.color in ::players[].basePosition.row
player[::input_n].body.color in ::players[].basePosition.row
player[::input_n].basePosition.row in ::players[].basePosition.row
player[::input_n].impulse[0][0] in ::players[].basePosition.row
player[::input_n].impulse[1][0] in ::players[].basePosition.row
player[::input_n].impulse[3][0] in ::players[].basePosition.row
player[::input_n].impulse[5][0] in ::players[].basePosition.row
player[::new_input].body.color in ::players[].basePosition.row
player[::new_input].basePosition.row in ::players[].basePosition.row
player[::new_input].impulse[3][0] in ::players[].basePosition.row
player[::new_input].impulse[5][0] in ::players[].basePosition.row
player[::new_input].direction in ::players[].basePosition.row
::players[].impulse[0] - ::players[].impulse[1] + 4 == 0
::players[].impulse[0] - ::players[].impulse[2] + 8 == 0
::players[].impulse[0] - ::players[].impulse[3] + 12 == 0
::players[].impulse[0] - ::players[].impulse[4] + 16 == 0
::players[].impulse[0] - ::players[].impulse[5] + 20 == 0
::players[].impulse[0] - ::players[].impulse[6] + 24 == 0
::players[].impulse[0] - ::players[].impulse[7] + 28 == 0
::players[].impulse[0] - ::players[].impulse[8] + 32 == 0
player[::input_n].impulse[0] in ::players[].impulse[0]
player[::new_input].impulse[0] in ::players[].impulse[0]
::input_n in ::players[].impulse[0][0]
player[::input_n].impulse[0][0] in ::players[].impulse[0][0]
player[::input_n].impulse[1][0] in ::players[].impulse[0][0]
player[::input_n].impulse[3][0] in ::players[].impulse[0][0]
player[::input_n].impulse[5][0] in ::players[].impulse[0][0]
player[::new_input].impulse[3][0] in ::players[].impulse[0][0]
player[::new_input].impulse[5][0] in ::players[].impulse[0][0]
::players[].impulse[1] - ::players[].impulse[2] + 4 == 0
::players[].impulse[1] - ::players[].impulse[3] + 8 == 0
::players[].impulse[1] - ::players[].impulse[4] + 12 == 0
::players[].impulse[1] - ::players[].impulse[5] + 16 == 0
::players[].impulse[1] - ::players[].impulse[6] + 20 == 0
::players[].impulse[1] - ::players[].impulse[7] + 24 == 0
::players[].impulse[1] - ::players[].impulse[8] + 28 == 0
player[::input_n].impulse[1] in ::players[].impulse[1]
player[::new_input].impulse[1] in ::players[].impulse[1]
::input_n in ::players[].impulse[1][0]
player[::input_n].impulse[0][0] in ::players[].impulse[1][0]
player[::input_n].impulse[1][0] in ::players[].impulse[1][0]
player[::input_n].impulse[3][0] in ::players[].impulse[1][0]
player[::input_n].impulse[5][0] in ::players[].impulse[1][0]
player[::new_input].impulse[3][0] in ::players[].impulse[1][0]
player[::new_input].impulse[5][0] in ::players[].impulse[1][0]
::players[].impulse[2] - ::players[].impulse[3] + 4 == 0
::players[].impulse[2] - ::players[].impulse[4] + 8 == 0
::players[].impulse[2] - ::players[].impulse[5] + 12 == 0
::players[].impulse[2] - ::players[].impulse[6] + 16 == 0
::players[].impulse[2] - ::players[].impulse[7] + 20 == 0
::players[].impulse[2] - ::players[].impulse[8] + 24 == 0
player[::input_n].impulse[2] in ::players[].impulse[2]
player[::new_input].impulse[2] in ::players[].impulse[2]
::players[].impulse[3] - ::players[].impulse[4] + 4 == 0
::players[].impulse[3] - ::players[].impulse[5] + 8 == 0
::players[].impulse[3] - ::players[].impulse[6] + 12 == 0
::players[].impulse[3] - ::players[].impulse[7] + 16 == 0
::players[].impulse[3] - ::players[].impulse[8] + 20 == 0
player[::input_n].impulse[3] in ::players[].impulse[3]
player[::new_input].impulse[3] in ::players[].impulse[3]
::input_n in ::players[].impulse[3][0]
player[::input_n].impulse[0][0] in ::players[].impulse[3][0]
player[::input_n].impulse[1][0] in ::players[].impulse[3][0]
player[::input_n].impulse[3][0] in ::players[].impulse[3][0]
player[::input_n].impulse[5][0] in ::players[].impulse[3][0]
player[::new_input].impulse[3][0] in ::players[].impulse[3][0]
player[::new_input].impulse[5][0] in ::players[].impulse[3][0]
::players[].impulse[4] - ::players[].impulse[5] + 4 == 0
::players[].impulse[4] - ::players[].impulse[6] + 8 == 0
::players[].impulse[4] - ::players[].impulse[7] + 12 == 0
::players[].impulse[4] - ::players[].impulse[8] + 16 == 0
player[::input_n].impulse[4] in ::players[].impulse[4]
player[::new_input].impulse[4] in ::players[].impulse[4]
::players[].impulse[5] - ::players[].impulse[6] + 4 == 0
::players[].impulse[5] - ::players[].impulse[7] + 8 == 0
::players[].impulse[5] - ::players[].impulse[8] + 12 == 0
player[::input_n].impulse[5] in ::players[].impulse[5]
player[::new_input].impulse[5] in ::players[].impulse[5]
::input_n in ::players[].impulse[5][0]
player[::input_n].impulse[0][0] in ::players[].impulse[5][0]
player[::input_n].impulse[1][0] in ::players[].impulse[5][0]
player[::input_n].impulse[3][0] in ::players[].impulse[5][0]
player[::input_n].impulse[5][0] in ::players[].impulse[5][0]
player[::new_input].impulse[3][0] in ::players[].impulse[5][0]
player[::new_input].impulse[5][0] in ::players[].impulse[5][0]
::players[].impulse[6] - ::players[].impulse[7] + 4 == 0
::players[].impulse[6] - ::players[].impulse[8] + 8 == 0
player[::input_n].impulse[6] in ::players[].impulse[6]
player[::new_input].impulse[6] in ::players[].impulse[6]
::players[].impulse[7] - ::players[].impulse[8] + 4 == 0
player[::input_n].impulse[7] in ::players[].impulse[7]
player[::new_input].impulse[7] in ::players[].impulse[7]
::input_n in ::players[].impulse[7][0]
player[::input_n].impulse[0][0] in ::players[].impulse[7][0]
player[::input_n].impulse[1][0] in ::players[].impulse[7][0]
player[::input_n].impulse[3][0] in ::players[].impulse[7][0]
player[::input_n].impulse[5][0] in ::players[].impulse[7][0]
player[::new_input].impulse[3][0] in ::players[].impulse[7][0]
player[::new_input].impulse[5][0] in ::players[].impulse[7][0]
player[::input_n].impulse[8] in ::players[].impulse[8]
player[::new_input].impulse[8] in ::players[].impulse[8]
::players[::new_input].body.color in ::players[].direction
player[::input_n].impulse[0][0] in ::players[].direction
player[::input_n].impulse[1][0] in ::players[].direction
player[::input_n].impulse[3][0] in ::players[].direction
player[::input_n].impulse[5][0] in ::players[].direction
player[::new_input].impulse[3][0] in ::players[].direction
player[::new_input].impulse[5][0] in ::players[].direction
player[::new_input].direction in ::players[].direction
player[::input_n].magnetos in ::players[].magnetos
player[::new_input].magnetos in ::players[].magnetos
player[::input_n].magnetos[0] in ::players[].magnetos[0]
player[::new_input].magnetos[0] in ::players[].magnetos[0]
::input_n in ::players[].stepCounter
::players[::new_input].body.bodyMapsSize in ::players[].stepCounter
::players[::new_input].body.bodyWidth in ::players[].stepCounter
::players[::input_n].basePosition.row in ::players[].stepCounter
player[::input_n].impulse[0][0] in ::players[].stepCounter
player[::input_n].impulse[1][0] in ::players[].stepCounter
player[::input_n].impulse[3][0] in ::players[].stepCounter
player[::input_n].impulse[5][0] in ::players[].stepCounter
player[::input_n].stepCounter in ::players[].stepCounter
player[::new_input].impulse[3][0] in ::players[].stepCounter
player[::new_input].impulse[5][0] in ::players[].stepCounter
player[::new_input].stepCounter in ::players[].stepCounter
::players[::input_n].onCrash in ::players[].pilot
player[::input_n].onCrash in ::players[].onCrash
player[::new_input].onCrash in ::players[].onCrash
::players[::input_n].onCrash in ::players[].onPushed
::input_n in player[].body.color
::input_n in player[].basePosition.row
::input_n in player[].impulse[0][0]
::input_n in player[].impulse[1][0]
::input_n in player[].impulse[3][0]
::input_n in player[].impulse[5][0]
::input_n in player[].impulse[7][0]
::input_n in player[].stepCounter
player[].id elements == ::new_input
::new_input in player[].body.type
::new_input in player[].body.visible
::new_input in player[].body.bodyPoints->aspect
::new_input in player[].body.bodySize
::new_input in player[].body.color
::new_input in player[].basePosition.col
::new_input in player[].basePosition.row
::new_input in player[].impulse[1][0]
::new_input in player[].impulse[3][0]
::new_input in player[].impulse[5][0]
::new_input in player[].stepCounter
player[::input_n].impulse[0][0] in player[].body.type
player[::input_n].impulse[1][0] in player[].body.type
player[::input_n].impulse[3][0] in player[].body.type
player[::input_n].impulse[5][0] in player[].body.type
player[::new_input].impulse[3][0] in player[].body.type
player[::new_input].impulse[5][0] in player[].body.type
player[::input_n].impulse[0][0] in player[].body.visible
player[::input_n].impulse[1][0] in player[].body.visible
player[::input_n].impulse[3][0] in player[].body.visible
player[::input_n].impulse[5][0] in player[].body.visible
player[::new_input].impulse[3][0] in player[].body.visible
player[::new_input].impulse[5][0] in player[].body.visible
player[].body.bodyPoints->position - player[].basePosition + 7304 == 0
player[::input_n].impulse[0][0] in player[].body.bodySize
player[::input_n].impulse[1][0] in player[].body.bodySize
player[::input_n].impulse[3][0] in player[].body.bodySize
player[::input_n].impulse[5][0] in player[].body.bodySize
player[::new_input].impulse[3][0] in player[].body.bodySize
player[::new_input].impulse[5][0] in player[].body.bodySize
::players[::new_input].body.bodyWidth in player[].body.bodyWidth
::players[::new_input].body.bodyMapsSize in player[].body.bodyHeight
::players[::new_input].body.bodyMapsSize in player[].body.color
::players[::new_input].body.bodyWidth in player[].body.color
::players[::new_input].body.color in player[].body.color
player[::input_n].impulse[0][0] in player[].body.color
player[::input_n].impulse[1][0] in player[].body.color
player[::input_n].impulse[3][0] in player[].body.color
player[::input_n].impulse[5][0] in player[].body.color
player[::new_input].basePosition.col in player[].body.color
player[::new_input].impulse[3][0] in player[].body.color
player[::new_input].impulse[5][0] in player[].body.color
player[::new_input].direction in player[].body.color
player[::new_input].stepCounter in player[].body.color
::players[::new_input].body.bodyMapsSize in player[].basePosition.col
::players[::new_input].body.bodyWidth in player[].basePosition.col
::players[::input_n].basePosition.row in player[].basePosition.col
::players[::new_input].body.bodyMapsSize in player[].basePosition.row
::players[::new_input].body.color in player[].basePosition.row
player[::input_n].body.color in player[].basePosition.row
player[::input_n].impulse[0][0] in player[].basePosition.row
player[::input_n].impulse[1][0] in player[].basePosition.row
player[::input_n].impulse[3][0] in player[].basePosition.row
player[::input_n].impulse[5][0] in player[].basePosition.row
player[::new_input].body.color in player[].basePosition.row
player[::new_input].impulse[3][0] in player[].basePosition.row
player[::new_input].impulse[5][0] in player[].basePosition.row
player[::new_input].direction in player[].basePosition.row
player[].impulse[0] - player[].impulse[1] + 4 == 0
player[].impulse[0] - player[].impulse[2] + 8 == 0
player[].impulse[0] - player[].impulse[3] + 12 == 0
player[].impulse[0] - player[].impulse[4] + 16 == 0
player[].impulse[0] - player[].impulse[5] + 20 == 0
player[].impulse[0] - player[].impulse[6] + 24 == 0
player[].impulse[0] - player[].impulse[7] + 28 == 0
player[].impulse[0] - player[].impulse[8] + 32 == 0
player[::input_n].impulse[1][0] in player[].impulse[0][0]
player[::input_n].impulse[3][0] in player[].impulse[0][0]
player[::input_n].impulse[5][0] in player[].impulse[0][0]
player[::new_input].impulse[3][0] in player[].impulse[0][0]
player[::new_input].impulse[5][0] in player[].impulse[0][0]
player[].impulse[1] - player[].impulse[2] + 4 == 0
player[].impulse[1] - player[].impulse[3] + 8 == 0
player[].impulse[1] - player[].impulse[4] + 12 == 0
player[].impulse[1] - player[].impulse[5] + 16 == 0
player[].impulse[1] - player[].impulse[6] + 20 == 0
player[].impulse[1] - player[].impulse[7] + 24 == 0
player[].impulse[1] - player[].impulse[8] + 28 == 0
player[::input_n].impulse[3][0] in player[].impulse[1][0]
player[::input_n].impulse[5][0] in player[].impulse[1][0]
player[::new_input].impulse[3][0] in player[].impulse[1][0]
player[::new_input].impulse[5][0] in player[].impulse[1][0]
player[].impulse[2] - player[].impulse[3] + 4 == 0
player[].impulse[2] - player[].impulse[4] + 8 == 0
player[].impulse[2] - player[].impulse[5] + 12 == 0
player[].impulse[2] - player[].impulse[6] + 16 == 0
player[].impulse[2] - player[].impulse[7] + 20 == 0
player[].impulse[2] - player[].impulse[8] + 24 == 0
player[].impulse[3] - player[].impulse[4] + 4 == 0
player[].impulse[3] - player[].impulse[5] + 8 == 0
player[].impulse[3] - player[].impulse[6] + 12 == 0
player[].impulse[3] - player[].impulse[7] + 16 == 0
player[].impulse[3] - player[].impulse[8] + 20 == 0
player[::input_n].impulse[0][0] in player[].impulse[3][0]
player[::input_n].impulse[1][0] in player[].impulse[3][0]
player[::input_n].impulse[5][0] in player[].impulse[3][0]
player[::new_input].impulse[5][0] in player[].impulse[3][0]
player[].impulse[4] - player[].impulse[5] + 4 == 0
player[].impulse[4] - player[].impulse[6] + 8 == 0
player[].impulse[4] - player[].impulse[7] + 12 == 0
player[].impulse[4] - player[].impulse[8] + 16 == 0
player[].impulse[5] - player[].impulse[6] + 4 == 0
player[].impulse[5] - player[].impulse[7] + 8 == 0
player[].impulse[5] - player[].impulse[8] + 12 == 0
player[::input_n].impulse[0][0] in player[].impulse[5][0]
player[::input_n].impulse[1][0] in player[].impulse[5][0]
player[::input_n].impulse[3][0] in player[].impulse[5][0]
player[::new_input].impulse[3][0] in player[].impulse[5][0]
player[].impulse[6] - player[].impulse[7] + 4 == 0
player[].impulse[6] - player[].impulse[8] + 8 == 0
player[].impulse[7] - player[].impulse[8] + 4 == 0
player[::input_n].impulse[0][0] in player[].impulse[7][0]
player[::input_n].impulse[1][0] in player[].impulse[7][0]
player[::input_n].impulse[3][0] in player[].impulse[7][0]
player[::input_n].impulse[5][0] in player[].impulse[7][0]
player[::new_input].impulse[3][0] in player[].impulse[7][0]
player[::new_input].impulse[5][0] in player[].impulse[7][0]
player[::input_n].impulse[0][0] in player[].direction
::players[::new_input].body.bodyMapsSize in player[].stepCounter
::players[::new_input].body.bodyWidth in player[].stepCounter
::players[::input_n].basePosition.row in player[].stepCounter
::players[::input_n].stepCounter in player[].stepCounter
player[::input_n].impulse[0][0] in player[].stepCounter
player[::input_n].impulse[1][0] in player[].stepCounter
player[::input_n].impulse[3][0] in player[].stepCounter
player[::input_n].impulse[5][0] in player[].stepCounter
player[::new_input].impulse[3][0] in player[].stepCounter
player[::new_input].impulse[5][0] in player[].stepCounter
::players[::input_n].onCrash in player[].pilot
::players[::input_n].onCrash in player[].onCrash
::players[::new_input].onCrash in player[].onCrash
::players[::input_n].onCrash in player[].onPushed
2 * player[::input_n].body.color - player[::input_n].basePosition.col == 0
player[::input_n].impulse[0][0] % player[::new_input].direction == 0
player[::input_n].impulse[5][0] % player[::new_input].basePosition.row == 0
player[::input_n].impulse[5][0] % player[::new_input].stepCounter == 0
2 * player[::new_input].body.color - player[::new_input].basePosition.col == 0
17 * size(player[]) + 5 * player[::input_n].body.bodyPoints->aspect + 17 * player[::input_n].basePosition.row - 2045 == 0
size(player[]) + player[::input_n].basePosition.row - 15 * player[::new_input].impulse[3][0] - 95 == 0
17 * size(player[]) + 5 * player[::new_input].body.bodyPoints->aspect + 17 * player[::new_input].basePosition.row - 2028 == 0
size(player[]) + player[::new_input].basePosition.row + 15 * player[::new_input].impulse[5][0] - 109 == 0
17 * size(player[])-1 + 5 * player[::input_n].body.bodyPoints->aspect + 17 * player[::input_n].basePosition.row - 2028 == 0
size(player[])-1 + player[::input_n].basePosition.row - 15 * player[::new_input].impulse[3][0] - 94 == 0
17 * size(player[])-1 + 5 * player[::new_input].body.bodyPoints->aspect + 17 * player[::new_input].basePosition.row - 2011 == 0
size(player[])-1 + player[::new_input].basePosition.row + 15 * player[::new_input].impulse[5][0] - 108 == 0
player[::input_n].basePosition.row + 15 * player[::input_n].impulse[0][0] - player[::new_input].basePosition.row - 1 == 0
===========================================================================
..moveFlexiblePlayer():::EXIT
::crashedPlayers == orig(::crashedPlayers)
::crashedPlayers[] == orig(::crashedPlayers[])
::crashedPlayers[].start == ::crashedPlayers[].end
::crashedPlayers[].start == ::playerSpace[].playerNodes->start->prev
::crashedPlayers[].start == ::playerSpace[].playerNodes->end->next
::crashedPlayers[].start == ::playerSpace[].guideNodes->start
::crashedPlayers[].start == ::playerSpace[].guideNodes->end
::crashedPlayers[].start == space[].playerNodes->start->prev
::crashedPlayers[].start == space[].playerNodes->end->next
::crashedPlayers[].start == space[].guideNodes->start
::crashedPlayers[].start == space[].guideNodes->end
::crashedPlayers[].start == orig(::crashedPlayers[].start)
::crashedPlayers[].start == orig(::crashedPlayers[].end)
::crashedPlayers[].start == orig(::playerSpace[].playerNodes->start->prev)
::crashedPlayers[].start == orig(::playerSpace[].playerNodes->end->next)
::crashedPlayers[].start == orig(::playerSpace[].guideNodes->start)
::crashedPlayers[].start == orig(::playerSpace[].guideNodes->end)
::crashedPlayers[].start == orig(space[].playerNodes->start->prev)
::crashedPlayers[].start == orig(space[].playerNodes->end->next)
::crashedPlayers[].start == orig(space[].guideNodes->start)
::crashedPlayers[].start == orig(space[].guideNodes->end)
::playerSpace == orig(::playerSpace)
::playerSpace == orig(space)
::playerSpace[] == space[]
::playerSpace[] == orig(::playerSpace[])
::playerSpace[] == orig(space[])
::playerSpace[].playerNodes == space[].playerNodes
::playerSpace[].playerNodes == orig(::playerSpace[].playerNodes)
::playerSpace[].playerNodes == orig(space[].playerNodes)
::playerSpace[].playerNodes[0] == space[].playerNodes[0]
::playerSpace[].playerNodes[0] == orig(::playerSpace[].playerNodes[0])
::playerSpace[].playerNodes[0] == orig(space[].playerNodes[0])
::playerSpace[].playerNodes->start == space[].playerNodes->start
::playerSpace[].playerNodes->start == orig(::playerSpace[].playerNodes->start)
::playerSpace[].playerNodes->start == orig(space[].playerNodes->start)
::playerSpace[].playerNodes->start[0] == space[].playerNodes->start[0]
::playerSpace[].playerNodes->start[0] == orig(::playerSpace[].playerNodes->start[0])
::playerSpace[].playerNodes->start[0] == orig(space[].playerNodes->start[0])
::playerSpace[].playerNodes->start->next == space[].playerNodes->start->next
::playerSpace[].playerNodes->start->next == orig(::playerSpace[].playerNodes->start->next)
::playerSpace[].playerNodes->start->next == orig(space[].playerNodes->start->next)
::playerSpace[].playerNodes->start->next[0] == space[].playerNodes->start->next[0]
::playerSpace[].playerNodes->start->next[0] == orig(::playerSpace[].playerNodes->start->next[0])
::playerSpace[].playerNodes->start->next[0] == orig(space[].playerNodes->start->next[0])
::playerSpace[].playerNodes->start->data == space[].playerNodes->start->data
::playerSpace[].playerNodes->start->data == orig(::playerSpace[].playerNodes->start->data)
::playerSpace[].playerNodes->start->data == orig(space[].playerNodes->start->data)
::playerSpace[].playerNodes->end == space[].playerNodes->end
::playerSpace[].playerNodes->end == orig(::playerSpace[].playerNodes->end)
::playerSpace[].playerNodes->end == orig(space[].playerNodes->end)
::playerSpace[].playerNodes->end[0] == space[].playerNodes->end[0]
::playerSpace[].playerNodes->end[0] == orig(::playerSpace[].playerNodes->end[0])
::playerSpace[].playerNodes->end[0] == orig(space[].playerNodes->end[0])
::playerSpace[].playerNodes->end->data == space[].playerNodes->end->data
::playerSpace[].playerNodes->end->data == orig(::playerSpace[].playerNodes->end->data)
::playerSpace[].playerNodes->end->data == orig(space[].playerNodes->end->data)
::playerSpace[].playerNodes->end->prev == space[].playerNodes->end->prev
::playerSpace[].playerNodes->end->prev == orig(::playerSpace[].playerNodes->end->prev)
::playerSpace[].playerNodes->end->prev == orig(space[].playerNodes->end->prev)
::playerSpace[].playerNodes->end->prev[0] == space[].playerNodes->end->prev[0]
::playerSpace[].playerNodes->end->prev[0] == orig(::playerSpace[].playerNodes->end->prev[0])
::playerSpace[].playerNodes->end->prev[0] == orig(space[].playerNodes->end->prev[0])
::playerSpace[].playerMap == space[].playerMap
::playerSpace[].playerMap == orig(::playerSpace[].playerMap)
::playerSpace[].playerMap == orig(space[].playerMap)
::playerSpace[].guideNodes == space[].guideNodes
::playerSpace[].guideNodes == orig(::playerSpace[].guideNodes)
::playerSpace[].guideNodes == orig(space[].guideNodes)
::playerSpace[].guideNodes[0] == space[].guideNodes[0]
::playerSpace[].guideNodes[0] == orig(::playerSpace[].guideNodes[0])
::playerSpace[].guideNodes[0] == orig(space[].guideNodes[0])
::playerSpace[].groundMap == space[].groundMap
::playerSpace[].groundMap == orig(::playerSpace[].groundMap)
::playerSpace[].groundMap == orig(space[].groundMap)
::playerSpace[].actionGroup == space[].actionGroup
::playerSpace[].actionGroup == orig(::playerSpace[].actionGroup)
::playerSpace[].actionGroup == orig(space[].actionGroup)
::playerSpace[].actionGroup[0] == space[].actionGroup[0]
::playerSpace[].actionGroup[0] == orig(::playerSpace[].actionGroup[0])
::playerSpace[].actionGroup[0] == orig(space[].actionGroup[0])
::playerSpace[].actionGroup->numActions == space[].actionGroup->numActions
::playerSpace[].actionGroup->numActions == orig(::playerSpace[].actionGroup->numActions)
::playerSpace[].actionGroup->numActions == orig(space[].actionGroup->numActions)
::players == orig(::players)
::players == ::players[::new_input].body.bodyPoints->player
::players[] == orig(::players[])
::players[].id == ::players[].type
::players[].id == ::players[].retired
::players[].id == ::players[].impulse[2][0]
::players[].id == ::players[].impulse[4][0]
::players[].id == ::players[].impulse[6][0]
::players[].id == ::players[].impulse[8][0]
::players[].id == orig(::players[].id)
::players[].id == orig(::players[].type)
::players[].id == orig(::players[].retired)
::players[].id == orig(::players[].impulse[2][0])
::players[].id == orig(::players[].impulse[4][0])
::players[].id == orig(::players[].impulse[6][0])
::players[].id == orig(::players[].impulse[8][0])
::players[].body == orig(::players[].body)
::players[].body.type == orig(::players[].body.type)
::players[].body.visible == ::players[].body.tangible
::players[].body.visible == orig(::players[].body.visible)
::players[].body.visible == orig(::players[].body.tangible)
::players[].body.bodyPoints == orig(::players[].body.bodyPoints)
::players[].body.bodyPoints[0] == orig(::players[].body.bodyPoints[0])
::players[].body.bodyPoints->position == orig(::players[].body.bodyPoints->position)
::players[].body.bodyPoints->player == orig(::players[].body.bodyPoints->player)
::players[].body.bodyPoints->player[0] == orig(::players[].body.bodyPoints->player[0])
::players[].body.bodyPoints->aspect == orig(::players[].body.bodyPoints->aspect)
::players[].body.bodyMaps == orig(::players[].body.bodyMaps)
::players[].body.bodyMapsSize == orig(::players[].body.bodyMapsSize)
::players[].body.bodySize == orig(::players[].body.bodySize)
::players[].body.bodyWidth == orig(::players[].body.bodyWidth)
::players[].body.bodyHeight == orig(::players[].body.bodyHeight)
::players[].body.color == orig(::players[].body.color)
::players[].basePosition == orig(::players[].basePosition)
::players[].impulse[0] == orig(::players[].impulse[0])
::players[].impulse[0][0] == orig(::players[].impulse[0][0])
::players[].impulse[1] == orig(::players[].impulse[1])
::players[].impulse[1][0] == orig(::players[].impulse[1][0])
::players[].impulse[2] == orig(::players[].impulse[2])
::players[].impulse[3] == orig(::players[].impulse[3])
::players[].impulse[3][0] == orig(::players[].impulse[3][0])
::players[].impulse[4] == orig(::players[].impulse[4])
::players[].impulse[5] == orig(::players[].impulse[5])
::players[].impulse[5][0] == orig(::players[].impulse[5][0])
::players[].impulse[6] == orig(::players[].impulse[6])
::players[].impulse[7] == orig(::players[].impulse[7])
::players[].impulse[7][0] == orig(::players[].impulse[7][0])
::players[].impulse[8] == orig(::players[].impulse[8])
::players[].direction == orig(::players[].direction)
::players[].magnetos == orig(::players[].magnetos)
::players[].magnetos[0] == orig(::players[].magnetos[0])
::players[].stepCounter == orig(::players[].stepCounter)
::players[].pilot == orig(::players[].pilot)
::players[].onCrash == orig(::players[].onCrash)
::players[].onPushed == orig(::players[].onPushed)
::snakeBodyMap == orig(::snakeBodyMap)
::trainBodyMap == orig(::trainBodyMap)
::giantBodyMap == orig(::giantBodyMap)
::squareBodyMap == orig(::squareBodyMap)
::circleBodyMap == orig(::circleBodyMap)
::input_n == ::input_i
::input_n == orig(::input_n)
::input_n == orig(::input_i)
::input_n == size(::crashedPlayers[])
::input_n == size(::playerSpace[])
::input_n == size(::playerSpace[].playerNodes[0])
::input_n == size(::playerSpace[].playerNodes->start[0])
::input_n == size(::playerSpace[].playerNodes->start->next[0])
::input_n == size(::playerSpace[].playerNodes->end[0])
::input_n == size(::playerSpace[].playerNodes->end->prev[0])
::input_n == size(::playerSpace[].guideNodes[0])
::input_n == size(::playerSpace[].actionGroup[0])
::input_n == orig(size(::crashedPlayers[]))
::input_n == orig(size(::playerSpace[]))
::input_n == orig(size(::playerSpace[].playerNodes[0]))
::input_n == orig(size(::playerSpace[].playerNodes->start[0]))
::input_n == orig(size(::playerSpace[].playerNodes->start->next[0]))
::input_n == orig(size(::playerSpace[].playerNodes->end[0]))
::input_n == orig(size(::playerSpace[].playerNodes->end->prev[0]))
::input_n == orig(size(::playerSpace[].guideNodes[0]))
::input_n == orig(size(::playerSpace[].actionGroup[0]))
::input_n == orig(size(space[]))
::input_n == orig(size(space[].playerNodes[0]))
::input_n == orig(size(space[].playerNodes->start[0]))
::input_n == orig(size(space[].playerNodes->start->next[0]))
::input_n == orig(size(space[].playerNodes->end[0]))
::input_n == orig(size(space[].playerNodes->end->prev[0]))
::input_n == orig(size(space[].guideNodes[0]))
::input_n == orig(size(space[].actionGroup[0]))
::input_n == ::players[::input_n].body.type
::input_n == ::players[::input_i].body.type
::input_n == ::players[orig(::input_n)].body.type
::input_n == ::players[orig(::input_i)].body.type
::input_n == ::players[::input_n].body.visible
::input_n == ::players[::input_n-1].body.visible
::input_n == ::players[::input_i].body.visible
::input_n == ::players[::input_i-1].body.visible
::input_n == ::players[::new_input].body.visible
::input_n == ::players[orig(::input_n)].body.visible
::input_n == ::players[orig(::input_n)-1].body.visible
::input_n == ::players[orig(::input_i)].body.visible
::input_n == ::players[orig(::input_i)-1].body.visible
::input_n == ::players[orig(::new_input)].body.visible
::input_n == ::players[::input_n].body.tangible
::input_n == ::players[::input_n-1].body.tangible
::input_n == ::players[::input_i].body.tangible
::input_n == ::players[::input_i-1].body.tangible
::input_n == ::players[::new_input].body.tangible
::input_n == ::players[orig(::input_n)].body.tangible
::input_n == ::players[orig(::input_n)-1].body.tangible
::input_n == ::players[orig(::input_i)].body.tangible
::input_n == ::players[orig(::input_i)-1].body.tangible
::input_n == ::players[orig(::new_input)].body.tangible
::input_n == ::players[::input_n].body.bodyMapsSize
::input_n == ::players[::input_i].body.bodyMapsSize
::input_n == ::players[orig(::input_n)].body.bodyMapsSize
::input_n == ::players[orig(::input_i)].body.bodyMapsSize
::input_n == ::players[::input_n].body.bodySize
::input_n == ::players[::input_i].body.bodySize
::input_n == ::players[orig(::input_n)].body.bodySize
::input_n == ::players[orig(::input_i)].body.bodySize
::input_n == ::players[::input_n-1].direction
::input_n == ::players[::input_i-1].direction
::input_n == ::players[::new_input].direction
::input_n == ::players[orig(::input_n)-1].direction
::input_n == ::players[orig(::input_i)-1].direction
::input_n == ::players[orig(::new_input)].direction
::input_n == player[::input_n].body.type
::input_n == player[::input_n-1].body.type
::input_n == player[::input_n].body.visible
::input_n == player[::input_n-1].body.visible
::input_n == player[::input_n].body.tangible
::input_n == player[::input_n-1].body.tangible
::input_n == player[::input_n].body.bodyMapsSize
::input_n == player[::input_n-1].body.bodyMapsSize
::input_n == player[::input_n].body.bodySize
::input_n == player[::input_n-1].body.bodySize
::input_n == orig(::players[post(::input_n)].body.type)
::input_n == orig(::players[post(::input_n)].body.visible)
::input_n == orig(::players[post(::input_n)-1].body.visible)
::input_n == orig(::players[post(::input_n)].body.tangible)
::input_n == orig(::players[post(::input_n)-1].body.tangible)
::input_n == orig(::players[post(::input_n)].body.bodyMapsSize)
::input_n == orig(::players[post(::input_n)].body.bodySize)
::input_n == orig(::players[post(::input_n)-1].direction)
::input_n == orig(player[post(::input_n)].body.type)
::input_n == orig(player[post(::input_n)-1].body.type)
::input_n == orig(player[post(::input_n)].body.visible)
::input_n == orig(player[post(::input_n)-1].body.visible)
::input_n == orig(player[post(::input_n)].body.tangible)
::input_n == orig(player[post(::input_n)-1].body.tangible)
::input_n == orig(player[post(::input_n)].body.bodyMapsSize)
::input_n == orig(player[post(::input_n)-1].body.bodyMapsSize)
::input_n == orig(player[post(::input_n)].body.bodySize)
::input_n == orig(player[post(::input_n)-1].body.bodySize)
::input_n == player[::input_i].body.type
::input_n == player[::input_i-1].body.type
::input_n == player[::input_i].body.visible
::input_n == player[::input_i-1].body.visible
::input_n == player[::input_i].body.tangible
::input_n == player[::input_i-1].body.tangible
::input_n == player[::input_i].body.bodyMapsSize
::input_n == player[::input_i-1].body.bodyMapsSize
::input_n == player[::input_i].body.bodySize
::input_n == player[::input_i-1].body.bodySize
::input_n == orig(::players[post(::input_i)].body.type)
::input_n == orig(::players[post(::input_i)].body.visible)
::input_n == orig(::players[post(::input_i)-1].body.visible)
::input_n == orig(::players[post(::input_i)].body.tangible)
::input_n == orig(::players[post(::input_i)-1].body.tangible)
::input_n == orig(::players[post(::input_i)].body.bodyMapsSize)
::input_n == orig(::players[post(::input_i)].body.bodySize)
::input_n == orig(::players[post(::input_i)-1].direction)
::input_n == orig(player[post(::input_i)].body.type)
::input_n == orig(player[post(::input_i)-1].body.type)
::input_n == orig(player[post(::input_i)].body.visible)
::input_n == orig(player[post(::input_i)-1].body.visible)
::input_n == orig(player[post(::input_i)].body.tangible)
::input_n == orig(player[post(::input_i)-1].body.tangible)
::input_n == orig(player[post(::input_i)].body.bodyMapsSize)
::input_n == orig(player[post(::input_i)-1].body.bodyMapsSize)
::input_n == orig(player[post(::input_i)].body.bodySize)
::input_n == orig(player[post(::input_i)-1].body.bodySize)
::input_n == player[::new_input].body.type
::input_n == player[::new_input].body.visible
::input_n == player[::new_input].body.tangible
::input_n == player[::new_input].body.bodyMapsSize
::input_n == player[::new_input].body.bodySize
::input_n == orig(::players[post(::new_input)].body.visible)
::input_n == orig(::players[post(::new_input)].body.tangible)
::input_n == orig(::players[post(::new_input)].direction)
::input_n == orig(player[post(::new_input)].body.type)
::input_n == orig(player[post(::new_input)].body.visible)
::input_n == orig(player[post(::new_input)].body.tangible)
::input_n == orig(player[post(::new_input)].body.bodyMapsSize)
::input_n == orig(player[post(::new_input)].body.bodySize)
::input_n == player[orig(::input_n)].body.type
::input_n == player[orig(::input_n)-1].body.type
::input_n == player[orig(::input_i)].body.type
::input_n == player[orig(::input_i)-1].body.type
::input_n == player[orig(::new_input)].body.type
::input_n == player[orig(::input_n)].body.visible
::input_n == player[orig(::input_n)-1].body.visible
::input_n == player[orig(::input_i)].body.visible
::input_n == player[orig(::input_i)-1].body.visible
::input_n == player[orig(::new_input)].body.visible
::input_n == player[orig(::input_n)].body.tangible
::input_n == player[orig(::input_n)-1].body.tangible
::input_n == player[orig(::input_i)].body.tangible
::input_n == player[orig(::input_i)-1].body.tangible
::input_n == player[orig(::new_input)].body.tangible
::input_n == player[orig(::input_n)].body.bodyMapsSize
::input_n == player[orig(::input_n)-1].body.bodyMapsSize
::input_n == player[orig(::input_i)].body.bodyMapsSize
::input_n == player[orig(::input_i)-1].body.bodyMapsSize
::input_n == player[orig(::new_input)].body.bodyMapsSize
::input_n == player[orig(::input_n)].body.bodySize
::input_n == player[orig(::input_n)-1].body.bodySize
::input_n == player[orig(::input_i)].body.bodySize
::input_n == player[orig(::input_i)-1].body.bodySize
::input_n == player[orig(::new_input)].body.bodySize
::input_n == orig(::players[::input_n].body.type)
::input_n == orig(::players[::input_i].body.type)
::input_n == orig(::players[::input_n].body.visible)
::input_n == orig(::players[::input_n-1].body.visible)
::input_n == orig(::players[::input_i].body.visible)
::input_n == orig(::players[::input_i-1].body.visible)
::input_n == orig(::players[::new_input].body.visible)
::input_n == orig(::players[::input_n].body.tangible)
::input_n == orig(::players[::input_n-1].body.tangible)
::input_n == orig(::players[::input_i].body.tangible)
::input_n == orig(::players[::input_i-1].body.tangible)
::input_n == orig(::players[::new_input].body.tangible)
::input_n == orig(::players[::input_n].body.bodyMapsSize)
::input_n == orig(::players[::input_i].body.bodyMapsSize)
::input_n == orig(::players[::input_n].body.bodySize)
::input_n == orig(::players[::input_i].body.bodySize)
::input_n == orig(::players[::input_n-1].direction)
::input_n == orig(::players[::input_i-1].direction)
::input_n == orig(::players[::new_input].direction)
::input_n == orig(player[::input_n].body.type)
::input_n == orig(player[::input_n-1].body.type)
::input_n == orig(player[::input_n].body.visible)
::input_n == orig(player[::input_n-1].body.visible)
::input_n == orig(player[::input_n].body.tangible)
::input_n == orig(player[::input_n-1].body.tangible)
::input_n == orig(player[::input_n].body.bodyMapsSize)
::input_n == orig(player[::input_n-1].body.bodyMapsSize)
::input_n == orig(player[::input_n].body.bodySize)
::input_n == orig(player[::input_n-1].body.bodySize)
::input_n == orig(player[::input_i].body.type)
::input_n == orig(player[::input_i-1].body.type)
::input_n == orig(player[::input_i].body.visible)
::input_n == orig(player[::input_i-1].body.visible)
::input_n == orig(player[::input_i].body.tangible)
::input_n == orig(player[::input_i-1].body.tangible)
::input_n == orig(player[::input_i].body.bodyMapsSize)
::input_n == orig(player[::input_i-1].body.bodyMapsSize)
::input_n == orig(player[::input_i].body.bodySize)
::input_n == orig(player[::input_i-1].body.bodySize)
::input_n == orig(player[::new_input].body.type)
::input_n == orig(player[::new_input].body.visible)
::input_n == orig(player[::new_input].body.tangible)
::input_n == orig(player[::new_input].body.bodyMapsSize)
::input_n == orig(player[::new_input].body.bodySize)
::new_input == orig(::new_input)
::new_input == size(::crashedPlayers[])-1
::new_input == size(::playerSpace[])-1
::new_input == size(::playerSpace[].playerNodes[0])-1
::new_input == size(::playerSpace[].playerNodes->start[0])-1
::new_input == size(::playerSpace[].playerNodes->start->next[0])-1
::new_input == size(::playerSpace[].playerNodes->end[0])-1
::new_input == size(::playerSpace[].playerNodes->end->prev[0])-1
::new_input == size(::playerSpace[].guideNodes[0])-1
::new_input == size(::playerSpace[].actionGroup[0])-1
::new_input == size(space[])-1
::new_input == size(space[].playerNodes[0])-1
::new_input == size(space[].playerNodes->start[0])-1
::new_input == size(space[].playerNodes->start->next[0])-1
::new_input == size(space[].playerNodes->end[0])-1
::new_input == size(space[].playerNodes->end->prev[0])-1
::new_input == size(space[].guideNodes[0])-1
::new_input == size(space[].actionGroup[0])-1
::new_input == orig(size(::crashedPlayers[]))-1
::new_input == orig(size(::playerSpace[]))-1
::new_input == orig(size(::playerSpace[].playerNodes[0]))-1
::new_input == orig(size(::playerSpace[].playerNodes->start[0]))-1
::new_input == orig(size(::playerSpace[].playerNodes->start->next[0]))-1
::new_input == orig(size(::playerSpace[].playerNodes->end[0]))-1
::new_input == orig(size(::playerSpace[].playerNodes->end->prev[0]))-1
::new_input == orig(size(::playerSpace[].guideNodes[0]))-1
::new_input == orig(size(::playerSpace[].actionGroup[0]))-1
::new_input == orig(size(space[]))-1
::new_input == orig(size(space[].playerNodes[0]))-1
::new_input == orig(size(space[].playerNodes->start[0]))-1
::new_input == orig(size(space[].playerNodes->start->next[0]))-1
::new_input == orig(size(space[].playerNodes->end[0]))-1
::new_input == orig(size(space[].playerNodes->end->prev[0]))-1
::new_input == orig(size(space[].guideNodes[0]))-1
::new_input == orig(size(space[].actionGroup[0]))-1
::new_input == ::playerSpace[::input_n-1].actionGroup->numActions
::new_input == ::playerSpace[::input_i-1].actionGroup->numActions
::new_input == ::playerSpace[::new_input].actionGroup->numActions
::new_input == ::playerSpace[orig(::input_n)-1].actionGroup->numActions
::new_input == ::playerSpace[orig(::input_i)-1].actionGroup->numActions
::new_input == ::playerSpace[orig(::new_input)].actionGroup->numActions
::new_input == ::players[::input_n].id
::new_input == ::players[::input_n-1].id
::new_input == ::players[::input_i].id
::new_input == ::players[::input_i-1].id
::new_input == ::players[::new_input].id
::new_input == ::players[orig(::input_n)].id
::new_input == ::players[orig(::input_n)-1].id
::new_input == ::players[orig(::input_i)].id
::new_input == ::players[orig(::input_i)-1].id
::new_input == ::players[orig(::new_input)].id
::new_input == ::players[::input_n].type
::new_input == ::players[::input_n-1].type
::new_input == ::players[::input_i].type
::new_input == ::players[::input_i-1].type
::new_input == ::players[::new_input].type
::new_input == ::players[orig(::input_n)].type
::new_input == ::players[orig(::input_n)-1].type
::new_input == ::players[orig(::input_i)].type
::new_input == ::players[orig(::input_i)-1].type
::new_input == ::players[orig(::new_input)].type
::new_input == ::players[::input_n].retired
::new_input == ::players[::input_n-1].retired
::new_input == ::players[::input_i].retired
::new_input == ::players[::input_i-1].retired
::new_input == ::players[::new_input].retired
::new_input == ::players[orig(::input_n)].retired
::new_input == ::players[orig(::input_n)-1].retired
::new_input == ::players[orig(::input_i)].retired
::new_input == ::players[orig(::input_i)-1].retired
::new_input == ::players[orig(::new_input)].retired
::new_input == ::players[::input_n-1].body.type
::new_input == ::players[::input_i-1].body.type
::new_input == ::players[::new_input].body.type
::new_input == ::players[orig(::input_n)-1].body.type
::new_input == ::players[orig(::input_i)-1].body.type
::new_input == ::players[orig(::new_input)].body.type
::new_input == ::players[::input_n].body.bodyWidth
::new_input == ::players[::input_i].body.bodyWidth
::new_input == ::players[orig(::input_n)].body.bodyWidth
::new_input == ::players[orig(::input_i)].body.bodyWidth
::new_input == ::players[::input_n].body.bodyHeight
::new_input == ::players[::input_i].body.bodyHeight
::new_input == ::players[orig(::input_n)].body.bodyHeight
::new_input == ::players[orig(::input_i)].body.bodyHeight
::new_input == ::players[::input_n].body.color
::new_input == ::players[::input_i].body.color
::new_input == ::players[orig(::input_n)].body.color
::new_input == ::players[orig(::input_i)].body.color
::new_input == ::players[::input_n].basePosition.col
::new_input == ::players[::input_i].basePosition.col
::new_input == ::players[orig(::input_n)].basePosition.col
::new_input == ::players[orig(::input_i)].basePosition.col
::new_input == ::players[::input_n].impulse[0][0]
::new_input == ::players[::input_n-1].impulse[0][0]
::new_input == ::players[::input_i].impulse[0][0]
::new_input == ::players[::input_i-1].impulse[0][0]
::new_input == ::players[::new_input].impulse[0][0]
::new_input == ::players[orig(::input_n)].impulse[0][0]
::new_input == ::players[orig(::input_n)-1].impulse[0][0]
::new_input == ::players[orig(::input_i)].impulse[0][0]
::new_input == ::players[orig(::input_i)-1].impulse[0][0]
::new_input == ::players[orig(::new_input)].impulse[0][0]
::new_input == ::players[::input_n].impulse[1][0]
::new_input == ::players[::input_n-1].impulse[1][0]
::new_input == ::players[::input_i].impulse[1][0]
::new_input == ::players[::input_i-1].impulse[1][0]
::new_input == ::players[::new_input].impulse[1][0]
::new_input == ::players[orig(::input_n)].impulse[1][0]
::new_input == ::players[orig(::input_n)-1].impulse[1][0]
::new_input == ::players[orig(::input_i)].impulse[1][0]
::new_input == ::players[orig(::input_i)-1].impulse[1][0]
::new_input == ::players[orig(::new_input)].impulse[1][0]
::new_input == ::players[::input_n].impulse[2][0]
::new_input == ::players[::input_n-1].impulse[2][0]
::new_input == ::players[::input_i].impulse[2][0]
::new_input == ::players[::input_i-1].impulse[2][0]
::new_input == ::players[::new_input].impulse[2][0]
::new_input == ::players[orig(::input_n)].impulse[2][0]
::new_input == ::players[orig(::input_n)-1].impulse[2][0]
::new_input == ::players[orig(::input_i)].impulse[2][0]
::new_input == ::players[orig(::input_i)-1].impulse[2][0]
::new_input == ::players[orig(::new_input)].impulse[2][0]
::new_input == ::players[::input_n].impulse[3][0]
::new_input == ::players[::input_n-1].impulse[3][0]
::new_input == ::players[::input_i].impulse[3][0]
::new_input == ::players[::input_i-1].impulse[3][0]
::new_input == ::players[::new_input].impulse[3][0]
::new_input == ::players[orig(::input_n)].impulse[3][0]
::new_input == ::players[orig(::input_n)-1].impulse[3][0]
::new_input == ::players[orig(::input_i)].impulse[3][0]
::new_input == ::players[orig(::input_i)-1].impulse[3][0]
::new_input == ::players[orig(::new_input)].impulse[3][0]
::new_input == ::players[::input_n].impulse[4][0]
::new_input == ::players[::input_n-1].impulse[4][0]
::new_input == ::players[::input_i].impulse[4][0]
::new_input == ::players[::input_i-1].impulse[4][0]
::new_input == ::players[::new_input].impulse[4][0]
::new_input == ::players[orig(::input_n)].impulse[4][0]
::new_input == ::players[orig(::input_n)-1].impulse[4][0]
::new_input == ::players[orig(::input_i)].impulse[4][0]
::new_input == ::players[orig(::input_i)-1].impulse[4][0]
::new_input == ::players[orig(::new_input)].impulse[4][0]
::new_input == ::players[::input_n].impulse[5][0]
::new_input == ::players[::input_n-1].impulse[5][0]
::new_input == ::players[::input_i].impulse[5][0]
::new_input == ::players[::input_i-1].impulse[5][0]
::new_input == ::players[::new_input].impulse[5][0]
::new_input == ::players[orig(::input_n)].impulse[5][0]
::new_input == ::players[orig(::input_n)-1].impulse[5][0]
::new_input == ::players[orig(::input_i)].impulse[5][0]
::new_input == ::players[orig(::input_i)-1].impulse[5][0]
::new_input == ::players[orig(::new_input)].impulse[5][0]
::new_input == ::players[::input_n].impulse[6][0]
::new_input == ::players[::input_n-1].impulse[6][0]
::new_input == ::players[::input_i].impulse[6][0]
::new_input == ::players[::input_i-1].impulse[6][0]
::new_input == ::players[::new_input].impulse[6][0]
::new_input == ::players[orig(::input_n)].impulse[6][0]
::new_input == ::players[orig(::input_n)-1].impulse[6][0]
::new_input == ::players[orig(::input_i)].impulse[6][0]
::new_input == ::players[orig(::input_i)-1].impulse[6][0]
::new_input == ::players[orig(::new_input)].impulse[6][0]
::new_input == ::players[::input_n].impulse[7][0]
::new_input == ::players[::input_n-1].impulse[7][0]
::new_input == ::players[::input_i].impulse[7][0]
::new_input == ::players[::input_i-1].impulse[7][0]
::new_input == ::players[::new_input].impulse[7][0]
::new_input == ::players[orig(::input_n)].impulse[7][0]
::new_input == ::players[orig(::input_n)-1].impulse[7][0]
::new_input == ::players[orig(::input_i)].impulse[7][0]
::new_input == ::players[orig(::input_i)-1].impulse[7][0]
::new_input == ::players[orig(::new_input)].impulse[7][0]
::new_input == ::players[::input_n].impulse[8][0]
::new_input == ::players[::input_n-1].impulse[8][0]
::new_input == ::players[::input_i].impulse[8][0]
::new_input == ::players[::input_i-1].impulse[8][0]
::new_input == ::players[::new_input].impulse[8][0]
::new_input == ::players[orig(::input_n)].impulse[8][0]
::new_input == ::players[orig(::input_n)-1].impulse[8][0]
::new_input == ::players[orig(::input_i)].impulse[8][0]
::new_input == ::players[orig(::input_i)-1].impulse[8][0]
::new_input == ::players[orig(::new_input)].impulse[8][0]
::new_input == ::players[::input_n].direction
::new_input == ::players[::input_i].direction
::new_input == ::players[orig(::input_n)].direction
::new_input == ::players[orig(::input_i)].direction
::new_input == ::players[::input_n-1].stepCounter
::new_input == ::players[::input_i-1].stepCounter
::new_input == ::players[::new_input].stepCounter
::new_input == ::players[orig(::input_n)-1].stepCounter
::new_input == ::players[orig(::input_i)-1].stepCounter
::new_input == ::players[orig(::new_input)].stepCounter
::new_input == space[::input_n-1].actionGroup->numActions
::new_input == player[::input_n].id
::new_input == player[::input_n-1].id
::new_input == player[::input_n].type
::new_input == player[::input_n-1].type
::new_input == player[::input_n].retired
::new_input == player[::input_n-1].retired
::new_input == player[::input_n].body.bodyWidth
::new_input == player[::input_n-1].body.bodyWidth
::new_input == player[::input_n].body.bodyHeight
::new_input == player[::input_n-1].body.bodyHeight
::new_input == player[::input_n-1].impulse[0][0]
::new_input == player[::input_n].impulse[2][0]
::new_input == player[::input_n-1].impulse[2][0]
::new_input == player[::input_n].impulse[4][0]
::new_input == player[::input_n-1].impulse[4][0]
::new_input == player[::input_n].impulse[6][0]
::new_input == player[::input_n-1].impulse[6][0]
::new_input == player[::input_n].impulse[7][0]
::new_input == player[::input_n-1].impulse[7][0]
::new_input == player[::input_n].impulse[8][0]
::new_input == player[::input_n-1].impulse[8][0]
::new_input == player[::input_n].direction
::new_input == orig(::playerSpace[post(::input_n)-1].actionGroup->numActions)
::new_input == orig(::players[post(::input_n)].id)
::new_input == orig(::players[post(::input_n)-1].id)
::new_input == orig(::players[post(::input_n)].type)
::new_input == orig(::players[post(::input_n)-1].type)
::new_input == orig(::players[post(::input_n)].retired)
::new_input == orig(::players[post(::input_n)-1].retired)
::new_input == orig(::players[post(::input_n)-1].body.type)
::new_input == orig(::players[post(::input_n)].body.bodyWidth)
::new_input == orig(::players[post(::input_n)].body.bodyHeight)
::new_input == orig(::players[post(::input_n)].body.color)
::new_input == orig(::players[post(::input_n)].basePosition.col)
::new_input == orig(::players[post(::input_n)].impulse[0][0])
::new_input == orig(::players[post(::input_n)-1].impulse[0][0])
::new_input == orig(::players[post(::input_n)].impulse[1][0])
::new_input == orig(::players[post(::input_n)-1].impulse[1][0])
::new_input == orig(::players[post(::input_n)].impulse[2][0])
::new_input == orig(::players[post(::input_n)-1].impulse[2][0])
::new_input == orig(::players[post(::input_n)].impulse[3][0])
::new_input == orig(::players[post(::input_n)-1].impulse[3][0])
::new_input == orig(::players[post(::input_n)].impulse[4][0])
::new_input == orig(::players[post(::input_n)-1].impulse[4][0])
::new_input == orig(::players[post(::input_n)].impulse[5][0])
::new_input == orig(::players[post(::input_n)-1].impulse[5][0])
::new_input == orig(::players[post(::input_n)].impulse[6][0])
::new_input == orig(::players[post(::input_n)-1].impulse[6][0])
::new_input == orig(::players[post(::input_n)].impulse[7][0])
::new_input == orig(::players[post(::input_n)-1].impulse[7][0])
::new_input == orig(::players[post(::input_n)].impulse[8][0])
::new_input == orig(::players[post(::input_n)-1].impulse[8][0])
::new_input == orig(::players[post(::input_n)].direction)
::new_input == orig(::players[post(::input_n)-1].stepCounter)
::new_input == orig(space[post(::input_n)-1].actionGroup->numActions)
::new_input == orig(player[post(::input_n)].id)
::new_input == orig(player[post(::input_n)-1].id)
::new_input == orig(player[post(::input_n)].type)
::new_input == orig(player[post(::input_n)-1].type)
::new_input == orig(player[post(::input_n)].retired)
::new_input == orig(player[post(::input_n)-1].retired)
::new_input == orig(player[post(::input_n)].body.bodyWidth)
::new_input == orig(player[post(::input_n)-1].body.bodyWidth)
::new_input == orig(player[post(::input_n)].body.bodyHeight)
::new_input == orig(player[post(::input_n)-1].body.bodyHeight)
::new_input == orig(player[post(::input_n)-1].impulse[0][0])
::new_input == orig(player[post(::input_n)].impulse[2][0])
::new_input == orig(player[post(::input_n)-1].impulse[2][0])
::new_input == orig(player[post(::input_n)].impulse[4][0])
::new_input == orig(player[post(::input_n)-1].impulse[4][0])
::new_input == orig(player[post(::input_n)].impulse[6][0])
::new_input == orig(player[post(::input_n)-1].impulse[6][0])
::new_input == orig(player[post(::input_n)].impulse[7][0])
::new_input == orig(player[post(::input_n)-1].impulse[7][0])
::new_input == orig(player[post(::input_n)].impulse[8][0])
::new_input == orig(player[post(::input_n)-1].impulse[8][0])
::new_input == orig(player[post(::input_n)].direction)
::new_input == space[::input_i-1].actionGroup->numActions
::new_input == player[::input_i].id
::new_input == player[::input_i-1].id
::new_input == player[::input_i].type
::new_input == player[::input_i-1].type
::new_input == player[::input_i].retired
::new_input == player[::input_i-1].retired
::new_input == player[::input_i].body.bodyWidth
::new_input == player[::input_i-1].body.bodyWidth
::new_input == player[::input_i].body.bodyHeight
::new_input == player[::input_i-1].body.bodyHeight
::new_input == player[::input_i-1].impulse[0][0]
::new_input == player[::input_i].impulse[2][0]
::new_input == player[::input_i-1].impulse[2][0]
::new_input == player[::input_i].impulse[4][0]
::new_input == player[::input_i-1].impulse[4][0]
::new_input == player[::input_i].impulse[6][0]
::new_input == player[::input_i-1].impulse[6][0]
::new_input == player[::input_i].impulse[7][0]
::new_input == player[::input_i-1].impulse[7][0]
::new_input == player[::input_i].impulse[8][0]
::new_input == player[::input_i-1].impulse[8][0]
::new_input == player[::input_i].direction
::new_input == orig(::playerSpace[post(::input_i)-1].actionGroup->numActions)
::new_input == orig(::players[post(::input_i)].id)
::new_input == orig(::players[post(::input_i)-1].id)
::new_input == orig(::players[post(::input_i)].type)
::new_input == orig(::players[post(::input_i)-1].type)
::new_input == orig(::players[post(::input_i)].retired)
::new_input == orig(::players[post(::input_i)-1].retired)
::new_input == orig(::players[post(::input_i)-1].body.type)
::new_input == orig(::players[post(::input_i)].body.bodyWidth)
::new_input == orig(::players[post(::input_i)].body.bodyHeight)
::new_input == orig(::players[post(::input_i)].body.color)
::new_input == orig(::players[post(::input_i)].basePosition.col)
::new_input == orig(::players[post(::input_i)].impulse[0][0])
::new_input == orig(::players[post(::input_i)-1].impulse[0][0])
::new_input == orig(::players[post(::input_i)].impulse[1][0])
::new_input == orig(::players[post(::input_i)-1].impulse[1][0])
::new_input == orig(::players[post(::input_i)].impulse[2][0])
::new_input == orig(::players[post(::input_i)-1].impulse[2][0])
::new_input == orig(::players[post(::input_i)].impulse[3][0])
::new_input == orig(::players[post(::input_i)-1].impulse[3][0])
::new_input == orig(::players[post(::input_i)].impulse[4][0])
::new_input == orig(::players[post(::input_i)-1].impulse[4][0])
::new_input == orig(::players[post(::input_i)].impulse[5][0])
::new_input == orig(::players[post(::input_i)-1].impulse[5][0])
::new_input == orig(::players[post(::input_i)].impulse[6][0])
::new_input == orig(::players[post(::input_i)-1].impulse[6][0])
::new_input == orig(::players[post(::input_i)].impulse[7][0])
::new_input == orig(::players[post(::input_i)-1].impulse[7][0])
::new_input == orig(::players[post(::input_i)].impulse[8][0])
::new_input == orig(::players[post(::input_i)-1].impulse[8][0])
::new_input == orig(::players[post(::input_i)].direction)
::new_input == orig(::players[post(::input_i)-1].stepCounter)
::new_input == orig(space[post(::input_i)-1].actionGroup->numActions)
::new_input == orig(player[post(::input_i)].id)
::new_input == orig(player[post(::input_i)-1].id)
::new_input == orig(player[post(::input_i)].type)
::new_input == orig(player[post(::input_i)-1].type)
::new_input == orig(player[post(::input_i)].retired)
::new_input == orig(player[post(::input_i)-1].retired)
::new_input == orig(player[post(::input_i)].body.bodyWidth)
::new_input == orig(player[post(::input_i)-1].body.bodyWidth)
::new_input == orig(player[post(::input_i)].body.bodyHeight)
::new_input == orig(player[post(::input_i)-1].body.bodyHeight)
::new_input == orig(player[post(::input_i)-1].impulse[0][0])
::new_input == orig(player[post(::input_i)].impulse[2][0])
::new_input == orig(player[post(::input_i)-1].impulse[2][0])
::new_input == orig(player[post(::input_i)].impulse[4][0])
::new_input == orig(player[post(::input_i)-1].impulse[4][0])
::new_input == orig(player[post(::input_i)].impulse[6][0])
::new_input == orig(player[post(::input_i)-1].impulse[6][0])
::new_input == orig(player[post(::input_i)].impulse[7][0])
::new_input == orig(player[post(::input_i)-1].impulse[7][0])
::new_input == orig(player[post(::input_i)].impulse[8][0])
::new_input == orig(player[post(::input_i)-1].impulse[8][0])
::new_input == orig(player[post(::input_i)].direction)
::new_input == space[::new_input].actionGroup->numActions
::new_input == player[::new_input].id
::new_input == player[::new_input].type
::new_input == player[::new_input].retired
::new_input == player[::new_input].body.bodyWidth
::new_input == player[::new_input].body.bodyHeight
::new_input == player[::new_input].impulse[0][0]
::new_input == player[::new_input].impulse[2][0]
::new_input == player[::new_input].impulse[4][0]
::new_input == player[::new_input].impulse[6][0]
::new_input == player[::new_input].impulse[7][0]
::new_input == player[::new_input].impulse[8][0]
::new_input == orig(::playerSpace[post(::new_input)].actionGroup->numActions)
::new_input == orig(::players[post(::new_input)].id)
::new_input == orig(::players[post(::new_input)].type)
::new_input == orig(::players[post(::new_input)].retired)
::new_input == orig(::players[post(::new_input)].body.type)
::new_input == orig(::players[post(::new_input)].impulse[0][0])
::new_input == orig(::players[post(::new_input)].impulse[1][0])
::new_input == orig(::players[post(::new_input)].impulse[2][0])
::new_input == orig(::players[post(::new_input)].impulse[3][0])
::new_input == orig(::players[post(::new_input)].impulse[4][0])
::new_input == orig(::players[post(::new_input)].impulse[5][0])
::new_input == orig(::players[post(::new_input)].impulse[6][0])
::new_input == orig(::players[post(::new_input)].impulse[7][0])
::new_input == orig(::players[post(::new_input)].impulse[8][0])
::new_input == orig(::players[post(::new_input)].stepCounter)
::new_input == orig(space[post(::new_input)].actionGroup->numActions)
::new_input == orig(player[post(::new_input)].id)
::new_input == orig(player[post(::new_input)].type)
::new_input == orig(player[post(::new_input)].retired)
::new_input == orig(player[post(::new_input)].body.bodyWidth)
::new_input == orig(player[post(::new_input)].body.bodyHeight)
::new_input == orig(player[post(::new_input)].impulse[0][0])
::new_input == orig(player[post(::new_input)].impulse[2][0])
::new_input == orig(player[post(::new_input)].impulse[4][0])
::new_input == orig(player[post(::new_input)].impulse[6][0])
::new_input == orig(player[post(::new_input)].impulse[7][0])
::new_input == orig(player[post(::new_input)].impulse[8][0])
::new_input == space[orig(::input_n)-1].actionGroup->numActions
::new_input == space[orig(::input_i)-1].actionGroup->numActions
::new_input == space[orig(::new_input)].actionGroup->numActions
::new_input == player[orig(::input_n)].id
::new_input == player[orig(::input_n)-1].id
::new_input == player[orig(::input_i)].id
::new_input == player[orig(::input_i)-1].id
::new_input == player[orig(::new_input)].id
::new_input == player[orig(::input_n)].type
::new_input == player[orig(::input_n)-1].type
::new_input == player[orig(::input_i)].type
::new_input == player[orig(::input_i)-1].type
::new_input == player[orig(::new_input)].type
::new_input == player[orig(::input_n)].retired
::new_input == player[orig(::input_n)-1].retired
::new_input == player[orig(::input_i)].retired
::new_input == player[orig(::input_i)-1].retired
::new_input == player[orig(::new_input)].retired
::new_input == player[orig(::input_n)].body.bodyWidth
::new_input == player[orig(::input_n)-1].body.bodyWidth
::new_input == player[orig(::input_i)].body.bodyWidth
::new_input == player[orig(::input_i)-1].body.bodyWidth
::new_input == player[orig(::new_input)].body.bodyWidth
::new_input == player[orig(::input_n)].body.bodyHeight
::new_input == player[orig(::input_n)-1].body.bodyHeight
::new_input == player[orig(::input_i)].body.bodyHeight
::new_input == player[orig(::input_i)-1].body.bodyHeight
::new_input == player[orig(::new_input)].body.bodyHeight
::new_input == player[orig(::input_n)-1].impulse[0][0]
::new_input == player[orig(::input_i)-1].impulse[0][0]
::new_input == player[orig(::new_input)].impulse[0][0]
::new_input == player[orig(::input_n)].impulse[2][0]
::new_input == player[orig(::input_n)-1].impulse[2][0]
::new_input == player[orig(::input_i)].impulse[2][0]
::new_input == player[orig(::input_i)-1].impulse[2][0]
::new_input == player[orig(::new_input)].impulse[2][0]
::new_input == player[orig(::input_n)].impulse[4][0]
::new_input == player[orig(::input_n)-1].impulse[4][0]
::new_input == player[orig(::input_i)].impulse[4][0]
::new_input == player[orig(::input_i)-1].impulse[4][0]
::new_input == player[orig(::new_input)].impulse[4][0]
::new_input == player[orig(::input_n)].impulse[6][0]
::new_input == player[orig(::input_n)-1].impulse[6][0]
::new_input == player[orig(::input_i)].impulse[6][0]
::new_input == player[orig(::input_i)-1].impulse[6][0]
::new_input == player[orig(::new_input)].impulse[6][0]
::new_input == player[orig(::input_n)].impulse[7][0]
::new_input == player[orig(::input_n)-1].impulse[7][0]
::new_input == player[orig(::input_i)].impulse[7][0]
::new_input == player[orig(::input_i)-1].impulse[7][0]
::new_input == player[orig(::new_input)].impulse[7][0]
::new_input == player[orig(::input_n)].impulse[8][0]
::new_input == player[orig(::input_n)-1].impulse[8][0]
::new_input == player[orig(::input_i)].impulse[8][0]
::new_input == player[orig(::input_i)-1].impulse[8][0]
::new_input == player[orig(::new_input)].impulse[8][0]
::new_input == player[orig(::input_n)].direction
::new_input == player[orig(::input_i)].direction
::new_input == orig(::playerSpace[::input_n-1].actionGroup->numActions)
::new_input == orig(::playerSpace[::input_i-1].actionGroup->numActions)
::new_input == orig(::playerSpace[::new_input].actionGroup->numActions)
::new_input == orig(::players[::input_n].id)
::new_input == orig(::players[::input_n-1].id)
::new_input == orig(::players[::input_i].id)
::new_input == orig(::players[::input_i-1].id)
::new_input == orig(::players[::new_input].id)
::new_input == orig(::players[::input_n].type)
::new_input == orig(::players[::input_n-1].type)
::new_input == orig(::players[::input_i].type)
::new_input == orig(::players[::input_i-1].type)
::new_input == orig(::players[::new_input].type)
::new_input == orig(::players[::input_n].retired)
::new_input == orig(::players[::input_n-1].retired)
::new_input == orig(::players[::input_i].retired)
::new_input == orig(::players[::input_i-1].retired)
::new_input == orig(::players[::new_input].retired)
::new_input == orig(::players[::input_n-1].body.type)
::new_input == orig(::players[::input_i-1].body.type)
::new_input == orig(::players[::new_input].body.type)
::new_input == orig(::players[::input_n].body.bodyWidth)
::new_input == orig(::players[::input_i].body.bodyWidth)
::new_input == orig(::players[::input_n].body.bodyHeight)
::new_input == orig(::players[::input_i].body.bodyHeight)
::new_input == orig(::players[::input_n].body.color)
::new_input == orig(::players[::input_i].body.color)
::new_input == orig(::players[::input_n].basePosition.col)
::new_input == orig(::players[::input_i].basePosition.col)
::new_input == orig(::players[::input_n].impulse[0][0])
::new_input == orig(::players[::input_n-1].impulse[0][0])
::new_input == orig(::players[::input_i].impulse[0][0])
::new_input == orig(::players[::input_i-1].impulse[0][0])
::new_input == orig(::players[::new_input].impulse[0][0])
::new_input == orig(::players[::input_n].impulse[1][0])
::new_input == orig(::players[::input_n-1].impulse[1][0])
::new_input == orig(::players[::input_i].impulse[1][0])
::new_input == orig(::players[::input_i-1].impulse[1][0])
::new_input == orig(::players[::new_input].impulse[1][0])
::new_input == orig(::players[::input_n].impulse[2][0])
::new_input == orig(::players[::input_n-1].impulse[2][0])
::new_input == orig(::players[::input_i].impulse[2][0])
::new_input == orig(::players[::input_i-1].impulse[2][0])
::new_input == orig(::players[::new_input].impulse[2][0])
::new_input == orig(::players[::input_n].impulse[3][0])
::new_input == orig(::players[::input_n-1].impulse[3][0])
::new_input == orig(::players[::input_i].impulse[3][0])
::new_input == orig(::players[::input_i-1].impulse[3][0])
::new_input == orig(::players[::new_input].impulse[3][0])
::new_input == orig(::players[::input_n].impulse[4][0])
::new_input == orig(::players[::input_n-1].impulse[4][0])
::new_input == orig(::players[::input_i].impulse[4][0])
::new_input == orig(::players[::input_i-1].impulse[4][0])
::new_input == orig(::players[::new_input].impulse[4][0])
::new_input == orig(::players[::input_n].impulse[5][0])
::new_input == orig(::players[::input_n-1].impulse[5][0])
::new_input == orig(::players[::input_i].impulse[5][0])
::new_input == orig(::players[::input_i-1].impulse[5][0])
::new_input == orig(::players[::new_input].impulse[5][0])
::new_input == orig(::players[::input_n].impulse[6][0])
::new_input == orig(::players[::input_n-1].impulse[6][0])
::new_input == orig(::players[::input_i].impulse[6][0])
::new_input == orig(::players[::input_i-1].impulse[6][0])
::new_input == orig(::players[::new_input].impulse[6][0])
::new_input == orig(::players[::input_n].impulse[7][0])
::new_input == orig(::players[::input_n-1].impulse[7][0])
::new_input == orig(::players[::input_i].impulse[7][0])
::new_input == orig(::players[::input_i-1].impulse[7][0])
::new_input == orig(::players[::new_input].impulse[7][0])
::new_input == orig(::players[::input_n].impulse[8][0])
::new_input == orig(::players[::input_n-1].impulse[8][0])
::new_input == orig(::players[::input_i].impulse[8][0])
::new_input == orig(::players[::input_i-1].impulse[8][0])
::new_input == orig(::players[::new_input].impulse[8][0])
::new_input == orig(::players[::input_n].direction)
::new_input == orig(::players[::input_i].direction)
::new_input == orig(::players[::input_n-1].stepCounter)
::new_input == orig(::players[::input_i-1].stepCounter)
::new_input == orig(::players[::new_input].stepCounter)
::new_input == orig(space[::input_n-1].actionGroup->numActions)
::new_input == orig(player[::input_n].id)
::new_input == orig(player[::input_n-1].id)
::new_input == orig(player[::input_n].type)
::new_input == orig(player[::input_n-1].type)
::new_input == orig(player[::input_n].retired)
::new_input == orig(player[::input_n-1].retired)
::new_input == orig(player[::input_n].body.bodyWidth)
::new_input == orig(player[::input_n-1].body.bodyWidth)
::new_input == orig(player[::input_n].body.bodyHeight)
::new_input == orig(player[::input_n-1].body.bodyHeight)
::new_input == orig(player[::input_n-1].impulse[0][0])
::new_input == orig(player[::input_n].impulse[2][0])
::new_input == orig(player[::input_n-1].impulse[2][0])
::new_input == orig(player[::input_n].impulse[4][0])
::new_input == orig(player[::input_n-1].impulse[4][0])
::new_input == orig(player[::input_n].impulse[6][0])
::new_input == orig(player[::input_n-1].impulse[6][0])
::new_input == orig(player[::input_n].impulse[7][0])
::new_input == orig(player[::input_n-1].impulse[7][0])
::new_input == orig(player[::input_n].impulse[8][0])
::new_input == orig(player[::input_n-1].impulse[8][0])
::new_input == orig(player[::input_n].direction)
::new_input == orig(space[::input_i-1].actionGroup->numActions)
::new_input == orig(player[::input_i].id)
::new_input == orig(player[::input_i-1].id)
::new_input == orig(player[::input_i].type)
::new_input == orig(player[::input_i-1].type)
::new_input == orig(player[::input_i].retired)
::new_input == orig(player[::input_i-1].retired)
::new_input == orig(player[::input_i].body.bodyWidth)
::new_input == orig(player[::input_i-1].body.bodyWidth)
::new_input == orig(player[::input_i].body.bodyHeight)
::new_input == orig(player[::input_i-1].body.bodyHeight)
::new_input == orig(player[::input_i-1].impulse[0][0])
::new_input == orig(player[::input_i].impulse[2][0])
::new_input == orig(player[::input_i-1].impulse[2][0])
::new_input == orig(player[::input_i].impulse[4][0])
::new_input == orig(player[::input_i-1].impulse[4][0])
::new_input == orig(player[::input_i].impulse[6][0])
::new_input == orig(player[::input_i-1].impulse[6][0])
::new_input == orig(player[::input_i].impulse[7][0])
::new_input == orig(player[::input_i-1].impulse[7][0])
::new_input == orig(player[::input_i].impulse[8][0])
::new_input == orig(player[::input_i-1].impulse[8][0])
::new_input == orig(player[::input_i].direction)
::new_input == orig(space[::new_input].actionGroup->numActions)
::new_input == orig(player[::new_input].id)
::new_input == orig(player[::new_input].type)
::new_input == orig(player[::new_input].retired)
::new_input == orig(player[::new_input].body.bodyWidth)
::new_input == orig(player[::new_input].body.bodyHeight)
::new_input == orig(player[::new_input].impulse[0][0])
::new_input == orig(player[::new_input].impulse[2][0])
::new_input == orig(player[::new_input].impulse[4][0])
::new_input == orig(player[::new_input].impulse[6][0])
::new_input == orig(player[::new_input].impulse[7][0])
::new_input == orig(player[::new_input].impulse[8][0])
::input_key == orig(::input_key)
::trace_pos == orig(::trace_pos)
player[] == orig(player[])
player[].id == player[].type
player[].id == player[].retired
player[].id == player[].impulse[2][0]
player[].id == player[].impulse[4][0]
player[].id == player[].impulse[6][0]
player[].id == player[].impulse[8][0]
player[].id == orig(player[].id)
player[].id == orig(player[].type)
player[].id == orig(player[].retired)
player[].id == orig(player[].impulse[2][0])
player[].id == orig(player[].impulse[4][0])
player[].id == orig(player[].impulse[6][0])
player[].id == orig(player[].impulse[8][0])
player[].body == orig(player[].body)
player[].body.type == orig(player[].body.type)
player[].body.visible == player[].body.tangible
player[].body.visible == player[].body.bodyMapsSize
player[].body.visible == orig(player[].body.visible)
player[].body.visible == orig(player[].body.tangible)
player[].body.visible == orig(player[].body.bodyMapsSize)
player[].body.bodyPoints == orig(player[].body.bodyPoints)
player[].body.bodyPoints[0] == orig(player[].body.bodyPoints[0])
player[].body.bodyPoints->position == orig(player[].body.bodyPoints->position)
player[].body.bodyPoints->player == orig(player[].body.bodyPoints->player)
player[].body.bodyPoints->player[0] == orig(player[].body.bodyPoints->player[0])
player[].body.bodyPoints->aspect == orig(player[].body.bodyPoints->aspect)
player[].body.bodyMaps == orig(player[].body.bodyMaps)
player[].body.bodySize == orig(player[].body.bodySize)
player[].body.bodyWidth == orig(player[].body.bodyWidth)
player[].body.bodyHeight == orig(player[].body.bodyHeight)
player[].body.color == orig(player[].body.color)
player[].basePosition == orig(player[].basePosition)
player[].impulse[0] == orig(player[].impulse[0])
player[].impulse[0][0] == orig(player[].impulse[0][0])
player[].impulse[1] == orig(player[].impulse[1])
player[].impulse[1][0] == orig(player[].impulse[1][0])
player[].impulse[2] == orig(player[].impulse[2])
player[].impulse[3] == orig(player[].impulse[3])
player[].impulse[3][0] == orig(player[].impulse[3][0])
player[].impulse[4] == orig(player[].impulse[4])
player[].impulse[5] == orig(player[].impulse[5])
player[].impulse[5][0] == orig(player[].impulse[5][0])
player[].impulse[6] == orig(player[].impulse[6])
player[].impulse[7] == orig(player[].impulse[7])
player[].impulse[7][0] == orig(player[].impulse[7][0])
player[].impulse[8] == orig(player[].impulse[8])
player[].direction == orig(player[].direction)
player[].magnetos == orig(player[].magnetos)
player[].magnetos[0] == orig(player[].magnetos[0])
player[].stepCounter == orig(player[].stepCounter)
player[].pilot == orig(player[].pilot)
player[].onCrash == orig(player[].onCrash)
player[].onPushed == orig(player[].onPushed)
orig(player) == player[::input_n-1].body.bodyPoints->player
orig(player) == orig(player[post(::input_n)-1].body.bodyPoints->player)
orig(player) == player[::input_i-1].body.bodyPoints->player
orig(player) == orig(player[post(::input_i)-1].body.bodyPoints->player)
orig(player) == player[::new_input].body.bodyPoints->player
orig(player) == orig(player[post(::new_input)].body.bodyPoints->player)
orig(player) == player[orig(::input_n)-1].body.bodyPoints->player
orig(player) == player[orig(::input_i)-1].body.bodyPoints->player
orig(player) == player[orig(::new_input)].body.bodyPoints->player
size(::players[]) == size(::players[].body.bodyPoints[0])
size(::players[]) == size(::players[].body.bodyPoints->player[0])
size(::players[]) == size(::players[].impulse[0])
size(::players[]) == size(::players[].impulse[0][0])
size(::players[]) == size(::players[].impulse[1])
size(::players[]) == size(::players[].impulse[1][0])
size(::players[]) == size(::players[].impulse[2])
size(::players[]) == size(::players[].impulse[2][0])
size(::players[]) == size(::players[].impulse[3])
size(::players[]) == size(::players[].impulse[3][0])
size(::players[]) == size(::players[].impulse[4])
size(::players[]) == size(::players[].impulse[4][0])
size(::players[]) == size(::players[].impulse[5])
size(::players[]) == size(::players[].impulse[5][0])
size(::players[]) == size(::players[].impulse[6])
size(::players[]) == size(::players[].impulse[6][0])
size(::players[]) == size(::players[].impulse[7])
size(::players[]) == size(::players[].impulse[7][0])
size(::players[]) == size(::players[].impulse[8])
size(::players[]) == size(::players[].impulse[8][0])
size(::players[]) == size(::players[].magnetos[0])
size(::players[]) == orig(size(::players[].body.bodyPoints[0]))
size(::players[]) == orig(size(::players[].body.bodyPoints->player[0]))
size(::players[]) == orig(size(::players[].impulse[0]))
size(::players[]) == orig(size(::players[].impulse[0][0]))
size(::players[]) == orig(size(::players[].impulse[1]))
size(::players[]) == orig(size(::players[].impulse[1][0]))
size(::players[]) == orig(size(::players[].impulse[2]))
size(::players[]) == orig(size(::players[].impulse[2][0]))
size(::players[]) == orig(size(::players[].impulse[3]))
size(::players[]) == orig(size(::players[].impulse[3][0]))
size(::players[]) == orig(size(::players[].impulse[4]))
size(::players[]) == orig(size(::players[].impulse[4][0]))
size(::players[]) == orig(size(::players[].impulse[5]))
size(::players[]) == orig(size(::players[].impulse[5][0]))
size(::players[]) == orig(size(::players[].impulse[6]))
size(::players[]) == orig(size(::players[].impulse[6][0]))
size(::players[]) == orig(size(::players[].impulse[7]))
size(::players[]) == orig(size(::players[].impulse[7][0]))
size(::players[]) == orig(size(::players[].impulse[8]))
size(::players[]) == orig(size(::players[].impulse[8][0]))
size(::players[]) == orig(size(::players[].magnetos[0]))
::crashedPlayers[::input_n-1] == ::crashedPlayers[::new_input]
::crashedPlayers[::input_i-1] == ::crashedPlayers[::new_input]
::crashedPlayers[::new_input] == ::crashedPlayers[orig(::input_n)-1]
::crashedPlayers[::new_input] == ::crashedPlayers[orig(::input_i)-1]
::crashedPlayers[::new_input] == orig(::crashedPlayers[post(::input_n)-1])
::crashedPlayers[::new_input] == orig(::crashedPlayers[post(::input_i)-1])
::crashedPlayers[::new_input] == orig(::crashedPlayers[::input_n-1])
::crashedPlayers[::new_input] == orig(::crashedPlayers[::input_i-1])
::crashedPlayers[::input_n-1].start == ::crashedPlayers[::new_input].start
::crashedPlayers[::input_i-1].start == ::crashedPlayers[::new_input].start
::crashedPlayers[::new_input].start == ::crashedPlayers[orig(::input_n)-1].start
::crashedPlayers[::new_input].start == ::crashedPlayers[orig(::input_i)-1].start
::crashedPlayers[::new_input].start == ::crashedPlayers[::input_n-1].end
::crashedPlayers[::new_input].start == ::crashedPlayers[::input_i-1].end
::crashedPlayers[::new_input].start == ::crashedPlayers[orig(::input_n)-1].end
::crashedPlayers[::new_input].start == ::crashedPlayers[orig(::input_i)-1].end
::crashedPlayers[::new_input].start == ::playerSpace[::input_n-1].playerNodes->start->prev
::crashedPlayers[::new_input].start == ::playerSpace[::input_i-1].playerNodes->start->prev
::crashedPlayers[::new_input].start == ::playerSpace[orig(::input_n)-1].playerNodes->start->prev
::crashedPlayers[::new_input].start == ::playerSpace[orig(::input_i)-1].playerNodes->start->prev
::crashedPlayers[::new_input].start == ::playerSpace[::input_n-1].playerNodes->end->next
::crashedPlayers[::new_input].start == ::playerSpace[::input_i-1].playerNodes->end->next
::crashedPlayers[::new_input].start == ::playerSpace[orig(::input_n)-1].playerNodes->end->next
::crashedPlayers[::new_input].start == ::playerSpace[orig(::input_i)-1].playerNodes->end->next
::crashedPlayers[::new_input].start == ::playerSpace[::input_n-1].guideNodes->start
::crashedPlayers[::new_input].start == ::playerSpace[::input_i-1].guideNodes->start
::crashedPlayers[::new_input].start == ::playerSpace[orig(::input_n)-1].guideNodes->start
::crashedPlayers[::new_input].start == ::playerSpace[orig(::input_i)-1].guideNodes->start
::crashedPlayers[::new_input].start == ::playerSpace[::input_n-1].guideNodes->end
::crashedPlayers[::new_input].start == ::playerSpace[::input_i-1].guideNodes->end
::crashedPlayers[::new_input].start == ::playerSpace[orig(::input_n)-1].guideNodes->end
::crashedPlayers[::new_input].start == ::playerSpace[orig(::input_i)-1].guideNodes->end
::crashedPlayers[::new_input].start == space[::input_n-1].playerNodes->start->prev
::crashedPlayers[::new_input].start == space[::input_n-1].playerNodes->end->next
::crashedPlayers[::new_input].start == space[::input_n-1].guideNodes->start
::crashedPlayers[::new_input].start == space[::input_n-1].guideNodes->end
::crashedPlayers[::new_input].start == orig(::crashedPlayers[post(::input_n)-1].start)
::crashedPlayers[::new_input].start == orig(::crashedPlayers[post(::input_n)-1].end)
::crashedPlayers[::new_input].start == orig(::playerSpace[post(::input_n)-1].playerNodes->start->prev)
::crashedPlayers[::new_input].start == orig(::playerSpace[post(::input_n)-1].playerNodes->end->next)
::crashedPlayers[::new_input].start == orig(::playerSpace[post(::input_n)-1].guideNodes->start)
::crashedPlayers[::new_input].start == orig(::playerSpace[post(::input_n)-1].guideNodes->end)
::crashedPlayers[::new_input].start == orig(space[post(::input_n)-1].playerNodes->start->prev)
::crashedPlayers[::new_input].start == orig(space[post(::input_n)-1].playerNodes->end->next)
::crashedPlayers[::new_input].start == orig(space[post(::input_n)-1].guideNodes->start)
::crashedPlayers[::new_input].start == orig(space[post(::input_n)-1].guideNodes->end)
::crashedPlayers[::new_input].start == space[::input_i-1].playerNodes->start->prev
::crashedPlayers[::new_input].start == space[::input_i-1].playerNodes->end->next
::crashedPlayers[::new_input].start == space[::input_i-1].guideNodes->start
::crashedPlayers[::new_input].start == space[::input_i-1].guideNodes->end
::crashedPlayers[::new_input].start == orig(::crashedPlayers[post(::input_i)-1].start)
::crashedPlayers[::new_input].start == orig(::crashedPlayers[post(::input_i)-1].end)
::crashedPlayers[::new_input].start == orig(::playerSpace[post(::input_i)-1].playerNodes->start->prev)
::crashedPlayers[::new_input].start == orig(::playerSpace[post(::input_i)-1].playerNodes->end->next)
::crashedPlayers[::new_input].start == orig(::playerSpace[post(::input_i)-1].guideNodes->start)
::crashedPlayers[::new_input].start == orig(::playerSpace[post(::input_i)-1].guideNodes->end)
::crashedPlayers[::new_input].start == orig(space[post(::input_i)-1].playerNodes->start->prev)
::crashedPlayers[::new_input].start == orig(space[post(::input_i)-1].playerNodes->end->next)
::crashedPlayers[::new_input].start == orig(space[post(::input_i)-1].guideNodes->start)
::crashedPlayers[::new_input].start == orig(space[post(::input_i)-1].guideNodes->end)
::crashedPlayers[::new_input].start == space[orig(::input_n)-1].playerNodes->start->prev
::crashedPlayers[::new_input].start == space[orig(::input_i)-1].playerNodes->start->prev
::crashedPlayers[::new_input].start == space[orig(::input_n)-1].playerNodes->end->next
::crashedPlayers[::new_input].start == space[orig(::input_i)-1].playerNodes->end->next
::crashedPlayers[::new_input].start == space[orig(::input_n)-1].guideNodes->start
::crashedPlayers[::new_input].start == space[orig(::input_i)-1].guideNodes->start
::crashedPlayers[::new_input].start == space[orig(::input_n)-1].guideNodes->end
::crashedPlayers[::new_input].start == space[orig(::input_i)-1].guideNodes->end
::crashedPlayers[::new_input].start == orig(::crashedPlayers[::input_n-1].start)
::crashedPlayers[::new_input].start == orig(::crashedPlayers[::input_i-1].start)
::crashedPlayers[::new_input].start == orig(::crashedPlayers[::input_n-1].end)
::crashedPlayers[::new_input].start == orig(::crashedPlayers[::input_i-1].end)
::crashedPlayers[::new_input].start == orig(::playerSpace[::input_n-1].playerNodes->start->prev)
::crashedPlayers[::new_input].start == orig(::playerSpace[::input_i-1].playerNodes->start->prev)
::crashedPlayers[::new_input].start == orig(::playerSpace[::input_n-1].playerNodes->end->next)
::crashedPlayers[::new_input].start == orig(::playerSpace[::input_i-1].playerNodes->end->next)
::crashedPlayers[::new_input].start == orig(::playerSpace[::input_n-1].guideNodes->start)
::crashedPlayers[::new_input].start == orig(::playerSpace[::input_i-1].guideNodes->start)
::crashedPlayers[::new_input].start == orig(::playerSpace[::input_n-1].guideNodes->end)
::crashedPlayers[::new_input].start == orig(::playerSpace[::input_i-1].guideNodes->end)
::crashedPlayers[::new_input].start == orig(space[::input_n-1].playerNodes->start->prev)
::crashedPlayers[::new_input].start == orig(space[::input_n-1].playerNodes->end->next)
::crashedPlayers[::new_input].start == orig(space[::input_n-1].guideNodes->start)
::crashedPlayers[::new_input].start == orig(space[::input_n-1].guideNodes->end)
::crashedPlayers[::new_input].start == orig(space[::input_i-1].playerNodes->start->prev)
::crashedPlayers[::new_input].start == orig(space[::input_i-1].playerNodes->end->next)
::crashedPlayers[::new_input].start == orig(space[::input_i-1].guideNodes->start)
::crashedPlayers[::new_input].start == orig(space[::input_i-1].guideNodes->end)
::playerSpace[::input_n-1] == ::playerSpace[::new_input]
::playerSpace[::input_i-1] == ::playerSpace[::new_input]
::playerSpace[::new_input] == ::playerSpace[orig(::input_n)-1]
::playerSpace[::new_input] == ::playerSpace[orig(::input_i)-1]
::playerSpace[::new_input] == space[::input_n-1]
::playerSpace[::new_input] == orig(::playerSpace[post(::input_n)-1])
::playerSpace[::new_input] == orig(space[post(::input_n)-1])
::playerSpace[::new_input] == space[::input_i-1]
::playerSpace[::new_input] == orig(::playerSpace[post(::input_i)-1])
::playerSpace[::new_input] == orig(space[post(::input_i)-1])
::playerSpace[::new_input] == space[orig(::input_n)-1]
::playerSpace[::new_input] == space[orig(::input_i)-1]
::playerSpace[::new_input] == orig(::playerSpace[::input_n-1])
::playerSpace[::new_input] == orig(::playerSpace[::input_i-1])
::playerSpace[::new_input] == orig(space[::input_n-1])
::playerSpace[::new_input] == orig(space[::input_i-1])
::playerSpace[::input_n-1].playerNodes == ::playerSpace[::new_input].playerNodes
::playerSpace[::input_i-1].playerNodes == ::playerSpace[::new_input].playerNodes
::playerSpace[::new_input].playerNodes == ::playerSpace[orig(::input_n)-1].playerNodes
::playerSpace[::new_input].playerNodes == ::playerSpace[orig(::input_i)-1].playerNodes
::playerSpace[::new_input].playerNodes == space[::input_n-1].playerNodes
::playerSpace[::new_input].playerNodes == orig(::playerSpace[post(::input_n)-1].playerNodes)
::playerSpace[::new_input].playerNodes == orig(space[post(::input_n)-1].playerNodes)
::playerSpace[::new_input].playerNodes == space[::input_i-1].playerNodes
::playerSpace[::new_input].playerNodes == orig(::playerSpace[post(::input_i)-1].playerNodes)
::playerSpace[::new_input].playerNodes == orig(space[post(::input_i)-1].playerNodes)
::playerSpace[::new_input].playerNodes == space[orig(::input_n)-1].playerNodes
::playerSpace[::new_input].playerNodes == space[orig(::input_i)-1].playerNodes
::playerSpace[::new_input].playerNodes == orig(::playerSpace[::input_n-1].playerNodes)
::playerSpace[::new_input].playerNodes == orig(::playerSpace[::input_i-1].playerNodes)
::playerSpace[::new_input].playerNodes == orig(space[::input_n-1].playerNodes)
::playerSpace[::new_input].playerNodes == orig(space[::input_i-1].playerNodes)
::playerSpace[::input_n-1].playerNodes[0] == ::playerSpace[::new_input].playerNodes[0]
::playerSpace[::input_i-1].playerNodes[0] == ::playerSpace[::new_input].playerNodes[0]
::playerSpace[::new_input].playerNodes[0] == ::playerSpace[orig(::input_n)-1].playerNodes[0]
::playerSpace[::new_input].playerNodes[0] == ::playerSpace[orig(::input_i)-1].playerNodes[0]
::playerSpace[::new_input].playerNodes[0] == space[::input_n-1].playerNodes[0]
::playerSpace[::new_input].playerNodes[0] == orig(::playerSpace[post(::input_n)-1].playerNodes[0])
::playerSpace[::new_input].playerNodes[0] == orig(space[post(::input_n)-1].playerNodes[0])
::playerSpace[::new_input].playerNodes[0] == space[::input_i-1].playerNodes[0]
::playerSpace[::new_input].playerNodes[0] == orig(::playerSpace[post(::input_i)-1].playerNodes[0])
::playerSpace[::new_input].playerNodes[0] == orig(space[post(::input_i)-1].playerNodes[0])
::playerSpace[::new_input].playerNodes[0] == space[orig(::input_n)-1].playerNodes[0]
::playerSpace[::new_input].playerNodes[0] == space[orig(::input_i)-1].playerNodes[0]
::playerSpace[::new_input].playerNodes[0] == orig(::playerSpace[::input_n-1].playerNodes[0])
::playerSpace[::new_input].playerNodes[0] == orig(::playerSpace[::input_i-1].playerNodes[0])
::playerSpace[::new_input].playerNodes[0] == orig(space[::input_n-1].playerNodes[0])
::playerSpace[::new_input].playerNodes[0] == orig(space[::input_i-1].playerNodes[0])
::playerSpace[::input_n-1].playerNodes->start == ::playerSpace[::new_input].playerNodes->start
::playerSpace[::input_i-1].playerNodes->start == ::playerSpace[::new_input].playerNodes->start
::playerSpace[::new_input].playerNodes->start == ::playerSpace[orig(::input_n)-1].playerNodes->start
::playerSpace[::new_input].playerNodes->start == ::playerSpace[orig(::input_i)-1].playerNodes->start
::playerSpace[::new_input].playerNodes->start == space[::input_n-1].playerNodes->start
::playerSpace[::new_input].playerNodes->start == orig(::playerSpace[post(::input_n)-1].playerNodes->start)
::playerSpace[::new_input].playerNodes->start == orig(space[post(::input_n)-1].playerNodes->start)
::playerSpace[::new_input].playerNodes->start == space[::input_i-1].playerNodes->start
::playerSpace[::new_input].playerNodes->start == orig(::playerSpace[post(::input_i)-1].playerNodes->start)
::playerSpace[::new_input].playerNodes->start == orig(space[post(::input_i)-1].playerNodes->start)
::playerSpace[::new_input].playerNodes->start == space[orig(::input_n)-1].playerNodes->start
::playerSpace[::new_input].playerNodes->start == space[orig(::input_i)-1].playerNodes->start
::playerSpace[::new_input].playerNodes->start == orig(::playerSpace[::input_n-1].playerNodes->start)
::playerSpace[::new_input].playerNodes->start == orig(::playerSpace[::input_i-1].playerNodes->start)
::playerSpace[::new_input].playerNodes->start == orig(space[::input_n-1].playerNodes->start)
::playerSpace[::new_input].playerNodes->start == orig(space[::input_i-1].playerNodes->start)
::playerSpace[::input_n-1].playerNodes->start[0] == ::playerSpace[::new_input].playerNodes->start[0]
::playerSpace[::input_i-1].playerNodes->start[0] == ::playerSpace[::new_input].playerNodes->start[0]
::playerSpace[::new_input].playerNodes->start[0] == ::playerSpace[orig(::input_n)-1].playerNodes->start[0]
::playerSpace[::new_input].playerNodes->start[0] == ::playerSpace[orig(::input_i)-1].playerNodes->start[0]
::playerSpace[::new_input].playerNodes->start[0] == space[::input_n-1].playerNodes->start[0]
::playerSpace[::new_input].playerNodes->start[0] == orig(::playerSpace[post(::input_n)-1].playerNodes->start[0])
::playerSpace[::new_input].playerNodes->start[0] == orig(space[post(::input_n)-1].playerNodes->start[0])
::playerSpace[::new_input].playerNodes->start[0] == space[::input_i-1].playerNodes->start[0]
::playerSpace[::new_input].playerNodes->start[0] == orig(::playerSpace[post(::input_i)-1].playerNodes->start[0])
::playerSpace[::new_input].playerNodes->start[0] == orig(space[post(::input_i)-1].playerNodes->start[0])
::playerSpace[::new_input].playerNodes->start[0] == space[orig(::input_n)-1].playerNodes->start[0]
::playerSpace[::new_input].playerNodes->start[0] == space[orig(::input_i)-1].playerNodes->start[0]
::playerSpace[::new_input].playerNodes->start[0] == orig(::playerSpace[::input_n-1].playerNodes->start[0])
::playerSpace[::new_input].playerNodes->start[0] == orig(::playerSpace[::input_i-1].playerNodes->start[0])
::playerSpace[::new_input].playerNodes->start[0] == orig(space[::input_n-1].playerNodes->start[0])
::playerSpace[::new_input].playerNodes->start[0] == orig(space[::input_i-1].playerNodes->start[0])
::playerSpace[::input_n-1].playerNodes->start->next == ::playerSpace[::new_input].playerNodes->start->next
::playerSpace[::input_i-1].playerNodes->start->next == ::playerSpace[::new_input].playerNodes->start->next
::playerSpace[::new_input].playerNodes->start->next == ::playerSpace[orig(::input_n)-1].playerNodes->start->next
::playerSpace[::new_input].playerNodes->start->next == ::playerSpace[orig(::input_i)-1].playerNodes->start->next
::playerSpace[::new_input].playerNodes->start->next == space[::input_n-1].playerNodes->start->next
::playerSpace[::new_input].playerNodes->start->next == orig(::playerSpace[post(::input_n)-1].playerNodes->start->next)
::playerSpace[::new_input].playerNodes->start->next == orig(space[post(::input_n)-1].playerNodes->start->next)
::playerSpace[::new_input].playerNodes->start->next == space[::input_i-1].playerNodes->start->next
::playerSpace[::new_input].playerNodes->start->next == orig(::playerSpace[post(::input_i)-1].playerNodes->start->next)
::playerSpace[::new_input].playerNodes->start->next == orig(space[post(::input_i)-1].playerNodes->start->next)
::playerSpace[::new_input].playerNodes->start->next == space[orig(::input_n)-1].playerNodes->start->next
::playerSpace[::new_input].playerNodes->start->next == space[orig(::input_i)-1].playerNodes->start->next
::playerSpace[::new_input].playerNodes->start->next == orig(::playerSpace[::input_n-1].playerNodes->start->next)
::playerSpace[::new_input].playerNodes->start->next == orig(::playerSpace[::input_i-1].playerNodes->start->next)
::playerSpace[::new_input].playerNodes->start->next == orig(space[::input_n-1].playerNodes->start->next)
::playerSpace[::new_input].playerNodes->start->next == orig(space[::input_i-1].playerNodes->start->next)
::playerSpace[::input_n-1].playerNodes->start->next[0] == ::playerSpace[::new_input].playerNodes->start->next[0]
::playerSpace[::input_i-1].playerNodes->start->next[0] == ::playerSpace[::new_input].playerNodes->start->next[0]
::playerSpace[::new_input].playerNodes->start->next[0] == ::playerSpace[orig(::input_n)-1].playerNodes->start->next[0]
::playerSpace[::new_input].playerNodes->start->next[0] == ::playerSpace[orig(::input_i)-1].playerNodes->start->next[0]
::playerSpace[::new_input].playerNodes->start->next[0] == space[::input_n-1].playerNodes->start->next[0]
::playerSpace[::new_input].playerNodes->start->next[0] == orig(::playerSpace[post(::input_n)-1].playerNodes->start->next[0])
::playerSpace[::new_input].playerNodes->start->next[0] == orig(space[post(::input_n)-1].playerNodes->start->next[0])
::playerSpace[::new_input].playerNodes->start->next[0] == space[::input_i-1].playerNodes->start->next[0]
::playerSpace[::new_input].playerNodes->start->next[0] == orig(::playerSpace[post(::input_i)-1].playerNodes->start->next[0])
::playerSpace[::new_input].playerNodes->start->next[0] == orig(space[post(::input_i)-1].playerNodes->start->next[0])
::playerSpace[::new_input].playerNodes->start->next[0] == space[orig(::input_n)-1].playerNodes->start->next[0]
::playerSpace[::new_input].playerNodes->start->next[0] == space[orig(::input_i)-1].playerNodes->start->next[0]
::playerSpace[::new_input].playerNodes->start->next[0] == orig(::playerSpace[::input_n-1].playerNodes->start->next[0])
::playerSpace[::new_input].playerNodes->start->next[0] == orig(::playerSpace[::input_i-1].playerNodes->start->next[0])
::playerSpace[::new_input].playerNodes->start->next[0] == orig(space[::input_n-1].playerNodes->start->next[0])
::playerSpace[::new_input].playerNodes->start->next[0] == orig(space[::input_i-1].playerNodes->start->next[0])
::playerSpace[::input_n-1].playerNodes->start->data == ::playerSpace[::new_input].playerNodes->start->data
::playerSpace[::input_i-1].playerNodes->start->data == ::playerSpace[::new_input].playerNodes->start->data
::playerSpace[::new_input].playerNodes->start->data == ::playerSpace[orig(::input_n)-1].playerNodes->start->data
::playerSpace[::new_input].playerNodes->start->data == ::playerSpace[orig(::input_i)-1].playerNodes->start->data
::playerSpace[::new_input].playerNodes->start->data == space[::input_n-1].playerNodes->start->data
::playerSpace[::new_input].playerNodes->start->data == orig(::playerSpace[post(::input_n)-1].playerNodes->start->data)
::playerSpace[::new_input].playerNodes->start->data == orig(space[post(::input_n)-1].playerNodes->start->data)
::playerSpace[::new_input].playerNodes->start->data == space[::input_i-1].playerNodes->start->data
::playerSpace[::new_input].playerNodes->start->data == orig(::playerSpace[post(::input_i)-1].playerNodes->start->data)
::playerSpace[::new_input].playerNodes->start->data == orig(space[post(::input_i)-1].playerNodes->start->data)
::playerSpace[::new_input].playerNodes->start->data == space[orig(::input_n)-1].playerNodes->start->data
::playerSpace[::new_input].playerNodes->start->data == space[orig(::input_i)-1].playerNodes->start->data
::playerSpace[::new_input].playerNodes->start->data == orig(::playerSpace[::input_n-1].playerNodes->start->data)
::playerSpace[::new_input].playerNodes->start->data == orig(::playerSpace[::input_i-1].playerNodes->start->data)
::playerSpace[::new_input].playerNodes->start->data == orig(space[::input_n-1].playerNodes->start->data)
::playerSpace[::new_input].playerNodes->start->data == orig(space[::input_i-1].playerNodes->start->data)
::playerSpace[::input_n-1].playerNodes->end == ::playerSpace[::new_input].playerNodes->end
::playerSpace[::input_i-1].playerNodes->end == ::playerSpace[::new_input].playerNodes->end
::playerSpace[::new_input].playerNodes->end == ::playerSpace[orig(::input_n)-1].playerNodes->end
::playerSpace[::new_input].playerNodes->end == ::playerSpace[orig(::input_i)-1].playerNodes->end
::playerSpace[::new_input].playerNodes->end == space[::input_n-1].playerNodes->end
::playerSpace[::new_input].playerNodes->end == orig(::playerSpace[post(::input_n)-1].playerNodes->end)
::playerSpace[::new_input].playerNodes->end == orig(space[post(::input_n)-1].playerNodes->end)
::playerSpace[::new_input].playerNodes->end == space[::input_i-1].playerNodes->end
::playerSpace[::new_input].playerNodes->end == orig(::playerSpace[post(::input_i)-1].playerNodes->end)
::playerSpace[::new_input].playerNodes->end == orig(space[post(::input_i)-1].playerNodes->end)
::playerSpace[::new_input].playerNodes->end == space[orig(::input_n)-1].playerNodes->end
::playerSpace[::new_input].playerNodes->end == space[orig(::input_i)-1].playerNodes->end
::playerSpace[::new_input].playerNodes->end == orig(::playerSpace[::input_n-1].playerNodes->end)
::playerSpace[::new_input].playerNodes->end == orig(::playerSpace[::input_i-1].playerNodes->end)
::playerSpace[::new_input].playerNodes->end == orig(space[::input_n-1].playerNodes->end)
::playerSpace[::new_input].playerNodes->end == orig(space[::input_i-1].playerNodes->end)
::playerSpace[::input_n-1].playerNodes->end[0] == ::playerSpace[::new_input].playerNodes->end[0]
::playerSpace[::input_i-1].playerNodes->end[0] == ::playerSpace[::new_input].playerNodes->end[0]
::playerSpace[::new_input].playerNodes->end[0] == ::playerSpace[orig(::input_n)-1].playerNodes->end[0]
::playerSpace[::new_input].playerNodes->end[0] == ::playerSpace[orig(::input_i)-1].playerNodes->end[0]
::playerSpace[::new_input].playerNodes->end[0] == space[::input_n-1].playerNodes->end[0]
::playerSpace[::new_input].playerNodes->end[0] == orig(::playerSpace[post(::input_n)-1].playerNodes->end[0])
::playerSpace[::new_input].playerNodes->end[0] == orig(space[post(::input_n)-1].playerNodes->end[0])
::playerSpace[::new_input].playerNodes->end[0] == space[::input_i-1].playerNodes->end[0]
::playerSpace[::new_input].playerNodes->end[0] == orig(::playerSpace[post(::input_i)-1].playerNodes->end[0])
::playerSpace[::new_input].playerNodes->end[0] == orig(space[post(::input_i)-1].playerNodes->end[0])
::playerSpace[::new_input].playerNodes->end[0] == space[orig(::input_n)-1].playerNodes->end[0]
::playerSpace[::new_input].playerNodes->end[0] == space[orig(::input_i)-1].playerNodes->end[0]
::playerSpace[::new_input].playerNodes->end[0] == orig(::playerSpace[::input_n-1].playerNodes->end[0])
::playerSpace[::new_input].playerNodes->end[0] == orig(::playerSpace[::input_i-1].playerNodes->end[0])
::playerSpace[::new_input].playerNodes->end[0] == orig(space[::input_n-1].playerNodes->end[0])
::playerSpace[::new_input].playerNodes->end[0] == orig(space[::input_i-1].playerNodes->end[0])
::playerSpace[::input_n-1].playerNodes->end->data == ::playerSpace[::new_input].playerNodes->end->data
::playerSpace[::input_i-1].playerNodes->end->data == ::playerSpace[::new_input].playerNodes->end->data
::playerSpace[::new_input].playerNodes->end->data == ::playerSpace[orig(::input_n)-1].playerNodes->end->data
::playerSpace[::new_input].playerNodes->end->data == ::playerSpace[orig(::input_i)-1].playerNodes->end->data
::playerSpace[::new_input].playerNodes->end->data == space[::input_n-1].playerNodes->end->data
::playerSpace[::new_input].playerNodes->end->data == orig(::playerSpace[post(::input_n)-1].playerNodes->end->data)
::playerSpace[::new_input].playerNodes->end->data == orig(space[post(::input_n)-1].playerNodes->end->data)
::playerSpace[::new_input].playerNodes->end->data == space[::input_i-1].playerNodes->end->data
::playerSpace[::new_input].playerNodes->end->data == orig(::playerSpace[post(::input_i)-1].playerNodes->end->data)
::playerSpace[::new_input].playerNodes->end->data == orig(space[post(::input_i)-1].playerNodes->end->data)
::playerSpace[::new_input].playerNodes->end->data == space[orig(::input_n)-1].playerNodes->end->data
::playerSpace[::new_input].playerNodes->end->data == space[orig(::input_i)-1].playerNodes->end->data
::playerSpace[::new_input].playerNodes->end->data == orig(::playerSpace[::input_n-1].playerNodes->end->data)
::playerSpace[::new_input].playerNodes->end->data == orig(::playerSpace[::input_i-1].playerNodes->end->data)
::playerSpace[::new_input].playerNodes->end->data == orig(space[::input_n-1].playerNodes->end->data)
::playerSpace[::new_input].playerNodes->end->data == orig(space[::input_i-1].playerNodes->end->data)
::playerSpace[::input_n-1].playerNodes->end->prev == ::playerSpace[::new_input].playerNodes->end->prev
::playerSpace[::input_i-1].playerNodes->end->prev == ::playerSpace[::new_input].playerNodes->end->prev
::playerSpace[::new_input].playerNodes->end->prev == ::playerSpace[orig(::input_n)-1].playerNodes->end->prev
::playerSpace[::new_input].playerNodes->end->prev == ::playerSpace[orig(::input_i)-1].playerNodes->end->prev
::playerSpace[::new_input].playerNodes->end->prev == space[::input_n-1].playerNodes->end->prev
::playerSpace[::new_input].playerNodes->end->prev == orig(::playerSpace[post(::input_n)-1].playerNodes->end->prev)
::playerSpace[::new_input].playerNodes->end->prev == orig(space[post(::input_n)-1].playerNodes->end->prev)
::playerSpace[::new_input].playerNodes->end->prev == space[::input_i-1].playerNodes->end->prev
::playerSpace[::new_input].playerNodes->end->prev == orig(::playerSpace[post(::input_i)-1].playerNodes->end->prev)
::playerSpace[::new_input].playerNodes->end->prev == orig(space[post(::input_i)-1].playerNodes->end->prev)
::playerSpace[::new_input].playerNodes->end->prev == space[orig(::input_n)-1].playerNodes->end->prev
::playerSpace[::new_input].playerNodes->end->prev == space[orig(::input_i)-1].playerNodes->end->prev
::playerSpace[::new_input].playerNodes->end->prev == orig(::playerSpace[::input_n-1].playerNodes->end->prev)
::playerSpace[::new_input].playerNodes->end->prev == orig(::playerSpace[::input_i-1].playerNodes->end->prev)
::playerSpace[::new_input].playerNodes->end->prev == orig(space[::input_n-1].playerNodes->end->prev)
::playerSpace[::new_input].playerNodes->end->prev == orig(space[::input_i-1].playerNodes->end->prev)
::playerSpace[::input_n-1].playerNodes->end->prev[0] == ::playerSpace[::new_input].playerNodes->end->prev[0]
::playerSpace[::input_i-1].playerNodes->end->prev[0] == ::playerSpace[::new_input].playerNodes->end->prev[0]
::playerSpace[::new_input].playerNodes->end->prev[0] == ::playerSpace[orig(::input_n)-1].playerNodes->end->prev[0]
::playerSpace[::new_input].playerNodes->end->prev[0] == ::playerSpace[orig(::input_i)-1].playerNodes->end->prev[0]
::playerSpace[::new_input].playerNodes->end->prev[0] == space[::input_n-1].playerNodes->end->prev[0]
::playerSpace[::new_input].playerNodes->end->prev[0] == orig(::playerSpace[post(::input_n)-1].playerNodes->end->prev[0])
::playerSpace[::new_input].playerNodes->end->prev[0] == orig(space[post(::input_n)-1].playerNodes->end->prev[0])
::playerSpace[::new_input].playerNodes->end->prev[0] == space[::input_i-1].playerNodes->end->prev[0]
::playerSpace[::new_input].playerNodes->end->prev[0] == orig(::playerSpace[post(::input_i)-1].playerNodes->end->prev[0])
::playerSpace[::new_input].playerNodes->end->prev[0] == orig(space[post(::input_i)-1].playerNodes->end->prev[0])
::playerSpace[::new_input].playerNodes->end->prev[0] == space[orig(::input_n)-1].playerNodes->end->prev[0]
::playerSpace[::new_input].playerNodes->end->prev[0] == space[orig(::input_i)-1].playerNodes->end->prev[0]
::playerSpace[::new_input].playerNodes->end->prev[0] == orig(::playerSpace[::input_n-1].playerNodes->end->prev[0])
::playerSpace[::new_input].playerNodes->end->prev[0] == orig(::playerSpace[::input_i-1].playerNodes->end->prev[0])
::playerSpace[::new_input].playerNodes->end->prev[0] == orig(space[::input_n-1].playerNodes->end->prev[0])
::playerSpace[::new_input].playerNodes->end->prev[0] == orig(space[::input_i-1].playerNodes->end->prev[0])
::playerSpace[::input_n-1].playerMap == ::playerSpace[::new_input].playerMap
::playerSpace[::input_i-1].playerMap == ::playerSpace[::new_input].playerMap
::playerSpace[::new_input].playerMap == ::playerSpace[orig(::input_n)-1].playerMap
::playerSpace[::new_input].playerMap == ::playerSpace[orig(::input_i)-1].playerMap
::playerSpace[::new_input].playerMap == space[::input_n-1].playerMap
::playerSpace[::new_input].playerMap == orig(::playerSpace[post(::input_n)-1].playerMap)
::playerSpace[::new_input].playerMap == orig(space[post(::input_n)-1].playerMap)
::playerSpace[::new_input].playerMap == space[::input_i-1].playerMap
::playerSpace[::new_input].playerMap == orig(::playerSpace[post(::input_i)-1].playerMap)
::playerSpace[::new_input].playerMap == orig(space[post(::input_i)-1].playerMap)
::playerSpace[::new_input].playerMap == space[orig(::input_n)-1].playerMap
::playerSpace[::new_input].playerMap == space[orig(::input_i)-1].playerMap
::playerSpace[::new_input].playerMap == orig(::playerSpace[::input_n-1].playerMap)
::playerSpace[::new_input].playerMap == orig(::playerSpace[::input_i-1].playerMap)
::playerSpace[::new_input].playerMap == orig(space[::input_n-1].playerMap)
::playerSpace[::new_input].playerMap == orig(space[::input_i-1].playerMap)
::playerSpace[::input_n-1].guideNodes == ::playerSpace[::new_input].guideNodes
::playerSpace[::input_i-1].guideNodes == ::playerSpace[::new_input].guideNodes
::playerSpace[::new_input].guideNodes == ::playerSpace[orig(::input_n)-1].guideNodes
::playerSpace[::new_input].guideNodes == ::playerSpace[orig(::input_i)-1].guideNodes
::playerSpace[::new_input].guideNodes == space[::input_n-1].guideNodes
::playerSpace[::new_input].guideNodes == orig(::playerSpace[post(::input_n)-1].guideNodes)
::playerSpace[::new_input].guideNodes == orig(space[post(::input_n)-1].guideNodes)
::playerSpace[::new_input].guideNodes == space[::input_i-1].guideNodes
::playerSpace[::new_input].guideNodes == orig(::playerSpace[post(::input_i)-1].guideNodes)
::playerSpace[::new_input].guideNodes == orig(space[post(::input_i)-1].guideNodes)
::playerSpace[::new_input].guideNodes == space[orig(::input_n)-1].guideNodes
::playerSpace[::new_input].guideNodes == space[orig(::input_i)-1].guideNodes
::playerSpace[::new_input].guideNodes == orig(::playerSpace[::input_n-1].guideNodes)
::playerSpace[::new_input].guideNodes == orig(::playerSpace[::input_i-1].guideNodes)
::playerSpace[::new_input].guideNodes == orig(space[::input_n-1].guideNodes)
::playerSpace[::new_input].guideNodes == orig(space[::input_i-1].guideNodes)
::playerSpace[::input_n-1].guideNodes[0] == ::playerSpace[::new_input].guideNodes[0]
::playerSpace[::input_i-1].guideNodes[0] == ::playerSpace[::new_input].guideNodes[0]
::playerSpace[::new_input].guideNodes[0] == ::playerSpace[orig(::input_n)-1].guideNodes[0]
::playerSpace[::new_input].guideNodes[0] == ::playerSpace[orig(::input_i)-1].guideNodes[0]
::playerSpace[::new_input].guideNodes[0] == space[::input_n-1].guideNodes[0]
::playerSpace[::new_input].guideNodes[0] == orig(::playerSpace[post(::input_n)-1].guideNodes[0])
::playerSpace[::new_input].guideNodes[0] == orig(space[post(::input_n)-1].guideNodes[0])
::playerSpace[::new_input].guideNodes[0] == space[::input_i-1].guideNodes[0]
::playerSpace[::new_input].guideNodes[0] == orig(::playerSpace[post(::input_i)-1].guideNodes[0])
::playerSpace[::new_input].guideNodes[0] == orig(space[post(::input_i)-1].guideNodes[0])
::playerSpace[::new_input].guideNodes[0] == space[orig(::input_n)-1].guideNodes[0]
::playerSpace[::new_input].guideNodes[0] == space[orig(::input_i)-1].guideNodes[0]
::playerSpace[::new_input].guideNodes[0] == orig(::playerSpace[::input_n-1].guideNodes[0])
::playerSpace[::new_input].guideNodes[0] == orig(::playerSpace[::input_i-1].guideNodes[0])
::playerSpace[::new_input].guideNodes[0] == orig(space[::input_n-1].guideNodes[0])
::playerSpace[::new_input].guideNodes[0] == orig(space[::input_i-1].guideNodes[0])
::playerSpace[::input_n-1].groundMap == ::playerSpace[::new_input].groundMap
::playerSpace[::input_i-1].groundMap == ::playerSpace[::new_input].groundMap
::playerSpace[::new_input].groundMap == ::playerSpace[orig(::input_n)-1].groundMap
::playerSpace[::new_input].groundMap == ::playerSpace[orig(::input_i)-1].groundMap
::playerSpace[::new_input].groundMap == space[::input_n-1].groundMap
::playerSpace[::new_input].groundMap == orig(::playerSpace[post(::input_n)-1].groundMap)
::playerSpace[::new_input].groundMap == orig(space[post(::input_n)-1].groundMap)
::playerSpace[::new_input].groundMap == space[::input_i-1].groundMap
::playerSpace[::new_input].groundMap == orig(::playerSpace[post(::input_i)-1].groundMap)
::playerSpace[::new_input].groundMap == orig(space[post(::input_i)-1].groundMap)
::playerSpace[::new_input].groundMap == space[orig(::input_n)-1].groundMap
::playerSpace[::new_input].groundMap == space[orig(::input_i)-1].groundMap
::playerSpace[::new_input].groundMap == orig(::playerSpace[::input_n-1].groundMap)
::playerSpace[::new_input].groundMap == orig(::playerSpace[::input_i-1].groundMap)
::playerSpace[::new_input].groundMap == orig(space[::input_n-1].groundMap)
::playerSpace[::new_input].groundMap == orig(space[::input_i-1].groundMap)
::playerSpace[::input_n-1].actionGroup == ::playerSpace[::new_input].actionGroup
::playerSpace[::input_i-1].actionGroup == ::playerSpace[::new_input].actionGroup
::playerSpace[::new_input].actionGroup == ::playerSpace[orig(::input_n)-1].actionGroup
::playerSpace[::new_input].actionGroup == ::playerSpace[orig(::input_i)-1].actionGroup
::playerSpace[::new_input].actionGroup == space[::input_n-1].actionGroup
::playerSpace[::new_input].actionGroup == orig(::playerSpace[post(::input_n)-1].actionGroup)
::playerSpace[::new_input].actionGroup == orig(space[post(::input_n)-1].actionGroup)
::playerSpace[::new_input].actionGroup == space[::input_i-1].actionGroup
::playerSpace[::new_input].actionGroup == orig(::playerSpace[post(::input_i)-1].actionGroup)
::playerSpace[::new_input].actionGroup == orig(space[post(::input_i)-1].actionGroup)
::playerSpace[::new_input].actionGroup == space[orig(::input_n)-1].actionGroup
::playerSpace[::new_input].actionGroup == space[orig(::input_i)-1].actionGroup
::playerSpace[::new_input].actionGroup == orig(::playerSpace[::input_n-1].actionGroup)
::playerSpace[::new_input].actionGroup == orig(::playerSpace[::input_i-1].actionGroup)
::playerSpace[::new_input].actionGroup == orig(space[::input_n-1].actionGroup)
::playerSpace[::new_input].actionGroup == orig(space[::input_i-1].actionGroup)
::playerSpace[::input_n-1].actionGroup[0] == ::playerSpace[::new_input].actionGroup[0]
::playerSpace[::input_i-1].actionGroup[0] == ::playerSpace[::new_input].actionGroup[0]
::playerSpace[::new_input].actionGroup[0] == ::playerSpace[orig(::input_n)-1].actionGroup[0]
::playerSpace[::new_input].actionGroup[0] == ::playerSpace[orig(::input_i)-1].actionGroup[0]
::playerSpace[::new_input].actionGroup[0] == space[::input_n-1].actionGroup[0]
::playerSpace[::new_input].actionGroup[0] == orig(::playerSpace[post(::input_n)-1].actionGroup[0])
::playerSpace[::new_input].actionGroup[0] == orig(space[post(::input_n)-1].actionGroup[0])
::playerSpace[::new_input].actionGroup[0] == space[::input_i-1].actionGroup[0]
::playerSpace[::new_input].actionGroup[0] == orig(::playerSpace[post(::input_i)-1].actionGroup[0])
::playerSpace[::new_input].actionGroup[0] == orig(space[post(::input_i)-1].actionGroup[0])
::playerSpace[::new_input].actionGroup[0] == space[orig(::input_n)-1].actionGroup[0]
::playerSpace[::new_input].actionGroup[0] == space[orig(::input_i)-1].actionGroup[0]
::playerSpace[::new_input].actionGroup[0] == orig(::playerSpace[::input_n-1].actionGroup[0])
::playerSpace[::new_input].actionGroup[0] == orig(::playerSpace[::input_i-1].actionGroup[0])
::playerSpace[::new_input].actionGroup[0] == orig(space[::input_n-1].actionGroup[0])
::playerSpace[::new_input].actionGroup[0] == orig(space[::input_i-1].actionGroup[0])
::players[::input_n] == ::players[::input_n].body.bodyPoints->player[0]
::players[::input_n] == ::players[::input_i].body.bodyPoints->player[0]
::players[::input_n] == ::players[orig(::input_n)].body.bodyPoints->player[0]
::players[::input_n] == ::players[orig(::input_i)].body.bodyPoints->player[0]
::players[::input_n] == orig(::players[post(::input_n)].body.bodyPoints->player[0])
::players[::input_n] == orig(::players[post(::input_i)].body.bodyPoints->player[0])
::players[::input_n] == orig(::players[::input_n].body.bodyPoints->player[0])
::players[::input_n] == orig(::players[::input_i].body.bodyPoints->player[0])
::players[::input_n-1] == ::players[::new_input]
::players[::input_i-1] == ::players[::new_input]
::players[::new_input] == ::players[orig(::input_n)-1]
::players[::new_input] == ::players[orig(::input_i)-1]
::players[::new_input] == ::players[::input_n-1].body.bodyPoints->player[0]
::players[::new_input] == ::players[::input_i-1].body.bodyPoints->player[0]
::players[::new_input] == ::players[::new_input].body.bodyPoints->player[0]
::players[::new_input] == ::players[orig(::input_n)-1].body.bodyPoints->player[0]
::players[::new_input] == ::players[orig(::input_i)-1].body.bodyPoints->player[0]
::players[::new_input] == ::players[orig(::new_input)].body.bodyPoints->player[0]
::players[::new_input] == orig(::players[post(::input_n)-1])
::players[::new_input] == orig(::players[post(::input_n)-1].body.bodyPoints->player[0])
::players[::new_input] == orig(::players[post(::input_i)-1])
::players[::new_input] == orig(::players[post(::input_i)-1].body.bodyPoints->player[0])
::players[::new_input] == orig(::players[post(::new_input)].body.bodyPoints->player[0])
::players[::new_input] == orig(::players[::input_n-1])
::players[::new_input] == orig(::players[::input_i-1])
::players[::new_input] == orig(::players[::input_n-1].body.bodyPoints->player[0])
::players[::new_input] == orig(::players[::input_i-1].body.bodyPoints->player[0])
::players[::new_input] == orig(::players[::new_input].body.bodyPoints->player[0])
::players[::input_n-1].body == ::players[::new_input].body
::players[::input_i-1].body == ::players[::new_input].body
::players[::new_input].body == ::players[orig(::input_n)-1].body
::players[::new_input].body == ::players[orig(::input_i)-1].body
::players[::new_input].body == orig(::players[post(::input_n)-1].body)
::players[::new_input].body == orig(::players[post(::input_i)-1].body)
::players[::new_input].body == orig(::players[::input_n-1].body)
::players[::new_input].body == orig(::players[::input_i-1].body)
::players[::input_n-1].body.bodyPoints == ::players[::new_input].body.bodyPoints
::players[::input_i-1].body.bodyPoints == ::players[::new_input].body.bodyPoints
::players[::new_input].body.bodyPoints == ::players[orig(::input_n)-1].body.bodyPoints
::players[::new_input].body.bodyPoints == ::players[orig(::input_i)-1].body.bodyPoints
::players[::new_input].body.bodyPoints == orig(::players[post(::input_n)-1].body.bodyPoints)
::players[::new_input].body.bodyPoints == orig(::players[post(::input_i)-1].body.bodyPoints)
::players[::new_input].body.bodyPoints == orig(::players[::input_n-1].body.bodyPoints)
::players[::new_input].body.bodyPoints == orig(::players[::input_i-1].body.bodyPoints)
::players[::input_n-1].body.bodyPoints[0] == ::players[::new_input].body.bodyPoints[0]
::players[::input_i-1].body.bodyPoints[0] == ::players[::new_input].body.bodyPoints[0]
::players[::new_input].body.bodyPoints[0] == ::players[orig(::input_n)-1].body.bodyPoints[0]
::players[::new_input].body.bodyPoints[0] == ::players[orig(::input_i)-1].body.bodyPoints[0]
::players[::new_input].body.bodyPoints[0] == orig(::players[post(::input_n)-1].body.bodyPoints[0])
::players[::new_input].body.bodyPoints[0] == orig(::players[post(::input_i)-1].body.bodyPoints[0])
::players[::new_input].body.bodyPoints[0] == orig(::players[::input_n-1].body.bodyPoints[0])
::players[::new_input].body.bodyPoints[0] == orig(::players[::input_i-1].body.bodyPoints[0])
::players[::input_n-1].body.bodyPoints->position == ::players[::new_input].body.bodyPoints->position
::players[::input_i-1].body.bodyPoints->position == ::players[::new_input].body.bodyPoints->position
::players[::new_input].body.bodyPoints->position == ::players[orig(::input_n)-1].body.bodyPoints->position
::players[::new_input].body.bodyPoints->position == ::players[orig(::input_i)-1].body.bodyPoints->position
::players[::new_input].body.bodyPoints->position == orig(::players[post(::input_n)-1].body.bodyPoints->position)
::players[::new_input].body.bodyPoints->position == orig(::players[post(::input_i)-1].body.bodyPoints->position)
::players[::new_input].body.bodyPoints->position == orig(::players[::input_n-1].body.bodyPoints->position)
::players[::new_input].body.bodyPoints->position == orig(::players[::input_i-1].body.bodyPoints->position)
::players[::input_n-1].body.bodyPoints->player == ::players[::new_input].body.bodyPoints->player
::players[::input_i-1].body.bodyPoints->player == ::players[::new_input].body.bodyPoints->player
::players[::new_input].body.bodyPoints->player == ::players[orig(::input_n)-1].body.bodyPoints->player
::players[::new_input].body.bodyPoints->player == ::players[orig(::input_i)-1].body.bodyPoints->player
::players[::new_input].body.bodyPoints->player == orig(::players[post(::input_n)-1].body.bodyPoints->player)
::players[::new_input].body.bodyPoints->player == orig(::players[post(::input_i)-1].body.bodyPoints->player)
::players[::new_input].body.bodyPoints->player == orig(::players[::input_n-1].body.bodyPoints->player)
::players[::new_input].body.bodyPoints->player == orig(::players[::input_i-1].body.bodyPoints->player)
::players[::input_n-1].body.bodyPoints->aspect == ::players[::new_input].body.bodyPoints->aspect
::players[::input_i-1].body.bodyPoints->aspect == ::players[::new_input].body.bodyPoints->aspect
::players[::new_input].body.bodyPoints->aspect == ::players[orig(::input_n)-1].body.bodyPoints->aspect
::players[::new_input].body.bodyPoints->aspect == ::players[orig(::input_i)-1].body.bodyPoints->aspect
::players[::new_input].body.bodyPoints->aspect == orig(::players[post(::input_n)-1].body.bodyPoints->aspect)
::players[::new_input].body.bodyPoints->aspect == orig(::players[post(::input_i)-1].body.bodyPoints->aspect)
::players[::new_input].body.bodyPoints->aspect == orig(::players[::input_n-1].body.bodyPoints->aspect)
::players[::new_input].body.bodyPoints->aspect == orig(::players[::input_i-1].body.bodyPoints->aspect)
::players[::input_n-1].body.bodyMaps == ::players[::new_input].body.bodyMaps
::players[::input_i-1].body.bodyMaps == ::players[::new_input].body.bodyMaps
::players[::new_input].body.bodyMaps == ::players[orig(::input_n)-1].body.bodyMaps
::players[::new_input].body.bodyMaps == ::players[orig(::input_i)-1].body.bodyMaps
::players[::new_input].body.bodyMaps == orig(::players[post(::input_n)-1].body.bodyMaps)
::players[::new_input].body.bodyMaps == orig(::players[post(::input_i)-1].body.bodyMaps)
::players[::new_input].body.bodyMaps == orig(::players[::input_n-1].body.bodyMaps)
::players[::new_input].body.bodyMaps == orig(::players[::input_i-1].body.bodyMaps)
::players[::input_n-1].body.bodyMapsSize == ::players[::new_input].body.bodyMapsSize
::players[::input_i-1].body.bodyMapsSize == ::players[::new_input].body.bodyMapsSize
::players[::new_input].body.bodyMapsSize == ::players[orig(::input_n)-1].body.bodyMapsSize
::players[::new_input].body.bodyMapsSize == ::players[orig(::input_i)-1].body.bodyMapsSize
::players[::new_input].body.bodyMapsSize == ::players[::input_n-1].body.bodyHeight
::players[::new_input].body.bodyMapsSize == ::players[::input_i-1].body.bodyHeight
::players[::new_input].body.bodyMapsSize == ::players[::new_input].body.bodyHeight
::players[::new_input].body.bodyMapsSize == ::players[orig(::input_n)-1].body.bodyHeight
::players[::new_input].body.bodyMapsSize == ::players[orig(::input_i)-1].body.bodyHeight
::players[::new_input].body.bodyMapsSize == ::players[orig(::new_input)].body.bodyHeight
::players[::new_input].body.bodyMapsSize == orig(::players[post(::input_n)-1].body.bodyMapsSize)
::players[::new_input].body.bodyMapsSize == orig(::players[post(::input_n)-1].body.bodyHeight)
::players[::new_input].body.bodyMapsSize == orig(::players[post(::input_i)-1].body.bodyMapsSize)
::players[::new_input].body.bodyMapsSize == orig(::players[post(::input_i)-1].body.bodyHeight)
::players[::new_input].body.bodyMapsSize == orig(::players[post(::new_input)].body.bodyHeight)
::players[::new_input].body.bodyMapsSize == orig(::players[::input_n-1].body.bodyMapsSize)
::players[::new_input].body.bodyMapsSize == orig(::players[::input_i-1].body.bodyMapsSize)
::players[::new_input].body.bodyMapsSize == orig(::players[::input_n-1].body.bodyHeight)
::players[::new_input].body.bodyMapsSize == orig(::players[::input_i-1].body.bodyHeight)
::players[::new_input].body.bodyMapsSize == orig(::players[::new_input].body.bodyHeight)
::players[::input_n-1].body.bodySize == ::players[::new_input].body.bodySize
::players[::input_i-1].body.bodySize == ::players[::new_input].body.bodySize
::players[::new_input].body.bodySize == ::players[orig(::input_n)-1].body.bodySize
::players[::new_input].body.bodySize == ::players[orig(::input_i)-1].body.bodySize
::players[::new_input].body.bodySize == orig(::players[post(::input_n)-1].body.bodySize)
::players[::new_input].body.bodySize == orig(::players[post(::input_i)-1].body.bodySize)
::players[::new_input].body.bodySize == orig(::players[::input_n-1].body.bodySize)
::players[::new_input].body.bodySize == orig(::players[::input_i-1].body.bodySize)
::players[::input_n-1].body.bodyWidth == ::players[::new_input].body.bodyWidth
::players[::input_i-1].body.bodyWidth == ::players[::new_input].body.bodyWidth
::players[::new_input].body.bodyWidth == ::players[orig(::input_n)-1].body.bodyWidth
::players[::new_input].body.bodyWidth == ::players[orig(::input_i)-1].body.bodyWidth
::players[::new_input].body.bodyWidth == orig(::players[post(::input_n)-1].body.bodyWidth)
::players[::new_input].body.bodyWidth == orig(::players[post(::input_i)-1].body.bodyWidth)
::players[::new_input].body.bodyWidth == orig(::players[::input_n-1].body.bodyWidth)
::players[::new_input].body.bodyWidth == orig(::players[::input_i-1].body.bodyWidth)
::players[::input_n-1].body.color == ::players[::new_input].body.color
::players[::input_i-1].body.color == ::players[::new_input].body.color
::players[::new_input].body.color == ::players[orig(::input_n)-1].body.color
::players[::new_input].body.color == ::players[orig(::input_i)-1].body.color
::players[::new_input].body.color == orig(::players[post(::input_n)-1].body.color)
::players[::new_input].body.color == orig(::players[post(::input_i)-1].body.color)
::players[::new_input].body.color == orig(::players[::input_n-1].body.color)
::players[::new_input].body.color == orig(::players[::input_i-1].body.color)
::players[::input_n-1].basePosition == ::players[::new_input].basePosition
::players[::input_i-1].basePosition == ::players[::new_input].basePosition
::players[::new_input].basePosition == ::players[orig(::input_n)-1].basePosition
::players[::new_input].basePosition == ::players[orig(::input_i)-1].basePosition
::players[::new_input].basePosition == orig(::players[post(::input_n)-1].basePosition)
::players[::new_input].basePosition == orig(::players[post(::input_i)-1].basePosition)
::players[::new_input].basePosition == orig(::players[::input_n-1].basePosition)
::players[::new_input].basePosition == orig(::players[::input_i-1].basePosition)
::players[::input_n-1].basePosition.col == ::players[::new_input].basePosition.col
::players[::input_i-1].basePosition.col == ::players[::new_input].basePosition.col
::players[::new_input].basePosition.col == ::players[orig(::input_n)-1].basePosition.col
::players[::new_input].basePosition.col == ::players[orig(::input_i)-1].basePosition.col
::players[::new_input].basePosition.col == orig(::players[post(::input_n)-1].basePosition.col)
::players[::new_input].basePosition.col == orig(::players[post(::input_i)-1].basePosition.col)
::players[::new_input].basePosition.col == orig(::players[post(::new_input)].basePosition.col)
::players[::new_input].basePosition.col == orig(::players[::input_n-1].basePosition.col)
::players[::new_input].basePosition.col == orig(::players[::input_i-1].basePosition.col)
::players[::new_input].basePosition.col == orig(::players[::new_input].basePosition.col)
::players[::input_n].basePosition.row == orig(::players[post(::input_n)].basePosition.row)
::players[::input_n].basePosition.row == orig(::players[post(::input_i)].basePosition.row)
::players[::input_n].basePosition.row == orig(::players[::input_n].basePosition.row)
::players[::input_n].basePosition.row == orig(::players[::input_i].basePosition.row)
::players[::input_n-1].basePosition.row == ::players[::input_n].stepCounter
::players[::input_i-1].basePosition.row == ::players[::input_n].stepCounter
::players[::new_input].basePosition.row == ::players[::input_n].stepCounter
::players[orig(::input_n)-1].basePosition.row == ::players[::input_n].stepCounter
::players[orig(::input_i)-1].basePosition.row == ::players[::input_n].stepCounter
::players[orig(::new_input)].basePosition.row == ::players[::input_n].stepCounter
::players[::input_n-1].impulse[0] == ::players[::new_input].impulse[0]
::players[::input_i-1].impulse[0] == ::players[::new_input].impulse[0]
::players[::new_input].impulse[0] == ::players[orig(::input_n)-1].impulse[0]
::players[::new_input].impulse[0] == ::players[orig(::input_i)-1].impulse[0]
::players[::new_input].impulse[0] == orig(::players[post(::input_n)-1].impulse[0])
::players[::new_input].impulse[0] == orig(::players[post(::input_i)-1].impulse[0])
::players[::new_input].impulse[0] == orig(::players[::input_n-1].impulse[0])
::players[::new_input].impulse[0] == orig(::players[::input_i-1].impulse[0])
::players[::input_n-1].impulse[1] == ::players[::new_input].impulse[1]
::players[::input_i-1].impulse[1] == ::players[::new_input].impulse[1]
::players[::new_input].impulse[1] == ::players[orig(::input_n)-1].impulse[1]
::players[::new_input].impulse[1] == ::players[orig(::input_i)-1].impulse[1]
::players[::new_input].impulse[1] == orig(::players[post(::input_n)-1].impulse[1])
::players[::new_input].impulse[1] == orig(::players[post(::input_i)-1].impulse[1])
::players[::new_input].impulse[1] == orig(::players[::input_n-1].impulse[1])
::players[::new_input].impulse[1] == orig(::players[::input_i-1].impulse[1])
::players[::input_n-1].impulse[2] == ::players[::new_input].impulse[2]
::players[::input_i-1].impulse[2] == ::players[::new_input].impulse[2]
::players[::new_input].impulse[2] == ::players[orig(::input_n)-1].impulse[2]
::players[::new_input].impulse[2] == ::players[orig(::input_i)-1].impulse[2]
::players[::new_input].impulse[2] == orig(::players[post(::input_n)-1].impulse[2])
::players[::new_input].impulse[2] == orig(::players[post(::input_i)-1].impulse[2])
::players[::new_input].impulse[2] == orig(::players[::input_n-1].impulse[2])
::players[::new_input].impulse[2] == orig(::players[::input_i-1].impulse[2])
::players[::input_n-1].impulse[3] == ::players[::new_input].impulse[3]
::players[::input_i-1].impulse[3] == ::players[::new_input].impulse[3]
::players[::new_input].impulse[3] == ::players[orig(::input_n)-1].impulse[3]
::players[::new_input].impulse[3] == ::players[orig(::input_i)-1].impulse[3]
::players[::new_input].impulse[3] == orig(::players[post(::input_n)-1].impulse[3])
::players[::new_input].impulse[3] == orig(::players[post(::input_i)-1].impulse[3])
::players[::new_input].impulse[3] == orig(::players[::input_n-1].impulse[3])
::players[::new_input].impulse[3] == orig(::players[::input_i-1].impulse[3])
::players[::input_n-1].impulse[4] == ::players[::new_input].impulse[4]
::players[::input_i-1].impulse[4] == ::players[::new_input].impulse[4]
::players[::new_input].impulse[4] == ::players[orig(::input_n)-1].impulse[4]
::players[::new_input].impulse[4] == ::players[orig(::input_i)-1].impulse[4]
::players[::new_input].impulse[4] == orig(::players[post(::input_n)-1].impulse[4])
::players[::new_input].impulse[4] == orig(::players[post(::input_i)-1].impulse[4])
::players[::new_input].impulse[4] == orig(::players[::input_n-1].impulse[4])
::players[::new_input].impulse[4] == orig(::players[::input_i-1].impulse[4])
::players[::input_n-1].impulse[5] == ::players[::new_input].impulse[5]
::players[::input_i-1].impulse[5] == ::players[::new_input].impulse[5]
::players[::new_input].impulse[5] == ::players[orig(::input_n)-1].impulse[5]
::players[::new_input].impulse[5] == ::players[orig(::input_i)-1].impulse[5]
::players[::new_input].impulse[5] == orig(::players[post(::input_n)-1].impulse[5])
::players[::new_input].impulse[5] == orig(::players[post(::input_i)-1].impulse[5])
::players[::new_input].impulse[5] == orig(::players[::input_n-1].impulse[5])
::players[::new_input].impulse[5] == orig(::players[::input_i-1].impulse[5])
::players[::input_n-1].impulse[6] == ::players[::new_input].impulse[6]
::players[::input_i-1].impulse[6] == ::players[::new_input].impulse[6]
::players[::new_input].impulse[6] == ::players[orig(::input_n)-1].impulse[6]
::players[::new_input].impulse[6] == ::players[orig(::input_i)-1].impulse[6]
::players[::new_input].impulse[6] == orig(::players[post(::input_n)-1].impulse[6])
::players[::new_input].impulse[6] == orig(::players[post(::input_i)-1].impulse[6])
::players[::new_input].impulse[6] == orig(::players[::input_n-1].impulse[6])
::players[::new_input].impulse[6] == orig(::players[::input_i-1].impulse[6])
::players[::input_n-1].impulse[7] == ::players[::new_input].impulse[7]
::players[::input_i-1].impulse[7] == ::players[::new_input].impulse[7]
::players[::new_input].impulse[7] == ::players[orig(::input_n)-1].impulse[7]
::players[::new_input].impulse[7] == ::players[orig(::input_i)-1].impulse[7]
::players[::new_input].impulse[7] == orig(::players[post(::input_n)-1].impulse[7])
::players[::new_input].impulse[7] == orig(::players[post(::input_i)-1].impulse[7])
::players[::new_input].impulse[7] == orig(::players[::input_n-1].impulse[7])
::players[::new_input].impulse[7] == orig(::players[::input_i-1].impulse[7])
::players[::input_n-1].impulse[8] == ::players[::new_input].impulse[8]
::players[::input_i-1].impulse[8] == ::players[::new_input].impulse[8]
::players[::new_input].impulse[8] == ::players[orig(::input_n)-1].impulse[8]
::players[::new_input].impulse[8] == ::players[orig(::input_i)-1].impulse[8]
::players[::new_input].impulse[8] == orig(::players[post(::input_n)-1].impulse[8])
::players[::new_input].impulse[8] == orig(::players[post(::input_i)-1].impulse[8])
::players[::new_input].impulse[8] == orig(::players[::input_n-1].impulse[8])
::players[::new_input].impulse[8] == orig(::players[::input_i-1].impulse[8])
::players[::input_n-1].magnetos == ::players[::new_input].magnetos
::players[::input_i-1].magnetos == ::players[::new_input].magnetos
::players[::new_input].magnetos == ::players[orig(::input_n)-1].magnetos
::players[::new_input].magnetos == ::players[orig(::input_i)-1].magnetos
::players[::new_input].magnetos == orig(::players[post(::input_n)-1].magnetos)
::players[::new_input].magnetos == orig(::players[post(::input_i)-1].magnetos)
::players[::new_input].magnetos == orig(::players[::input_n-1].magnetos)
::players[::new_input].magnetos == orig(::players[::input_i-1].magnetos)
::players[::input_n-1].magnetos[0] == ::players[::new_input].magnetos[0]
::players[::input_i-1].magnetos[0] == ::players[::new_input].magnetos[0]
::players[::new_input].magnetos[0] == ::players[orig(::input_n)-1].magnetos[0]
::players[::new_input].magnetos[0] == ::players[orig(::input_i)-1].magnetos[0]
::players[::new_input].magnetos[0] == orig(::players[post(::input_n)-1].magnetos[0])
::players[::new_input].magnetos[0] == orig(::players[post(::input_i)-1].magnetos[0])
::players[::new_input].magnetos[0] == orig(::players[::input_n-1].magnetos[0])
::players[::new_input].magnetos[0] == orig(::players[::input_i-1].magnetos[0])
::players[::input_n].stepCounter == orig(::players[post(::input_n)-1].basePosition.row)
::players[::input_n].stepCounter == orig(::players[post(::input_i)-1].basePosition.row)
::players[::input_n].stepCounter == orig(::players[post(::new_input)].basePosition.row)
::players[::input_n].stepCounter == orig(::players[::input_n-1].basePosition.row)
::players[::input_n].stepCounter == orig(::players[::input_i-1].basePosition.row)
::players[::input_n].stepCounter == orig(::players[::new_input].basePosition.row)
::players[::input_n].pilot == player[::input_n].pilot
::players[::input_n].pilot == player[::input_n-1].pilot
::players[::input_n].pilot == orig(player[post(::input_n)].pilot)
::players[::input_n].pilot == orig(player[post(::input_n)-1].pilot)
::players[::input_n].pilot == player[::input_i].pilot
::players[::input_n].pilot == player[::input_i-1].pilot
::players[::input_n].pilot == orig(player[post(::input_i)].pilot)
::players[::input_n].pilot == orig(player[post(::input_i)-1].pilot)
::players[::input_n].pilot == player[::new_input].pilot
::players[::input_n].pilot == orig(player[post(::new_input)].pilot)
::players[::input_n].pilot == player[orig(::input_n)].pilot
::players[::input_n].pilot == player[orig(::input_n)-1].pilot
::players[::input_n].pilot == player[orig(::input_i)].pilot
::players[::input_n].pilot == player[orig(::input_i)-1].pilot
::players[::input_n].pilot == player[orig(::new_input)].pilot
::players[::input_n].pilot == orig(player[::input_n].pilot)
::players[::input_n].pilot == orig(player[::input_n-1].pilot)
::players[::input_n].pilot == orig(player[::input_i].pilot)
::players[::input_n].pilot == orig(player[::input_i-1].pilot)
::players[::input_n].pilot == orig(player[::new_input].pilot)
::players[::input_n-1].pilot == ::players[::new_input].pilot
::players[::input_i-1].pilot == ::players[::new_input].pilot
::players[::new_input].pilot == ::players[orig(::input_n)-1].pilot
::players[::new_input].pilot == ::players[orig(::input_i)-1].pilot
::players[::new_input].pilot == orig(::players[post(::input_n)-1].pilot)
::players[::new_input].pilot == orig(::players[post(::input_i)-1].pilot)
::players[::new_input].pilot == orig(::players[::input_n-1].pilot)
::players[::new_input].pilot == orig(::players[::input_i-1].pilot)
::players[::input_n-1].onCrash == ::players[::new_input].onCrash
::players[::input_i-1].onCrash == ::players[::new_input].onCrash
::players[::new_input].onCrash == ::players[orig(::input_n)-1].onCrash
::players[::new_input].onCrash == ::players[orig(::input_i)-1].onCrash
::players[::new_input].onCrash == orig(::players[post(::input_n)-1].onCrash)
::players[::new_input].onCrash == orig(::players[post(::input_i)-1].onCrash)
::players[::new_input].onCrash == orig(::players[::input_n-1].onCrash)
::players[::new_input].onCrash == orig(::players[::input_i-1].onCrash)
::players[::input_n].onPushed == ::players[::input_n-1].onPushed
::players[::input_n].onPushed == ::players[::input_i-1].onPushed
::players[::input_n].onPushed == ::players[::new_input].onPushed
::players[::input_n].onPushed == ::players[orig(::input_n)-1].onPushed
::players[::input_n].onPushed == ::players[orig(::input_i)-1].onPushed
::players[::input_n].onPushed == ::players[orig(::new_input)].onPushed
::players[::input_n].onPushed == player[::input_n].onPushed
::players[::input_n].onPushed == player[::input_n-1].onPushed
::players[::input_n].onPushed == orig(::players[post(::input_n)-1].onPushed)
::players[::input_n].onPushed == orig(player[post(::input_n)].onPushed)
::players[::input_n].onPushed == orig(player[post(::input_n)-1].onPushed)
::players[::input_n].onPushed == player[::input_i].onPushed
::players[::input_n].onPushed == player[::input_i-1].onPushed
::players[::input_n].onPushed == orig(::players[post(::input_i)-1].onPushed)
::players[::input_n].onPushed == orig(player[post(::input_i)].onPushed)
::players[::input_n].onPushed == orig(player[post(::input_i)-1].onPushed)
::players[::input_n].onPushed == player[::new_input].onPushed
::players[::input_n].onPushed == orig(::players[post(::new_input)].onPushed)
::players[::input_n].onPushed == orig(player[post(::new_input)].onPushed)
::players[::input_n].onPushed == player[orig(::input_n)].onPushed
::players[::input_n].onPushed == player[orig(::input_n)-1].onPushed
::players[::input_n].onPushed == player[orig(::input_i)].onPushed
::players[::input_n].onPushed == player[orig(::input_i)-1].onPushed
::players[::input_n].onPushed == player[orig(::new_input)].onPushed
::players[::input_n].onPushed == orig(::players[::input_n-1].onPushed)
::players[::input_n].onPushed == orig(::players[::input_i-1].onPushed)
::players[::input_n].onPushed == orig(::players[::new_input].onPushed)
::players[::input_n].onPushed == orig(player[::input_n].onPushed)
::players[::input_n].onPushed == orig(player[::input_n-1].onPushed)
::players[::input_n].onPushed == orig(player[::input_i].onPushed)
::players[::input_n].onPushed == orig(player[::input_i-1].onPushed)
::players[::input_n].onPushed == orig(player[::new_input].onPushed)
player[::input_n] == player[::input_n].body.bodyPoints->player[0]
player[::input_n] == orig(player[post(::input_n)].body.bodyPoints->player[0])
player[::input_n] == player[::input_i].body.bodyPoints->player[0]
player[::input_n] == orig(player[post(::input_i)].body.bodyPoints->player[0])
player[::input_n] == player[orig(::input_n)].body.bodyPoints->player[0]
player[::input_n] == player[orig(::input_i)].body.bodyPoints->player[0]
player[::input_n] == orig(player[::input_n].body.bodyPoints->player[0])
player[::input_n] == orig(player[::input_i].body.bodyPoints->player[0])
player[::input_n-1] == player[::new_input]
player[::input_n-1].body == player[::new_input].body
player[::input_n-1].body.bodyPoints == player[::new_input].body.bodyPoints
player[::input_n-1].body.bodyPoints[0] == player[::new_input].body.bodyPoints[0]
player[::input_n-1].body.bodyPoints->position == player[::new_input].body.bodyPoints->position
player[::input_n-1].body.bodyPoints->player[0] == player[::new_input]
player[::input_n-1].body.bodyPoints->aspect == player[::new_input].body.bodyPoints->aspect
player[::input_n-1].body.bodyMaps == player[::new_input].body.bodyMaps
player[::input_n-1].body.color == player[::new_input].body.color
player[::input_n-1].basePosition == player[::new_input].basePosition
player[::input_n].basePosition.col == orig(player[post(::input_n)].basePosition.col)
player[::input_n].basePosition.col == orig(player[post(::input_i)].basePosition.col)
player[::input_n].basePosition.col == orig(player[::input_n].basePosition.col)
player[::input_n].basePosition.col == orig(player[::input_i].basePosition.col)
player[::input_n-1].basePosition.col == player[::new_input].basePosition.col
player[::input_n].basePosition.row == orig(player[post(::input_n)].basePosition.row)
player[::input_n].basePosition.row == orig(player[post(::input_i)].basePosition.row)
player[::input_n].basePosition.row == orig(player[::input_n].basePosition.row)
player[::input_n].basePosition.row == orig(player[::input_i].basePosition.row)
player[::input_n-1].basePosition.row == player[::new_input].basePosition.row
player[::input_n-1].impulse[0] == player[::new_input].impulse[0]
player[::input_n].impulse[0][0] == player[::input_n-1].impulse[1][0]
player[::input_n].impulse[0][0] == orig(player[post(::input_n)-1].impulse[1][0])
player[::input_n].impulse[0][0] == player[::input_i-1].impulse[1][0]
player[::input_n].impulse[0][0] == orig(player[post(::input_i)-1].impulse[1][0])
player[::input_n].impulse[0][0] == player[::new_input].impulse[1][0]
player[::input_n].impulse[0][0] == orig(player[post(::new_input)].impulse[1][0])
player[::input_n].impulse[0][0] == player[orig(::input_n)-1].impulse[1][0]
player[::input_n].impulse[0][0] == player[orig(::input_i)-1].impulse[1][0]
player[::input_n].impulse[0][0] == player[orig(::new_input)].impulse[1][0]
player[::input_n].impulse[0][0] == orig(player[::input_n-1].impulse[1][0])
player[::input_n].impulse[0][0] == orig(player[::input_i-1].impulse[1][0])
player[::input_n].impulse[0][0] == orig(player[::new_input].impulse[1][0])
player[::input_n-1].impulse[1] == player[::new_input].impulse[1]
player[::input_n-1].impulse[2] == player[::new_input].impulse[2]
player[::input_n-1].impulse[3] == player[::new_input].impulse[3]
player[::input_n-1].impulse[3][0] == player[::new_input].impulse[3][0]
player[::input_n-1].impulse[4] == player[::new_input].impulse[4]
player[::input_n-1].impulse[5] == player[::new_input].impulse[5]
player[::input_n-1].impulse[5][0] == player[::new_input].impulse[5][0]
player[::input_n-1].impulse[6] == player[::new_input].impulse[6]
player[::input_n-1].impulse[7] == player[::new_input].impulse[7]
player[::input_n-1].impulse[8] == player[::new_input].impulse[8]
player[::input_n-1].direction == player[::new_input].direction
player[::input_n-1].magnetos == player[::new_input].magnetos
player[::input_n-1].magnetos[0] == player[::new_input].magnetos[0]
player[::input_n-1].stepCounter == player[::new_input].stepCounter
player[::input_n-1].onCrash == player[::new_input].onCrash
orig(player[post(::input_n)-1]) == player[::new_input]
orig(player[post(::input_n)-1].body) == player[::new_input].body
orig(player[post(::input_n)-1].body.bodyPoints) == player[::new_input].body.bodyPoints
orig(player[post(::input_n)-1].body.bodyPoints[0]) == player[::new_input].body.bodyPoints[0]
orig(player[post(::input_n)-1].body.bodyPoints->position) == player[::new_input].body.bodyPoints->position
orig(player[post(::input_n)-1].body.bodyPoints->player[0]) == player[::new_input]
orig(player[post(::input_n)-1].body.bodyPoints->aspect) == player[::new_input].body.bodyPoints->aspect
orig(player[post(::input_n)-1].body.bodyMaps) == player[::new_input].body.bodyMaps
orig(player[post(::input_n)-1].body.color) == player[::new_input].body.color
orig(player[post(::input_n)-1].basePosition) == player[::new_input].basePosition
orig(player[post(::input_n)-1].basePosition.col) == orig(player[::new_input].basePosition.col)
orig(player[post(::input_n)-1].basePosition.row) == orig(player[::new_input].basePosition.row)
orig(player[post(::input_n)-1].impulse[0]) == player[::new_input].impulse[0]
orig(player[post(::input_n)-1].impulse[1]) == player[::new_input].impulse[1]
orig(player[post(::input_n)-1].impulse[2]) == player[::new_input].impulse[2]
orig(player[post(::input_n)-1].impulse[3]) == player[::new_input].impulse[3]
orig(player[post(::input_n)-1].impulse[3][0]) == player[::new_input].impulse[3][0]
orig(player[post(::input_n)-1].impulse[4]) == player[::new_input].impulse[4]
orig(player[post(::input_n)-1].impulse[5]) == player[::new_input].impulse[5]
orig(player[post(::input_n)-1].impulse[5][0]) == player[::new_input].impulse[5][0]
orig(player[post(::input_n)-1].impulse[6]) == player[::new_input].impulse[6]
orig(player[post(::input_n)-1].impulse[7]) == player[::new_input].impulse[7]
orig(player[post(::input_n)-1].impulse[8]) == player[::new_input].impulse[8]
orig(player[post(::input_n)-1].direction) == player[::new_input].direction
orig(player[post(::input_n)-1].magnetos) == player[::new_input].magnetos
orig(player[post(::input_n)-1].magnetos[0]) == player[::new_input].magnetos[0]
orig(player[post(::input_n)-1].stepCounter) == player[::new_input].stepCounter
orig(player[post(::input_n)-1].onCrash) == player[::new_input].onCrash
player[::input_i-1] == player[::new_input]
player[::input_i-1].body == player[::new_input].body
player[::input_i-1].body.bodyPoints == player[::new_input].body.bodyPoints
player[::input_i-1].body.bodyPoints[0] == player[::new_input].body.bodyPoints[0]
player[::input_i-1].body.bodyPoints->position == player[::new_input].body.bodyPoints->position
player[::input_i-1].body.bodyPoints->player[0] == player[::new_input]
player[::input_i-1].body.bodyPoints->aspect == player[::new_input].body.bodyPoints->aspect
player[::input_i-1].body.bodyMaps == player[::new_input].body.bodyMaps
player[::input_i-1].body.color == player[::new_input].body.color
player[::input_i-1].basePosition == player[::new_input].basePosition
player[::input_i-1].basePosition.col == player[::new_input].basePosition.col
player[::input_i-1].basePosition.row == player[::new_input].basePosition.row
player[::input_i-1].impulse[0] == player[::new_input].impulse[0]
player[::input_i-1].impulse[1] == player[::new_input].impulse[1]
player[::input_i-1].impulse[2] == player[::new_input].impulse[2]
player[::input_i-1].impulse[3] == player[::new_input].impulse[3]
player[::input_i-1].impulse[3][0] == player[::new_input].impulse[3][0]
player[::input_i-1].impulse[4] == player[::new_input].impulse[4]
player[::input_i-1].impulse[5] == player[::new_input].impulse[5]
player[::input_i-1].impulse[5][0] == player[::new_input].impulse[5][0]
player[::input_i-1].impulse[6] == player[::new_input].impulse[6]
player[::input_i-1].impulse[7] == player[::new_input].impulse[7]
player[::input_i-1].impulse[8] == player[::new_input].impulse[8]
player[::input_i-1].direction == player[::new_input].direction
player[::input_i-1].magnetos == player[::new_input].magnetos
player[::input_i-1].magnetos[0] == player[::new_input].magnetos[0]
player[::input_i-1].stepCounter == player[::new_input].stepCounter
player[::input_i-1].onCrash == player[::new_input].onCrash
orig(player[post(::input_i)-1]) == player[::new_input]
orig(player[post(::input_i)-1].body) == player[::new_input].body
orig(player[post(::input_i)-1].body.bodyPoints) == player[::new_input].body.bodyPoints
orig(player[post(::input_i)-1].body.bodyPoints[0]) == player[::new_input].body.bodyPoints[0]
orig(player[post(::input_i)-1].body.bodyPoints->position) == player[::new_input].body.bodyPoints->position
orig(player[post(::input_i)-1].body.bodyPoints->player[0]) == player[::new_input]
orig(player[post(::input_i)-1].body.bodyPoints->aspect) == player[::new_input].body.bodyPoints->aspect
orig(player[post(::input_i)-1].body.bodyMaps) == player[::new_input].body.bodyMaps
orig(player[post(::input_i)-1].body.color) == player[::new_input].body.color
orig(player[post(::input_i)-1].basePosition) == player[::new_input].basePosition
orig(player[post(::input_i)-1].basePosition.col) == orig(player[::new_input].basePosition.col)
orig(player[post(::input_i)-1].basePosition.row) == orig(player[::new_input].basePosition.row)
orig(player[post(::input_i)-1].impulse[0]) == player[::new_input].impulse[0]
orig(player[post(::input_i)-1].impulse[1]) == player[::new_input].impulse[1]
orig(player[post(::input_i)-1].impulse[2]) == player[::new_input].impulse[2]
orig(player[post(::input_i)-1].impulse[3]) == player[::new_input].impulse[3]
orig(player[post(::input_i)-1].impulse[3][0]) == player[::new_input].impulse[3][0]
orig(player[post(::input_i)-1].impulse[4]) == player[::new_input].impulse[4]
orig(player[post(::input_i)-1].impulse[5]) == player[::new_input].impulse[5]
orig(player[post(::input_i)-1].impulse[5][0]) == player[::new_input].impulse[5][0]
orig(player[post(::input_i)-1].impulse[6]) == player[::new_input].impulse[6]
orig(player[post(::input_i)-1].impulse[7]) == player[::new_input].impulse[7]
orig(player[post(::input_i)-1].impulse[8]) == player[::new_input].impulse[8]
orig(player[post(::input_i)-1].direction) == player[::new_input].direction
orig(player[post(::input_i)-1].magnetos) == player[::new_input].magnetos
orig(player[post(::input_i)-1].magnetos[0]) == player[::new_input].magnetos[0]
orig(player[post(::input_i)-1].stepCounter) == player[::new_input].stepCounter
orig(player[post(::input_i)-1].onCrash) == player[::new_input].onCrash
player[::new_input] == player[::new_input].body.bodyPoints->player[0]
player[::new_input] == orig(player[post(::new_input)].body.bodyPoints->player[0])
player[::new_input] == player[orig(::input_n)-1]
player[::new_input] == player[orig(::input_i)-1]
player[::new_input] == player[orig(::input_n)-1].body.bodyPoints->player[0]
player[::new_input] == player[orig(::input_i)-1].body.bodyPoints->player[0]
player[::new_input] == player[orig(::new_input)].body.bodyPoints->player[0]
player[::new_input] == orig(player[::input_n-1])
player[::new_input] == orig(player[::input_n-1].body.bodyPoints->player[0])
player[::new_input] == orig(player[::input_i-1])
player[::new_input] == orig(player[::input_i-1].body.bodyPoints->player[0])
player[::new_input] == orig(player[::new_input].body.bodyPoints->player[0])
player[::new_input].body == player[orig(::input_n)-1].body
player[::new_input].body == player[orig(::input_i)-1].body
player[::new_input].body == orig(player[::input_n-1].body)
player[::new_input].body == orig(player[::input_i-1].body)
player[::new_input].body.bodyPoints == player[orig(::input_n)-1].body.bodyPoints
player[::new_input].body.bodyPoints == player[orig(::input_i)-1].body.bodyPoints
player[::new_input].body.bodyPoints == orig(player[::input_n-1].body.bodyPoints)
player[::new_input].body.bodyPoints == orig(player[::input_i-1].body.bodyPoints)
player[::new_input].body.bodyPoints[0] == player[orig(::input_n)-1].body.bodyPoints[0]
player[::new_input].body.bodyPoints[0] == player[orig(::input_i)-1].body.bodyPoints[0]
player[::new_input].body.bodyPoints[0] == orig(player[::input_n-1].body.bodyPoints[0])
player[::new_input].body.bodyPoints[0] == orig(player[::input_i-1].body.bodyPoints[0])
player[::new_input].body.bodyPoints->position == player[orig(::input_n)-1].body.bodyPoints->position
player[::new_input].body.bodyPoints->position == player[orig(::input_i)-1].body.bodyPoints->position
player[::new_input].body.bodyPoints->position == orig(player[::input_n-1].body.bodyPoints->position)
player[::new_input].body.bodyPoints->position == orig(player[::input_i-1].body.bodyPoints->position)
player[::new_input].body.bodyPoints->aspect == player[orig(::input_n)-1].body.bodyPoints->aspect
player[::new_input].body.bodyPoints->aspect == player[orig(::input_i)-1].body.bodyPoints->aspect
player[::new_input].body.bodyPoints->aspect == orig(player[::input_n-1].body.bodyPoints->aspect)
player[::new_input].body.bodyPoints->aspect == orig(player[::input_i-1].body.bodyPoints->aspect)
player[::new_input].body.bodyMaps == player[orig(::input_n)-1].body.bodyMaps
player[::new_input].body.bodyMaps == player[orig(::input_i)-1].body.bodyMaps
player[::new_input].body.bodyMaps == orig(player[::input_n-1].body.bodyMaps)
player[::new_input].body.bodyMaps == orig(player[::input_i-1].body.bodyMaps)
player[::new_input].body.color == player[orig(::input_n)-1].body.color
player[::new_input].body.color == player[orig(::input_i)-1].body.color
player[::new_input].body.color == orig(player[::input_n-1].body.color)
player[::new_input].body.color == orig(player[::input_i-1].body.color)
player[::new_input].basePosition == player[orig(::input_n)-1].basePosition
player[::new_input].basePosition == player[orig(::input_i)-1].basePosition
player[::new_input].basePosition == orig(player[::input_n-1].basePosition)
player[::new_input].basePosition == orig(player[::input_i-1].basePosition)
player[::new_input].basePosition.col == player[orig(::input_n)-1].basePosition.col
player[::new_input].basePosition.col == player[orig(::input_i)-1].basePosition.col
player[::new_input].basePosition.row == player[orig(::input_n)-1].basePosition.row
player[::new_input].basePosition.row == player[orig(::input_i)-1].basePosition.row
player[::new_input].impulse[0] == player[orig(::input_n)-1].impulse[0]
player[::new_input].impulse[0] == player[orig(::input_i)-1].impulse[0]
player[::new_input].impulse[0] == orig(player[::input_n-1].impulse[0])
player[::new_input].impulse[0] == orig(player[::input_i-1].impulse[0])
player[::new_input].impulse[1] == player[orig(::input_n)-1].impulse[1]
player[::new_input].impulse[1] == player[orig(::input_i)-1].impulse[1]
player[::new_input].impulse[1] == orig(player[::input_n-1].impulse[1])
player[::new_input].impulse[1] == orig(player[::input_i-1].impulse[1])
player[::new_input].impulse[2] == player[orig(::input_n)-1].impulse[2]
player[::new_input].impulse[2] == player[orig(::input_i)-1].impulse[2]
player[::new_input].impulse[2] == orig(player[::input_n-1].impulse[2])
player[::new_input].impulse[2] == orig(player[::input_i-1].impulse[2])
player[::new_input].impulse[3] == player[orig(::input_n)-1].impulse[3]
player[::new_input].impulse[3] == player[orig(::input_i)-1].impulse[3]
player[::new_input].impulse[3] == orig(player[::input_n-1].impulse[3])
player[::new_input].impulse[3] == orig(player[::input_i-1].impulse[3])
player[::new_input].impulse[3][0] == player[orig(::input_n)-1].impulse[3][0]
player[::new_input].impulse[3][0] == player[orig(::input_i)-1].impulse[3][0]
player[::new_input].impulse[3][0] == orig(player[::input_n-1].impulse[3][0])
player[::new_input].impulse[3][0] == orig(player[::input_i-1].impulse[3][0])
player[::new_input].impulse[4] == player[orig(::input_n)-1].impulse[4]
player[::new_input].impulse[4] == player[orig(::input_i)-1].impulse[4]
player[::new_input].impulse[4] == orig(player[::input_n-1].impulse[4])
player[::new_input].impulse[4] == orig(player[::input_i-1].impulse[4])
player[::new_input].impulse[5] == player[orig(::input_n)-1].impulse[5]
player[::new_input].impulse[5] == player[orig(::input_i)-1].impulse[5]
player[::new_input].impulse[5] == orig(player[::input_n-1].impulse[5])
player[::new_input].impulse[5] == orig(player[::input_i-1].impulse[5])
player[::new_input].impulse[5][0] == player[orig(::input_n)-1].impulse[5][0]
player[::new_input].impulse[5][0] == player[orig(::input_i)-1].impulse[5][0]
player[::new_input].impulse[5][0] == orig(player[::input_n-1].impulse[5][0])
player[::new_input].impulse[5][0] == orig(player[::input_i-1].impulse[5][0])
player[::new_input].impulse[6] == player[orig(::input_n)-1].impulse[6]
player[::new_input].impulse[6] == player[orig(::input_i)-1].impulse[6]
player[::new_input].impulse[6] == orig(player[::input_n-1].impulse[6])
player[::new_input].impulse[6] == orig(player[::input_i-1].impulse[6])
player[::new_input].impulse[7] == player[orig(::input_n)-1].impulse[7]
player[::new_input].impulse[7] == player[orig(::input_i)-1].impulse[7]
player[::new_input].impulse[7] == orig(player[::input_n-1].impulse[7])
player[::new_input].impulse[7] == orig(player[::input_i-1].impulse[7])
player[::new_input].impulse[8] == player[orig(::input_n)-1].impulse[8]
player[::new_input].impulse[8] == player[orig(::input_i)-1].impulse[8]
player[::new_input].impulse[8] == orig(player[::input_n-1].impulse[8])
player[::new_input].impulse[8] == orig(player[::input_i-1].impulse[8])
player[::new_input].direction == player[orig(::input_n)-1].direction
player[::new_input].direction == player[orig(::input_i)-1].direction
player[::new_input].direction == orig(player[::input_n-1].direction)
player[::new_input].direction == orig(player[::input_i-1].direction)
player[::new_input].magnetos == player[orig(::input_n)-1].magnetos
player[::new_input].magnetos == player[orig(::input_i)-1].magnetos
player[::new_input].magnetos == orig(player[::input_n-1].magnetos)
player[::new_input].magnetos == orig(player[::input_i-1].magnetos)
player[::new_input].magnetos[0] == player[orig(::input_n)-1].magnetos[0]
player[::new_input].magnetos[0] == player[orig(::input_i)-1].magnetos[0]
player[::new_input].magnetos[0] == orig(player[::input_n-1].magnetos[0])
player[::new_input].magnetos[0] == orig(player[::input_i-1].magnetos[0])
player[::new_input].stepCounter == player[orig(::input_n)-1].stepCounter
player[::new_input].stepCounter == player[orig(::input_i)-1].stepCounter
player[::new_input].stepCounter == orig(player[::input_n-1].stepCounter)
player[::new_input].stepCounter == orig(player[::input_i-1].stepCounter)
player[::new_input].onCrash == player[orig(::input_n)-1].onCrash
player[::new_input].onCrash == player[orig(::input_i)-1].onCrash
player[::new_input].onCrash == orig(player[::input_n-1].onCrash)
player[::new_input].onCrash == orig(player[::input_i-1].onCrash)
::crashedPlayers has only one value
::crashedPlayers[] contains no nulls and has only one value, of length 1
::crashedPlayers[] elements has only one value
::crashedPlayers[].start == [null]
::crashedPlayers[].start elements == null
::playerSpace has only one value
::playerSpace[] contains no nulls and has only one value, of length 1
::playerSpace[] elements has only one value
::playerSpace[].playerNodes contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes elements has only one value
::playerSpace[].playerNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes[0] elements has only one value
::playerSpace[].playerNodes->start contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start elements has only one value
::playerSpace[].playerNodes->start[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start[0] elements has only one value
::playerSpace[].playerNodes->start->next contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next elements has only one value
::playerSpace[].playerNodes->start->next[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next[0] elements has only one value
::playerSpace[].playerNodes->start->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->data elements has only one value
::playerSpace[].playerNodes->end contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end elements has only one value
::playerSpace[].playerNodes->end[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end[0] elements has only one value
::playerSpace[].playerNodes->end->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->data elements has only one value
::playerSpace[].playerNodes->end->prev contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->prev elements has only one value
::playerSpace[].playerNodes->end->prev[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->prev[0] elements has only one value
::playerSpace[].playerMap contains no nulls and has only one value, of length 1
::playerSpace[].playerMap elements has only one value
::playerSpace[].guideNodes contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes elements has only one value
::playerSpace[].guideNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes[0] elements has only one value
::playerSpace[].groundMap contains no nulls and has only one value, of length 1
::playerSpace[].groundMap elements has only one value
::playerSpace[].actionGroup contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup elements has only one value
::playerSpace[].actionGroup[0] contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup[0] elements has only one value
::playerSpace[].actionGroup->numActions == [0]
::playerSpace[].actionGroup->numActions elements == 0
::players has only one value
::players[] contains no nulls and has only one value, of length 100
::players[].id == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].id elements == 0
::players[].body contains no nulls and has only one value, of length 100
::players[].body.type == [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.type elements one of { 0, 1 }
::players[].body.visible == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.visible elements one of { 0, 1 }
::players[].body.bodyPoints contains no nulls and has only one value, of length 100
::players[].body.bodyPoints[0] contains no nulls and has only one value, of length 100
::players[].body.bodyPoints->position contains no nulls and has only one value, of length 100
::players[].body.bodyPoints->player has only one value, of length 100
::players[].body.bodyPoints->player[0] has only one value, of length 100
::players[].body.bodyPoints->aspect == [46, 35, 35, 35, 35, 35, 86, 86, 86, 86, 86, 88, 91, 91, 91, 91, 91, 91, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyPoints->aspect elements >= 0
::players[].body.bodyMaps contains no nulls and has only one value, of length 100
::players[].body.bodyMapsSize == [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyMapsSize elements one of { 0, 1, 4 }
::players[].body.bodySize == [28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodySize elements >= 0
::players[].body.bodyWidth == [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyWidth elements one of { 0, 8, 14 }
::players[].body.bodyHeight == [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyHeight elements one of { 0, 4, 6 }
::players[].body.color == [3, 0, 1, 2, 3, 4, 0, 2, 4, 6, 8, 2, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.color elements >= 0
::players[].basePosition contains no nulls and has only one value, of length 100
::players[].basePosition.col one of { [40, 0, 3, 4, 6, 8, 0, 4, 8, 12, 16, 4, 10, 18, 26, 34, 42, 50, 58, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [40, 0, 3, 5, 6, 8, 0, 4, 8, 12, 16, 4, 10, 18, 26, 34, 42, 50, 58, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [40, 0, 3, 5, 7, 8, 0, 4, 8, 12, 16, 4, 10, 18, 26, 34, 42, 50, 58, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].basePosition.col elements >= 0
::players[].basePosition.row elements >= 0
::players[].impulse[0] contains no nulls and has only one value, of length 100
::players[].impulse[0][0] elements one of { 0, 1 }
::players[].impulse[0][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[1] contains no nulls and has only one value, of length 100
::players[].impulse[1][0] elements one of { 0, 1, 5 }
::players[].impulse[1][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[2] contains no nulls and has only one value, of length 100
::players[].impulse[3] contains no nulls and has only one value, of length 100
::players[].impulse[3][0] elements one of { 0, 1 }
::players[].impulse[4] contains no nulls and has only one value, of length 100
::players[].impulse[5] contains no nulls and has only one value, of length 100
::players[].impulse[5][0] elements one of { 0, 1 }
::players[].impulse[5][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[6] contains no nulls and has only one value, of length 100
::players[].impulse[7] contains no nulls and has only one value, of length 100
::players[].impulse[7][0] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].impulse[7][0] elements one of { 0, 1 }
::players[].impulse[8] contains no nulls and has only one value, of length 100
::players[].direction elements >= 0
::players[].magnetos has only one value, of length 100
::players[].magnetos[0] has only one value, of length 100
::players[].stepCounter == [0, 9, 7, 7, 4, 8, 9, 1, 8, 7, 1, 4, 8, 2, 10, 4, 2, 9, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].stepCounter elements >= 0
::players[].pilot has only one value, of length 100
::players[].onCrash has only one value, of length 100
::players[].onPushed has only one value, of length 100
::snakeBodyMap has only one value
::trainBodyMap has only one value
::giantBodyMap has only one value
::squareBodyMap has only one value
::circleBodyMap has only one value
::input_n == 1
::input_key == "k"
::trace_pos == "(40, 10) -> (40, 9)\n"
player[].id elements == 0
player[].body.type elements one of { 0, 1 }
player[].body.visible elements one of { 0, 1 }
player[].body.bodyPoints->aspect elements >= 0
player[].body.bodySize elements >= 0
player[].body.bodyWidth elements one of { 0, 8, 14 }
player[].body.bodyHeight elements one of { 0, 4, 6 }
player[].body.color elements >= 0
player[].basePosition.col elements >= 0
player[].basePosition.row elements >= 0
player[].impulse[0][0] elements one of { 0, 1 }
player[].impulse[1][0] elements one of { 0, 1, 5 }
player[].impulse[3][0] elements one of { 0, 1 }
player[].impulse[5][0] elements one of { 0, 1 }
player[].impulse[7][0] elements one of { 0, 1 }
player[].direction elements >= 0
player[].stepCounter elements >= 0
size(::players[]) == 100
::players[::input_n] has only one value
::players[::new_input] has only one value
::players[::input_n].body has only one value
::players[::new_input].body has only one value
::players[::input_n].body.bodyPoints has only one value
::players[::new_input].body.bodyPoints has only one value
::players[::input_n].body.bodyPoints[0] has only one value
::players[::new_input].body.bodyPoints[0] has only one value
::players[::input_n].body.bodyPoints->position has only one value
::players[::new_input].body.bodyPoints->position has only one value
::players[::input_n].body.bodyPoints->player has only one value
::players[::new_input].body.bodyPoints->player has only one value
::players[::input_n].body.bodyPoints->aspect == 35
::players[::new_input].body.bodyPoints->aspect == 46
::players[::input_n].body.bodyMaps has only one value
::players[::new_input].body.bodyMaps has only one value
::players[::new_input].body.bodyMapsSize == 4
::players[::new_input].body.bodySize == 28
::players[::new_input].body.bodyWidth == 8
::players[::new_input].body.color == 3
::players[::input_n].basePosition has only one value
::players[::new_input].basePosition has only one value
::players[::new_input].basePosition.col == 40
::players[::input_n].basePosition.row == 10
::players[::input_n].impulse[0] has only one value
::players[::new_input].impulse[0] has only one value
::players[::input_n].impulse[1] has only one value
::players[::new_input].impulse[1] has only one value
::players[::input_n].impulse[2] has only one value
::players[::new_input].impulse[2] has only one value
::players[::input_n].impulse[3] has only one value
::players[::new_input].impulse[3] has only one value
::players[::input_n].impulse[4] has only one value
::players[::new_input].impulse[4] has only one value
::players[::input_n].impulse[5] has only one value
::players[::new_input].impulse[5] has only one value
::players[::input_n].impulse[6] has only one value
::players[::new_input].impulse[6] has only one value
::players[::input_n].impulse[7] has only one value
::players[::new_input].impulse[7] has only one value
::players[::input_n].impulse[8] has only one value
::players[::new_input].impulse[8] has only one value
::players[::input_n].magnetos has only one value
::players[::new_input].magnetos has only one value
::players[::input_n].magnetos[0] has only one value
::players[::new_input].magnetos[0] has only one value
::players[::input_n].stepCounter == 9
::players[::input_n].pilot has only one value
::players[::new_input].pilot has only one value
::players[::input_n].onCrash == null
::players[::new_input].onCrash has only one value
::players[::input_n].onPushed has only one value
player[::input_n].body.bodyPoints->aspect one of { 35, 86 }
player[::input_n].impulse[1][0] one of { 0, 1 }
player[::new_input].body.bodyPoints->aspect one of { 35, 86 }
player[::new_input].direction one of { 1, 3, 5 }
::crashedPlayers[] elements == ::crashedPlayers[::new_input]
::crashedPlayers[].start elements == ::crashedPlayers[::new_input].start
::playerSpace[] elements == ::playerSpace[::new_input]
::playerSpace[].playerNodes elements == ::playerSpace[::new_input].playerNodes
::playerSpace[].playerNodes[0] elements == ::playerSpace[::new_input].playerNodes[0]
::playerSpace[].playerNodes->start elements == ::playerSpace[::new_input].playerNodes->start
::playerSpace[].playerNodes->start[0] elements == ::playerSpace[::new_input].playerNodes->start[0]
::playerSpace[].playerNodes->start->next elements == ::playerSpace[::new_input].playerNodes->start->next
::playerSpace[].playerNodes->start->next[0] elements == ::playerSpace[::new_input].playerNodes->start->next[0]
::playerSpace[].playerNodes->start->data elements == ::playerSpace[::new_input].playerNodes->start->data
::playerSpace[].playerNodes->end elements == ::playerSpace[::new_input].playerNodes->end
::playerSpace[].playerNodes->end[0] elements == ::playerSpace[::new_input].playerNodes->end[0]
::playerSpace[].playerNodes->end->data elements == ::playerSpace[::new_input].playerNodes->end->data
::playerSpace[].playerNodes->end->prev elements == ::playerSpace[::new_input].playerNodes->end->prev
::playerSpace[].playerNodes->end->prev[0] elements == ::playerSpace[::new_input].playerNodes->end->prev[0]
::playerSpace[].playerMap elements == ::playerSpace[::new_input].playerMap
::playerSpace[].guideNodes elements == ::playerSpace[::new_input].guideNodes
::playerSpace[].guideNodes[0] elements == ::playerSpace[::new_input].guideNodes[0]
::playerSpace[].groundMap elements == ::playerSpace[::new_input].groundMap
::playerSpace[].actionGroup elements == ::playerSpace[::new_input].actionGroup
::playerSpace[].actionGroup[0] elements == ::playerSpace[::new_input].actionGroup[0]
::playerSpace[].actionGroup->numActions elements == ::new_input
::players in ::players[].body.bodyPoints->player
player[::input_n] in ::players[]
player[::new_input] in ::players[]
::players[].id elements == ::new_input
player[::input_n].body in ::players[].body
player[::new_input].body in ::players[].body
player[::input_n].impulse[0][0] in ::players[].body.type
player[::input_n].impulse[1][0] in ::players[].body.type
player[::input_n].impulse[3][0] in ::players[].body.type
player[::input_n].impulse[5][0] in ::players[].body.type
player[::new_input].impulse[3][0] in ::players[].body.type
player[::new_input].impulse[5][0] in ::players[].body.type
::new_input in ::players[].body.visible
player[::input_n].impulse[0][0] in ::players[].body.visible
player[::input_n].impulse[1][0] in ::players[].body.visible
player[::input_n].impulse[3][0] in ::players[].body.visible
player[::input_n].impulse[5][0] in ::players[].body.visible
player[::new_input].impulse[3][0] in ::players[].body.visible
player[::new_input].impulse[5][0] in ::players[].body.visible
player[::input_n].body.bodyPoints in ::players[].body.bodyPoints
player[::new_input].body.bodyPoints in ::players[].body.bodyPoints
player[::input_n].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
player[::new_input].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
::players[].body.bodyPoints->position - ::players[].basePosition + 7304 == 0
player[::input_n].body.bodyPoints->position in ::players[].body.bodyPoints->position
player[::new_input].body.bodyPoints->position in ::players[].body.bodyPoints->position
orig(player) in ::players[].body.bodyPoints->player
player[::input_n].body.bodyPoints->player in ::players[].body.bodyPoints->player
player[::input_n] in ::players[].body.bodyPoints->player[0]
player[::new_input] in ::players[].body.bodyPoints->player[0]
::new_input in ::players[].body.bodyPoints->aspect
player[::input_n].body.bodyPoints->aspect in ::players[].body.bodyPoints->aspect
player[::new_input].body.bodyPoints->aspect in ::players[].body.bodyPoints->aspect
player[::input_n].body.bodyMaps in ::players[].body.bodyMaps
player[::new_input].body.bodyMaps in ::players[].body.bodyMaps
::new_input in ::players[].body.bodyMapsSize
player[::input_n].impulse[0][0] in ::players[].body.bodyMapsSize
player[::input_n].impulse[1][0] in ::players[].body.bodyMapsSize
player[::input_n].impulse[3][0] in ::players[].body.bodyMapsSize
player[::input_n].impulse[5][0] in ::players[].body.bodyMapsSize
player[::new_input].impulse[3][0] in ::players[].body.bodyMapsSize
player[::new_input].impulse[5][0] in ::players[].body.bodyMapsSize
::new_input in ::players[].body.bodySize
player[::input_n].impulse[0][0] in ::players[].body.bodySize
player[::input_n].impulse[1][0] in ::players[].body.bodySize
player[::input_n].impulse[3][0] in ::players[].body.bodySize
player[::input_n].impulse[5][0] in ::players[].body.bodySize
player[::new_input].impulse[3][0] in ::players[].body.bodySize
player[::new_input].impulse[5][0] in ::players[].body.bodySize
::input_n in ::players[].body.color
::players[::new_input].body.bodyMapsSize in ::players[].body.color
::players[::new_input].body.bodyWidth in ::players[].body.color
player[::input_n].body.color in ::players[].body.color
player[::input_n].impulse[0][0] in ::players[].body.color
player[::input_n].impulse[1][0] in ::players[].body.color
player[::input_n].impulse[3][0] in ::players[].body.color
player[::input_n].impulse[5][0] in ::players[].body.color
player[::new_input].body.color in ::players[].body.color
player[::new_input].basePosition.col in ::players[].body.color
player[::new_input].impulse[3][0] in ::players[].body.color
player[::new_input].impulse[5][0] in ::players[].body.color
player[::new_input].direction in ::players[].body.color
player[::new_input].stepCounter in ::players[].body.color
orig(player[::new_input].basePosition.col) in ::players[].body.color
player[::input_n].basePosition in ::players[].basePosition
player[::new_input].basePosition in ::players[].basePosition
::players[::new_input].body.bodyMapsSize in ::players[].basePosition.col
::players[::new_input].body.bodyWidth in ::players[].basePosition.col
::players[::new_input].body.color in ::players[].basePosition.col
::players[::input_n].basePosition.row in ::players[].basePosition.col
player[::input_n].basePosition.col in ::players[].basePosition.col
player[::new_input].basePosition.col in ::players[].basePosition.col
::input_n in ::players[].basePosition.row
::new_input in ::players[].basePosition.row
::players[::new_input].body.bodyMapsSize in ::players[].basePosition.row
::players[::new_input].body.color in ::players[].basePosition.row
player[::input_n].body.color in ::players[].basePosition.row
player[::input_n].basePosition.row in ::players[].basePosition.row
player[::input_n].impulse[0][0] in ::players[].basePosition.row
player[::input_n].impulse[1][0] in ::players[].basePosition.row
player[::input_n].impulse[3][0] in ::players[].basePosition.row
player[::input_n].impulse[5][0] in ::players[].basePosition.row
player[::new_input].body.color in ::players[].basePosition.row
player[::new_input].basePosition.row in ::players[].basePosition.row
player[::new_input].impulse[3][0] in ::players[].basePosition.row
player[::new_input].impulse[5][0] in ::players[].basePosition.row
player[::new_input].direction in ::players[].basePosition.row
::players[].impulse[0] - ::players[].impulse[1] + 4 == 0
::players[].impulse[0] - ::players[].impulse[2] + 8 == 0
::players[].impulse[0] - ::players[].impulse[3] + 12 == 0
::players[].impulse[0] - ::players[].impulse[4] + 16 == 0
::players[].impulse[0] - ::players[].impulse[5] + 20 == 0
::players[].impulse[0] - ::players[].impulse[6] + 24 == 0
::players[].impulse[0] - ::players[].impulse[7] + 28 == 0
::players[].impulse[0] - ::players[].impulse[8] + 32 == 0
player[::input_n].impulse[0] in ::players[].impulse[0]
player[::new_input].impulse[0] in ::players[].impulse[0]
::input_n in ::players[].impulse[0][0]
player[::input_n].impulse[0][0] in ::players[].impulse[0][0]
player[::input_n].impulse[1][0] in ::players[].impulse[0][0]
player[::input_n].impulse[3][0] in ::players[].impulse[0][0]
player[::input_n].impulse[5][0] in ::players[].impulse[0][0]
player[::new_input].impulse[3][0] in ::players[].impulse[0][0]
player[::new_input].impulse[5][0] in ::players[].impulse[0][0]
::players[].impulse[1] - ::players[].impulse[2] + 4 == 0
::players[].impulse[1] - ::players[].impulse[3] + 8 == 0
::players[].impulse[1] - ::players[].impulse[4] + 12 == 0
::players[].impulse[1] - ::players[].impulse[5] + 16 == 0
::players[].impulse[1] - ::players[].impulse[6] + 20 == 0
::players[].impulse[1] - ::players[].impulse[7] + 24 == 0
::players[].impulse[1] - ::players[].impulse[8] + 28 == 0
player[::input_n].impulse[1] in ::players[].impulse[1]
player[::new_input].impulse[1] in ::players[].impulse[1]
::input_n in ::players[].impulse[1][0]
player[::input_n].impulse[0][0] in ::players[].impulse[1][0]
player[::input_n].impulse[1][0] in ::players[].impulse[1][0]
player[::input_n].impulse[3][0] in ::players[].impulse[1][0]
player[::input_n].impulse[5][0] in ::players[].impulse[1][0]
player[::new_input].impulse[3][0] in ::players[].impulse[1][0]
player[::new_input].impulse[5][0] in ::players[].impulse[1][0]
::players[].impulse[2] - ::players[].impulse[3] + 4 == 0
::players[].impulse[2] - ::players[].impulse[4] + 8 == 0
::players[].impulse[2] - ::players[].impulse[5] + 12 == 0
::players[].impulse[2] - ::players[].impulse[6] + 16 == 0
::players[].impulse[2] - ::players[].impulse[7] + 20 == 0
::players[].impulse[2] - ::players[].impulse[8] + 24 == 0
player[::input_n].impulse[2] in ::players[].impulse[2]
player[::new_input].impulse[2] in ::players[].impulse[2]
::players[].impulse[3] - ::players[].impulse[4] + 4 == 0
::players[].impulse[3] - ::players[].impulse[5] + 8 == 0
::players[].impulse[3] - ::players[].impulse[6] + 12 == 0
::players[].impulse[3] - ::players[].impulse[7] + 16 == 0
::players[].impulse[3] - ::players[].impulse[8] + 20 == 0
player[::input_n].impulse[3] in ::players[].impulse[3]
player[::new_input].impulse[3] in ::players[].impulse[3]
::input_n in ::players[].impulse[3][0]
player[::input_n].impulse[0][0] in ::players[].impulse[3][0]
player[::input_n].impulse[1][0] in ::players[].impulse[3][0]
player[::input_n].impulse[3][0] in ::players[].impulse[3][0]
player[::input_n].impulse[5][0] in ::players[].impulse[3][0]
player[::new_input].impulse[3][0] in ::players[].impulse[3][0]
player[::new_input].impulse[5][0] in ::players[].impulse[3][0]
::players[].impulse[4] - ::players[].impulse[5] + 4 == 0
::players[].impulse[4] - ::players[].impulse[6] + 8 == 0
::players[].impulse[4] - ::players[].impulse[7] + 12 == 0
::players[].impulse[4] - ::players[].impulse[8] + 16 == 0
player[::input_n].impulse[4] in ::players[].impulse[4]
player[::new_input].impulse[4] in ::players[].impulse[4]
::players[].impulse[5] - ::players[].impulse[6] + 4 == 0
::players[].impulse[5] - ::players[].impulse[7] + 8 == 0
::players[].impulse[5] - ::players[].impulse[8] + 12 == 0
player[::input_n].impulse[5] in ::players[].impulse[5]
player[::new_input].impulse[5] in ::players[].impulse[5]
::input_n in ::players[].impulse[5][0]
player[::input_n].impulse[0][0] in ::players[].impulse[5][0]
player[::input_n].impulse[1][0] in ::players[].impulse[5][0]
player[::input_n].impulse[3][0] in ::players[].impulse[5][0]
player[::input_n].impulse[5][0] in ::players[].impulse[5][0]
player[::new_input].impulse[3][0] in ::players[].impulse[5][0]
player[::new_input].impulse[5][0] in ::players[].impulse[5][0]
::players[].impulse[6] - ::players[].impulse[7] + 4 == 0
::players[].impulse[6] - ::players[].impulse[8] + 8 == 0
player[::input_n].impulse[6] in ::players[].impulse[6]
player[::new_input].impulse[6] in ::players[].impulse[6]
::players[].impulse[7] - ::players[].impulse[8] + 4 == 0
player[::input_n].impulse[7] in ::players[].impulse[7]
player[::new_input].impulse[7] in ::players[].impulse[7]
::input_n in ::players[].impulse[7][0]
player[::input_n].impulse[0][0] in ::players[].impulse[7][0]
player[::input_n].impulse[1][0] in ::players[].impulse[7][0]
player[::input_n].impulse[3][0] in ::players[].impulse[7][0]
player[::input_n].impulse[5][0] in ::players[].impulse[7][0]
player[::new_input].impulse[3][0] in ::players[].impulse[7][0]
player[::new_input].impulse[5][0] in ::players[].impulse[7][0]
player[::input_n].impulse[8] in ::players[].impulse[8]
player[::new_input].impulse[8] in ::players[].impulse[8]
::players[::new_input].body.color in ::players[].direction
player[::input_n].impulse[0][0] in ::players[].direction
player[::input_n].impulse[1][0] in ::players[].direction
player[::input_n].impulse[3][0] in ::players[].direction
player[::input_n].impulse[5][0] in ::players[].direction
player[::new_input].impulse[3][0] in ::players[].direction
player[::new_input].impulse[5][0] in ::players[].direction
player[::new_input].direction in ::players[].direction
player[::input_n].magnetos in ::players[].magnetos
player[::new_input].magnetos in ::players[].magnetos
player[::input_n].magnetos[0] in ::players[].magnetos[0]
player[::new_input].magnetos[0] in ::players[].magnetos[0]
::input_n in ::players[].stepCounter
::players[::new_input].body.bodyMapsSize in ::players[].stepCounter
::players[::new_input].body.bodyWidth in ::players[].stepCounter
::players[::input_n].basePosition.row in ::players[].stepCounter
player[::input_n].impulse[0][0] in ::players[].stepCounter
player[::input_n].impulse[1][0] in ::players[].stepCounter
player[::input_n].impulse[3][0] in ::players[].stepCounter
player[::input_n].impulse[5][0] in ::players[].stepCounter
player[::input_n].stepCounter in ::players[].stepCounter
player[::new_input].impulse[3][0] in ::players[].stepCounter
player[::new_input].impulse[5][0] in ::players[].stepCounter
player[::new_input].stepCounter in ::players[].stepCounter
::players[::input_n].onCrash in ::players[].pilot
player[::input_n].onCrash in ::players[].onCrash
player[::new_input].onCrash in ::players[].onCrash
::players[::input_n].onCrash in ::players[].onPushed
::input_n in player[].body.color
::input_n in player[].basePosition.row
::input_n in player[].impulse[0][0]
::input_n in player[].impulse[1][0]
::input_n in player[].impulse[3][0]
::input_n in player[].impulse[5][0]
::input_n in player[].impulse[7][0]
::input_n in player[].stepCounter
::input_n in orig(::players[].basePosition.row)
::input_n in orig(player[].basePosition.row)
player[].id elements == ::new_input
::new_input in player[].body.type
::new_input in player[].body.visible
::new_input in player[].body.bodyPoints->aspect
::new_input in player[].body.bodySize
::new_input in player[].body.color
::new_input in player[].basePosition.col
::new_input in player[].basePosition.row
::new_input in player[].impulse[1][0]
::new_input in player[].impulse[3][0]
::new_input in player[].impulse[5][0]
::new_input in player[].stepCounter
::new_input in orig(::players[].basePosition.row)
::new_input in orig(player[].basePosition.col)
::new_input in orig(player[].basePosition.row)
player[::input_n].impulse[0][0] in player[].body.type
player[::input_n].impulse[1][0] in player[].body.type
player[::input_n].impulse[3][0] in player[].body.type
player[::input_n].impulse[5][0] in player[].body.type
player[::new_input].impulse[3][0] in player[].body.type
player[::new_input].impulse[5][0] in player[].body.type
player[::input_n].impulse[0][0] in player[].body.visible
player[::input_n].impulse[1][0] in player[].body.visible
player[::input_n].impulse[3][0] in player[].body.visible
player[::input_n].impulse[5][0] in player[].body.visible
player[::new_input].impulse[3][0] in player[].body.visible
player[::new_input].impulse[5][0] in player[].body.visible
player[].body.bodyPoints->position - player[].basePosition + 7304 == 0
player[::input_n].impulse[0][0] in player[].body.bodySize
player[::input_n].impulse[1][0] in player[].body.bodySize
player[::input_n].impulse[3][0] in player[].body.bodySize
player[::input_n].impulse[5][0] in player[].body.bodySize
player[::new_input].impulse[3][0] in player[].body.bodySize
player[::new_input].impulse[5][0] in player[].body.bodySize
::players[::new_input].body.bodyWidth in player[].body.bodyWidth
::players[::new_input].body.bodyMapsSize in player[].body.bodyHeight
::players[::new_input].body.bodyMapsSize in player[].body.color
::players[::new_input].body.bodyWidth in player[].body.color
::players[::new_input].body.color in player[].body.color
player[::input_n].impulse[0][0] in player[].body.color
player[::input_n].impulse[1][0] in player[].body.color
player[::input_n].impulse[3][0] in player[].body.color
player[::input_n].impulse[5][0] in player[].body.color
player[::new_input].basePosition.col in player[].body.color
player[::new_input].impulse[3][0] in player[].body.color
player[::new_input].impulse[5][0] in player[].body.color
player[::new_input].direction in player[].body.color
player[::new_input].stepCounter in player[].body.color
orig(player[::new_input].basePosition.col) in player[].body.color
::players[::new_input].body.bodyMapsSize in player[].basePosition.col
::players[::new_input].body.bodyWidth in player[].basePosition.col
::players[::input_n].basePosition.row in player[].basePosition.col
::players[::new_input].body.bodyMapsSize in player[].basePosition.row
::players[::new_input].body.color in player[].basePosition.row
player[::input_n].body.color in player[].basePosition.row
player[::input_n].impulse[0][0] in player[].basePosition.row
player[::input_n].impulse[1][0] in player[].basePosition.row
player[::input_n].impulse[3][0] in player[].basePosition.row
player[::input_n].impulse[5][0] in player[].basePosition.row
player[::new_input].body.color in player[].basePosition.row
player[::new_input].impulse[3][0] in player[].basePosition.row
player[::new_input].impulse[5][0] in player[].basePosition.row
player[::new_input].direction in player[].basePosition.row
player[].impulse[0] - player[].impulse[1] + 4 == 0
player[].impulse[0] - player[].impulse[2] + 8 == 0
player[].impulse[0] - player[].impulse[3] + 12 == 0
player[].impulse[0] - player[].impulse[4] + 16 == 0
player[].impulse[0] - player[].impulse[5] + 20 == 0
player[].impulse[0] - player[].impulse[6] + 24 == 0
player[].impulse[0] - player[].impulse[7] + 28 == 0
player[].impulse[0] - player[].impulse[8] + 32 == 0
player[::input_n].impulse[1][0] in player[].impulse[0][0]
player[::input_n].impulse[3][0] in player[].impulse[0][0]
player[::input_n].impulse[5][0] in player[].impulse[0][0]
player[::new_input].impulse[3][0] in player[].impulse[0][0]
player[::new_input].impulse[5][0] in player[].impulse[0][0]
player[].impulse[1] - player[].impulse[2] + 4 == 0
player[].impulse[1] - player[].impulse[3] + 8 == 0
player[].impulse[1] - player[].impulse[4] + 12 == 0
player[].impulse[1] - player[].impulse[5] + 16 == 0
player[].impulse[1] - player[].impulse[6] + 20 == 0
player[].impulse[1] - player[].impulse[7] + 24 == 0
player[].impulse[1] - player[].impulse[8] + 28 == 0
player[::input_n].impulse[3][0] in player[].impulse[1][0]
player[::input_n].impulse[5][0] in player[].impulse[1][0]
player[::new_input].impulse[3][0] in player[].impulse[1][0]
player[::new_input].impulse[5][0] in player[].impulse[1][0]
player[].impulse[2] - player[].impulse[3] + 4 == 0
player[].impulse[2] - player[].impulse[4] + 8 == 0
player[].impulse[2] - player[].impulse[5] + 12 == 0
player[].impulse[2] - player[].impulse[6] + 16 == 0
player[].impulse[2] - player[].impulse[7] + 20 == 0
player[].impulse[2] - player[].impulse[8] + 24 == 0
player[].impulse[3] - player[].impulse[4] + 4 == 0
player[].impulse[3] - player[].impulse[5] + 8 == 0
player[].impulse[3] - player[].impulse[6] + 12 == 0
player[].impulse[3] - player[].impulse[7] + 16 == 0
player[].impulse[3] - player[].impulse[8] + 20 == 0
player[::input_n].impulse[0][0] in player[].impulse[3][0]
player[::input_n].impulse[1][0] in player[].impulse[3][0]
player[::input_n].impulse[5][0] in player[].impulse[3][0]
player[::new_input].impulse[5][0] in player[].impulse[3][0]
player[].impulse[4] - player[].impulse[5] + 4 == 0
player[].impulse[4] - player[].impulse[6] + 8 == 0
player[].impulse[4] - player[].impulse[7] + 12 == 0
player[].impulse[4] - player[].impulse[8] + 16 == 0
player[].impulse[5] - player[].impulse[6] + 4 == 0
player[].impulse[5] - player[].impulse[7] + 8 == 0
player[].impulse[5] - player[].impulse[8] + 12 == 0
player[::input_n].impulse[0][0] in player[].impulse[5][0]
player[::input_n].impulse[1][0] in player[].impulse[5][0]
player[::input_n].impulse[3][0] in player[].impulse[5][0]
player[::new_input].impulse[3][0] in player[].impulse[5][0]
player[].impulse[6] - player[].impulse[7] + 4 == 0
player[].impulse[6] - player[].impulse[8] + 8 == 0
player[].impulse[7] - player[].impulse[8] + 4 == 0
player[::input_n].impulse[0][0] in player[].impulse[7][0]
player[::input_n].impulse[1][0] in player[].impulse[7][0]
player[::input_n].impulse[3][0] in player[].impulse[7][0]
player[::input_n].impulse[5][0] in player[].impulse[7][0]
player[::new_input].impulse[3][0] in player[].impulse[7][0]
player[::new_input].impulse[5][0] in player[].impulse[7][0]
player[::input_n].impulse[0][0] in player[].direction
::players[::new_input].body.bodyMapsSize in player[].stepCounter
::players[::new_input].body.bodyWidth in player[].stepCounter
::players[::input_n].basePosition.row in player[].stepCounter
::players[::input_n].stepCounter in player[].stepCounter
player[::input_n].impulse[0][0] in player[].stepCounter
player[::input_n].impulse[1][0] in player[].stepCounter
player[::input_n].impulse[3][0] in player[].stepCounter
player[::input_n].impulse[5][0] in player[].stepCounter
player[::new_input].impulse[3][0] in player[].stepCounter
player[::new_input].impulse[5][0] in player[].stepCounter
::players[::input_n].onCrash in player[].pilot
::players[::input_n].onCrash in player[].onCrash
::players[::new_input].onCrash in player[].onCrash
::players[::input_n].onCrash in player[].onPushed
::players[::new_input].body.bodyMapsSize in orig(::players[].basePosition.col)
::players[::new_input].body.bodyWidth in orig(::players[].basePosition.col)
::players[::input_n].basePosition.row in orig(::players[].basePosition.col)
player[::input_n].basePosition.col in orig(::players[].basePosition.col)
::players[::new_input].body.bodyMapsSize in orig(::players[].basePosition.row)
::players[::new_input].body.color in orig(::players[].basePosition.row)
player[::input_n].body.color in orig(::players[].basePosition.row)
player[::input_n].basePosition.row in orig(::players[].basePosition.row)
player[::input_n].impulse[0][0] in orig(::players[].basePosition.row)
player[::input_n].impulse[1][0] in orig(::players[].basePosition.row)
player[::input_n].impulse[3][0] in orig(::players[].basePosition.row)
player[::input_n].impulse[5][0] in orig(::players[].basePosition.row)
player[::new_input].body.color in orig(::players[].basePosition.row)
player[::new_input].basePosition.row in orig(::players[].basePosition.row)
player[::new_input].impulse[3][0] in orig(::players[].basePosition.row)
player[::new_input].impulse[5][0] in orig(::players[].basePosition.row)
player[::new_input].direction in orig(::players[].basePosition.row)
::players[::new_input].body.bodyMapsSize in orig(player[].basePosition.col)
::players[::new_input].body.bodyWidth in orig(player[].basePosition.col)
::players[::input_n].basePosition.row in orig(player[].basePosition.col)
::players[::new_input].body.bodyMapsSize in orig(player[].basePosition.row)
::players[::new_input].body.color in orig(player[].basePosition.row)
player[::input_n].body.color in orig(player[].basePosition.row)
player[::input_n].impulse[0][0] in orig(player[].basePosition.row)
player[::input_n].impulse[1][0] in orig(player[].basePosition.row)
player[::input_n].impulse[3][0] in orig(player[].basePosition.row)
player[::input_n].impulse[5][0] in orig(player[].basePosition.row)
player[::new_input].body.color in orig(player[].basePosition.row)
player[::new_input].impulse[3][0] in orig(player[].basePosition.row)
player[::new_input].impulse[5][0] in orig(player[].basePosition.row)
player[::new_input].direction in orig(player[].basePosition.row)
2 * player[::input_n].body.color - player[::input_n].basePosition.col == 0
player[::input_n].impulse[0][0] % player[::new_input].direction == 0
player[::input_n].impulse[5][0] % player[::new_input].stepCounter == 0
player[::input_n].impulse[5][0] % orig(player[::new_input].basePosition.row) == 0
2 * player[::new_input].body.color - orig(player[::new_input].basePosition.col) == 0
17 * size(player[])-1 + 5 * player[::input_n].body.bodyPoints->aspect + 17 * player[::input_n].basePosition.row - 2028 == 0
size(player[])-1 + player[::input_n].basePosition.row - 15 * player[::new_input].impulse[3][0] - 94 == 0
17 * size(player[])-1 + 5 * player[::new_input].body.bodyPoints->aspect + 17 * orig(player[::new_input].basePosition.row) - 2011 == 0
size(player[])-1 + 15 * player[::new_input].impulse[5][0] + orig(player[::new_input].basePosition.row) - 108 == 0
17 * orig(size(player[])) + 5 * player[::input_n].body.bodyPoints->aspect + 17 * player[::input_n].basePosition.row - 2045 == 0
orig(size(player[])) + player[::input_n].basePosition.row - 15 * player[::new_input].impulse[3][0] - 95 == 0
17 * orig(size(player[])) + 5 * player[::new_input].body.bodyPoints->aspect + 17 * orig(player[::new_input].basePosition.row) - 2028 == 0
orig(size(player[])) + 15 * player[::new_input].impulse[5][0] + orig(player[::new_input].basePosition.row) - 109 == 0
player[::input_n].body.bodyPoints->aspect - 102 * player[::new_input].body.color + 51 * player[::new_input].basePosition.col - 86 == 0
player[::input_n].body.bodyPoints->aspect + 51 * player[::new_input].basePosition.col - 51 * orig(player[::new_input].basePosition.col) - 86 == 0
player[::input_n].basePosition.row + 15 * player[::input_n].impulse[0][0] - orig(player[::new_input].basePosition.row) - 1 == 0
2 * player[::new_input].body.color - player[::new_input].basePosition.col + player[::new_input].impulse[3][0] == 0
player[::new_input].basePosition.col - player[::new_input].impulse[3][0] - orig(player[::new_input].basePosition.col) == 0
2 * player[::new_input].basePosition.row - player[::new_input].direction - 2 * orig(player[::new_input].basePosition.row) + 3 == 0
===========================================================================
..movePlayer():::ENTER
::crashedPlayers[].start == ::crashedPlayers[].end
::crashedPlayers[].start == ::playerSpace[].playerNodes->start->prev
::crashedPlayers[].start == ::playerSpace[].playerNodes->end->next
::crashedPlayers[].start == ::playerSpace[].guideNodes->start
::crashedPlayers[].start == ::playerSpace[].guideNodes->end
::crashedPlayers[].start == space[].playerNodes->start->prev
::crashedPlayers[].start == space[].playerNodes->end->next
::crashedPlayers[].start == space[].guideNodes->start
::crashedPlayers[].start == space[].guideNodes->end
::playerSpace == space
::playerSpace[] == space[]
::playerSpace[].playerNodes == space[].playerNodes
::playerSpace[].playerNodes[0] == space[].playerNodes[0]
::playerSpace[].playerNodes->start == space[].playerNodes->start
::playerSpace[].playerNodes->start[0] == space[].playerNodes->start[0]
::playerSpace[].playerNodes->start->next == space[].playerNodes->start->next
::playerSpace[].playerNodes->start->next[0] == space[].playerNodes->start->next[0]
::playerSpace[].playerNodes->start->data == space[].playerNodes->start->data
::playerSpace[].playerNodes->end == space[].playerNodes->end
::playerSpace[].playerNodes->end[0] == space[].playerNodes->end[0]
::playerSpace[].playerNodes->end->data == space[].playerNodes->end->data
::playerSpace[].playerNodes->end->prev == space[].playerNodes->end->prev
::playerSpace[].playerNodes->end->prev[0] == space[].playerNodes->end->prev[0]
::playerSpace[].playerMap == space[].playerMap
::playerSpace[].guideNodes == space[].guideNodes
::playerSpace[].guideNodes[0] == space[].guideNodes[0]
::playerSpace[].groundMap == space[].groundMap
::playerSpace[].actionGroup == space[].actionGroup
::playerSpace[].actionGroup[0] == space[].actionGroup[0]
::playerSpace[].actionGroup->numActions == space[].actionGroup->numActions
::players == ::players[::input_n-1].body.bodyPoints->player
::players[].id == ::players[].type
::players[].id == ::players[].retired
::players[].id == ::players[].impulse[2][0]
::players[].id == ::players[].impulse[4][0]
::players[].id == ::players[].impulse[6][0]
::players[].id == ::players[].impulse[8][0]
::players[].body.visible == ::players[].body.tangible
::input_n == ::input_i
::input_n == size(::crashedPlayers[])
::input_n == size(::playerSpace[])
::input_n == size(::playerSpace[].playerNodes[0])
::input_n == size(::playerSpace[].playerNodes->start[0])
::input_n == size(::playerSpace[].playerNodes->start->next[0])
::input_n == size(::playerSpace[].playerNodes->end[0])
::input_n == size(::playerSpace[].playerNodes->end->prev[0])
::input_n == size(::playerSpace[].guideNodes[0])
::input_n == size(::playerSpace[].actionGroup[0])
::input_n == size(space[])
::input_n == size(space[].playerNodes[0])
::input_n == size(space[].playerNodes->start[0])
::input_n == size(space[].playerNodes->start->next[0])
::input_n == size(space[].playerNodes->end[0])
::input_n == size(space[].playerNodes->end->prev[0])
::input_n == size(space[].guideNodes[0])
::input_n == size(space[].actionGroup[0])
::input_n == ::players[::input_n].body.type
::input_n == ::players[::input_i].body.type
::input_n == ::players[::input_n].body.visible
::input_n == ::players[::input_n-1].body.visible
::input_n == ::players[::input_i].body.visible
::input_n == ::players[::input_i-1].body.visible
::input_n == ::players[::new_input].body.visible
::input_n == ::players[::input_n].body.tangible
::input_n == ::players[::input_n-1].body.tangible
::input_n == ::players[::input_i].body.tangible
::input_n == ::players[::input_i-1].body.tangible
::input_n == ::players[::new_input].body.tangible
::input_n == ::players[::input_n].body.bodyMapsSize
::input_n == ::players[::input_i].body.bodyMapsSize
::input_n == ::players[::input_n].body.bodySize
::input_n == ::players[::input_i].body.bodySize
::input_n == ::players[::input_n-1].direction
::input_n == ::players[::input_i-1].direction
::input_n == player[::input_n-1].body.visible
::input_n == player[::input_n-1].body.tangible
::input_n == player[::input_i-1].body.visible
::input_n == player[::input_i-1].body.tangible
::input_n == player[::new_input].body.visible
::input_n == player[::new_input].body.tangible
::input_n == player[::new_input].body.bodyMapsSize
::new_input == ::players[::new_input].body.type
::new_input == ::players[::input_n].impulse[0][0]
::new_input == ::players[::input_i].impulse[0][0]
::new_input == ::players[::new_input].impulse[0][0]
::new_input == ::players[::input_n-1].impulse[1][0]
::new_input == ::players[::input_i-1].impulse[1][0]
::new_input == player[::new_input].impulse[0][0]
player == player[::input_n-1].body.bodyPoints->player
player == player[::input_i-1].body.bodyPoints->player
player[].id == player[].type
player[].id == player[].retired
player[].id == player[].impulse[2][0]
player[].id == player[].impulse[4][0]
player[].id == player[].impulse[6][0]
player[].id == player[].impulse[8][0]
player[].body.visible == player[].body.tangible
size(::crashedPlayers[])-1 == ::playerSpace[::input_n-1].actionGroup->numActions
size(::crashedPlayers[])-1 == ::playerSpace[::input_i-1].actionGroup->numActions
size(::crashedPlayers[])-1 == ::players[::input_n].id
size(::crashedPlayers[])-1 == ::players[::input_n-1].id
size(::crashedPlayers[])-1 == ::players[::input_i].id
size(::crashedPlayers[])-1 == ::players[::input_i-1].id
size(::crashedPlayers[])-1 == ::players[::new_input].id
size(::crashedPlayers[])-1 == ::players[::input_n].type
size(::crashedPlayers[])-1 == ::players[::input_n-1].type
size(::crashedPlayers[])-1 == ::players[::input_i].type
size(::crashedPlayers[])-1 == ::players[::input_i-1].type
size(::crashedPlayers[])-1 == ::players[::new_input].type
size(::crashedPlayers[])-1 == ::players[::input_n].retired
size(::crashedPlayers[])-1 == ::players[::input_n-1].retired
size(::crashedPlayers[])-1 == ::players[::input_i].retired
size(::crashedPlayers[])-1 == ::players[::input_i-1].retired
size(::crashedPlayers[])-1 == ::players[::new_input].retired
size(::crashedPlayers[])-1 == ::players[::input_n-1].body.type
size(::crashedPlayers[])-1 == ::players[::input_i-1].body.type
size(::crashedPlayers[])-1 == ::players[::input_n].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[::input_i].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[::input_n].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[::input_i].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[::input_n].body.color
size(::crashedPlayers[])-1 == ::players[::input_i].body.color
size(::crashedPlayers[])-1 == ::players[::input_n].basePosition.col
size(::crashedPlayers[])-1 == ::players[::input_i].basePosition.col
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_n].direction
size(::crashedPlayers[])-1 == ::players[::input_i].direction
size(::crashedPlayers[])-1 == ::players[::input_n-1].stepCounter
size(::crashedPlayers[])-1 == ::players[::input_i-1].stepCounter
size(::crashedPlayers[])-1 == space[::input_n-1].actionGroup->numActions
size(::crashedPlayers[])-1 == player[::input_n].id
size(::crashedPlayers[])-1 == player[::input_n-1].id
size(::crashedPlayers[])-1 == player[::input_n].type
size(::crashedPlayers[])-1 == player[::input_n-1].type
size(::crashedPlayers[])-1 == player[::input_n].retired
size(::crashedPlayers[])-1 == player[::input_n-1].retired
size(::crashedPlayers[])-1 == player[::input_n-1].impulse[0][0]
size(::crashedPlayers[])-1 == player[::input_n].impulse[2][0]
size(::crashedPlayers[])-1 == player[::input_n-1].impulse[2][0]
size(::crashedPlayers[])-1 == player[::input_n].impulse[4][0]
size(::crashedPlayers[])-1 == player[::input_n-1].impulse[4][0]
size(::crashedPlayers[])-1 == player[::input_n].impulse[6][0]
size(::crashedPlayers[])-1 == player[::input_n-1].impulse[6][0]
size(::crashedPlayers[])-1 == player[::input_n-1].impulse[7][0]
size(::crashedPlayers[])-1 == player[::input_n].impulse[8][0]
size(::crashedPlayers[])-1 == player[::input_n-1].impulse[8][0]
size(::crashedPlayers[])-1 == player[::input_n].direction
size(::crashedPlayers[])-1 == space[::input_i-1].actionGroup->numActions
size(::crashedPlayers[])-1 == player[::input_i].id
size(::crashedPlayers[])-1 == player[::input_i-1].id
size(::crashedPlayers[])-1 == player[::input_i].type
size(::crashedPlayers[])-1 == player[::input_i-1].type
size(::crashedPlayers[])-1 == player[::input_i].retired
size(::crashedPlayers[])-1 == player[::input_i-1].retired
size(::crashedPlayers[])-1 == player[::input_i-1].impulse[0][0]
size(::crashedPlayers[])-1 == player[::input_i].impulse[2][0]
size(::crashedPlayers[])-1 == player[::input_i-1].impulse[2][0]
size(::crashedPlayers[])-1 == player[::input_i].impulse[4][0]
size(::crashedPlayers[])-1 == player[::input_i-1].impulse[4][0]
size(::crashedPlayers[])-1 == player[::input_i].impulse[6][0]
size(::crashedPlayers[])-1 == player[::input_i-1].impulse[6][0]
size(::crashedPlayers[])-1 == player[::input_i-1].impulse[7][0]
size(::crashedPlayers[])-1 == player[::input_i].impulse[8][0]
size(::crashedPlayers[])-1 == player[::input_i-1].impulse[8][0]
size(::crashedPlayers[])-1 == player[::input_i].direction
size(::crashedPlayers[])-1 == player[::new_input].id
size(::crashedPlayers[])-1 == player[::new_input].type
size(::crashedPlayers[])-1 == player[::new_input].retired
size(::crashedPlayers[])-1 == player[::new_input].impulse[2][0]
size(::crashedPlayers[])-1 == player[::new_input].impulse[4][0]
size(::crashedPlayers[])-1 == player[::new_input].impulse[6][0]
size(::crashedPlayers[])-1 == player[::new_input].impulse[7][0]
size(::crashedPlayers[])-1 == player[::new_input].impulse[8][0]
size(::players[]) == size(::players[].body.bodyPoints[0])
size(::players[]) == size(::players[].body.bodyPoints->player[0])
size(::players[]) == size(::players[].impulse[0])
size(::players[]) == size(::players[].impulse[0][0])
size(::players[]) == size(::players[].impulse[1])
size(::players[]) == size(::players[].impulse[1][0])
size(::players[]) == size(::players[].impulse[2])
size(::players[]) == size(::players[].impulse[2][0])
size(::players[]) == size(::players[].impulse[3])
size(::players[]) == size(::players[].impulse[3][0])
size(::players[]) == size(::players[].impulse[4])
size(::players[]) == size(::players[].impulse[4][0])
size(::players[]) == size(::players[].impulse[5])
size(::players[]) == size(::players[].impulse[5][0])
size(::players[]) == size(::players[].impulse[6])
size(::players[]) == size(::players[].impulse[6][0])
size(::players[]) == size(::players[].impulse[7])
size(::players[]) == size(::players[].impulse[7][0])
size(::players[]) == size(::players[].impulse[8])
size(::players[]) == size(::players[].impulse[8][0])
size(::players[]) == size(::players[].magnetos[0])
size(player[]) == size(player[].body.bodyPoints[0])
size(player[]) == size(player[].body.bodyPoints->player[0])
size(player[]) == size(player[].impulse[0])
size(player[]) == size(player[].impulse[0][0])
size(player[]) == size(player[].impulse[1])
size(player[]) == size(player[].impulse[1][0])
size(player[]) == size(player[].impulse[2])
size(player[]) == size(player[].impulse[2][0])
size(player[]) == size(player[].impulse[3])
size(player[]) == size(player[].impulse[3][0])
size(player[]) == size(player[].impulse[4])
size(player[]) == size(player[].impulse[4][0])
size(player[]) == size(player[].impulse[5])
size(player[]) == size(player[].impulse[5][0])
size(player[]) == size(player[].impulse[6])
size(player[]) == size(player[].impulse[6][0])
size(player[]) == size(player[].impulse[7])
size(player[]) == size(player[].impulse[7][0])
size(player[]) == size(player[].impulse[8])
size(player[]) == size(player[].impulse[8][0])
size(player[]) == size(player[].magnetos[0])
::players[::input_n] == ::players[::input_n].body.bodyPoints->player[0]
::players[::input_n] == ::players[::input_i].body.bodyPoints->player[0]
::players[::input_n-1] == ::players[::input_n-1].body.bodyPoints->player[0]
::players[::input_n-1] == ::players[::input_i-1].body.bodyPoints->player[0]
::players[::new_input] == ::players[::new_input].body.bodyPoints->player[0]
::players[::input_n-1].body.bodyMapsSize == ::players[::input_n-1].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize == ::players[::input_i-1].body.bodyHeight
::players[::input_n-1].basePosition.row == ::players[::new_input].basePosition.row
::players[::input_i-1].basePosition.row == ::players[::new_input].basePosition.row
::players[::input_n].onPushed == ::players[::input_n-1].onPushed
::players[::input_n].onPushed == ::players[::input_i-1].onPushed
::players[::input_n].onPushed == ::players[::new_input].onPushed
::players[::input_n].onPushed == player[::input_n-1].onPushed
::players[::input_n].onPushed == player[::input_i-1].onPushed
::players[::input_n].onPushed == player[::new_input].onPushed
player[::input_n-1] == player[::input_n-1].body.bodyPoints->player[0]
player[::input_n-1] == player[::input_i-1].body.bodyPoints->player[0]
player[::input_n].body.type == player[::new_input].body.type
player[::input_n].body.visible == player[::input_n].body.bodyMapsSize
player[::input_n].body.visible == player[::input_i].body.bodyMapsSize
player[::input_n-1].basePosition.row == player[::new_input].basePosition.row
player[::input_n-1].impulse[3][0] == player[::new_input].impulse[3][0]
player[::input_n-1].impulse[5][0] == player[::new_input].impulse[5][0]
player[::input_i-1].basePosition.row == player[::new_input].basePosition.row
player[::input_i-1].impulse[3][0] == player[::new_input].impulse[3][0]
player[::input_i-1].impulse[5][0] == player[::new_input].impulse[5][0]
player[::new_input] == player[::new_input].body.bodyPoints->player[0]
::crashedPlayers has only one value
::crashedPlayers[] contains no nulls and has only one value, of length 1
::crashedPlayers[] elements has only one value
::crashedPlayers[].start == [null]
::crashedPlayers[].start elements == null
::playerSpace has only one value
::playerSpace[] contains no nulls and has only one value, of length 1
::playerSpace[] elements has only one value
::playerSpace[].playerNodes contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes elements has only one value
::playerSpace[].playerNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes[0] elements has only one value
::playerSpace[].playerNodes->start contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start elements has only one value
::playerSpace[].playerNodes->start[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start[0] elements has only one value
::playerSpace[].playerNodes->start->next contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next elements has only one value
::playerSpace[].playerNodes->start->next[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next[0] elements has only one value
::playerSpace[].playerNodes->start->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->data elements has only one value
::playerSpace[].playerNodes->end contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end elements has only one value
::playerSpace[].playerNodes->end[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end[0] elements has only one value
::playerSpace[].playerNodes->end->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->data elements has only one value
::playerSpace[].playerNodes->end->prev contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->prev elements has only one value
::playerSpace[].playerNodes->end->prev[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->prev[0] elements has only one value
::playerSpace[].playerMap contains no nulls and has only one value, of length 1
::playerSpace[].playerMap elements has only one value
::playerSpace[].guideNodes contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes elements has only one value
::playerSpace[].guideNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes[0] elements has only one value
::playerSpace[].groundMap contains no nulls and has only one value, of length 1
::playerSpace[].groundMap elements has only one value
::playerSpace[].actionGroup contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup elements has only one value
::playerSpace[].actionGroup[0] contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup[0] elements has only one value
::playerSpace[].actionGroup->numActions == [0]
::playerSpace[].actionGroup->numActions elements == 0
::players has only one value
::players[] contains no nulls and has only one value, of length 100
::players[].id == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].id elements == 0
::players[].body contains no nulls and has only one value, of length 100
::players[].body.type == [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.type elements one of { 0, 1 }
::players[].body.visible == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.visible elements one of { 0, 1 }
::players[].body.visible sorted by >=
::players[].body.bodyPoints contains no nulls and has only one value, of length 100
::players[].body.bodyPoints[0] contains no nulls and has only one value, of length 100
::players[].body.bodyPoints->position contains no nulls and has only one value, of length 100
::players[].body.bodyPoints->player has only one value, of length 100
::players[].body.bodyPoints->player[0] has only one value, of length 100
::players[].body.bodyPoints->aspect == [46, 35, 35, 35, 35, 35, 86, 86, 86, 86, 86, 88, 91, 91, 91, 91, 91, 91, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyPoints->aspect elements >= 0
::players[].body.bodyMaps contains no nulls and has only one value, of length 100
::players[].body.bodyMapsSize == [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyMapsSize elements one of { 0, 1, 4 }
::players[].body.bodyMapsSize sorted by >=
::players[].body.bodySize == [28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodySize elements >= 0
::players[].body.bodyWidth == [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyWidth elements one of { 0, 8, 14 }
::players[].body.bodyHeight == [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyHeight elements one of { 0, 4, 6 }
::players[].body.color == [3, 0, 1, 2, 3, 4, 0, 2, 4, 6, 8, 2, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.color elements >= 0
::players[].basePosition contains no nulls and has only one value, of length 100
::players[].basePosition.col elements >= 0
::players[].basePosition.row elements >= 0
::players[].impulse[0] contains no nulls and has only one value, of length 100
::players[].impulse[0][0] elements one of { 0, 1 }
::players[].impulse[1] contains no nulls and has only one value, of length 100
::players[].impulse[1][0] elements one of { 0, 1, 5 }
::players[].impulse[2] contains no nulls and has only one value, of length 100
::players[].impulse[3] contains no nulls and has only one value, of length 100
::players[].impulse[3][0] elements one of { 0, 1 }
::players[].impulse[4] contains no nulls and has only one value, of length 100
::players[].impulse[5] contains no nulls and has only one value, of length 100
::players[].impulse[5][0] elements one of { 0, 1 }
::players[].impulse[6] contains no nulls and has only one value, of length 100
::players[].impulse[7] contains no nulls and has only one value, of length 100
::players[].impulse[7][0] elements one of { 0, 1 }
::players[].impulse[7][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[8] contains no nulls and has only one value, of length 100
::players[].direction elements >= 0
::players[].magnetos has only one value, of length 100
::players[].magnetos[0] has only one value, of length 100
::players[].stepCounter one of { [0, 9, 7, 7, 4, 8, 9, 1, 8, 7, 1, 4, 8, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 9, 7, 7, 4, 8, 9, 1, 8, 7, 1, 4, 8, 2, 10, 4, 2, 9, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].stepCounter elements >= 0
::players[].pilot has only one value, of length 100
::players[].onCrash has only one value, of length 100
::players[].onPushed has only one value, of length 100
::snakeBodyMap has only one value
::trainBodyMap has only one value
::giantBodyMap has only one value
::squareBodyMap has only one value
::circleBodyMap has only one value
::input_n == 1
::new_input one of { 0, 1 }
::input_key == "k"
::trace_pos one of { "", "(40, 10) -> (40, 9)\n" }
player[].id elements == 0
player[].body.type elements one of { 0, 1 }
player[].body.visible elements one of { 0, 1 }
player[].body.visible sorted by >=
player[].body.bodyPoints->aspect elements >= 0
player[].body.bodyMapsSize elements one of { 0, 1, 4 }
player[].body.bodyMapsSize sorted by >=
player[].body.bodySize elements >= 0
player[].body.bodyWidth elements one of { 0, 8, 14 }
player[].body.bodyHeight elements one of { 0, 4, 6 }
player[].body.color elements >= 0
player[].basePosition.col elements >= 0
player[].basePosition.row elements >= 0
player[].impulse[0][0] elements one of { 0, 1 }
player[].impulse[1][0] elements one of { 0, 1, 5 }
player[].impulse[3][0] elements one of { 0, 1 }
player[].impulse[5][0] elements one of { 0, 1 }
player[].impulse[7][0] elements one of { 0, 1 }
player[].direction elements >= 0
player[].direction sorted by >=
player[].stepCounter elements >= 0
size(::players[]) == 100
::players[::input_n] has only one value
::players[::input_n-1] has only one value
::players[::input_n].body has only one value
::players[::input_n-1].body has only one value
::players[::input_n].body.bodyPoints has only one value
::players[::input_n-1].body.bodyPoints has only one value
::players[::input_n].body.bodyPoints[0] has only one value
::players[::input_n-1].body.bodyPoints[0] has only one value
::players[::input_n].body.bodyPoints->position has only one value
::players[::input_n-1].body.bodyPoints->position has only one value
::players[::input_n].body.bodyPoints->player has only one value
::players[::input_n-1].body.bodyPoints->player has only one value
::players[::input_n].body.bodyPoints->aspect == 35
::players[::input_n-1].body.bodyPoints->aspect == 46
::players[::new_input].body.bodyPoints->aspect one of { 35, 46 }
::players[::input_n].body.bodyMaps has only one value
::players[::input_n-1].body.bodyMaps has only one value
::players[::input_n-1].body.bodyMapsSize == 4
::players[::new_input].body.bodyMapsSize one of { 1, 4 }
::players[::input_n-1].body.bodySize == 28
::players[::new_input].body.bodySize one of { 1, 28 }
::players[::input_n-1].body.bodyWidth == 8
::players[::new_input].body.bodyWidth one of { 0, 8 }
::players[::new_input].body.bodyHeight one of { 0, 4 }
::players[::input_n-1].body.color == 3
::players[::new_input].body.color one of { 0, 3 }
::players[::input_n].basePosition has only one value
::players[::input_n-1].basePosition has only one value
::players[::input_n-1].basePosition.col == 40
::players[::new_input].basePosition.col one of { 0, 40 }
::players[::input_n].basePosition.row == 10
::players[::new_input].basePosition.row one of { 9, 10 }
::players[::input_n].impulse[0] has only one value
::players[::input_n-1].impulse[0] has only one value
::players[::input_n].impulse[1] has only one value
::players[::input_n-1].impulse[1] has only one value
::players[::input_n].impulse[2] has only one value
::players[::input_n-1].impulse[2] has only one value
::players[::input_n].impulse[3] has only one value
::players[::input_n-1].impulse[3] has only one value
::players[::input_n].impulse[4] has only one value
::players[::input_n-1].impulse[4] has only one value
::players[::input_n].impulse[5] has only one value
::players[::input_n-1].impulse[5] has only one value
::players[::input_n].impulse[6] has only one value
::players[::input_n-1].impulse[6] has only one value
::players[::input_n].impulse[7] has only one value
::players[::input_n-1].impulse[7] has only one value
::players[::input_n].impulse[8] has only one value
::players[::input_n-1].impulse[8] has only one value
::players[::new_input].direction one of { 0, 1 }
::players[::input_n].magnetos has only one value
::players[::input_n-1].magnetos has only one value
::players[::input_n].magnetos[0] has only one value
::players[::input_n-1].magnetos[0] has only one value
::players[::input_n].stepCounter == 9
::players[::new_input].stepCounter one of { 0, 9 }
::players[::input_n].pilot has only one value
::players[::input_n-1].pilot has only one value
::players[::input_n].onCrash == null
::players[::input_n-1].onCrash has only one value
::players[::input_n].onPushed has only one value
player[::input_n-1].body.bodyMapsSize one of { 1, 4 }
player[::input_n].body.bodySize one of { 0, 1, 24 }
player[::input_n-1].body.bodySize >= 1
player[::input_n].body.bodyWidth one of { 0, 8 }
player[::input_n].body.bodyHeight one of { 0, 4 }
player[::input_n].impulse[1][0] one of { 0, 1 }
player[::input_n-1].impulse[1][0] one of { 0, 1 }
player[::input_n-1].direction one of { 1, 3, 5 }
player[::new_input].body.bodySize one of { 1, 24, 44 }
player[::new_input].impulse[1][0] one of { 0, 1 }
::crashedPlayers[] elements == ::crashedPlayers[::input_n-1]
::crashedPlayers[].start elements == ::crashedPlayers[::input_n-1].start
::playerSpace[] elements == ::playerSpace[::input_n-1]
::playerSpace[].playerNodes elements == ::playerSpace[::input_n-1].playerNodes
::playerSpace[].playerNodes[0] elements == ::playerSpace[::input_n-1].playerNodes[0]
::playerSpace[].playerNodes->start elements == ::playerSpace[::input_n-1].playerNodes->start
::playerSpace[].playerNodes->start[0] elements == ::playerSpace[::input_n-1].playerNodes->start[0]
::playerSpace[].playerNodes->start->next elements == ::playerSpace[::input_n-1].playerNodes->start->next
::playerSpace[].playerNodes->start->next[0] elements == ::playerSpace[::input_n-1].playerNodes->start->next[0]
::playerSpace[].playerNodes->start->data elements == ::playerSpace[::input_n-1].playerNodes->start->data
::playerSpace[].playerNodes->end elements == ::playerSpace[::input_n-1].playerNodes->end
::playerSpace[].playerNodes->end[0] elements == ::playerSpace[::input_n-1].playerNodes->end[0]
::playerSpace[].playerNodes->end->data elements == ::playerSpace[::input_n-1].playerNodes->end->data
::playerSpace[].playerNodes->end->prev elements == ::playerSpace[::input_n-1].playerNodes->end->prev
::playerSpace[].playerNodes->end->prev[0] elements == ::playerSpace[::input_n-1].playerNodes->end->prev[0]
::playerSpace[].playerMap elements == ::playerSpace[::input_n-1].playerMap
::playerSpace[].guideNodes elements == ::playerSpace[::input_n-1].guideNodes
::playerSpace[].guideNodes[0] elements == ::playerSpace[::input_n-1].guideNodes[0]
::playerSpace[].groundMap elements == ::playerSpace[::input_n-1].groundMap
::playerSpace[].actionGroup elements == ::playerSpace[::input_n-1].actionGroup
::playerSpace[].actionGroup[0] elements == ::playerSpace[::input_n-1].actionGroup[0]
::playerSpace[].actionGroup->numActions < ::players[].direction (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].direction (lexically)
::playerSpace[].actionGroup->numActions < player[].id (lexically)
::playerSpace[].actionGroup->numActions <= player[].id (lexically)
::playerSpace[].actionGroup->numActions < player[].body.type (lexically)
::playerSpace[].actionGroup->numActions <= player[].body.type (lexically)
::playerSpace[].actionGroup->numActions < player[].body.visible (lexically)
::playerSpace[].actionGroup->numActions <= player[].body.visible (lexically)
::playerSpace[].actionGroup->numActions < player[].body.bodyPoints->aspect (lexically)
::playerSpace[].actionGroup->numActions <= player[].body.bodyPoints->aspect (lexically)
::playerSpace[].actionGroup->numActions < player[].body.bodyMapsSize (lexically)
::playerSpace[].actionGroup->numActions <= player[].body.bodyMapsSize (lexically)
::playerSpace[].actionGroup->numActions < player[].body.bodySize (lexically)
::playerSpace[].actionGroup->numActions <= player[].body.bodySize (lexically)
::playerSpace[].actionGroup->numActions < player[].body.bodyWidth (lexically)
::playerSpace[].actionGroup->numActions <= player[].body.bodyWidth (lexically)
::playerSpace[].actionGroup->numActions < player[].body.bodyHeight (lexically)
::playerSpace[].actionGroup->numActions <= player[].body.bodyHeight (lexically)
::playerSpace[].actionGroup->numActions < player[].body.color (lexically)
::playerSpace[].actionGroup->numActions <= player[].body.color (lexically)
::playerSpace[].actionGroup->numActions < player[].basePosition.col (lexically)
::playerSpace[].actionGroup->numActions <= player[].basePosition.col (lexically)
::playerSpace[].actionGroup->numActions < player[].basePosition.row (lexically)
::playerSpace[].actionGroup->numActions <= player[].basePosition.row (lexically)
::playerSpace[].actionGroup->numActions < player[].impulse[0][0] (lexically)
::playerSpace[].actionGroup->numActions <= player[].impulse[0][0] (lexically)
::playerSpace[].actionGroup->numActions < player[].impulse[1][0] (lexically)
::playerSpace[].actionGroup->numActions <= player[].impulse[1][0] (lexically)
::playerSpace[].actionGroup->numActions < player[].impulse[3][0] (lexically)
::playerSpace[].actionGroup->numActions <= player[].impulse[3][0] (lexically)
::playerSpace[].actionGroup->numActions < player[].impulse[5][0] (lexically)
::playerSpace[].actionGroup->numActions <= player[].impulse[5][0] (lexically)
::playerSpace[].actionGroup->numActions < player[].impulse[7][0] (lexically)
::playerSpace[].actionGroup->numActions <= player[].impulse[7][0] (lexically)
::playerSpace[].actionGroup->numActions < player[].direction (lexically)
::playerSpace[].actionGroup->numActions <= player[].direction (lexically)
::playerSpace[].actionGroup->numActions < player[].stepCounter (lexically)
::playerSpace[].actionGroup->numActions <= player[].stepCounter (lexically)
::playerSpace[].actionGroup->numActions elements == size(::crashedPlayers[])-1
::players in ::players[].body.bodyPoints->player
player[::input_n] in ::players[]
player[::input_n-1] in ::players[]
player[::new_input] in ::players[]
::players[].id <= ::players[].body.type (elementwise)
::players[].id <= ::players[].body.visible (elementwise)
::players[].id <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].id <= ::players[].body.bodyMapsSize (elementwise)
::players[].id <= ::players[].body.bodySize (elementwise)
::players[].id <= ::players[].body.bodyWidth (elementwise)
::players[].id <= ::players[].body.bodyHeight (elementwise)
::players[].id <= ::players[].body.color (elementwise)
::players[].id <= ::players[].basePosition.col (elementwise)
::players[].id <= ::players[].basePosition.row (elementwise)
::players[].id <= ::players[].impulse[0][0] (elementwise)
::players[].id <= ::players[].impulse[1][0] (elementwise)
::players[].id <= ::players[].impulse[3][0] (elementwise)
::players[].id <= ::players[].impulse[5][0] (elementwise)
::players[].id <= ::players[].impulse[7][0] (elementwise)
::players[].id < ::players[].direction (lexically)
::players[].id <= ::players[].direction (elementwise)
::players[].id <= ::players[].stepCounter (elementwise)
::players[].id >= player[].id (lexically)
::players[].id < player[].body.visible (lexically)
::players[].id <= player[].body.visible (lexically)
::players[].id < player[].body.bodyPoints->aspect (lexically)
::players[].id <= player[].body.bodyPoints->aspect (lexically)
::players[].id < player[].body.bodyMapsSize (lexically)
::players[].id <= player[].body.bodyMapsSize (lexically)
::players[].id < player[].body.bodySize (lexically)
::players[].id <= player[].body.bodySize (lexically)
::players[].id < player[].body.bodyWidth (lexically)
::players[].id <= player[].body.bodyWidth (lexically)
::players[].id < player[].body.bodyHeight (lexically)
::players[].id <= player[].body.bodyHeight (lexically)
::players[].id < player[].body.color (lexically)
::players[].id <= player[].body.color (lexically)
::players[].id < player[].basePosition.col (lexically)
::players[].id <= player[].basePosition.col (lexically)
::players[].id < player[].basePosition.row (lexically)
::players[].id <= player[].basePosition.row (lexically)
::players[].id < player[].impulse[5][0] (lexically)
::players[].id <= player[].impulse[5][0] (lexically)
::players[].id < player[].direction (lexically)
::players[].id <= player[].direction (lexically)
::players[].id < player[].stepCounter (lexically)
::players[].id <= player[].stepCounter (lexically)
::players[].id elements == size(::crashedPlayers[])-1
player[::input_n].body in ::players[].body
player[::input_n-1].body in ::players[].body
player[::new_input].body in ::players[].body
::players[].body.type <= ::players[].body.visible (elementwise)
::players[].body.type <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].body.type <= ::players[].body.bodyMapsSize (elementwise)
::players[].body.type <= ::players[].body.bodySize (elementwise)
::players[].body.type >= ::players[].impulse[0][0] (elementwise)
::players[].body.type < ::players[].direction (lexically)
::players[].body.type <= ::players[].direction (lexically)
::players[].body.type <= ::players[].stepCounter (elementwise)
::players[].body.type elements <= ::input_n
::players[].body.type > player[].id (lexically)
::players[].body.type >= player[].id (lexically)
::players[].body.type < player[].body.visible (lexically)
::players[].body.type <= player[].body.visible (lexically)
::players[].body.type < player[].body.bodyPoints->aspect (lexically)
::players[].body.type <= player[].body.bodyPoints->aspect (lexically)
::players[].body.type < player[].body.bodyMapsSize (lexically)
::players[].body.type <= player[].body.bodyMapsSize (lexically)
::players[].body.type < player[].body.bodySize (lexically)
::players[].body.type <= player[].body.bodySize (lexically)
::players[].body.type < player[].body.color (lexically)
::players[].body.type <= player[].body.color (lexically)
::players[].body.type < player[].basePosition.col (lexically)
::players[].body.type <= player[].basePosition.col (lexically)
::players[].body.type < player[].basePosition.row (lexically)
::players[].body.type <= player[].basePosition.row (lexically)
::players[].body.type > player[].impulse[0][0] (lexically)
::players[].body.type >= player[].impulse[0][0] (lexically)
::players[].body.type > player[].impulse[7][0] (lexically)
::players[].body.type >= player[].impulse[7][0] (lexically)
::players[].body.type < player[].direction (lexically)
::players[].body.type <= player[].direction (lexically)
::players[].body.type < player[].stepCounter (lexically)
::players[].body.type <= player[].stepCounter (lexically)
::players[].body.type elements >= size(::crashedPlayers[])-1
::players[].body.type elements < size(::players[])-1
::players[].body.type elements < size(player[])-1
::players[].body.type elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.type elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.type elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.type elements < ::players[::input_n-1].body.bodyMapsSize
::players[].body.type elements <= ::players[::new_input].body.bodyMapsSize
::players[].body.type elements < ::players[::input_n-1].body.bodySize
::players[].body.type elements <= ::players[::new_input].body.bodySize
::players[].body.type elements < ::players[::input_n-1].body.bodyWidth
::players[].body.type elements < ::players[::input_n-1].body.color
::players[].body.type elements < ::players[::input_n-1].basePosition.col
::players[].body.type elements < ::players[::input_n].basePosition.row
::players[].body.type elements < ::players[::new_input].basePosition.row
::players[::new_input].direction in ::players[].body.type
::players[].body.type elements < ::players[::input_n].stepCounter
player[::input_n].body.type in ::players[].body.type
player[::input_n-1].body.type in ::players[].body.type
player[::input_n].body.visible in ::players[].body.type
::players[].body.type elements < player[::input_n-1].body.bodyPoints->aspect
::players[].body.type elements <= player[::input_n-1].body.bodyMapsSize
::players[].body.type elements <= player[::input_n-1].body.bodySize
::players[].body.type elements <= player[::input_n-1].body.color
::players[].body.type elements < player[::input_n-1].basePosition.col
player[::input_n].impulse[0][0] in ::players[].body.type
player[::input_n].impulse[1][0] in ::players[].body.type
player[::input_n-1].impulse[1][0] in ::players[].body.type
player[::input_n].impulse[3][0] in ::players[].body.type
player[::input_n].impulse[5][0] in ::players[].body.type
player[::input_n].impulse[7][0] in ::players[].body.type
::players[].body.type elements <= player[::input_n-1].direction
::players[].body.type elements < player[::new_input].body.bodyPoints->aspect
::players[].body.type elements <= player[::new_input].body.bodySize
::players[].body.type elements <= player[::new_input].basePosition.row
player[::new_input].impulse[1][0] in ::players[].body.type
player[::new_input].impulse[3][0] in ::players[].body.type
player[::new_input].impulse[5][0] in ::players[].body.type
::players[].body.type elements <= player[::new_input].stepCounter
::players[].body.visible <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].body.visible <= ::players[].body.bodyMapsSize (elementwise)
::players[].body.visible <= ::players[].body.bodySize (elementwise)
::players[].body.visible >= ::players[].impulse[0][0] (elementwise)
::players[].body.visible >= ::players[].impulse[3][0] (elementwise)
::players[].body.visible >= ::players[].impulse[5][0] (elementwise)
::players[].body.visible >= ::players[].impulse[7][0] (elementwise)
::players[].body.visible > ::players[].direction (lexically)
::players[].body.visible >= ::players[].direction (lexically)
::players[].body.visible elements <= ::input_n
::new_input in ::players[].body.visible
::players[].body.visible > player[].id (lexically)
::players[].body.visible >= player[].id (lexically)
::players[].body.visible > player[].body.type (lexically)
::players[].body.visible >= player[].body.type (lexically)
::players[].body.visible >= player[].body.visible (lexically)
::players[].body.visible < player[].body.bodyPoints->aspect (lexically)
::players[].body.visible <= player[].body.bodyPoints->aspect (lexically)
::players[].body.visible < player[].body.bodySize (lexically)
::players[].body.visible <= player[].body.bodySize (lexically)
::players[].body.visible < player[].body.color (lexically)
::players[].body.visible <= player[].body.color (lexically)
::players[].body.visible < player[].basePosition.col (lexically)
::players[].body.visible <= player[].basePosition.col (lexically)
::players[].body.visible < player[].basePosition.row (lexically)
::players[].body.visible <= player[].basePosition.row (lexically)
::players[].body.visible > player[].impulse[0][0] (lexically)
::players[].body.visible >= player[].impulse[0][0] (lexically)
::players[].body.visible > player[].impulse[1][0] (lexically)
::players[].body.visible >= player[].impulse[1][0] (lexically)
::players[].body.visible > player[].impulse[3][0] (lexically)
::players[].body.visible >= player[].impulse[3][0] (lexically)
::players[].body.visible > player[].impulse[5][0] (lexically)
::players[].body.visible >= player[].impulse[5][0] (lexically)
::players[].body.visible > player[].impulse[7][0] (lexically)
::players[].body.visible >= player[].impulse[7][0] (lexically)
::players[].body.visible elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].body.visible
::players[].body.visible elements < size(::players[])-1
::players[].body.visible elements < size(player[])-1
::players[].body.visible elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.visible elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.visible elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.visible elements < ::players[::input_n-1].body.bodyMapsSize
::players[].body.visible elements <= ::players[::new_input].body.bodyMapsSize
::players[].body.visible elements < ::players[::input_n-1].body.bodySize
::players[].body.visible elements <= ::players[::new_input].body.bodySize
::players[].body.visible elements < ::players[::input_n-1].body.bodyWidth
::players[].body.visible elements < ::players[::input_n-1].body.color
::players[].body.visible elements < ::players[::input_n-1].basePosition.col
::players[].body.visible elements < ::players[::input_n].basePosition.row
::players[].body.visible elements < ::players[::new_input].basePosition.row
::players[::new_input].direction in ::players[].body.visible
::players[].body.visible elements < ::players[::input_n].stepCounter
player[::input_n].body.type in ::players[].body.visible
player[::input_n-1].body.type in ::players[].body.visible
player[::input_n].body.visible in ::players[].body.visible
::players[].body.visible elements < player[::input_n-1].body.bodyPoints->aspect
::players[].body.visible elements <= player[::input_n-1].body.bodyMapsSize
::players[].body.visible elements <= player[::input_n-1].body.bodySize
::players[].body.visible elements <= player[::input_n-1].body.color
::players[].body.visible elements < player[::input_n-1].basePosition.col
player[::input_n].impulse[0][0] in ::players[].body.visible
player[::input_n].impulse[1][0] in ::players[].body.visible
player[::input_n-1].impulse[1][0] in ::players[].body.visible
player[::input_n].impulse[3][0] in ::players[].body.visible
player[::input_n].impulse[5][0] in ::players[].body.visible
player[::input_n].impulse[7][0] in ::players[].body.visible
::players[].body.visible elements <= player[::input_n-1].direction
::players[].body.visible elements < player[::new_input].body.bodyPoints->aspect
::players[].body.visible elements <= player[::new_input].body.bodySize
::players[].body.visible elements <= player[::new_input].basePosition.row
player[::new_input].impulse[1][0] in ::players[].body.visible
player[::new_input].impulse[3][0] in ::players[].body.visible
player[::new_input].impulse[5][0] in ::players[].body.visible
::players[].body.visible elements <= player[::new_input].stepCounter
player[::input_n].body.bodyPoints in ::players[].body.bodyPoints
player[::input_n-1].body.bodyPoints in ::players[].body.bodyPoints
player[::new_input].body.bodyPoints in ::players[].body.bodyPoints
player[::input_n].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
player[::input_n-1].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
player[::new_input].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
::players[].body.bodyPoints->position - ::players[].basePosition + 7304 == 0
player[::input_n].body.bodyPoints->position in ::players[].body.bodyPoints->position
player[::input_n-1].body.bodyPoints->position in ::players[].body.bodyPoints->position
player[::new_input].body.bodyPoints->position in ::players[].body.bodyPoints->position
player in ::players[].body.bodyPoints->player
player[::input_n].body.bodyPoints->player in ::players[].body.bodyPoints->player
player[::new_input].body.bodyPoints->player in ::players[].body.bodyPoints->player
player[::input_n-1] in ::players[].body.bodyPoints->player[0]
player[::input_n].body.bodyPoints->player[0] in ::players[].body.bodyPoints->player[0]
player[::new_input] in ::players[].body.bodyPoints->player[0]
::players[].body.bodyPoints->aspect >= ::players[].body.bodyMapsSize (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodySize (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodyWidth (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.color (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].basePosition.col (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].basePosition.row (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[0][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[1][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[3][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[5][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyPoints->aspect > ::players[].direction (lexically)
::players[].body.bodyPoints->aspect >= ::players[].direction (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].stepCounter (elementwise)
::players[].body.bodyPoints->aspect > player[].id (lexically)
::players[].body.bodyPoints->aspect >= player[].id (lexically)
::players[].body.bodyPoints->aspect > player[].body.type (lexically)
::players[].body.bodyPoints->aspect >= player[].body.type (lexically)
::players[].body.bodyPoints->aspect > player[].body.visible (lexically)
::players[].body.bodyPoints->aspect >= player[].body.visible (lexically)
::players[].body.bodyPoints->aspect > player[].body.bodyMapsSize (lexically)
::players[].body.bodyPoints->aspect >= player[].body.bodyMapsSize (lexically)
::players[].body.bodyPoints->aspect > player[].body.bodySize (lexically)
::players[].body.bodyPoints->aspect >= player[].body.bodySize (lexically)
::players[].body.bodyPoints->aspect > player[].body.bodyWidth (lexically)
::players[].body.bodyPoints->aspect >= player[].body.bodyWidth (lexically)
::players[].body.bodyPoints->aspect > player[].body.bodyHeight (lexically)
::players[].body.bodyPoints->aspect >= player[].body.bodyHeight (lexically)
::players[].body.bodyPoints->aspect > player[].body.color (lexically)
::players[].body.bodyPoints->aspect >= player[].body.color (lexically)
::players[].body.bodyPoints->aspect > player[].basePosition.row (lexically)
::players[].body.bodyPoints->aspect >= player[].basePosition.row (lexically)
::players[].body.bodyPoints->aspect > player[].impulse[0][0] (lexically)
::players[].body.bodyPoints->aspect >= player[].impulse[0][0] (lexically)
::players[].body.bodyPoints->aspect > player[].impulse[1][0] (lexically)
::players[].body.bodyPoints->aspect >= player[].impulse[1][0] (lexically)
::players[].body.bodyPoints->aspect > player[].impulse[3][0] (lexically)
::players[].body.bodyPoints->aspect >= player[].impulse[3][0] (lexically)
::players[].body.bodyPoints->aspect > player[].impulse[5][0] (lexically)
::players[].body.bodyPoints->aspect >= player[].impulse[5][0] (lexically)
::players[].body.bodyPoints->aspect > player[].impulse[7][0] (lexically)
::players[].body.bodyPoints->aspect >= player[].impulse[7][0] (lexically)
::players[].body.bodyPoints->aspect > player[].direction (lexically)
::players[].body.bodyPoints->aspect >= player[].direction (lexically)
::players[].body.bodyPoints->aspect > player[].stepCounter (lexically)
::players[].body.bodyPoints->aspect >= player[].stepCounter (lexically)
::players[].body.bodyPoints->aspect elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].body.bodyPoints->aspect
::players[].body.bodyPoints->aspect elements < size(::players[])-1
player[::input_n].body.bodyPoints->aspect in ::players[].body.bodyPoints->aspect
player[::input_n-1].body.bodyPoints->aspect in ::players[].body.bodyPoints->aspect
player[::new_input].body.bodyPoints->aspect in ::players[].body.bodyPoints->aspect
player[::input_n].body.bodyMaps in ::players[].body.bodyMaps
player[::input_n-1].body.bodyMaps in ::players[].body.bodyMaps
player[::new_input].body.bodyMaps in ::players[].body.bodyMaps
::players[].body.bodyMapsSize <= ::players[].body.bodySize (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[0][0] (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[3][0] (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[5][0] (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyMapsSize > ::players[].direction (lexically)
::players[].body.bodyMapsSize >= ::players[].direction (lexically)
::new_input in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize > player[].id (lexically)
::players[].body.bodyMapsSize >= player[].id (lexically)
::players[].body.bodyMapsSize > player[].body.type (lexically)
::players[].body.bodyMapsSize >= player[].body.type (lexically)
::players[].body.bodyMapsSize > player[].body.visible (lexically)
::players[].body.bodyMapsSize >= player[].body.visible (lexically)
::players[].body.bodyMapsSize < player[].body.bodyPoints->aspect (lexically)
::players[].body.bodyMapsSize <= player[].body.bodyPoints->aspect (lexically)
::players[].body.bodyMapsSize >= player[].body.bodyMapsSize (lexically)
::players[].body.bodyMapsSize > player[].impulse[0][0] (lexically)
::players[].body.bodyMapsSize >= player[].impulse[0][0] (lexically)
::players[].body.bodyMapsSize > player[].impulse[1][0] (lexically)
::players[].body.bodyMapsSize >= player[].impulse[1][0] (lexically)
::players[].body.bodyMapsSize > player[].impulse[3][0] (lexically)
::players[].body.bodyMapsSize >= player[].impulse[3][0] (lexically)
::players[].body.bodyMapsSize > player[].impulse[5][0] (lexically)
::players[].body.bodyMapsSize >= player[].impulse[5][0] (lexically)
::players[].body.bodyMapsSize > player[].impulse[7][0] (lexically)
::players[].body.bodyMapsSize >= player[].impulse[7][0] (lexically)
::players[].body.bodyMapsSize elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < size(::players[])-1
::players[].body.bodyMapsSize elements < size(player[])-1
::players[].body.bodyMapsSize elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements <= ::players[::input_n-1].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::input_n-1].body.bodySize
::players[].body.bodyMapsSize elements < ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyHeight in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::input_n-1].basePosition.col
::players[].body.bodyMapsSize elements < ::players[::input_n].basePosition.row
::players[].body.bodyMapsSize elements < ::players[::new_input].basePosition.row
::players[::new_input].direction in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::input_n].stepCounter
player[::input_n].body.type in ::players[].body.bodyMapsSize
player[::input_n-1].body.type in ::players[].body.bodyMapsSize
player[::input_n].body.visible in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < player[::input_n-1].body.bodyPoints->aspect
player[::input_n-1].body.bodyMapsSize in ::players[].body.bodyMapsSize
player[::input_n].body.bodyHeight in ::players[].body.bodyMapsSize
player[::input_n].impulse[0][0] in ::players[].body.bodyMapsSize
player[::input_n].impulse[1][0] in ::players[].body.bodyMapsSize
player[::input_n-1].impulse[1][0] in ::players[].body.bodyMapsSize
player[::input_n].impulse[3][0] in ::players[].body.bodyMapsSize
player[::input_n].impulse[5][0] in ::players[].body.bodyMapsSize
player[::input_n].impulse[7][0] in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].impulse[1][0] in ::players[].body.bodyMapsSize
player[::new_input].impulse[3][0] in ::players[].body.bodyMapsSize
player[::new_input].impulse[5][0] in ::players[].body.bodyMapsSize
::players[].body.bodySize >= ::players[].body.bodyWidth (elementwise)
::players[].body.bodySize >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodySize >= ::players[].impulse[0][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[1][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[3][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[5][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodySize > ::players[].direction (lexically)
::players[].body.bodySize >= ::players[].direction (lexically)
::new_input in ::players[].body.bodySize
::players[].body.bodySize > player[].id (lexically)
::players[].body.bodySize >= player[].id (lexically)
::players[].body.bodySize > player[].body.type (lexically)
::players[].body.bodySize >= player[].body.type (lexically)
::players[].body.bodySize > player[].body.visible (lexically)
::players[].body.bodySize >= player[].body.visible (lexically)
::players[].body.bodySize < player[].body.bodyPoints->aspect (lexically)
::players[].body.bodySize <= player[].body.bodyPoints->aspect (lexically)
::players[].body.bodySize > player[].body.bodyMapsSize (lexically)
::players[].body.bodySize >= player[].body.bodyMapsSize (lexically)
::players[].body.bodySize > player[].body.bodyWidth (lexically)
::players[].body.bodySize >= player[].body.bodyWidth (lexically)
::players[].body.bodySize > player[].body.bodyHeight (lexically)
::players[].body.bodySize >= player[].body.bodyHeight (lexically)
::players[].body.bodySize > player[].body.color (lexically)
::players[].body.bodySize >= player[].body.color (lexically)
::players[].body.bodySize > player[].basePosition.row (lexically)
::players[].body.bodySize >= player[].basePosition.row (lexically)
::players[].body.bodySize > player[].impulse[0][0] (lexically)
::players[].body.bodySize >= player[].impulse[0][0] (lexically)
::players[].body.bodySize > player[].impulse[1][0] (lexically)
::players[].body.bodySize >= player[].impulse[1][0] (lexically)
::players[].body.bodySize > player[].impulse[3][0] (lexically)
::players[].body.bodySize >= player[].impulse[3][0] (lexically)
::players[].body.bodySize > player[].impulse[5][0] (lexically)
::players[].body.bodySize >= player[].impulse[5][0] (lexically)
::players[].body.bodySize > player[].impulse[7][0] (lexically)
::players[].body.bodySize >= player[].impulse[7][0] (lexically)
::players[].body.bodySize > player[].direction (lexically)
::players[].body.bodySize >= player[].direction (lexically)
::players[].body.bodySize > player[].stepCounter (lexically)
::players[].body.bodySize >= player[].stepCounter (lexically)
::players[].body.bodySize elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].body.bodySize
::players[].body.bodySize elements < size(::players[])-1
::players[].body.bodySize elements < size(player[])-1
::players[].body.bodySize elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[::new_input].direction in ::players[].body.bodySize
player[::input_n].body.type in ::players[].body.bodySize
player[::input_n-1].body.type in ::players[].body.bodySize
player[::input_n].body.visible in ::players[].body.bodySize
player[::input_n].body.bodySize in ::players[].body.bodySize
player[::input_n-1].body.bodySize in ::players[].body.bodySize
player[::input_n].impulse[0][0] in ::players[].body.bodySize
player[::input_n].impulse[1][0] in ::players[].body.bodySize
player[::input_n-1].impulse[1][0] in ::players[].body.bodySize
player[::input_n].impulse[3][0] in ::players[].body.bodySize
player[::input_n].impulse[5][0] in ::players[].body.bodySize
player[::input_n].impulse[7][0] in ::players[].body.bodySize
player[::new_input].body.bodySize in ::players[].body.bodySize
player[::new_input].impulse[1][0] in ::players[].body.bodySize
player[::new_input].impulse[3][0] in ::players[].body.bodySize
player[::new_input].impulse[5][0] in ::players[].body.bodySize
::players[].body.bodyWidth >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodyWidth >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyWidth > ::players[].direction (lexically)
::players[].body.bodyWidth >= ::players[].direction (lexically)
::players[].body.bodyWidth > player[].id (lexically)
::players[].body.bodyWidth >= player[].id (lexically)
::players[].body.bodyWidth > player[].body.type (lexically)
::players[].body.bodyWidth >= player[].body.type (lexically)
::players[].body.bodyWidth > player[].body.visible (lexically)
::players[].body.bodyWidth >= player[].body.visible (lexically)
::players[].body.bodyWidth < player[].body.bodyPoints->aspect (lexically)
::players[].body.bodyWidth <= player[].body.bodyPoints->aspect (lexically)
::players[].body.bodyWidth > player[].body.bodyMapsSize (lexically)
::players[].body.bodyWidth >= player[].body.bodyMapsSize (lexically)
::players[].body.bodyWidth > player[].body.bodyHeight (lexically)
::players[].body.bodyWidth >= player[].body.bodyHeight (lexically)
::players[].body.bodyWidth > player[].body.color (lexically)
::players[].body.bodyWidth >= player[].body.color (lexically)
::players[].body.bodyWidth > player[].impulse[0][0] (lexically)
::players[].body.bodyWidth >= player[].impulse[0][0] (lexically)
::players[].body.bodyWidth > player[].impulse[1][0] (lexically)
::players[].body.bodyWidth >= player[].impulse[1][0] (lexically)
::players[].body.bodyWidth > player[].impulse[3][0] (lexically)
::players[].body.bodyWidth >= player[].impulse[3][0] (lexically)
::players[].body.bodyWidth > player[].impulse[5][0] (lexically)
::players[].body.bodyWidth >= player[].impulse[5][0] (lexically)
::players[].body.bodyWidth > player[].impulse[7][0] (lexically)
::players[].body.bodyWidth >= player[].impulse[7][0] (lexically)
::players[].body.bodyWidth > player[].direction (lexically)
::players[].body.bodyWidth >= player[].direction (lexically)
::players[].body.bodyWidth elements >= size(::crashedPlayers[])-1
::players[].body.bodyWidth elements < size(::players[])-1
::players[].body.bodyWidth elements < size(player[])-1
::players[].body.bodyWidth elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[::input_n-1].body.bodySize
::players[].body.bodyWidth elements < ::players[::input_n-1].basePosition.col
::players[].body.bodyWidth elements < player[::input_n-1].body.bodyPoints->aspect
player[::input_n].body.bodyWidth in ::players[].body.bodyWidth
player[::input_n-1].body.bodyWidth in ::players[].body.bodyWidth
::players[].body.bodyWidth elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].body.bodyWidth in ::players[].body.bodyWidth
::players[].body.bodyHeight >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyHeight > ::players[].direction (lexically)
::players[].body.bodyHeight >= ::players[].direction (lexically)
::players[].body.bodyHeight > player[].id (lexically)
::players[].body.bodyHeight >= player[].id (lexically)
::players[].body.bodyHeight > player[].body.type (lexically)
::players[].body.bodyHeight >= player[].body.type (lexically)
::players[].body.bodyHeight > player[].body.visible (lexically)
::players[].body.bodyHeight >= player[].body.visible (lexically)
::players[].body.bodyHeight < player[].body.bodyPoints->aspect (lexically)
::players[].body.bodyHeight <= player[].body.bodyPoints->aspect (lexically)
::players[].body.bodyHeight > player[].impulse[0][0] (lexically)
::players[].body.bodyHeight >= player[].impulse[0][0] (lexically)
::players[].body.bodyHeight > player[].impulse[1][0] (lexically)
::players[].body.bodyHeight >= player[].impulse[1][0] (lexically)
::players[].body.bodyHeight > player[].impulse[3][0] (lexically)
::players[].body.bodyHeight >= player[].impulse[3][0] (lexically)
::players[].body.bodyHeight > player[].impulse[5][0] (lexically)
::players[].body.bodyHeight >= player[].impulse[5][0] (lexically)
::players[].body.bodyHeight > player[].impulse[7][0] (lexically)
::players[].body.bodyHeight >= player[].impulse[7][0] (lexically)
::players[].body.bodyHeight elements >= size(::crashedPlayers[])-1
::players[].body.bodyHeight elements < size(::players[])-1
::players[].body.bodyHeight elements < size(player[])-1
::players[].body.bodyHeight elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[::input_n-1].body.bodySize
::players[].body.bodyHeight elements < ::players[::input_n-1].body.bodyWidth
::players[].body.bodyHeight elements < ::players[::input_n-1].basePosition.col
::players[].body.bodyHeight elements < ::players[::input_n].basePosition.row
::players[].body.bodyHeight elements < ::players[::new_input].basePosition.row
::players[].body.bodyHeight elements < ::players[::input_n].stepCounter
::players[].body.bodyHeight elements < player[::input_n-1].body.bodyPoints->aspect
player[::input_n].body.bodyHeight in ::players[].body.bodyHeight
player[::input_n-1].body.bodyHeight in ::players[].body.bodyHeight
::players[].body.bodyHeight elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].body.bodyHeight in ::players[].body.bodyHeight
::players[].body.color <= ::players[].basePosition.col (elementwise)
::players[].body.color >= ::players[].impulse[5][0] (elementwise)
::players[].body.color > ::players[].direction (lexically)
::players[].body.color >= ::players[].direction (lexically)
::input_n in ::players[].body.color
::new_input in ::players[].body.color
::players[].body.color > player[].id (lexically)
::players[].body.color >= player[].id (lexically)
::players[].body.color > player[].body.type (lexically)
::players[].body.color >= player[].body.type (lexically)
::players[].body.color > player[].body.visible (lexically)
::players[].body.color >= player[].body.visible (lexically)
::players[].body.color < player[].body.bodyPoints->aspect (lexically)
::players[].body.color <= player[].body.bodyPoints->aspect (lexically)
::players[].body.color > player[].impulse[0][0] (lexically)
::players[].body.color >= player[].impulse[0][0] (lexically)
::players[].body.color > player[].impulse[1][0] (lexically)
::players[].body.color >= player[].impulse[1][0] (lexically)
::players[].body.color > player[].impulse[3][0] (lexically)
::players[].body.color >= player[].impulse[3][0] (lexically)
::players[].body.color > player[].impulse[5][0] (lexically)
::players[].body.color >= player[].impulse[5][0] (lexically)
::players[].body.color > player[].impulse[7][0] (lexically)
::players[].body.color >= player[].impulse[7][0] (lexically)
::players[].body.color elements >= size(::crashedPlayers[])-1
::players[].body.color elements < size(::players[])-1
::players[].body.color elements < size(player[])-1
::players[].body.color elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.color elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.color elements < ::players[::new_input].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize in ::players[].body.color
::players[::new_input].body.bodyMapsSize in ::players[].body.color
::players[].body.color elements < ::players[::input_n-1].body.bodySize
::players[::input_n-1].body.bodyWidth in ::players[].body.color
::players[].body.color elements <= ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyWidth in ::players[].body.color
::players[::new_input].body.bodyHeight in ::players[].body.color
::players[].body.color elements < ::players[::input_n-1].basePosition.col
::players[].body.color elements < ::players[::input_n].basePosition.row
::players[].body.color elements < ::players[::new_input].basePosition.row
::players[::new_input].direction in ::players[].body.color
::players[].body.color elements < ::players[::input_n].stepCounter
player[::input_n].body.type in ::players[].body.color
player[::input_n-1].body.type in ::players[].body.color
player[::input_n].body.visible in ::players[].body.color
::players[].body.color elements < player[::input_n-1].body.bodyPoints->aspect
player[::input_n-1].body.bodyMapsSize in ::players[].body.color
player[::input_n].body.bodyWidth in ::players[].body.color
player[::input_n].body.bodyHeight in ::players[].body.color
player[::input_n-1].body.bodyHeight in ::players[].body.color
player[::input_n].body.color in ::players[].body.color
player[::input_n-1].body.color in ::players[].body.color
player[::input_n].impulse[0][0] in ::players[].body.color
player[::input_n].impulse[1][0] in ::players[].body.color
player[::input_n-1].impulse[1][0] in ::players[].body.color
player[::input_n].impulse[3][0] in ::players[].body.color
player[::input_n].impulse[5][0] in ::players[].body.color
player[::input_n].impulse[7][0] in ::players[].body.color
player[::input_n-1].direction in ::players[].body.color
player[::input_n-1].stepCounter in ::players[].body.color
::players[].body.color elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].body.bodyHeight in ::players[].body.color
player[::new_input].body.color in ::players[].body.color
player[::new_input].impulse[1][0] in ::players[].body.color
player[::new_input].impulse[3][0] in ::players[].body.color
player[::new_input].impulse[5][0] in ::players[].body.color
player[::new_input].direction in ::players[].body.color
player[::input_n].basePosition in ::players[].basePosition
player[::input_n-1].basePosition in ::players[].basePosition
player[::new_input].basePosition in ::players[].basePosition
::players[].basePosition.col > ::players[].basePosition.row (lexically)
::players[].basePosition.col >= ::players[].basePosition.row (lexically)
::players[].basePosition.col > ::players[].impulse[0][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[0][0] (lexically)
::players[].basePosition.col > ::players[].impulse[1][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[1][0] (lexically)
::players[].basePosition.col > ::players[].impulse[3][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[3][0] (elementwise)
::players[].basePosition.col > ::players[].impulse[5][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[5][0] (elementwise)
::players[].basePosition.col > ::players[].impulse[7][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[7][0] (elementwise)
::players[].basePosition.col > ::players[].direction (lexically)
::players[].basePosition.col >= ::players[].direction (lexically)
::players[].basePosition.col > ::players[].stepCounter (lexically)
::players[].basePosition.col >= ::players[].stepCounter (lexically)
::players[].basePosition.col > player[].id (lexically)
::players[].basePosition.col >= player[].id (lexically)
::players[].basePosition.col > player[].body.type (lexically)
::players[].basePosition.col >= player[].body.type (lexically)
::players[].basePosition.col > player[].body.visible (lexically)
::players[].basePosition.col >= player[].body.visible (lexically)
::players[].basePosition.col > player[].body.bodyMapsSize (lexically)
::players[].basePosition.col >= player[].body.bodyMapsSize (lexically)
::players[].basePosition.col > player[].body.bodyWidth (lexically)
::players[].basePosition.col >= player[].body.bodyWidth (lexically)
::players[].basePosition.col > player[].body.bodyHeight (lexically)
::players[].basePosition.col >= player[].body.bodyHeight (lexically)
::players[].basePosition.col > player[].body.color (lexically)
::players[].basePosition.col >= player[].body.color (lexically)
::players[].basePosition.col > player[].basePosition.row (lexically)
::players[].basePosition.col >= player[].basePosition.row (lexically)
::players[].basePosition.col > player[].impulse[0][0] (lexically)
::players[].basePosition.col >= player[].impulse[0][0] (lexically)
::players[].basePosition.col > player[].impulse[1][0] (lexically)
::players[].basePosition.col >= player[].impulse[1][0] (lexically)
::players[].basePosition.col > player[].impulse[3][0] (lexically)
::players[].basePosition.col >= player[].impulse[3][0] (lexically)
::players[].basePosition.col > player[].impulse[5][0] (lexically)
::players[].basePosition.col >= player[].impulse[5][0] (lexically)
::players[].basePosition.col > player[].impulse[7][0] (lexically)
::players[].basePosition.col >= player[].impulse[7][0] (lexically)
::players[].basePosition.col > player[].direction (lexically)
::players[].basePosition.col >= player[].direction (lexically)
::players[].basePosition.col > player[].stepCounter (lexically)
::players[].basePosition.col >= player[].stepCounter (lexically)
::players[].basePosition.col elements >= size(::crashedPlayers[])-1
::players[].basePosition.col elements < size(::players[])-1
::players[].basePosition.col elements < size(player[])-1
::players[::input_n-1].body.bodyMapsSize in ::players[].basePosition.col
::players[::input_n-1].body.bodyWidth in ::players[].basePosition.col
::players[::new_input].body.bodyWidth in ::players[].basePosition.col
::players[::new_input].body.bodyHeight in ::players[].basePosition.col
::players[::input_n].basePosition.row in ::players[].basePosition.col
player[::input_n].body.bodyWidth in ::players[].basePosition.col
player[::input_n].body.bodyHeight in ::players[].basePosition.col
player[::input_n].basePosition.col in ::players[].basePosition.col
player[::input_n-1].basePosition.col in ::players[].basePosition.col
player[::new_input].basePosition.col in ::players[].basePosition.col
::players[].basePosition.row > ::players[].impulse[0][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[0][0] (lexically)
::players[].basePosition.row > ::players[].impulse[1][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[1][0] (elementwise)
::players[].basePosition.row > ::players[].impulse[3][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[3][0] (lexically)
::players[].basePosition.row > ::players[].impulse[5][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[5][0] (elementwise)
::players[].basePosition.row > ::players[].impulse[7][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[7][0] (lexically)
::players[].basePosition.row > ::players[].direction (lexically)
::players[].basePosition.row >= ::players[].direction (lexically)
::players[].basePosition.row > ::players[].stepCounter (lexically)
::players[].basePosition.row >= ::players[].stepCounter (lexically)
::input_n in ::players[].basePosition.row
::new_input in ::players[].basePosition.row
::players[].basePosition.row > player[].id (lexically)
::players[].basePosition.row >= player[].id (lexically)
::players[].basePosition.row > player[].body.type (lexically)
::players[].basePosition.row >= player[].body.type (lexically)
::players[].basePosition.row > player[].body.visible (lexically)
::players[].basePosition.row >= player[].body.visible (lexically)
::players[].basePosition.row < player[].body.bodyPoints->aspect (lexically)
::players[].basePosition.row <= player[].body.bodyPoints->aspect (lexically)
::players[].basePosition.row > player[].body.bodyMapsSize (lexically)
::players[].basePosition.row >= player[].body.bodyMapsSize (lexically)
::players[].basePosition.row > player[].body.bodyHeight (lexically)
::players[].basePosition.row >= player[].body.bodyHeight (lexically)
::players[].basePosition.row > player[].body.color (lexically)
::players[].basePosition.row >= player[].body.color (lexically)
::players[].basePosition.row > player[].impulse[0][0] (lexically)
::players[].basePosition.row >= player[].impulse[0][0] (lexically)
::players[].basePosition.row > player[].impulse[1][0] (lexically)
::players[].basePosition.row >= player[].impulse[1][0] (lexically)
::players[].basePosition.row > player[].impulse[3][0] (lexically)
::players[].basePosition.row >= player[].impulse[3][0] (lexically)
::players[].basePosition.row > player[].impulse[5][0] (lexically)
::players[].basePosition.row >= player[].impulse[5][0] (lexically)
::players[].basePosition.row > player[].impulse[7][0] (lexically)
::players[].basePosition.row >= player[].impulse[7][0] (lexically)
::players[].basePosition.row > player[].direction (lexically)
::players[].basePosition.row >= player[].direction (lexically)
::players[].basePosition.row > player[].stepCounter (lexically)
::players[].basePosition.row >= player[].stepCounter (lexically)
::players[].basePosition.row elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].basePosition.row
::players[].basePosition.row elements < size(::players[])-1
::players[].basePosition.row elements < size(player[])-1
::players[].basePosition.row elements < ::players[::input_n].body.bodyPoints->aspect
::players[].basePosition.row elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].basePosition.row elements < ::players[::new_input].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize in ::players[].basePosition.row
::players[::new_input].body.bodyMapsSize in ::players[].basePosition.row
::players[].basePosition.row elements < ::players[::input_n-1].body.bodySize
::players[::new_input].body.bodyHeight in ::players[].basePosition.row
::players[::input_n-1].body.color in ::players[].basePosition.row
::players[::new_input].body.color in ::players[].basePosition.row
::players[].basePosition.row elements < ::players[::input_n-1].basePosition.col
::players[::new_input].direction in ::players[].basePosition.row
player[::input_n].body.type in ::players[].basePosition.row
player[::input_n-1].body.type in ::players[].basePosition.row
player[::input_n].body.visible in ::players[].basePosition.row
::players[].basePosition.row elements < player[::input_n-1].body.bodyPoints->aspect
player[::input_n-1].body.bodyMapsSize in ::players[].basePosition.row
player[::input_n].body.bodyHeight in ::players[].basePosition.row
player[::input_n-1].body.bodyHeight in ::players[].basePosition.row
player[::input_n].body.color in ::players[].basePosition.row
player[::input_n-1].body.color in ::players[].basePosition.row
player[::input_n].basePosition.row in ::players[].basePosition.row
player[::input_n].impulse[0][0] in ::players[].basePosition.row
player[::input_n].impulse[1][0] in ::players[].basePosition.row
player[::input_n-1].impulse[1][0] in ::players[].basePosition.row
player[::input_n].impulse[3][0] in ::players[].basePosition.row
player[::input_n].impulse[5][0] in ::players[].basePosition.row
player[::input_n].impulse[7][0] in ::players[].basePosition.row
player[::input_n-1].direction in ::players[].basePosition.row
::players[].basePosition.row elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].body.bodyHeight in ::players[].basePosition.row
player[::new_input].body.color in ::players[].basePosition.row
player[::new_input].basePosition.row in ::players[].basePosition.row
player[::new_input].impulse[1][0] in ::players[].basePosition.row
player[::new_input].impulse[3][0] in ::players[].basePosition.row
player[::new_input].impulse[5][0] in ::players[].basePosition.row
player[::new_input].direction in ::players[].basePosition.row
::players[].impulse[0] - ::players[].impulse[1] + 4 == 0
::players[].impulse[0] - ::players[].impulse[2] + 8 == 0
::players[].impulse[0] - ::players[].impulse[3] + 12 == 0
::players[].impulse[0] - ::players[].impulse[4] + 16 == 0
::players[].impulse[0] - ::players[].impulse[5] + 20 == 0
::players[].impulse[0] - ::players[].impulse[6] + 24 == 0
::players[].impulse[0] - ::players[].impulse[7] + 28 == 0
::players[].impulse[0] - ::players[].impulse[8] + 32 == 0
player[::input_n].impulse[0] in ::players[].impulse[0]
player[::input_n-1].impulse[0] in ::players[].impulse[0]
player[::new_input].impulse[0] in ::players[].impulse[0]
::players[].impulse[0][0] < ::players[].direction (lexically)
::players[].impulse[0][0] <= ::players[].direction (lexically)
::players[].impulse[0][0] < ::players[].stepCounter (lexically)
::players[].impulse[0][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[0][0] elements <= ::input_n
::players[].impulse[0][0] > player[].id (lexically)
::players[].impulse[0][0] >= player[].id (lexically)
::players[].impulse[0][0] < player[].body.visible (lexically)
::players[].impulse[0][0] <= player[].body.visible (lexically)
::players[].impulse[0][0] < player[].body.bodyPoints->aspect (lexically)
::players[].impulse[0][0] <= player[].body.bodyPoints->aspect (lexically)
::players[].impulse[0][0] < player[].body.bodyMapsSize (lexically)
::players[].impulse[0][0] <= player[].body.bodyMapsSize (lexically)
::players[].impulse[0][0] < player[].body.bodySize (lexically)
::players[].impulse[0][0] <= player[].body.bodySize (lexically)
::players[].impulse[0][0] < player[].body.color (lexically)
::players[].impulse[0][0] <= player[].body.color (lexically)
::players[].impulse[0][0] < player[].basePosition.col (lexically)
::players[].impulse[0][0] <= player[].basePosition.col (lexically)
::players[].impulse[0][0] < player[].basePosition.row (lexically)
::players[].impulse[0][0] <= player[].basePosition.row (lexically)
::players[].impulse[0][0] < player[].direction (lexically)
::players[].impulse[0][0] <= player[].direction (lexically)
::players[].impulse[0][0] < player[].stepCounter (lexically)
::players[].impulse[0][0] <= player[].stepCounter (lexically)
::players[].impulse[0][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[0][0] elements < size(::players[])-1
::players[].impulse[0][0] elements < size(player[])-1
::players[].impulse[0][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[0][0] elements <= ::players[::new_input].body.bodyMapsSize
::players[].impulse[0][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[0][0] elements <= ::players[::new_input].body.bodySize
::players[].impulse[0][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[0][0] elements < ::players[::input_n-1].body.color
::players[].impulse[0][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[0][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[0][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[0][0] elements < ::players[::input_n].stepCounter
::players[].impulse[0][0] elements <= player[::input_n].body.type
player[::input_n].body.type in ::players[].impulse[0][0]
player[::input_n-1].body.type in ::players[].impulse[0][0]
::players[].impulse[0][0] elements <= player[::input_n].body.visible
::players[].impulse[0][0] elements <= player[::input_n].body.bodyPoints->aspect
::players[].impulse[0][0] elements < player[::input_n-1].body.bodyPoints->aspect
::players[].impulse[0][0] elements <= player[::input_n-1].body.bodyMapsSize
::players[].impulse[0][0] elements <= player[::input_n].body.bodySize
::players[].impulse[0][0] elements <= player[::input_n-1].body.bodySize
::players[].impulse[0][0] elements <= player[::input_n-1].body.color
::players[].impulse[0][0] elements < player[::input_n-1].basePosition.col
player[::input_n].impulse[0][0] in ::players[].impulse[0][0]
player[::input_n].impulse[1][0] in ::players[].impulse[0][0]
player[::input_n].impulse[5][0] in ::players[].impulse[0][0]
::players[].impulse[0][0] elements <= player[::input_n-1].direction
::players[].impulse[0][0] elements <= player[::input_n].stepCounter
::players[].impulse[0][0] elements < player[::new_input].body.bodyPoints->aspect
::players[].impulse[0][0] elements <= player[::new_input].body.bodySize
::players[].impulse[0][0] elements <= player[::new_input].basePosition.row
player[::new_input].impulse[3][0] in ::players[].impulse[0][0]
::players[].impulse[0][0] elements <= player[::new_input].stepCounter
::players[].impulse[1] - ::players[].impulse[2] + 4 == 0
::players[].impulse[1] - ::players[].impulse[3] + 8 == 0
::players[].impulse[1] - ::players[].impulse[4] + 12 == 0
::players[].impulse[1] - ::players[].impulse[5] + 16 == 0
::players[].impulse[1] - ::players[].impulse[6] + 20 == 0
::players[].impulse[1] - ::players[].impulse[7] + 24 == 0
::players[].impulse[1] - ::players[].impulse[8] + 28 == 0
player[::input_n].impulse[1] in ::players[].impulse[1]
player[::input_n-1].impulse[1] in ::players[].impulse[1]
player[::new_input].impulse[1] in ::players[].impulse[1]
::players[].impulse[1][0] >= ::players[].impulse[7][0] (lexically)
::players[].impulse[1][0] > player[].id (lexically)
::players[].impulse[1][0] >= player[].id (lexically)
::players[].impulse[1][0] < player[].body.visible (lexically)
::players[].impulse[1][0] <= player[].body.visible (lexically)
::players[].impulse[1][0] < player[].body.bodyPoints->aspect (lexically)
::players[].impulse[1][0] <= player[].body.bodyPoints->aspect (lexically)
::players[].impulse[1][0] < player[].body.bodyMapsSize (lexically)
::players[].impulse[1][0] <= player[].body.bodyMapsSize (lexically)
::players[].impulse[1][0] < player[].body.bodySize (lexically)
::players[].impulse[1][0] <= player[].body.bodySize (lexically)
::players[].impulse[1][0] < player[].body.color (lexically)
::players[].impulse[1][0] <= player[].body.color (lexically)
::players[].impulse[1][0] < player[].basePosition.col (lexically)
::players[].impulse[1][0] <= player[].basePosition.col (lexically)
::players[].impulse[1][0] < player[].basePosition.row (lexically)
::players[].impulse[1][0] <= player[].basePosition.row (lexically)
::players[].impulse[1][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[1][0] elements < size(::players[])-1
::players[].impulse[1][0] elements < size(player[])-1
::players[].impulse[1][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[1][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[1][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[1][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[1][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[1][0] elements < ::players[::input_n].stepCounter
player[::input_n].body.type in ::players[].impulse[1][0]
player[::input_n-1].body.type in ::players[].impulse[1][0]
player[::input_n].body.visible in ::players[].impulse[1][0]
::players[].impulse[1][0] elements <= player[::input_n].body.bodyPoints->aspect
::players[].impulse[1][0] elements < player[::input_n-1].body.bodyPoints->aspect
player[::input_n].impulse[0][0] in ::players[].impulse[1][0]
player[::input_n].impulse[1][0] in ::players[].impulse[1][0]
player[::input_n-1].impulse[1][0] in ::players[].impulse[1][0]
player[::input_n].impulse[3][0] in ::players[].impulse[1][0]
player[::input_n].impulse[5][0] in ::players[].impulse[1][0]
player[::input_n].impulse[7][0] in ::players[].impulse[1][0]
::players[].impulse[1][0] elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].impulse[1][0] in ::players[].impulse[1][0]
player[::new_input].impulse[3][0] in ::players[].impulse[1][0]
::players[].impulse[2] - ::players[].impulse[3] + 4 == 0
::players[].impulse[2] - ::players[].impulse[4] + 8 == 0
::players[].impulse[2] - ::players[].impulse[5] + 12 == 0
::players[].impulse[2] - ::players[].impulse[6] + 16 == 0
::players[].impulse[2] - ::players[].impulse[7] + 20 == 0
::players[].impulse[2] - ::players[].impulse[8] + 24 == 0
player[::input_n].impulse[2] in ::players[].impulse[2]
player[::input_n-1].impulse[2] in ::players[].impulse[2]
player[::new_input].impulse[2] in ::players[].impulse[2]
::players[].impulse[3] - ::players[].impulse[4] + 4 == 0
::players[].impulse[3] - ::players[].impulse[5] + 8 == 0
::players[].impulse[3] - ::players[].impulse[6] + 12 == 0
::players[].impulse[3] - ::players[].impulse[7] + 16 == 0
::players[].impulse[3] - ::players[].impulse[8] + 20 == 0
player[::input_n].impulse[3] in ::players[].impulse[3]
player[::input_n-1].impulse[3] in ::players[].impulse[3]
player[::new_input].impulse[3] in ::players[].impulse[3]
::players[].impulse[3][0] >= ::players[].impulse[7][0] (lexically)
::players[].impulse[3][0] < ::players[].direction (lexically)
::players[].impulse[3][0] <= ::players[].direction (lexically)
::players[].impulse[3][0] < ::players[].stepCounter (lexically)
::players[].impulse[3][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[3][0] elements <= ::input_n
::new_input in ::players[].impulse[3][0]
::players[].impulse[3][0] > player[].id (lexically)
::players[].impulse[3][0] >= player[].id (lexically)
::players[].impulse[3][0] < player[].body.visible (lexically)
::players[].impulse[3][0] <= player[].body.visible (lexically)
::players[].impulse[3][0] < player[].body.bodyPoints->aspect (lexically)
::players[].impulse[3][0] <= player[].body.bodyPoints->aspect (lexically)
::players[].impulse[3][0] < player[].body.bodyMapsSize (lexically)
::players[].impulse[3][0] <= player[].body.bodyMapsSize (lexically)
::players[].impulse[3][0] < player[].body.bodySize (lexically)
::players[].impulse[3][0] <= player[].body.bodySize (lexically)
::players[].impulse[3][0] < player[].body.color (lexically)
::players[].impulse[3][0] <= player[].body.color (lexically)
::players[].impulse[3][0] < player[].basePosition.col (lexically)
::players[].impulse[3][0] <= player[].basePosition.col (lexically)
::players[].impulse[3][0] < player[].basePosition.row (lexically)
::players[].impulse[3][0] <= player[].basePosition.row (lexically)
::players[].impulse[3][0] < player[].direction (lexically)
::players[].impulse[3][0] <= player[].direction (lexically)
::players[].impulse[3][0] < player[].stepCounter (lexically)
::players[].impulse[3][0] <= player[].stepCounter (lexically)
::players[].impulse[3][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[3][0] elements < size(::players[])-1
::players[].impulse[3][0] elements < size(player[])-1
::players[].impulse[3][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[3][0] elements <= ::players[::new_input].body.bodyMapsSize
::players[].impulse[3][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[3][0] elements <= ::players[::new_input].body.bodySize
::players[].impulse[3][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[3][0] elements < ::players[::input_n-1].body.color
::players[].impulse[3][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[3][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[3][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[3][0] elements < ::players[::input_n].stepCounter
player[::input_n].body.type in ::players[].impulse[3][0]
player[::input_n-1].body.type in ::players[].impulse[3][0]
::players[].impulse[3][0] elements <= player[::input_n].body.visible
player[::input_n].body.visible in ::players[].impulse[3][0]
::players[].impulse[3][0] elements <= player[::input_n].body.bodyPoints->aspect
::players[].impulse[3][0] elements < player[::input_n-1].body.bodyPoints->aspect
::players[].impulse[3][0] elements <= player[::input_n-1].body.bodyMapsSize
::players[].impulse[3][0] elements <= player[::input_n].body.bodySize
::players[].impulse[3][0] elements <= player[::input_n-1].body.bodySize
::players[].impulse[3][0] elements <= player[::input_n-1].body.color
::players[].impulse[3][0] elements < player[::input_n-1].basePosition.col
player[::input_n].impulse[0][0] in ::players[].impulse[3][0]
player[::input_n].impulse[1][0] in ::players[].impulse[3][0]
player[::input_n-1].impulse[1][0] in ::players[].impulse[3][0]
player[::input_n].impulse[3][0] in ::players[].impulse[3][0]
player[::input_n].impulse[5][0] in ::players[].impulse[3][0]
player[::input_n].impulse[7][0] in ::players[].impulse[3][0]
::players[].impulse[3][0] elements <= player[::input_n-1].direction
::players[].impulse[3][0] elements <= player[::input_n].stepCounter
::players[].impulse[3][0] elements < player[::new_input].body.bodyPoints->aspect
::players[].impulse[3][0] elements <= player[::new_input].body.bodySize
::players[].impulse[3][0] elements <= player[::new_input].basePosition.row
player[::new_input].impulse[1][0] in ::players[].impulse[3][0]
player[::new_input].impulse[3][0] in ::players[].impulse[3][0]
::players[].impulse[3][0] elements <= player[::new_input].stepCounter
::players[].impulse[4] - ::players[].impulse[5] + 4 == 0
::players[].impulse[4] - ::players[].impulse[6] + 8 == 0
::players[].impulse[4] - ::players[].impulse[7] + 12 == 0
::players[].impulse[4] - ::players[].impulse[8] + 16 == 0
player[::input_n].impulse[4] in ::players[].impulse[4]
player[::input_n-1].impulse[4] in ::players[].impulse[4]
player[::new_input].impulse[4] in ::players[].impulse[4]
::players[].impulse[5] - ::players[].impulse[6] + 4 == 0
::players[].impulse[5] - ::players[].impulse[7] + 8 == 0
::players[].impulse[5] - ::players[].impulse[8] + 12 == 0
player[::input_n].impulse[5] in ::players[].impulse[5]
player[::input_n-1].impulse[5] in ::players[].impulse[5]
player[::new_input].impulse[5] in ::players[].impulse[5]
::players[].impulse[5][0] < ::players[].direction (lexically)
::players[].impulse[5][0] <= ::players[].direction (lexically)
::players[].impulse[5][0] < ::players[].stepCounter (lexically)
::players[].impulse[5][0] <= ::players[].stepCounter (elementwise)
::input_n in ::players[].impulse[5][0]
::players[].impulse[5][0] elements <= ::input_n
::new_input in ::players[].impulse[5][0]
::players[].impulse[5][0] > player[].id (lexically)
::players[].impulse[5][0] >= player[].id (lexically)
::players[].impulse[5][0] < player[].body.visible (lexically)
::players[].impulse[5][0] <= player[].body.visible (lexically)
::players[].impulse[5][0] < player[].body.bodyPoints->aspect (lexically)
::players[].impulse[5][0] <= player[].body.bodyPoints->aspect (lexically)
::players[].impulse[5][0] < player[].body.bodyMapsSize (lexically)
::players[].impulse[5][0] <= player[].body.bodyMapsSize (lexically)
::players[].impulse[5][0] < player[].body.bodySize (lexically)
::players[].impulse[5][0] <= player[].body.bodySize (lexically)
::players[].impulse[5][0] < player[].body.color (lexically)
::players[].impulse[5][0] <= player[].body.color (lexically)
::players[].impulse[5][0] < player[].basePosition.col (lexically)
::players[].impulse[5][0] <= player[].basePosition.col (lexically)
::players[].impulse[5][0] < player[].basePosition.row (lexically)
::players[].impulse[5][0] <= player[].basePosition.row (lexically)
::players[].impulse[5][0] <= player[].impulse[5][0] (lexically)
::players[].impulse[5][0] < player[].direction (lexically)
::players[].impulse[5][0] <= player[].direction (lexically)
::players[].impulse[5][0] < player[].stepCounter (lexically)
::players[].impulse[5][0] <= player[].stepCounter (lexically)
::players[].impulse[5][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[5][0] elements < size(::players[])-1
::players[].impulse[5][0] elements < size(player[])-1
::players[].impulse[5][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[5][0] elements <= ::players[::new_input].body.bodyMapsSize
::players[].impulse[5][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[5][0] elements <= ::players[::new_input].body.bodySize
::players[].impulse[5][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[5][0] elements < ::players[::input_n-1].body.color
::players[].impulse[5][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[5][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[5][0] elements < ::players[::new_input].basePosition.row
::players[::new_input].direction in ::players[].impulse[5][0]
::players[].impulse[5][0] elements < ::players[::input_n].stepCounter
player[::input_n].body.type in ::players[].impulse[5][0]
player[::input_n-1].body.type in ::players[].impulse[5][0]
player[::input_n].body.visible in ::players[].impulse[5][0]
::players[].impulse[5][0] elements < player[::input_n-1].body.bodyPoints->aspect
::players[].impulse[5][0] elements <= player[::input_n-1].body.bodyMapsSize
::players[].impulse[5][0] elements <= player[::input_n-1].body.bodySize
::players[].impulse[5][0] elements <= player[::input_n-1].body.color
::players[].impulse[5][0] elements < player[::input_n-1].basePosition.col
player[::input_n].impulse[0][0] in ::players[].impulse[5][0]
player[::input_n].impulse[1][0] in ::players[].impulse[5][0]
player[::input_n-1].impulse[1][0] in ::players[].impulse[5][0]
player[::input_n].impulse[3][0] in ::players[].impulse[5][0]
player[::input_n].impulse[5][0] in ::players[].impulse[5][0]
player[::input_n].impulse[7][0] in ::players[].impulse[5][0]
::players[].impulse[5][0] elements <= player[::input_n-1].direction
::players[].impulse[5][0] elements < player[::new_input].body.bodyPoints->aspect
::players[].impulse[5][0] elements <= player[::new_input].body.bodySize
::players[].impulse[5][0] elements <= player[::new_input].basePosition.row
player[::new_input].impulse[1][0] in ::players[].impulse[5][0]
player[::new_input].impulse[3][0] in ::players[].impulse[5][0]
player[::new_input].impulse[5][0] in ::players[].impulse[5][0]
::players[].impulse[5][0] elements <= player[::new_input].stepCounter
::players[].impulse[6] - ::players[].impulse[7] + 4 == 0
::players[].impulse[6] - ::players[].impulse[8] + 8 == 0
player[::input_n].impulse[6] in ::players[].impulse[6]
player[::input_n-1].impulse[6] in ::players[].impulse[6]
player[::new_input].impulse[6] in ::players[].impulse[6]
::players[].impulse[7] - ::players[].impulse[8] + 4 == 0
player[::input_n].impulse[7] in ::players[].impulse[7]
player[::input_n-1].impulse[7] in ::players[].impulse[7]
player[::new_input].impulse[7] in ::players[].impulse[7]
::players[].impulse[7][0] < ::players[].direction (lexically)
::players[].impulse[7][0] <= ::players[].direction (lexically)
::players[].impulse[7][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[7][0] elements <= ::input_n
::new_input in ::players[].impulse[7][0]
::players[].impulse[7][0] > player[].id (lexically)
::players[].impulse[7][0] >= player[].id (lexically)
::players[].impulse[7][0] < player[].body.visible (lexically)
::players[].impulse[7][0] <= player[].body.visible (lexically)
::players[].impulse[7][0] < player[].body.bodyPoints->aspect (lexically)
::players[].impulse[7][0] <= player[].body.bodyPoints->aspect (lexically)
::players[].impulse[7][0] < player[].body.bodyMapsSize (lexically)
::players[].impulse[7][0] <= player[].body.bodyMapsSize (lexically)
::players[].impulse[7][0] < player[].body.bodySize (lexically)
::players[].impulse[7][0] <= player[].body.bodySize (lexically)
::players[].impulse[7][0] < player[].body.bodyWidth (lexically)
::players[].impulse[7][0] <= player[].body.bodyWidth (lexically)
::players[].impulse[7][0] < player[].body.bodyHeight (lexically)
::players[].impulse[7][0] <= player[].body.bodyHeight (lexically)
::players[].impulse[7][0] < player[].body.color (lexically)
::players[].impulse[7][0] <= player[].body.color (lexically)
::players[].impulse[7][0] < player[].basePosition.col (lexically)
::players[].impulse[7][0] <= player[].basePosition.col (lexically)
::players[].impulse[7][0] < player[].basePosition.row (lexically)
::players[].impulse[7][0] <= player[].basePosition.row (lexically)
::players[].impulse[7][0] < player[].impulse[5][0] (lexically)
::players[].impulse[7][0] <= player[].impulse[5][0] (lexically)
::players[].impulse[7][0] < player[].direction (lexically)
::players[].impulse[7][0] <= player[].direction (lexically)
::players[].impulse[7][0] < player[].stepCounter (lexically)
::players[].impulse[7][0] <= player[].stepCounter (lexically)
::players[].impulse[7][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[7][0] elements < size(::players[])-1
::players[].impulse[7][0] elements < size(player[])-1
::players[].impulse[7][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[7][0] elements <= ::players[::new_input].body.bodyMapsSize
::players[].impulse[7][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[7][0] elements <= ::players[::new_input].body.bodySize
::players[].impulse[7][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[7][0] elements < ::players[::input_n-1].body.color
::players[].impulse[7][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[7][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[7][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[7][0] elements < ::players[::input_n].stepCounter
player[::input_n].body.type in ::players[].impulse[7][0]
player[::input_n-1].body.type in ::players[].impulse[7][0]
::players[].impulse[7][0] elements <= player[::input_n].body.visible
player[::input_n].body.visible in ::players[].impulse[7][0]
::players[].impulse[7][0] elements <= player[::input_n].body.bodyPoints->aspect
::players[].impulse[7][0] elements < player[::input_n-1].body.bodyPoints->aspect
::players[].impulse[7][0] elements <= player[::input_n-1].body.bodyMapsSize
::players[].impulse[7][0] elements <= player[::input_n].body.bodySize
::players[].impulse[7][0] elements <= player[::input_n-1].body.bodySize
::players[].impulse[7][0] elements <= player[::input_n-1].body.color
::players[].impulse[7][0] elements < player[::input_n-1].basePosition.col
player[::input_n].impulse[0][0] in ::players[].impulse[7][0]
player[::input_n].impulse[1][0] in ::players[].impulse[7][0]
player[::input_n-1].impulse[1][0] in ::players[].impulse[7][0]
player[::input_n].impulse[3][0] in ::players[].impulse[7][0]
player[::input_n].impulse[5][0] in ::players[].impulse[7][0]
player[::input_n].impulse[7][0] in ::players[].impulse[7][0]
::players[].impulse[7][0] elements <= player[::input_n-1].direction
::players[].impulse[7][0] elements <= player[::input_n].stepCounter
::players[].impulse[7][0] elements < player[::new_input].body.bodyPoints->aspect
::players[].impulse[7][0] elements <= player[::new_input].body.bodySize
::players[].impulse[7][0] elements <= player[::new_input].basePosition.row
player[::new_input].impulse[1][0] in ::players[].impulse[7][0]
player[::new_input].impulse[3][0] in ::players[].impulse[7][0]
::players[].impulse[7][0] elements <= player[::new_input].stepCounter
player[::input_n].impulse[8] in ::players[].impulse[8]
player[::input_n-1].impulse[8] in ::players[].impulse[8]
player[::new_input].impulse[8] in ::players[].impulse[8]
::players[].direction > ::players[].stepCounter (lexically)
::players[].direction >= ::players[].stepCounter (lexically)
::new_input in ::players[].direction
::players[].direction > player[].id (lexically)
::players[].direction >= player[].id (lexically)
::players[].direction < player[].body.bodyPoints->aspect (lexically)
::players[].direction <= player[].body.bodyPoints->aspect (lexically)
::players[].direction < player[].body.bodySize (lexically)
::players[].direction <= player[].body.bodySize (lexically)
::players[].direction < player[].body.color (lexically)
::players[].direction <= player[].body.color (lexically)
::players[].direction < player[].basePosition.col (lexically)
::players[].direction <= player[].basePosition.col (lexically)
::players[].direction < player[].basePosition.row (lexically)
::players[].direction <= player[].basePosition.row (lexically)
::players[].direction > player[].impulse[0][0] (lexically)
::players[].direction >= player[].impulse[0][0] (lexically)
::players[].direction > player[].impulse[7][0] (lexically)
::players[].direction >= player[].impulse[7][0] (lexically)
::players[].direction elements >= size(::crashedPlayers[])-1
::players[].direction elements < size(::players[])-1
::players[].direction elements < size(player[])-1
::players[].direction elements < ::players[::input_n].body.bodyPoints->aspect
::players[].direction elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].direction elements < ::players[::new_input].body.bodyPoints->aspect
::players[].direction elements < ::players[::input_n-1].body.bodySize
::players[].direction elements <= ::players[::new_input].body.bodySize
::players[].direction elements < ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.color in ::players[].direction
::players[].direction elements < ::players[::input_n-1].basePosition.col
::players[].direction elements < ::players[::input_n].basePosition.row
::players[].direction elements < ::players[::new_input].basePosition.row
::players[].direction elements < ::players[::input_n].stepCounter
player[::input_n].body.type in ::players[].direction
player[::input_n-1].body.type in ::players[].direction
player[::input_n].body.visible in ::players[].direction
::players[].direction elements < player[::input_n-1].body.bodyPoints->aspect
player[::input_n].impulse[0][0] in ::players[].direction
player[::input_n].impulse[1][0] in ::players[].direction
player[::input_n-1].impulse[1][0] in ::players[].direction
player[::input_n].impulse[3][0] in ::players[].direction
player[::input_n].impulse[5][0] in ::players[].direction
player[::input_n].impulse[7][0] in ::players[].direction
player[::input_n-1].direction in ::players[].direction
::players[].direction elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].impulse[1][0] in ::players[].direction
player[::new_input].impulse[3][0] in ::players[].direction
player[::new_input].impulse[5][0] in ::players[].direction
player[::new_input].direction in ::players[].direction
player[::input_n].magnetos in ::players[].magnetos
player[::input_n-1].magnetos in ::players[].magnetos
player[::new_input].magnetos in ::players[].magnetos
player[::input_n].magnetos[0] in ::players[].magnetos[0]
player[::input_n-1].magnetos[0] in ::players[].magnetos[0]
player[::new_input].magnetos[0] in ::players[].magnetos[0]
::input_n in ::players[].stepCounter
::new_input in ::players[].stepCounter
::players[].stepCounter > player[].id (lexically)
::players[].stepCounter >= player[].id (lexically)
::players[].stepCounter < player[].body.visible (lexically)
::players[].stepCounter <= player[].body.visible (lexically)
::players[].stepCounter < player[].body.bodyPoints->aspect (lexically)
::players[].stepCounter <= player[].body.bodyPoints->aspect (lexically)
::players[].stepCounter < player[].body.bodyMapsSize (lexically)
::players[].stepCounter <= player[].body.bodyMapsSize (lexically)
::players[].stepCounter < player[].body.bodySize (lexically)
::players[].stepCounter <= player[].body.bodySize (lexically)
::players[].stepCounter < player[].body.color (lexically)
::players[].stepCounter <= player[].body.color (lexically)
::players[].stepCounter < player[].basePosition.col (lexically)
::players[].stepCounter <= player[].basePosition.col (lexically)
::players[].stepCounter < player[].basePosition.row (lexically)
::players[].stepCounter <= player[].basePosition.row (lexically)
::players[].stepCounter > player[].impulse[0][0] (lexically)
::players[].stepCounter >= player[].impulse[0][0] (lexically)
::players[].stepCounter > player[].impulse[7][0] (lexically)
::players[].stepCounter >= player[].impulse[7][0] (lexically)
::players[].stepCounter < player[].direction (lexically)
::players[].stepCounter <= player[].direction (lexically)
::players[].stepCounter <= player[].stepCounter (lexically)
::players[].stepCounter elements >= size(::crashedPlayers[])-1
::players[].stepCounter elements < size(::players[])-1
::players[].stepCounter elements < size(player[])-1
::players[].stepCounter elements < ::players[::input_n].body.bodyPoints->aspect
::players[].stepCounter elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].stepCounter elements < ::players[::new_input].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize in ::players[].stepCounter
::players[::new_input].body.bodyMapsSize in ::players[].stepCounter
::players[].stepCounter elements < ::players[::input_n-1].body.bodySize
::players[::input_n-1].body.bodyWidth in ::players[].stepCounter
::players[::new_input].body.bodyWidth in ::players[].stepCounter
::players[::new_input].body.bodyHeight in ::players[].stepCounter
::players[].stepCounter elements < ::players[::input_n-1].basePosition.col
::players[].stepCounter elements <= ::players[::input_n].basePosition.row
::players[::new_input].basePosition.row in ::players[].stepCounter
::players[::new_input].direction in ::players[].stepCounter
player[::input_n].body.type in ::players[].stepCounter
player[::input_n-1].body.type in ::players[].stepCounter
player[::input_n].body.visible in ::players[].stepCounter
::players[].stepCounter elements < player[::input_n-1].body.bodyPoints->aspect
player[::input_n-1].body.bodyMapsSize in ::players[].stepCounter
player[::input_n].body.bodyWidth in ::players[].stepCounter
player[::input_n].body.bodyHeight in ::players[].stepCounter
player[::input_n].impulse[0][0] in ::players[].stepCounter
player[::input_n].impulse[1][0] in ::players[].stepCounter
player[::input_n-1].impulse[1][0] in ::players[].stepCounter
player[::input_n].impulse[3][0] in ::players[].stepCounter
player[::input_n].impulse[5][0] in ::players[].stepCounter
player[::input_n].impulse[7][0] in ::players[].stepCounter
player[::input_n].stepCounter in ::players[].stepCounter
player[::input_n-1].stepCounter in ::players[].stepCounter
::players[].stepCounter elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].impulse[1][0] in ::players[].stepCounter
player[::new_input].impulse[3][0] in ::players[].stepCounter
player[::new_input].impulse[5][0] in ::players[].stepCounter
player[::new_input].stepCounter in ::players[].stepCounter
::players[::input_n].onCrash in ::players[].pilot
player[::input_n].pilot in ::players[].pilot
player[::input_n-1].pilot in ::players[].pilot
player[::new_input].pilot in ::players[].pilot
player[::input_n].onCrash in ::players[].onCrash
player[::input_n-1].onCrash in ::players[].onCrash
player[::new_input].onCrash in ::players[].onCrash
::players[::input_n].onCrash in ::players[].onPushed
player[::input_n].onPushed in ::players[].onPushed
player[].body.type elements <= ::input_n
player[].body.visible elements <= ::input_n
player[].impulse[0][0] elements <= ::input_n
player[].impulse[3][0] elements <= ::input_n
::input_n in player[].impulse[5][0]
player[].impulse[5][0] elements <= ::input_n
player[].impulse[7][0] elements <= ::input_n
::input_n in player[].stepCounter
::input_n < size(player[])-1
::input_n < ::players[::new_input].body.bodyPoints->aspect
::input_n != ::players[::new_input].body.bodyWidth
::input_n != ::players[::new_input].body.bodyHeight
::input_n != ::players[::new_input].body.color
::input_n != ::players[::new_input].basePosition.col
::input_n < ::players[::new_input].basePosition.row
::input_n >= ::players[::new_input].direction
::input_n != ::players[::new_input].stepCounter
::input_n >= player[::input_n].body.visible
::input_n != player[::input_n].body.bodyPoints->aspect
::input_n < player[::input_n-1].body.bodyPoints->aspect
::input_n != player[::input_n].body.bodyWidth
::input_n != player[::input_n-1].body.bodyWidth
::input_n != player[::input_n].body.bodyHeight
::input_n != player[::input_n-1].body.bodyHeight
::input_n != player[::input_n].body.color
::input_n <= player[::input_n-1].body.color
::input_n != player[::input_n].basePosition.col
::input_n < player[::input_n-1].basePosition.col
::input_n != player[::input_n].basePosition.row
::input_n >= player[::input_n].impulse[0][0]
::input_n >= player[::input_n].impulse[1][0]
::input_n >= player[::input_n-1].impulse[1][0]
::input_n >= player[::input_n].impulse[3][0]
::input_n >= player[::input_n].impulse[5][0]
::input_n >= player[::input_n].impulse[7][0]
::input_n <= player[::input_n-1].direction
::input_n != player[::input_n].stepCounter
::input_n < player[::new_input].body.bodyPoints->aspect
::input_n != player[::new_input].body.bodyWidth
::input_n != player[::new_input].body.bodyHeight
::input_n != player[::new_input].basePosition.col
::input_n <= player[::new_input].basePosition.row
::input_n >= player[::new_input].impulse[1][0]
::input_n <= player[::new_input].stepCounter
::new_input in player[].body.type
::new_input in player[].body.visible
::new_input in player[].body.bodyMapsSize
::new_input in player[].body.bodySize
::new_input in player[].body.color
::new_input in player[].basePosition.row
::new_input in player[].impulse[1][0]
::new_input in player[].impulse[3][0]
::new_input in player[].impulse[5][0]
::new_input in player[].impulse[7][0]
::new_input in player[].direction
::new_input in player[].stepCounter
::new_input < size(::players[])-1
::new_input < size(player[])-1
::new_input < ::players[::input_n].body.bodyPoints->aspect
::new_input < ::players[::input_n-1].body.bodyPoints->aspect
::new_input < ::players[::new_input].body.bodyPoints->aspect
::new_input < ::players[::input_n-1].body.bodyMapsSize
::new_input < ::players[::input_n-1].body.bodySize
::new_input < ::players[::input_n-1].body.bodyWidth
::new_input != ::players[::new_input].body.bodyWidth
::new_input != ::players[::new_input].body.bodyHeight
::new_input < ::players[::input_n-1].body.color
::new_input != ::players[::new_input].body.color
::new_input < ::players[::input_n-1].basePosition.col
::new_input != ::players[::new_input].basePosition.col
::new_input < ::players[::input_n].basePosition.row
::new_input < ::players[::new_input].basePosition.row
::new_input != ::players[::new_input].direction
::new_input < ::players[::input_n].stepCounter
::new_input <= player[::input_n].body.visible
::new_input <= player[::input_n].body.bodyPoints->aspect
::new_input < player[::input_n-1].body.bodyPoints->aspect
::new_input < player[::input_n-1].body.bodyMapsSize
::new_input <= player[::input_n].body.bodySize
::new_input < player[::input_n-1].body.bodySize
::new_input <= player[::input_n-1].body.bodyWidth
::new_input <= player[::input_n-1].body.bodyHeight
::new_input < player[::input_n-1].body.color
::new_input < player[::input_n-1].basePosition.col
::new_input <= player[::input_n].basePosition.row
::new_input <= player[::input_n].impulse[0][0]
::new_input <= player[::input_n-1].impulse[1][0]
::new_input % player[::input_n-1].direction == 0
::new_input <= player[::input_n-1].direction
::new_input <= player[::input_n].stepCounter
::new_input != player[::input_n-1].stepCounter
::new_input < player[::new_input].body.bodyPoints->aspect
::new_input % player[::new_input].body.bodySize == 0
::new_input != player[::new_input].body.color
::new_input != player[::new_input].basePosition.col
::new_input < player[::new_input].basePosition.row
::new_input != player[::new_input].direction
::new_input < player[::new_input].stepCounter
::input_key > ::trace_pos
player[].id <= player[].body.type (elementwise)
player[].id < player[].body.visible (lexically)
player[].id <= player[].body.visible (elementwise)
player[].id < player[].body.bodyPoints->aspect (lexically)
player[].id <= player[].body.bodyPoints->aspect (elementwise)
player[].id < player[].body.bodyMapsSize (lexically)
player[].id <= player[].body.bodyMapsSize (elementwise)
player[].id < player[].body.bodySize (lexically)
player[].id <= player[].body.bodySize (elementwise)
player[].id < player[].body.bodyWidth (lexically)
player[].id <= player[].body.bodyWidth (elementwise)
player[].id < player[].body.bodyHeight (lexically)
player[].id <= player[].body.bodyHeight (elementwise)
player[].id < player[].body.color (lexically)
player[].id <= player[].body.color (elementwise)
player[].id < player[].basePosition.col (lexically)
player[].id <= player[].basePosition.col (elementwise)
player[].id < player[].basePosition.row (lexically)
player[].id <= player[].basePosition.row (elementwise)
player[].id <= player[].impulse[0][0] (elementwise)
player[].id <= player[].impulse[1][0] (elementwise)
player[].id <= player[].impulse[3][0] (elementwise)
player[].id < player[].impulse[5][0] (lexically)
player[].id <= player[].impulse[5][0] (elementwise)
player[].id <= player[].impulse[7][0] (elementwise)
player[].id < player[].direction (lexically)
player[].id <= player[].direction (elementwise)
player[].id < player[].stepCounter (lexically)
player[].id <= player[].stepCounter (elementwise)
player[].id elements == size(::crashedPlayers[])-1
player[].body.type < player[].body.visible (lexically)
player[].body.type <= player[].body.visible (elementwise)
player[].body.type < player[].body.bodyPoints->aspect (lexically)
player[].body.type <= player[].body.bodyPoints->aspect (elementwise)
player[].body.type < player[].body.bodyMapsSize (lexically)
player[].body.type <= player[].body.bodyMapsSize (elementwise)
player[].body.type < player[].body.bodySize (lexically)
player[].body.type <= player[].body.bodySize (elementwise)
player[].body.type < player[].body.color (lexically)
player[].body.type <= player[].body.color (lexically)
player[].body.type < player[].basePosition.col (lexically)
player[].body.type <= player[].basePosition.col (lexically)
player[].body.type < player[].basePosition.row (lexically)
player[].body.type <= player[].basePosition.row (lexically)
player[].body.type >= player[].impulse[0][0] (elementwise)
player[].body.type < player[].stepCounter (lexically)
player[].body.type <= player[].stepCounter (elementwise)
player[].body.type elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in player[].body.type
player[].body.type elements < size(::players[])-1
player[].body.type elements < size(player[])-1
player[].body.type elements < ::players[::input_n].body.bodyPoints->aspect
player[].body.type elements < ::players[::input_n-1].body.bodyPoints->aspect
player[].body.type elements < ::players[::new_input].body.bodyPoints->aspect
player[].body.type elements < ::players[::input_n-1].body.bodyMapsSize
player[].body.type elements <= ::players[::new_input].body.bodyMapsSize
player[].body.type elements < ::players[::input_n-1].body.bodySize
player[].body.type elements <= ::players[::new_input].body.bodySize
player[].body.type elements < ::players[::input_n-1].body.bodyWidth
player[].body.type elements < ::players[::input_n-1].body.color
player[].body.type elements < ::players[::input_n-1].basePosition.col
player[].body.type elements < ::players[::input_n].basePosition.row
player[].body.type elements < ::players[::new_input].basePosition.row
player[].body.type elements < ::players[::input_n].stepCounter
player[].body.type elements <= player[::input_n].body.type
player[].body.type elements <= player[::input_n].body.visible
player[].body.type elements <= player[::input_n].body.bodyPoints->aspect
player[].body.type elements < player[::input_n-1].body.bodyPoints->aspect
player[].body.type elements <= player[::input_n-1].body.bodyMapsSize
player[].body.type elements <= player[::input_n].body.bodySize
player[].body.type elements <= player[::input_n-1].body.bodySize
player[].body.type elements <= player[::input_n-1].body.color
player[].body.type elements < player[::input_n-1].basePosition.col
player[::input_n].impulse[0][0] in player[].body.type
player[::input_n].impulse[1][0] in player[].body.type
player[::input_n].impulse[5][0] in player[].body.type
player[].body.type elements <= player[::input_n-1].direction
player[].body.type elements <= player[::input_n].stepCounter
player[].body.type elements < player[::new_input].body.bodyPoints->aspect
player[].body.type elements <= player[::new_input].body.bodySize
player[].body.type elements <= player[::new_input].basePosition.row
player[::new_input].impulse[3][0] in player[].body.type
player[].body.type elements <= player[::new_input].stepCounter
player[].body.visible < player[].body.bodyPoints->aspect (lexically)
player[].body.visible <= player[].body.bodyPoints->aspect (elementwise)
player[].body.visible <= player[].body.bodyMapsSize (elementwise)
player[].body.visible < player[].body.bodySize (lexically)
player[].body.visible <= player[].body.bodySize (elementwise)
player[].body.visible < player[].body.color (lexically)
player[].body.visible <= player[].body.color (lexically)
player[].body.visible < player[].basePosition.col (lexically)
player[].body.visible <= player[].basePosition.col (lexically)
player[].body.visible < player[].basePosition.row (lexically)
player[].body.visible <= player[].basePosition.row (lexically)
player[].body.visible > player[].impulse[0][0] (lexically)
player[].body.visible >= player[].impulse[0][0] (elementwise)
player[].body.visible > player[].impulse[1][0] (lexically)
player[].body.visible >= player[].impulse[1][0] (lexically)
player[].body.visible > player[].impulse[3][0] (lexically)
player[].body.visible >= player[].impulse[3][0] (elementwise)
player[].body.visible >= player[].impulse[5][0] (elementwise)
player[].body.visible > player[].impulse[7][0] (lexically)
player[].body.visible >= player[].impulse[7][0] (elementwise)
player[].body.visible elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in player[].body.visible
player[].body.visible elements < size(::players[])-1
player[].body.visible elements < size(player[])-1
player[].body.visible elements < ::players[::input_n].body.bodyPoints->aspect
player[].body.visible elements < ::players[::input_n-1].body.bodyPoints->aspect
player[].body.visible elements < ::players[::new_input].body.bodyPoints->aspect
player[].body.visible elements < ::players[::input_n-1].body.bodyMapsSize
player[].body.visible elements <= ::players[::new_input].body.bodyMapsSize
player[].body.visible elements < ::players[::input_n-1].body.bodySize
player[].body.visible elements <= ::players[::new_input].body.bodySize
player[].body.visible elements < ::players[::input_n-1].body.bodyWidth
player[].body.visible elements < ::players[::input_n-1].body.color
player[].body.visible elements < ::players[::input_n-1].basePosition.col
player[].body.visible elements < ::players[::input_n].basePosition.row
player[].body.visible elements < ::players[::new_input].basePosition.row
::players[::new_input].direction in player[].body.visible
player[].body.visible elements < ::players[::input_n].stepCounter
player[::input_n].body.type in player[].body.visible
player[::input_n-1].body.type in player[].body.visible
player[].body.visible elements < player[::input_n-1].body.bodyPoints->aspect
player[].body.visible elements <= player[::input_n-1].body.bodyMapsSize
player[].body.visible elements <= player[::input_n-1].body.bodySize
player[].body.visible elements <= player[::input_n-1].body.color
player[].body.visible elements < player[::input_n-1].basePosition.col
player[::input_n].impulse[0][0] in player[].body.visible
player[::input_n].impulse[1][0] in player[].body.visible
player[::input_n-1].impulse[1][0] in player[].body.visible
player[::input_n].impulse[3][0] in player[].body.visible
player[::input_n].impulse[5][0] in player[].body.visible
player[::input_n].impulse[7][0] in player[].body.visible
player[].body.visible elements <= player[::input_n-1].direction
player[].body.visible elements < player[::new_input].body.bodyPoints->aspect
player[].body.visible elements <= player[::new_input].body.bodySize
player[].body.visible elements <= player[::new_input].basePosition.row
player[::new_input].impulse[1][0] in player[].body.visible
player[::new_input].impulse[3][0] in player[].body.visible
player[::new_input].impulse[5][0] in player[].body.visible
player[].body.visible elements <= player[::new_input].stepCounter
player[].body.bodyPoints->position - player[].basePosition + 7304 == 0
player[].body.bodyPoints->aspect > player[].body.bodyMapsSize (lexically)
player[].body.bodyPoints->aspect >= player[].body.bodyMapsSize (elementwise)
player[].body.bodyPoints->aspect > player[].body.bodySize (lexically)
player[].body.bodyPoints->aspect >= player[].body.bodySize (elementwise)
player[].body.bodyPoints->aspect > player[].body.bodyWidth (lexically)
player[].body.bodyPoints->aspect >= player[].body.bodyWidth (elementwise)
player[].body.bodyPoints->aspect > player[].body.bodyHeight (lexically)
player[].body.bodyPoints->aspect >= player[].body.bodyHeight (elementwise)
player[].body.bodyPoints->aspect > player[].body.color (lexically)
player[].body.bodyPoints->aspect >= player[].body.color (elementwise)
player[].body.bodyPoints->aspect > player[].basePosition.col (lexically)
player[].body.bodyPoints->aspect >= player[].basePosition.col (elementwise)
player[].body.bodyPoints->aspect > player[].basePosition.row (lexically)
player[].body.bodyPoints->aspect >= player[].basePosition.row (elementwise)
player[].body.bodyPoints->aspect > player[].impulse[0][0] (lexically)
player[].body.bodyPoints->aspect >= player[].impulse[0][0] (elementwise)
player[].body.bodyPoints->aspect > player[].impulse[1][0] (lexically)
player[].body.bodyPoints->aspect >= player[].impulse[1][0] (elementwise)
player[].body.bodyPoints->aspect > player[].impulse[3][0] (lexically)
player[].body.bodyPoints->aspect >= player[].impulse[3][0] (elementwise)
player[].body.bodyPoints->aspect > player[].impulse[5][0] (lexically)
player[].body.bodyPoints->aspect >= player[].impulse[5][0] (elementwise)
player[].body.bodyPoints->aspect > player[].impulse[7][0] (lexically)
player[].body.bodyPoints->aspect >= player[].impulse[7][0] (elementwise)
player[].body.bodyPoints->aspect > player[].direction (lexically)
player[].body.bodyPoints->aspect >= player[].direction (elementwise)
player[].body.bodyPoints->aspect > player[].stepCounter (lexically)
player[].body.bodyPoints->aspect >= player[].stepCounter (elementwise)
player[].body.bodyPoints->aspect elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in player[].body.bodyPoints->aspect
player[].body.bodyPoints->aspect elements < size(::players[])-1
player[].body.bodyMapsSize < player[].body.bodySize (lexically)
player[].body.bodyMapsSize <= player[].body.bodySize (elementwise)
player[].body.bodyMapsSize < player[].basePosition.col (lexically)
player[].body.bodyMapsSize <= player[].basePosition.col (lexically)
player[].body.bodyMapsSize < player[].basePosition.row (lexically)
player[].body.bodyMapsSize <= player[].basePosition.row (lexically)
player[].body.bodyMapsSize > player[].impulse[0][0] (lexically)
player[].body.bodyMapsSize >= player[].impulse[0][0] (elementwise)
player[].body.bodyMapsSize > player[].impulse[1][0] (lexically)
player[].body.bodyMapsSize >= player[].impulse[1][0] (lexically)
player[].body.bodyMapsSize > player[].impulse[3][0] (lexically)
player[].body.bodyMapsSize >= player[].impulse[3][0] (elementwise)
player[].body.bodyMapsSize >= player[].impulse[5][0] (elementwise)
player[].body.bodyMapsSize > player[].impulse[7][0] (lexically)
player[].body.bodyMapsSize >= player[].impulse[7][0] (elementwise)
player[].body.bodyMapsSize elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in player[].body.bodyMapsSize
player[].body.bodyMapsSize elements < size(::players[])-1
player[].body.bodyMapsSize elements < size(player[])-1
player[].body.bodyMapsSize elements < ::players[::input_n].body.bodyPoints->aspect
player[].body.bodyMapsSize elements < ::players[::input_n-1].body.bodyPoints->aspect
player[].body.bodyMapsSize elements < ::players[::new_input].body.bodyPoints->aspect
player[].body.bodyMapsSize elements <= ::players[::input_n-1].body.bodyMapsSize
player[].body.bodyMapsSize elements < ::players[::input_n-1].body.bodySize
player[].body.bodyMapsSize elements < ::players[::input_n-1].body.bodyWidth
player[].body.bodyMapsSize elements < ::players[::input_n-1].basePosition.col
player[].body.bodyMapsSize elements < ::players[::input_n].basePosition.row
player[].body.bodyMapsSize elements < ::players[::new_input].basePosition.row
::players[::new_input].direction in player[].body.bodyMapsSize
player[].body.bodyMapsSize elements < ::players[::input_n].stepCounter
player[::input_n].body.type in player[].body.bodyMapsSize
player[::input_n-1].body.type in player[].body.bodyMapsSize
player[].body.bodyMapsSize elements < player[::input_n-1].body.bodyPoints->aspect
player[].body.bodyMapsSize elements <= player[::input_n-1].body.bodyMapsSize
player[].body.bodyMapsSize elements <= player[::input_n-1].body.bodySize
player[].body.bodyMapsSize elements < player[::input_n-1].basePosition.col
player[::input_n].impulse[0][0] in player[].body.bodyMapsSize
player[::input_n].impulse[1][0] in player[].body.bodyMapsSize
player[::input_n-1].impulse[1][0] in player[].body.bodyMapsSize
player[::input_n].impulse[3][0] in player[].body.bodyMapsSize
player[::input_n].impulse[5][0] in player[].body.bodyMapsSize
player[::input_n].impulse[7][0] in player[].body.bodyMapsSize
player[].body.bodyMapsSize elements < player[::new_input].body.bodyPoints->aspect
player[].body.bodyMapsSize elements <= player[::new_input].basePosition.row
player[::new_input].impulse[1][0] in player[].body.bodyMapsSize
player[::new_input].impulse[3][0] in player[].body.bodyMapsSize
player[::new_input].impulse[5][0] in player[].body.bodyMapsSize
player[].body.bodyMapsSize elements <= player[::new_input].stepCounter
player[].body.bodySize > player[].body.bodyWidth (lexically)
player[].body.bodySize >= player[].body.bodyWidth (elementwise)
player[].body.bodySize > player[].body.bodyHeight (lexically)
player[].body.bodySize >= player[].body.bodyHeight (elementwise)
player[].body.bodySize > player[].impulse[0][0] (lexically)
player[].body.bodySize >= player[].impulse[0][0] (elementwise)
player[].body.bodySize > player[].impulse[1][0] (lexically)
player[].body.bodySize >= player[].impulse[1][0] (elementwise)
player[].body.bodySize > player[].impulse[3][0] (lexically)
player[].body.bodySize >= player[].impulse[3][0] (elementwise)
player[].body.bodySize > player[].impulse[5][0] (lexically)
player[].body.bodySize >= player[].impulse[5][0] (elementwise)
player[].body.bodySize > player[].impulse[7][0] (lexically)
player[].body.bodySize >= player[].impulse[7][0] (elementwise)
player[].body.bodySize elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in player[].body.bodySize
player[].body.bodySize elements < size(::players[])-1
player[].body.bodySize elements < size(player[])-1
player[].body.bodySize elements < ::players[::input_n-1].body.bodyPoints->aspect
player[::input_n].body.type in player[].body.bodySize
player[::input_n-1].body.type in player[].body.bodySize
player[::input_n].impulse[0][0] in player[].body.bodySize
player[::input_n].impulse[1][0] in player[].body.bodySize
player[::input_n].impulse[5][0] in player[].body.bodySize
player[::new_input].impulse[3][0] in player[].body.bodySize
player[].body.bodyWidth > player[].body.bodyHeight (lexically)
player[].body.bodyWidth >= player[].body.bodyHeight (elementwise)
player[].body.bodyWidth > player[].impulse[7][0] (lexically)
player[].body.bodyWidth >= player[].impulse[7][0] (elementwise)
player[].body.bodyWidth elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in player[].body.bodyWidth
player[].body.bodyWidth elements < size(::players[])-1
player[].body.bodyWidth elements < size(player[])-1
player[].body.bodyWidth elements < ::players[::input_n].body.bodyPoints->aspect
player[].body.bodyWidth elements < ::players[::input_n-1].body.bodyPoints->aspect
player[].body.bodyWidth elements < ::players[::new_input].body.bodyPoints->aspect
player[].body.bodyWidth elements < ::players[::input_n-1].body.bodySize
::players[::input_n-1].body.bodyWidth in player[].body.bodyWidth
::players[::new_input].body.bodyWidth in player[].body.bodyWidth
player[].body.bodyWidth elements < ::players[::input_n-1].basePosition.col
player[].body.bodyWidth elements < player[::input_n-1].body.bodyPoints->aspect
player[].body.bodyWidth elements < player[::new_input].body.bodyPoints->aspect
player[].body.bodyHeight > player[].impulse[7][0] (lexically)
player[].body.bodyHeight >= player[].impulse[7][0] (elementwise)
player[].body.bodyHeight elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in player[].body.bodyHeight
player[].body.bodyHeight elements < size(::players[])-1
player[].body.bodyHeight elements < size(player[])-1
player[].body.bodyHeight elements < ::players[::input_n].body.bodyPoints->aspect
player[].body.bodyHeight elements < ::players[::input_n-1].body.bodyPoints->aspect
player[].body.bodyHeight elements < ::players[::new_input].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize in player[].body.bodyHeight
player[].body.bodyHeight elements < ::players[::input_n-1].body.bodySize
player[].body.bodyHeight elements < ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyHeight in player[].body.bodyHeight
player[].body.bodyHeight elements < ::players[::input_n-1].basePosition.col
player[].body.bodyHeight elements < ::players[::input_n].basePosition.row
player[].body.bodyHeight elements < ::players[::new_input].basePosition.row
player[].body.bodyHeight elements < ::players[::input_n].stepCounter
player[].body.bodyHeight elements < player[::input_n-1].body.bodyPoints->aspect
player[].body.bodyHeight elements < player[::new_input].body.bodyPoints->aspect
player[].body.color < player[].basePosition.col (lexically)
player[].body.color <= player[].basePosition.col (elementwise)
player[].body.color > player[].impulse[0][0] (lexically)
player[].body.color >= player[].impulse[0][0] (lexically)
player[].body.color > player[].impulse[1][0] (lexically)
player[].body.color >= player[].impulse[1][0] (lexically)
player[].body.color > player[].impulse[3][0] (lexically)
player[].body.color >= player[].impulse[3][0] (lexically)
player[].body.color > player[].impulse[5][0] (lexically)
player[].body.color >= player[].impulse[5][0] (elementwise)
player[].body.color > player[].impulse[7][0] (lexically)
player[].body.color >= player[].impulse[7][0] (lexically)
player[].body.color elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in player[].body.color
player[].body.color elements < size(::players[])-1
player[].body.color elements < size(player[])-1
player[].body.color elements < ::players[::input_n].body.bodyPoints->aspect
player[].body.color elements < ::players[::input_n-1].body.bodyPoints->aspect
player[].body.color elements < ::players[::new_input].body.bodyPoints->aspect
player[].body.color elements < ::players[::input_n-1].body.bodySize
player[].body.color elements <= ::players[::input_n-1].body.bodyWidth
player[].body.color elements < ::players[::input_n-1].basePosition.col
player[].body.color elements < ::players[::input_n].basePosition.row
player[].body.color elements < ::players[::new_input].basePosition.row
player[].body.color elements < ::players[::input_n].stepCounter
player[::input_n].body.type in player[].body.color
player[::input_n-1].body.type in player[].body.color
player[::input_n].body.visible in player[].body.color
player[].body.color elements < player[::input_n-1].body.bodyPoints->aspect
player[::input_n].body.bodyHeight in player[].body.color
player[::input_n].impulse[0][0] in player[].body.color
player[::input_n].impulse[1][0] in player[].body.color
player[::input_n-1].impulse[1][0] in player[].body.color
player[::input_n].impulse[3][0] in player[].body.color
player[::input_n].impulse[5][0] in player[].body.color
player[::input_n].impulse[7][0] in player[].body.color
player[].body.color elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].impulse[1][0] in player[].body.color
player[::new_input].impulse[3][0] in player[].body.color
player[].basePosition.col > player[].impulse[0][0] (lexically)
player[].basePosition.col >= player[].impulse[0][0] (lexically)
player[].basePosition.col > player[].impulse[1][0] (lexically)
player[].basePosition.col >= player[].impulse[1][0] (lexically)
player[].basePosition.col > player[].impulse[3][0] (lexically)
player[].basePosition.col >= player[].impulse[3][0] (elementwise)
player[].basePosition.col > player[].impulse[5][0] (lexically)
player[].basePosition.col >= player[].impulse[5][0] (elementwise)
player[].basePosition.col > player[].impulse[7][0] (lexically)
player[].basePosition.col >= player[].impulse[7][0] (elementwise)
player[].basePosition.col elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in player[].basePosition.col
player[].basePosition.col elements < size(::players[])-1
player[].basePosition.col elements < size(player[])-1
player[::input_n].body.bodyHeight in player[].basePosition.col
player[].basePosition.row > player[].impulse[0][0] (lexically)
player[].basePosition.row >= player[].impulse[0][0] (lexically)
player[].basePosition.row > player[].impulse[1][0] (lexically)
player[].basePosition.row >= player[].impulse[1][0] (elementwise)
player[].basePosition.row > player[].impulse[3][0] (lexically)
player[].basePosition.row >= player[].impulse[3][0] (lexically)
player[].basePosition.row > player[].impulse[5][0] (lexically)
player[].basePosition.row >= player[].impulse[5][0] (elementwise)
player[].basePosition.row > player[].impulse[7][0] (lexically)
player[].basePosition.row >= player[].impulse[7][0] (lexically)
player[].basePosition.row elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in player[].basePosition.row
player[].basePosition.row elements < size(::players[])-1
player[].basePosition.row elements < size(player[])-1
player[].basePosition.row elements < ::players[::input_n].body.bodyPoints->aspect
player[].basePosition.row elements < ::players[::input_n-1].body.bodyPoints->aspect
player[].basePosition.row elements < ::players[::new_input].body.bodyPoints->aspect
player[].basePosition.row elements < ::players[::input_n-1].body.bodySize
player[].basePosition.row elements < ::players[::input_n-1].basePosition.col
player[::input_n].body.type in player[].basePosition.row
player[::input_n-1].body.type in player[].basePosition.row
player[::input_n].body.visible in player[].basePosition.row
player[].basePosition.row elements < player[::input_n-1].body.bodyPoints->aspect
player[::input_n].body.bodyHeight in player[].basePosition.row
player[::input_n].body.color in player[].basePosition.row
player[::input_n-1].body.color in player[].basePosition.row
player[::input_n].impulse[0][0] in player[].basePosition.row
player[::input_n].impulse[1][0] in player[].basePosition.row
player[::input_n-1].impulse[1][0] in player[].basePosition.row
player[::input_n].impulse[3][0] in player[].basePosition.row
player[::input_n].impulse[5][0] in player[].basePosition.row
player[::input_n].impulse[7][0] in player[].basePosition.row
player[].basePosition.row elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].body.color in player[].basePosition.row
player[::new_input].impulse[1][0] in player[].basePosition.row
player[::new_input].impulse[3][0] in player[].basePosition.row
player[].impulse[0] - player[].impulse[1] + 4 == 0
player[].impulse[0] - player[].impulse[2] + 8 == 0
player[].impulse[0] - player[].impulse[3] + 12 == 0
player[].impulse[0] - player[].impulse[4] + 16 == 0
player[].impulse[0] - player[].impulse[5] + 20 == 0
player[].impulse[0] - player[].impulse[6] + 24 == 0
player[].impulse[0] - player[].impulse[7] + 28 == 0
player[].impulse[0] - player[].impulse[8] + 32 == 0
player[].impulse[0][0] < player[].direction (lexically)
player[].impulse[0][0] <= player[].direction (lexically)
player[].impulse[0][0] < player[].stepCounter (lexically)
player[].impulse[0][0] <= player[].stepCounter (elementwise)
player[].impulse[0][0] elements >= size(::crashedPlayers[])-1
player[].impulse[0][0] elements < size(::players[])-1
player[].impulse[0][0] elements < size(player[])-1
player[].impulse[0][0] elements < ::players[::input_n].body.bodyPoints->aspect
player[].impulse[0][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
player[].impulse[0][0] elements < ::players[::new_input].body.bodyPoints->aspect
player[].impulse[0][0] elements < ::players[::input_n-1].body.bodyMapsSize
player[].impulse[0][0] elements <= ::players[::new_input].body.bodyMapsSize
player[].impulse[0][0] elements < ::players[::input_n-1].body.bodySize
player[].impulse[0][0] elements <= ::players[::new_input].body.bodySize
player[].impulse[0][0] elements < ::players[::input_n-1].body.bodyWidth
player[].impulse[0][0] elements < ::players[::input_n-1].body.color
player[].impulse[0][0] elements < ::players[::input_n-1].basePosition.col
player[].impulse[0][0] elements < ::players[::input_n].basePosition.row
player[].impulse[0][0] elements < ::players[::new_input].basePosition.row
player[].impulse[0][0] elements < ::players[::input_n].stepCounter
player[::input_n].body.type in player[].impulse[0][0]
player[].impulse[0][0] elements <= player[::input_n].body.type
player[::input_n-1].body.type in player[].impulse[0][0]
player[].impulse[0][0] elements <= player[::input_n].body.visible
player[].impulse[0][0] elements <= player[::input_n].body.bodyPoints->aspect
player[].impulse[0][0] elements < player[::input_n-1].body.bodyPoints->aspect
player[].impulse[0][0] elements <= player[::input_n-1].body.bodyMapsSize
player[].impulse[0][0] elements <= player[::input_n].body.bodySize
player[].impulse[0][0] elements <= player[::input_n-1].body.bodySize
player[].impulse[0][0] elements <= player[::input_n-1].body.color
player[].impulse[0][0] elements < player[::input_n-1].basePosition.col
player[::input_n].impulse[1][0] in player[].impulse[0][0]
player[::input_n].impulse[5][0] in player[].impulse[0][0]
player[].impulse[0][0] elements <= player[::input_n-1].direction
player[].impulse[0][0] elements <= player[::input_n].stepCounter
player[].impulse[0][0] elements < player[::new_input].body.bodyPoints->aspect
player[].impulse[0][0] elements <= player[::new_input].body.bodySize
player[].impulse[0][0] elements <= player[::new_input].basePosition.row
player[::new_input].impulse[3][0] in player[].impulse[0][0]
player[].impulse[0][0] elements <= player[::new_input].stepCounter
player[].impulse[1] - player[].impulse[2] + 4 == 0
player[].impulse[1] - player[].impulse[3] + 8 == 0
player[].impulse[1] - player[].impulse[4] + 12 == 0
player[].impulse[1] - player[].impulse[5] + 16 == 0
player[].impulse[1] - player[].impulse[6] + 20 == 0
player[].impulse[1] - player[].impulse[7] + 24 == 0
player[].impulse[1] - player[].impulse[8] + 28 == 0
player[].impulse[1][0] >= player[].impulse[7][0] (lexically)
player[].impulse[1][0] elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in player[].impulse[1][0]
player[].impulse[1][0] elements < size(::players[])-1
player[].impulse[1][0] elements < size(player[])-1
player[].impulse[1][0] elements < ::players[::input_n].body.bodyPoints->aspect
player[].impulse[1][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
player[].impulse[1][0] elements < ::players[::new_input].body.bodyPoints->aspect
player[].impulse[1][0] elements < ::players[::input_n-1].body.bodySize
player[].impulse[1][0] elements < ::players[::input_n-1].body.bodyWidth
player[].impulse[1][0] elements < ::players[::input_n-1].basePosition.col
player[].impulse[1][0] elements < ::players[::input_n].basePosition.row
player[].impulse[1][0] elements < ::players[::new_input].basePosition.row
player[].impulse[1][0] elements < ::players[::input_n].stepCounter
player[::input_n].body.type in player[].impulse[1][0]
player[::input_n-1].body.type in player[].impulse[1][0]
player[::input_n].body.visible in player[].impulse[1][0]
player[].impulse[1][0] elements <= player[::input_n].body.bodyPoints->aspect
player[].impulse[1][0] elements < player[::input_n-1].body.bodyPoints->aspect
player[::input_n].impulse[0][0] in player[].impulse[1][0]
player[::input_n].impulse[3][0] in player[].impulse[1][0]
player[::input_n].impulse[5][0] in player[].impulse[1][0]
player[::input_n].impulse[7][0] in player[].impulse[1][0]
player[].impulse[1][0] elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].impulse[3][0] in player[].impulse[1][0]
player[].impulse[2] - player[].impulse[3] + 4 == 0
player[].impulse[2] - player[].impulse[4] + 8 == 0
player[].impulse[2] - player[].impulse[5] + 12 == 0
player[].impulse[2] - player[].impulse[6] + 16 == 0
player[].impulse[2] - player[].impulse[7] + 20 == 0
player[].impulse[2] - player[].impulse[8] + 24 == 0
player[].impulse[3] - player[].impulse[4] + 4 == 0
player[].impulse[3] - player[].impulse[5] + 8 == 0
player[].impulse[3] - player[].impulse[6] + 12 == 0
player[].impulse[3] - player[].impulse[7] + 16 == 0
player[].impulse[3] - player[].impulse[8] + 20 == 0
player[].impulse[3][0] >= player[].impulse[7][0] (lexically)
player[].impulse[3][0] < player[].direction (lexically)
player[].impulse[3][0] <= player[].direction (lexically)
player[].impulse[3][0] < player[].stepCounter (lexically)
player[].impulse[3][0] <= player[].stepCounter (elementwise)
player[].impulse[3][0] elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in player[].impulse[3][0]
player[].impulse[3][0] elements < size(::players[])-1
player[].impulse[3][0] elements < size(player[])-1
player[].impulse[3][0] elements < ::players[::input_n].body.bodyPoints->aspect
player[].impulse[3][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
player[].impulse[3][0] elements < ::players[::new_input].body.bodyPoints->aspect
player[].impulse[3][0] elements < ::players[::input_n-1].body.bodyMapsSize
player[].impulse[3][0] elements <= ::players[::new_input].body.bodyMapsSize
player[].impulse[3][0] elements < ::players[::input_n-1].body.bodySize
player[].impulse[3][0] elements <= ::players[::new_input].body.bodySize
player[].impulse[3][0] elements < ::players[::input_n-1].body.bodyWidth
player[].impulse[3][0] elements < ::players[::input_n-1].body.color
player[].impulse[3][0] elements < ::players[::input_n-1].basePosition.col
player[].impulse[3][0] elements < ::players[::input_n].basePosition.row
player[].impulse[3][0] elements < ::players[::new_input].basePosition.row
player[].impulse[3][0] elements < ::players[::input_n].stepCounter
player[::input_n].body.type in player[].impulse[3][0]
player[::input_n-1].body.type in player[].impulse[3][0]
player[::input_n].body.visible in player[].impulse[3][0]
player[].impulse[3][0] elements <= player[::input_n].body.visible
player[].impulse[3][0] elements <= player[::input_n].body.bodyPoints->aspect
player[].impulse[3][0] elements < player[::input_n-1].body.bodyPoints->aspect
player[].impulse[3][0] elements <= player[::input_n-1].body.bodyMapsSize
player[].impulse[3][0] elements <= player[::input_n].body.bodySize
player[].impulse[3][0] elements <= player[::input_n-1].body.bodySize
player[].impulse[3][0] elements <= player[::input_n-1].body.color
player[].impulse[3][0] elements < player[::input_n-1].basePosition.col
player[::input_n].impulse[0][0] in player[].impulse[3][0]
player[::input_n].impulse[1][0] in player[].impulse[3][0]
player[::input_n-1].impulse[1][0] in player[].impulse[3][0]
player[::input_n].impulse[5][0] in player[].impulse[3][0]
player[::input_n].impulse[7][0] in player[].impulse[3][0]
player[].impulse[3][0] elements <= player[::input_n-1].direction
player[].impulse[3][0] elements <= player[::input_n].stepCounter
player[].impulse[3][0] elements < player[::new_input].body.bodyPoints->aspect
player[].impulse[3][0] elements <= player[::new_input].body.bodySize
player[].impulse[3][0] elements <= player[::new_input].basePosition.row
player[::new_input].impulse[1][0] in player[].impulse[3][0]
player[].impulse[3][0] elements <= player[::new_input].stepCounter
player[].impulse[4] - player[].impulse[5] + 4 == 0
player[].impulse[4] - player[].impulse[6] + 8 == 0
player[].impulse[4] - player[].impulse[7] + 12 == 0
player[].impulse[4] - player[].impulse[8] + 16 == 0
player[].impulse[5] - player[].impulse[6] + 4 == 0
player[].impulse[5] - player[].impulse[7] + 8 == 0
player[].impulse[5] - player[].impulse[8] + 12 == 0
player[].impulse[5][0] < player[].direction (lexically)
player[].impulse[5][0] <= player[].direction (lexically)
player[].impulse[5][0] <= player[].stepCounter (elementwise)
player[].impulse[5][0] elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in player[].impulse[5][0]
player[].impulse[5][0] elements < size(::players[])-1
player[].impulse[5][0] elements < size(player[])-1
player[].impulse[5][0] elements < ::players[::input_n].body.bodyPoints->aspect
player[].impulse[5][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
player[].impulse[5][0] elements < ::players[::new_input].body.bodyPoints->aspect
player[].impulse[5][0] elements < ::players[::input_n-1].body.bodyMapsSize
player[].impulse[5][0] elements <= ::players[::new_input].body.bodyMapsSize
player[].impulse[5][0] elements < ::players[::input_n-1].body.bodySize
player[].impulse[5][0] elements <= ::players[::new_input].body.bodySize
player[].impulse[5][0] elements < ::players[::input_n-1].body.bodyWidth
player[].impulse[5][0] elements < ::players[::input_n-1].body.color
player[].impulse[5][0] elements < ::players[::input_n-1].basePosition.col
player[].impulse[5][0] elements < ::players[::input_n].basePosition.row
player[].impulse[5][0] elements < ::players[::new_input].basePosition.row
::players[::new_input].direction in player[].impulse[5][0]
player[].impulse[5][0] elements < ::players[::input_n].stepCounter
player[::input_n].body.type in player[].impulse[5][0]
player[::input_n-1].body.type in player[].impulse[5][0]
player[::input_n].body.visible in player[].impulse[5][0]
player[].impulse[5][0] elements < player[::input_n-1].body.bodyPoints->aspect
player[].impulse[5][0] elements <= player[::input_n-1].body.bodyMapsSize
player[].impulse[5][0] elements <= player[::input_n-1].body.bodySize
player[].impulse[5][0] elements <= player[::input_n-1].body.color
player[].impulse[5][0] elements < player[::input_n-1].basePosition.col
player[::input_n].impulse[0][0] in player[].impulse[5][0]
player[::input_n].impulse[1][0] in player[].impulse[5][0]
player[::input_n-1].impulse[1][0] in player[].impulse[5][0]
player[::input_n].impulse[3][0] in player[].impulse[5][0]
player[::input_n].impulse[7][0] in player[].impulse[5][0]
player[].impulse[5][0] elements <= player[::input_n-1].direction
player[].impulse[5][0] elements < player[::new_input].body.bodyPoints->aspect
player[].impulse[5][0] elements <= player[::new_input].body.bodySize
player[].impulse[5][0] elements <= player[::new_input].basePosition.row
player[::new_input].impulse[1][0] in player[].impulse[5][0]
player[::new_input].impulse[3][0] in player[].impulse[5][0]
player[].impulse[5][0] elements <= player[::new_input].stepCounter
player[].impulse[6] - player[].impulse[7] + 4 == 0
player[].impulse[6] - player[].impulse[8] + 8 == 0
player[].impulse[7] - player[].impulse[8] + 4 == 0
player[].impulse[7][0] < player[].direction (lexically)
player[].impulse[7][0] <= player[].direction (lexically)
player[].impulse[7][0] < player[].stepCounter (lexically)
player[].impulse[7][0] <= player[].stepCounter (elementwise)
player[].impulse[7][0] elements >= size(::crashedPlayers[])-1
player[].impulse[7][0] elements < size(::players[])-1
player[].impulse[7][0] elements < size(player[])-1
player[].impulse[7][0] elements < ::players[::input_n].body.bodyPoints->aspect
player[].impulse[7][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
player[].impulse[7][0] elements < ::players[::new_input].body.bodyPoints->aspect
player[].impulse[7][0] elements < ::players[::input_n-1].body.bodyMapsSize
player[].impulse[7][0] elements <= ::players[::new_input].body.bodyMapsSize
player[].impulse[7][0] elements < ::players[::input_n-1].body.bodySize
player[].impulse[7][0] elements <= ::players[::new_input].body.bodySize
player[].impulse[7][0] elements < ::players[::input_n-1].body.bodyWidth
player[].impulse[7][0] elements < ::players[::input_n-1].body.color
player[].impulse[7][0] elements < ::players[::input_n-1].basePosition.col
player[].impulse[7][0] elements < ::players[::input_n].basePosition.row
player[].impulse[7][0] elements < ::players[::new_input].basePosition.row
player[].impulse[7][0] elements < ::players[::input_n].stepCounter
player[::input_n].body.type in player[].impulse[7][0]
player[::input_n-1].body.type in player[].impulse[7][0]
player[::input_n].body.visible in player[].impulse[7][0]
player[].impulse[7][0] elements <= player[::input_n].body.visible
player[].impulse[7][0] elements <= player[::input_n].body.bodyPoints->aspect
player[].impulse[7][0] elements < player[::input_n-1].body.bodyPoints->aspect
player[].impulse[7][0] elements <= player[::input_n-1].body.bodyMapsSize
player[].impulse[7][0] elements <= player[::input_n].body.bodySize
player[].impulse[7][0] elements <= player[::input_n-1].body.bodySize
player[].impulse[7][0] elements <= player[::input_n-1].body.color
player[].impulse[7][0] elements < player[::input_n-1].basePosition.col
player[::input_n].impulse[0][0] in player[].impulse[7][0]
player[::input_n].impulse[1][0] in player[].impulse[7][0]
player[::input_n-1].impulse[1][0] in player[].impulse[7][0]
player[::input_n].impulse[3][0] in player[].impulse[7][0]
player[::input_n].impulse[5][0] in player[].impulse[7][0]
player[].impulse[7][0] elements <= player[::input_n-1].direction
player[].impulse[7][0] elements <= player[::input_n].stepCounter
player[].impulse[7][0] elements < player[::new_input].body.bodyPoints->aspect
player[].impulse[7][0] elements <= player[::new_input].body.bodySize
player[].impulse[7][0] elements <= player[::new_input].basePosition.row
player[::new_input].impulse[1][0] in player[].impulse[7][0]
player[::new_input].impulse[3][0] in player[].impulse[7][0]
player[].impulse[7][0] elements <= player[::new_input].stepCounter
player[].direction elements >= size(::crashedPlayers[])-1
player[].direction elements < size(::players[])-1
player[].direction elements < size(player[])-1
player[].direction elements < ::players[::input_n].body.bodyPoints->aspect
player[].direction elements < ::players[::input_n-1].body.bodyPoints->aspect
player[].direction elements < ::players[::new_input].body.bodyPoints->aspect
player[].direction elements < ::players[::input_n-1].body.bodySize
player[].direction elements <= ::players[::new_input].body.bodySize
player[].direction elements < ::players[::input_n-1].body.bodyWidth
player[].direction elements < ::players[::input_n-1].basePosition.col
player[].direction elements < ::players[::input_n].basePosition.row
player[].direction elements < ::players[::new_input].basePosition.row
player[].direction elements < ::players[::input_n].stepCounter
player[].direction elements < player[::input_n-1].body.bodyPoints->aspect
player[::input_n].impulse[0][0] in player[].direction
player[::input_n-1].impulse[1][0] in player[].direction
player[::input_n].impulse[7][0] in player[].direction
player[].direction elements <= player[::input_n-1].direction
player[].direction elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].impulse[1][0] in player[].direction
player[].stepCounter elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in player[].stepCounter
player[].stepCounter elements < size(::players[])-1
player[].stepCounter elements < size(player[])-1
player[].stepCounter elements < ::players[::input_n].body.bodyPoints->aspect
player[].stepCounter elements < ::players[::input_n-1].body.bodyPoints->aspect
player[].stepCounter elements < ::players[::new_input].body.bodyPoints->aspect
player[].stepCounter elements < ::players[::input_n-1].body.bodySize
player[].stepCounter elements < ::players[::input_n-1].basePosition.col
player[].stepCounter elements <= ::players[::input_n].basePosition.row
::players[::new_input].direction in player[].stepCounter
::players[::new_input].stepCounter in player[].stepCounter
player[::input_n].body.type in player[].stepCounter
player[::input_n-1].body.type in player[].stepCounter
player[::input_n].body.visible in player[].stepCounter
player[].stepCounter elements < player[::input_n-1].body.bodyPoints->aspect
player[::input_n-1].body.bodyMapsSize in player[].stepCounter
player[::input_n].body.bodyWidth in player[].stepCounter
player[::input_n].body.bodyHeight in player[].stepCounter
player[::input_n].impulse[0][0] in player[].stepCounter
player[::input_n].impulse[1][0] in player[].stepCounter
player[::input_n-1].impulse[1][0] in player[].stepCounter
player[::input_n].impulse[3][0] in player[].stepCounter
player[::input_n].impulse[5][0] in player[].stepCounter
player[::input_n].impulse[7][0] in player[].stepCounter
player[].stepCounter elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].impulse[1][0] in player[].stepCounter
player[::new_input].impulse[3][0] in player[].stepCounter
player[::new_input].impulse[5][0] in player[].stepCounter
::players[::input_n].pilot in player[].pilot
::players[::input_n].onCrash in player[].pilot
::players[::input_n].onCrash in player[].onCrash
::players[::input_n-1].onCrash in player[].onCrash
::players[::new_input].onCrash in player[].onCrash
::players[::input_n].onCrash in player[].onPushed
size(::players[]) >= size(player[])
size(::players[])-1 != size(player[])
size(::players[])-1 >= size(player[])-1
size(::players[])-1 > ::players[::new_input].body.bodyPoints->aspect
size(::players[])-1 > ::players[::new_input].body.bodyMapsSize
size(::players[])-1 > ::players[::new_input].body.bodySize
size(::players[])-1 > ::players[::new_input].body.bodyWidth
size(::players[])-1 > ::players[::new_input].body.bodyHeight
size(::players[])-1 > ::players[::new_input].body.color
size(::players[])-1 > ::players[::new_input].basePosition.col
size(::players[])-1 > ::players[::new_input].basePosition.row
size(::players[])-1 > ::players[::new_input].direction
size(::players[])-1 > ::players[::new_input].stepCounter
size(::players[])-1 > player[::input_n].body.type
size(::players[])-1 > player[::input_n-1].body.type
size(::players[])-1 > player[::input_n].body.visible
size(::players[])-1 > player[::input_n].body.bodyPoints->aspect
size(::players[])-1 > player[::input_n-1].body.bodyPoints->aspect
size(::players[])-1 > player[::input_n-1].body.bodyMapsSize
size(::players[])-1 > player[::input_n].body.bodySize
size(::players[])-1 > player[::input_n-1].body.bodySize
size(::players[])-1 > player[::input_n].body.bodyWidth
size(::players[])-1 > player[::input_n-1].body.bodyWidth
size(::players[])-1 > player[::input_n].body.bodyHeight
size(::players[])-1 > player[::input_n-1].body.bodyHeight
size(::players[])-1 > player[::input_n].body.color
size(::players[])-1 > player[::input_n-1].body.color
size(::players[])-1 > player[::input_n].basePosition.col
size(::players[])-1 > player[::input_n-1].basePosition.col
size(::players[])-1 > player[::input_n].basePosition.row
size(::players[])-1 > player[::input_n].impulse[0][0]
size(::players[])-1 > player[::input_n].impulse[1][0]
size(::players[])-1 > player[::input_n-1].impulse[1][0]
size(::players[])-1 > player[::input_n].impulse[3][0]
size(::players[])-1 > player[::input_n].impulse[5][0]
size(::players[])-1 > player[::input_n].impulse[7][0]
size(::players[])-1 > player[::input_n-1].direction
size(::players[])-1 > player[::input_n].stepCounter
size(::players[])-1 > player[::input_n-1].stepCounter
size(::players[])-1 > player[::new_input].body.bodyPoints->aspect
size(::players[])-1 > player[::new_input].body.bodySize
size(::players[])-1 > player[::new_input].body.bodyWidth
size(::players[])-1 > player[::new_input].body.bodyHeight
size(::players[])-1 > player[::new_input].body.color
size(::players[])-1 > player[::new_input].basePosition.col
size(::players[])-1 > player[::new_input].basePosition.row
size(::players[])-1 > player[::new_input].impulse[1][0]
size(::players[])-1 > player[::new_input].impulse[3][0]
size(::players[])-1 > player[::new_input].impulse[5][0]
size(::players[])-1 > player[::new_input].direction
size(::players[])-1 > player[::new_input].stepCounter
size(player[]) != player[::input_n].body.bodyPoints->aspect
size(player[]) != player[::input_n-1].body.bodyPoints->aspect
size(player[]) % player[::input_n-1].body.bodyMapsSize == 0
size(player[]) != player[::new_input].body.bodyPoints->aspect
size(player[])-1 > ::players[::input_n].body.bodyPoints->aspect
size(player[])-1 > ::players[::input_n-1].body.bodyPoints->aspect
size(player[])-1 > ::players[::new_input].body.bodyPoints->aspect
size(player[])-1 > ::players[::input_n-1].body.bodyMapsSize
size(player[])-1 > ::players[::new_input].body.bodyMapsSize
size(player[])-1 > ::players[::input_n-1].body.bodySize
size(player[])-1 > ::players[::new_input].body.bodySize
size(player[])-1 > ::players[::input_n-1].body.bodyWidth
size(player[])-1 > ::players[::new_input].body.bodyWidth
size(player[])-1 > ::players[::new_input].body.bodyHeight
size(player[])-1 > ::players[::input_n-1].body.color
size(player[])-1 > ::players[::new_input].body.color
size(player[])-1 > ::players[::input_n-1].basePosition.col
size(player[])-1 > ::players[::new_input].basePosition.col
size(player[])-1 > ::players[::input_n].basePosition.row
size(player[])-1 > ::players[::new_input].basePosition.row
size(player[])-1 > ::players[::new_input].direction
size(player[])-1 > ::players[::input_n].stepCounter
size(player[])-1 > ::players[::new_input].stepCounter
size(player[])-1 > player[::input_n].body.type
size(player[])-1 > player[::input_n-1].body.type
size(player[])-1 > player[::input_n].body.visible
size(player[])-1 != player[::input_n].body.bodyPoints->aspect
size(player[])-1 > player[::input_n-1].body.bodyMapsSize
size(player[])-1 > player[::input_n].body.bodySize
size(player[])-1 > player[::input_n-1].body.bodySize
size(player[])-1 > player[::input_n].body.bodyWidth
size(player[])-1 > player[::input_n-1].body.bodyWidth
size(player[])-1 > player[::input_n].body.bodyHeight
size(player[])-1 > player[::input_n-1].body.bodyHeight
size(player[])-1 > player[::input_n].body.color
size(player[])-1 > player[::input_n-1].body.color
size(player[])-1 > player[::input_n].basePosition.col
size(player[])-1 > player[::input_n-1].basePosition.col
size(player[])-1 > player[::input_n].basePosition.row
size(player[])-1 > player[::input_n].impulse[0][0]
size(player[])-1 > player[::input_n].impulse[1][0]
size(player[])-1 > player[::input_n-1].impulse[1][0]
size(player[])-1 > player[::input_n].impulse[3][0]
size(player[])-1 > player[::input_n].impulse[5][0]
size(player[])-1 > player[::input_n].impulse[7][0]
size(player[])-1 > player[::input_n-1].direction
size(player[])-1 > player[::input_n].stepCounter
size(player[])-1 > player[::input_n-1].stepCounter
size(player[])-1 > player[::new_input].body.bodySize
size(player[])-1 > player[::new_input].body.bodyWidth
size(player[])-1 > player[::new_input].body.bodyHeight
size(player[])-1 > player[::new_input].body.color
size(player[])-1 > player[::new_input].basePosition.col
size(player[])-1 > player[::new_input].basePosition.row
size(player[])-1 > player[::new_input].impulse[1][0]
size(player[])-1 > player[::new_input].impulse[3][0]
size(player[])-1 > player[::new_input].impulse[5][0]
size(player[])-1 > player[::new_input].direction
size(player[])-1 > player[::new_input].stepCounter
::players[::input_n].body.bodyPoints->aspect <= ::players[::new_input].body.bodyPoints->aspect
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.bodyMapsSize
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.bodySize
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.bodyWidth
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.bodyHeight
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.color
::players[::input_n].body.bodyPoints->aspect != ::players[::new_input].basePosition.col
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].basePosition.row
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].direction
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].stepCounter
::players[::input_n].body.bodyPoints->aspect > player[::input_n].body.type
::players[::input_n].body.bodyPoints->aspect > player[::input_n-1].body.type
::players[::input_n].body.bodyPoints->aspect > player[::input_n].body.visible
::players[::input_n].body.bodyPoints->aspect <= player[::input_n-1].body.bodyPoints->aspect
::players[::input_n].body.bodyPoints->aspect > player[::input_n-1].body.bodyMapsSize
::players[::input_n].body.bodyPoints->aspect > player[::input_n].body.bodySize
::players[::input_n].body.bodyPoints->aspect != player[::input_n-1].body.bodySize
::players[::input_n].body.bodyPoints->aspect > player[::input_n].body.bodyWidth
::players[::input_n].body.bodyPoints->aspect > player[::input_n-1].body.bodyWidth
::players[::input_n].body.bodyPoints->aspect > player[::input_n].body.bodyHeight
::players[::input_n].body.bodyPoints->aspect > player[::input_n-1].body.bodyHeight
::players[::input_n].body.bodyPoints->aspect > player[::input_n].body.color
::players[::input_n].body.bodyPoints->aspect > player[::input_n-1].body.color
::players[::input_n].body.bodyPoints->aspect > player[::input_n].basePosition.col
::players[::input_n].body.bodyPoints->aspect != player[::input_n-1].basePosition.col
::players[::input_n].body.bodyPoints->aspect > player[::input_n].basePosition.row
::players[::input_n].body.bodyPoints->aspect > player[::input_n].impulse[0][0]
::players[::input_n].body.bodyPoints->aspect > player[::input_n].impulse[1][0]
::players[::input_n].body.bodyPoints->aspect > player[::input_n-1].impulse[1][0]
::players[::input_n].body.bodyPoints->aspect > player[::input_n].impulse[3][0]
::players[::input_n].body.bodyPoints->aspect > player[::input_n].impulse[5][0]
::players[::input_n].body.bodyPoints->aspect > player[::input_n].impulse[7][0]
::players[::input_n].body.bodyPoints->aspect > player[::input_n-1].direction
::players[::input_n].body.bodyPoints->aspect > player[::input_n].stepCounter
::players[::input_n].body.bodyPoints->aspect > player[::input_n-1].stepCounter
::players[::input_n].body.bodyPoints->aspect <= player[::new_input].body.bodyPoints->aspect
::players[::input_n].body.bodyPoints->aspect != player[::new_input].body.bodySize
::players[::input_n].body.bodyPoints->aspect > player[::new_input].body.bodyWidth
::players[::input_n].body.bodyPoints->aspect > player[::new_input].body.bodyHeight
::players[::input_n].body.bodyPoints->aspect > player[::new_input].body.color
::players[::input_n].body.bodyPoints->aspect != player[::new_input].basePosition.col
::players[::input_n].body.bodyPoints->aspect > player[::new_input].basePosition.row
::players[::input_n].body.bodyPoints->aspect > player[::new_input].impulse[1][0]
::players[::input_n].body.bodyPoints->aspect > player[::new_input].impulse[3][0]
::players[::input_n].body.bodyPoints->aspect > player[::new_input].impulse[5][0]
::players[::input_n].body.bodyPoints->aspect > player[::new_input].direction
::players[::input_n].body.bodyPoints->aspect > player[::new_input].stepCounter
::players[::input_n-1].body.bodyPoints->aspect >= ::players[::new_input].body.bodyPoints->aspect
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyMapsSize
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.bodySize
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.color
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].basePosition.col
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].basePosition.row
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].direction
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].stepCounter
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n].body.type
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n-1].body.type
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n].body.visible
::players[::input_n-1].body.bodyPoints->aspect != player[::input_n].body.bodyPoints->aspect
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n-1].body.bodyMapsSize
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n].body.bodySize
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n-1].body.bodySize
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n].body.bodyWidth
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n-1].body.bodyWidth
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n].body.bodyHeight
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n-1].body.bodyHeight
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n].body.color
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n-1].body.color
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n].basePosition.col
::players[::input_n-1].body.bodyPoints->aspect != player[::input_n-1].basePosition.col
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n].basePosition.row
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n].impulse[0][0]
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n].impulse[1][0]
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n-1].impulse[1][0]
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n].impulse[3][0]
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n].impulse[5][0]
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n].impulse[7][0]
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n-1].direction
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n].stepCounter
::players[::input_n-1].body.bodyPoints->aspect > player[::input_n-1].stepCounter
::players[::input_n-1].body.bodyPoints->aspect != player[::new_input].body.bodyPoints->aspect
::players[::input_n-1].body.bodyPoints->aspect > player[::new_input].body.bodySize
::players[::input_n-1].body.bodyPoints->aspect > player[::new_input].body.bodyWidth
::players[::input_n-1].body.bodyPoints->aspect > player[::new_input].body.bodyHeight
::players[::input_n-1].body.bodyPoints->aspect > player[::new_input].body.color
::players[::input_n-1].body.bodyPoints->aspect != player[::new_input].basePosition.col
::players[::input_n-1].body.bodyPoints->aspect > player[::new_input].basePosition.row
::players[::input_n-1].body.bodyPoints->aspect > player[::new_input].impulse[1][0]
::players[::input_n-1].body.bodyPoints->aspect > player[::new_input].impulse[3][0]
::players[::input_n-1].body.bodyPoints->aspect > player[::new_input].impulse[5][0]
::players[::input_n-1].body.bodyPoints->aspect > player[::new_input].direction
::players[::input_n-1].body.bodyPoints->aspect > player[::new_input].stepCounter
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].body.bodyMapsSize
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.bodyMapsSize
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].body.bodySize
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.bodySize
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.bodyHeight
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].body.color
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.color
::players[::new_input].body.bodyPoints->aspect != ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].basePosition.col
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].direction
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n].stepCounter
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].stepCounter
::players[::new_input].body.bodyPoints->aspect > player[::input_n].body.type
::players[::new_input].body.bodyPoints->aspect > player[::input_n-1].body.type
::players[::new_input].body.bodyPoints->aspect > player[::input_n].body.visible
::players[::new_input].body.bodyPoints->aspect != player[::input_n-1].body.bodyPoints->aspect
::players[::new_input].body.bodyPoints->aspect > player[::input_n-1].body.bodyMapsSize
::players[::new_input].body.bodyPoints->aspect > player[::input_n].body.bodySize
::players[::new_input].body.bodyPoints->aspect > player[::input_n-1].body.bodySize
::players[::new_input].body.bodyPoints->aspect > player[::input_n].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > player[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > player[::input_n].body.bodyHeight
::players[::new_input].body.bodyPoints->aspect > player[::input_n-1].body.bodyHeight
::players[::new_input].body.bodyPoints->aspect > player[::input_n].body.color
::players[::new_input].body.bodyPoints->aspect > player[::input_n-1].body.color
::players[::new_input].body.bodyPoints->aspect > player[::input_n].basePosition.col
::players[::new_input].body.bodyPoints->aspect != player[::input_n-1].basePosition.col
::players[::new_input].body.bodyPoints->aspect > player[::input_n].basePosition.row
::players[::new_input].body.bodyPoints->aspect > player[::input_n].impulse[0][0]
::players[::new_input].body.bodyPoints->aspect > player[::input_n].impulse[1][0]
::players[::new_input].body.bodyPoints->aspect > player[::input_n-1].impulse[1][0]
::players[::new_input].body.bodyPoints->aspect > player[::input_n].impulse[3][0]
::players[::new_input].body.bodyPoints->aspect > player[::input_n].impulse[5][0]
::players[::new_input].body.bodyPoints->aspect > player[::input_n].impulse[7][0]
::players[::new_input].body.bodyPoints->aspect > player[::input_n-1].direction
::players[::new_input].body.bodyPoints->aspect > player[::input_n].stepCounter
::players[::new_input].body.bodyPoints->aspect > player[::input_n-1].stepCounter
::players[::new_input].body.bodyPoints->aspect > player[::new_input].body.bodySize
::players[::new_input].body.bodyPoints->aspect > player[::new_input].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > player[::new_input].body.bodyHeight
::players[::new_input].body.bodyPoints->aspect > player[::new_input].body.color
::players[::new_input].body.bodyPoints->aspect != player[::new_input].basePosition.col
::players[::new_input].body.bodyPoints->aspect > player[::new_input].basePosition.row
::players[::new_input].body.bodyPoints->aspect > player[::new_input].impulse[1][0]
::players[::new_input].body.bodyPoints->aspect > player[::new_input].impulse[3][0]
::players[::new_input].body.bodyPoints->aspect > player[::new_input].impulse[5][0]
::players[::new_input].body.bodyPoints->aspect > player[::new_input].direction
::players[::new_input].body.bodyPoints->aspect > player[::new_input].stepCounter
::players[::input_n-1].body.bodyMapsSize >= ::players[::new_input].body.bodyMapsSize
::players[::input_n-1].body.bodyMapsSize != ::players[::new_input].body.bodySize
::players[::input_n-1].body.bodyMapsSize != ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.bodyMapsSize >= ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize > ::players[::new_input].body.color
::players[::input_n-1].body.bodyMapsSize != ::players[::new_input].basePosition.col
::players[::input_n-1].body.bodyMapsSize < ::players[::new_input].basePosition.row
::players[::input_n-1].body.bodyMapsSize > ::players[::new_input].direction
::players[::input_n-1].body.bodyMapsSize != ::players[::new_input].stepCounter
::players[::input_n-1].body.bodyMapsSize > player[::input_n].body.type
::players[::input_n-1].body.bodyMapsSize > player[::input_n-1].body.type
::players[::input_n-1].body.bodyMapsSize > player[::input_n].body.visible
::players[::input_n-1].body.bodyMapsSize != player[::input_n].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize < player[::input_n-1].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize >= player[::input_n-1].body.bodyMapsSize
::players[::input_n-1].body.bodyMapsSize != player[::input_n].body.bodySize
::players[::input_n-1].body.bodyMapsSize != player[::input_n-1].body.bodySize
::players[::input_n-1].body.bodyMapsSize != player[::input_n].body.bodyWidth
::players[::input_n-1].body.bodyMapsSize != player[::input_n-1].body.bodyWidth
::players[::input_n-1].body.bodyMapsSize >= player[::input_n].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize != player[::input_n].basePosition.row
::players[::input_n-1].body.bodyMapsSize > player[::input_n].impulse[0][0]
::players[::input_n-1].body.bodyMapsSize > player[::input_n].impulse[1][0]
::players[::input_n-1].body.bodyMapsSize > player[::input_n-1].impulse[1][0]
::players[::input_n-1].body.bodyMapsSize > player[::input_n].impulse[3][0]
::players[::input_n-1].body.bodyMapsSize > player[::input_n].impulse[5][0]
::players[::input_n-1].body.bodyMapsSize > player[::input_n].impulse[7][0]
::players[::input_n-1].body.bodyMapsSize != player[::input_n-1].direction
::players[::input_n-1].body.bodyMapsSize < player[::new_input].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize != player[::new_input].body.bodySize
::players[::input_n-1].body.bodyMapsSize != player[::new_input].body.bodyWidth
::players[::input_n-1].body.bodyMapsSize != player[::new_input].basePosition.row
::players[::input_n-1].body.bodyMapsSize > player[::new_input].impulse[1][0]
::players[::input_n-1].body.bodyMapsSize > player[::new_input].impulse[3][0]
::players[::input_n-1].body.bodyMapsSize > player[::new_input].impulse[5][0]
::players[::input_n-1].body.bodyMapsSize != player[::new_input].direction
::players[::new_input].body.bodyMapsSize < ::players[::input_n-1].body.bodySize
::players[::new_input].body.bodyMapsSize < ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyMapsSize != ::players[::new_input].body.bodyWidth
::players[::new_input].body.bodyMapsSize >= ::players[::new_input].body.bodyHeight
::players[::new_input].body.bodyMapsSize != ::players[::input_n-1].body.color
::players[::new_input].body.bodyMapsSize > ::players[::new_input].body.color
::players[::new_input].body.bodyMapsSize < ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodyMapsSize != ::players[::new_input].basePosition.col
::players[::new_input].body.bodyMapsSize < ::players[::input_n].basePosition.row
::players[::new_input].body.bodyMapsSize < ::players[::new_input].basePosition.row
::players[::new_input].body.bodyMapsSize > ::players[::new_input].direction
::players[::new_input].body.bodyMapsSize < ::players[::input_n].stepCounter
::players[::new_input].body.bodyMapsSize != ::players[::new_input].stepCounter
::players[::new_input].body.bodyMapsSize >= player[::input_n].body.type
::players[::new_input].body.bodyMapsSize > player[::input_n-1].body.type
::players[::new_input].body.bodyMapsSize >= player[::input_n].body.visible
::players[::new_input].body.bodyMapsSize != player[::input_n].body.bodyPoints->aspect
::players[::new_input].body.bodyMapsSize < player[::input_n-1].body.bodyPoints->aspect
::players[::new_input].body.bodyMapsSize != player[::input_n-1].body.bodyMapsSize
::players[::new_input].body.bodyMapsSize != player[::input_n-1].body.bodySize
::players[::new_input].body.bodyMapsSize != player[::input_n].body.bodyWidth
::players[::new_input].body.bodyMapsSize != player[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyMapsSize >= player[::input_n].body.bodyHeight
::players[::new_input].body.bodyMapsSize != player[::input_n].basePosition.row
::players[::new_input].body.bodyMapsSize >= player[::input_n].impulse[0][0]
::players[::new_input].body.bodyMapsSize > player[::input_n].impulse[1][0]
::players[::new_input].body.bodyMapsSize >= player[::input_n-1].impulse[1][0]
::players[::new_input].body.bodyMapsSize > player[::input_n].impulse[3][0]
::players[::new_input].body.bodyMapsSize > player[::input_n].impulse[5][0]
::players[::new_input].body.bodyMapsSize > player[::input_n].impulse[7][0]
::players[::new_input].body.bodyMapsSize < player[::new_input].body.bodyPoints->aspect
::players[::new_input].body.bodyMapsSize != player[::new_input].body.bodyWidth
::players[::new_input].body.bodyMapsSize != player[::new_input].basePosition.row
::players[::new_input].body.bodyMapsSize > player[::new_input].impulse[1][0]
::players[::new_input].body.bodyMapsSize > player[::new_input].impulse[3][0]
::players[::new_input].body.bodyMapsSize > player[::new_input].impulse[5][0]
::players[::new_input].body.bodyMapsSize != player[::new_input].direction
::players[::input_n-1].body.bodySize >= ::players[::new_input].body.bodySize
::players[::input_n-1].body.bodySize > ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.bodySize > ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodySize > ::players[::new_input].body.color
::players[::input_n-1].body.bodySize != ::players[::new_input].basePosition.col
::players[::input_n-1].body.bodySize > ::players[::new_input].basePosition.row
::players[::input_n-1].body.bodySize > ::players[::new_input].direction
::players[::input_n-1].body.bodySize > ::players[::new_input].stepCounter
::players[::input_n-1].body.bodySize > player[::input_n].body.type
::players[::input_n-1].body.bodySize > player[::input_n-1].body.type
::players[::input_n-1].body.bodySize > player[::input_n].body.visible
::players[::input_n-1].body.bodySize != player[::input_n].body.bodyPoints->aspect
::players[::input_n-1].body.bodySize < player[::input_n-1].body.bodyPoints->aspect
::players[::input_n-1].body.bodySize > player[::input_n-1].body.bodyMapsSize
::players[::input_n-1].body.bodySize > player[::input_n].body.bodySize
::players[::input_n-1].body.bodySize > player[::input_n].body.bodyWidth
::players[::input_n-1].body.bodySize > player[::input_n-1].body.bodyWidth
::players[::input_n-1].body.bodySize > player[::input_n].body.bodyHeight
::players[::input_n-1].body.bodySize > player[::input_n-1].body.bodyHeight
::players[::input_n-1].body.bodySize > player[::input_n].body.color
::players[::input_n-1].body.bodySize > player[::input_n-1].body.color
::players[::input_n-1].body.bodySize > player[::input_n].basePosition.col
::players[::input_n-1].body.bodySize != player[::input_n-1].basePosition.col
::players[::input_n-1].body.bodySize > player[::input_n].basePosition.row
::players[::input_n-1].body.bodySize > player[::input_n].impulse[0][0]
::players[::input_n-1].body.bodySize > player[::input_n].impulse[1][0]
::players[::input_n-1].body.bodySize > player[::input_n-1].impulse[1][0]
::players[::input_n-1].body.bodySize > player[::input_n].impulse[3][0]
::players[::input_n-1].body.bodySize > player[::input_n].impulse[5][0]
::players[::input_n-1].body.bodySize > player[::input_n].impulse[7][0]
::players[::input_n-1].body.bodySize > player[::input_n-1].direction
::players[::input_n-1].body.bodySize > player[::input_n].stepCounter
::players[::input_n-1].body.bodySize > player[::input_n-1].stepCounter
::players[::input_n-1].body.bodySize < player[::new_input].body.bodyPoints->aspect
::players[::input_n-1].body.bodySize != player[::new_input].body.bodySize
::players[::input_n-1].body.bodySize > player[::new_input].body.bodyWidth
::players[::input_n-1].body.bodySize > player[::new_input].body.bodyHeight
::players[::input_n-1].body.bodySize > player[::new_input].body.color
::players[::input_n-1].body.bodySize != player[::new_input].basePosition.col
::players[::input_n-1].body.bodySize > player[::new_input].basePosition.row
::players[::input_n-1].body.bodySize > player[::new_input].impulse[1][0]
::players[::input_n-1].body.bodySize > player[::new_input].impulse[3][0]
::players[::input_n-1].body.bodySize > player[::new_input].impulse[5][0]
::players[::input_n-1].body.bodySize > player[::new_input].direction
::players[::input_n-1].body.bodySize > player[::new_input].stepCounter
::players[::new_input].body.bodySize != ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodySize > ::players[::new_input].body.bodyWidth
::players[::new_input].body.bodySize > ::players[::new_input].body.bodyHeight
::players[::new_input].body.bodySize != ::players[::input_n-1].body.color
::players[::new_input].body.bodySize > ::players[::new_input].body.color
::players[::new_input].body.bodySize < ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodySize != ::players[::new_input].basePosition.col
::players[::new_input].body.bodySize != ::players[::input_n].basePosition.row
::players[::new_input].body.bodySize != ::players[::new_input].basePosition.row
::players[::new_input].body.bodySize > ::players[::new_input].direction
::players[::new_input].body.bodySize != ::players[::input_n].stepCounter
::players[::new_input].body.bodySize != ::players[::new_input].stepCounter
::players[::new_input].body.bodySize >= player[::input_n].body.type
::players[::new_input].body.bodySize > player[::input_n-1].body.type
::players[::new_input].body.bodySize >= player[::input_n].body.visible
::players[::new_input].body.bodySize != player[::input_n].body.bodyPoints->aspect
::players[::new_input].body.bodySize < player[::input_n-1].body.bodyPoints->aspect
::players[::new_input].body.bodySize != player[::input_n-1].body.bodyMapsSize
::players[::new_input].body.bodySize >= player[::input_n].body.bodySize
::players[::new_input].body.bodySize != player[::input_n-1].body.bodySize
::players[::new_input].body.bodySize > player[::input_n].body.bodyWidth
::players[::new_input].body.bodySize != player[::input_n-1].body.bodyWidth
::players[::new_input].body.bodySize > player[::input_n].body.bodyHeight
::players[::new_input].body.bodySize != player[::input_n-1].body.bodyHeight
::players[::new_input].body.bodySize > player[::input_n].body.color
::players[::new_input].body.bodySize != player[::input_n-1].body.color
::players[::new_input].body.bodySize > player[::input_n].basePosition.col
::players[::new_input].body.bodySize != player[::input_n-1].basePosition.col
::players[::new_input].body.bodySize != player[::input_n].basePosition.row
::players[::new_input].body.bodySize >= player[::input_n].impulse[0][0]
::players[::new_input].body.bodySize > player[::input_n].impulse[1][0]
::players[::new_input].body.bodySize >= player[::input_n-1].impulse[1][0]
::players[::new_input].body.bodySize > player[::input_n].impulse[3][0]
::players[::new_input].body.bodySize > player[::input_n].impulse[5][0]
::players[::new_input].body.bodySize > player[::input_n].impulse[7][0]
::players[::new_input].body.bodySize >= player[::input_n-1].direction
::players[::new_input].body.bodySize != player[::input_n].stepCounter
::players[::new_input].body.bodySize > player[::input_n-1].stepCounter
::players[::new_input].body.bodySize < player[::new_input].body.bodyPoints->aspect
::players[::new_input].body.bodySize > player[::new_input].body.bodyWidth
::players[::new_input].body.bodySize > player[::new_input].body.bodyHeight
::players[::new_input].body.bodySize > player[::new_input].body.color
::players[::new_input].body.bodySize != player[::new_input].basePosition.col
::players[::new_input].body.bodySize != player[::new_input].basePosition.row
::players[::new_input].body.bodySize > player[::new_input].impulse[1][0]
::players[::new_input].body.bodySize > player[::new_input].impulse[3][0]
::players[::new_input].body.bodySize > player[::new_input].impulse[5][0]
::players[::new_input].body.bodySize > player[::new_input].direction
::players[::new_input].body.bodySize != player[::new_input].stepCounter
::players[::input_n-1].body.bodyWidth >= ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.bodyWidth > ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodyWidth > ::players[::new_input].body.color
::players[::input_n-1].body.bodyWidth != ::players[::new_input].basePosition.col
::players[::input_n-1].body.bodyWidth < ::players[::new_input].basePosition.row
::players[::input_n-1].body.bodyWidth > ::players[::new_input].direction
::players[::input_n-1].body.bodyWidth != ::players[::new_input].stepCounter
::players[::input_n-1].body.bodyWidth > player[::input_n].body.type
::players[::input_n-1].body.bodyWidth > player[::input_n-1].body.type
::players[::input_n-1].body.bodyWidth > player[::input_n].body.visible
::players[::input_n-1].body.bodyWidth != player[::input_n].body.bodyPoints->aspect
::players[::input_n-1].body.bodyWidth < player[::input_n-1].body.bodyPoints->aspect
::players[::input_n-1].body.bodyWidth > player[::input_n-1].body.bodyMapsSize
::players[::input_n-1].body.bodyWidth != player[::input_n].body.bodySize
::players[::input_n-1].body.bodyWidth != player[::input_n-1].body.bodySize
::players[::input_n-1].body.bodyWidth >= player[::input_n].body.bodyWidth
::players[::input_n-1].body.bodyWidth > player[::input_n].body.bodyHeight
::players[::input_n-1].body.bodyWidth > player[::input_n-1].body.bodyHeight
::players[::input_n-1].body.bodyWidth > player[::input_n].body.color
::players[::input_n-1].body.bodyWidth > player[::input_n-1].body.color
::players[::input_n-1].body.bodyWidth != player[::input_n].basePosition.row
::players[::input_n-1].body.bodyWidth > player[::input_n].impulse[0][0]
::players[::input_n-1].body.bodyWidth > player[::input_n].impulse[1][0]
::players[::input_n-1].body.bodyWidth > player[::input_n-1].impulse[1][0]
::players[::input_n-1].body.bodyWidth > player[::input_n].impulse[3][0]
::players[::input_n-1].body.bodyWidth > player[::input_n].impulse[5][0]
::players[::input_n-1].body.bodyWidth > player[::input_n].impulse[7][0]
::players[::input_n-1].body.bodyWidth > player[::input_n-1].direction
::players[::input_n-1].body.bodyWidth >= player[::input_n-1].stepCounter
::players[::input_n-1].body.bodyWidth < player[::new_input].body.bodyPoints->aspect
::players[::input_n-1].body.bodyWidth != player[::new_input].body.bodySize
::players[::input_n-1].body.bodyWidth > player[::new_input].body.bodyHeight
::players[::input_n-1].body.bodyWidth > player[::new_input].body.color
::players[::input_n-1].body.bodyWidth != player[::new_input].basePosition.row
::players[::input_n-1].body.bodyWidth > player[::new_input].impulse[1][0]
::players[::input_n-1].body.bodyWidth > player[::new_input].impulse[3][0]
::players[::input_n-1].body.bodyWidth > player[::new_input].impulse[5][0]
::players[::input_n-1].body.bodyWidth > player[::new_input].direction
::players[::new_input].body.bodyWidth != ::players[::input_n-1].body.color
::players[::new_input].body.bodyWidth >= ::players[::new_input].body.color
::players[::new_input].body.bodyWidth < ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodyWidth <= ::players[::new_input].basePosition.col
::players[::new_input].body.bodyWidth < ::players[::input_n].basePosition.row
::players[::new_input].body.bodyWidth < ::players[::new_input].basePosition.row
::players[::new_input].body.bodyWidth >= ::players[::new_input].direction
::players[::new_input].body.bodyWidth < ::players[::input_n].stepCounter
::players[::new_input].body.bodyWidth != ::players[::new_input].stepCounter
::players[::new_input].body.bodyWidth != player[::input_n].body.type
::players[::new_input].body.bodyWidth >= player[::input_n-1].body.type
::players[::new_input].body.bodyWidth != player[::input_n].body.visible
::players[::new_input].body.bodyWidth != player[::input_n].body.bodyPoints->aspect
::players[::new_input].body.bodyWidth < player[::input_n-1].body.bodyPoints->aspect
::players[::new_input].body.bodyWidth != player[::input_n-1].body.bodyMapsSize
::players[::new_input].body.bodyWidth != player[::input_n].body.bodySize
::players[::new_input].body.bodyWidth != player[::input_n-1].body.bodySize
::players[::new_input].body.bodyWidth >= player[::input_n].body.bodyWidth
::players[::new_input].body.bodyWidth >= player[::input_n].body.bodyHeight
::players[::new_input].body.bodyWidth != player[::input_n-1].body.bodyHeight
::players[::new_input].body.bodyWidth >= player[::input_n].body.color
::players[::new_input].body.bodyWidth != player[::input_n-1].body.color
::players[::new_input].body.bodyWidth != player[::input_n].basePosition.row
::players[::new_input].body.bodyWidth != player[::input_n].impulse[0][0]
::players[::new_input].body.bodyWidth >= player[::input_n].impulse[1][0]
::players[::new_input].body.bodyWidth != player[::input_n-1].impulse[1][0]
::players[::new_input].body.bodyWidth >= player[::input_n].impulse[3][0]
::players[::new_input].body.bodyWidth >= player[::input_n].impulse[5][0]
::players[::new_input].body.bodyWidth >= player[::input_n].impulse[7][0]
::players[::new_input].body.bodyWidth != player[::input_n-1].direction
::players[::new_input].body.bodyWidth >= player[::input_n-1].stepCounter
::players[::new_input].body.bodyWidth < player[::new_input].body.bodyPoints->aspect
::players[::new_input].body.bodyWidth != player[::new_input].body.bodySize
::players[::new_input].body.bodyWidth >= player[::new_input].body.bodyHeight
::players[::new_input].body.bodyWidth >= player[::new_input].body.color
::players[::new_input].body.bodyWidth != player[::new_input].basePosition.row
::players[::new_input].body.bodyWidth >= player[::new_input].impulse[1][0]
::players[::new_input].body.bodyWidth >= player[::new_input].impulse[3][0]
::players[::new_input].body.bodyWidth >= player[::new_input].impulse[5][0]
::players[::new_input].body.bodyWidth >= player[::new_input].direction
::players[::new_input].body.bodyHeight != ::players[::input_n-1].body.color
::players[::new_input].body.bodyHeight >= ::players[::new_input].body.color
::players[::new_input].body.bodyHeight < ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodyHeight <= ::players[::new_input].basePosition.col
::players[::new_input].body.bodyHeight < ::players[::input_n].basePosition.row
::players[::new_input].body.bodyHeight < ::players[::new_input].basePosition.row
::players[::new_input].body.bodyHeight >= ::players[::new_input].direction
::players[::new_input].body.bodyHeight < ::players[::input_n].stepCounter
::players[::new_input].body.bodyHeight != ::players[::new_input].stepCounter
::players[::new_input].body.bodyHeight != player[::input_n].body.type
::players[::new_input].body.bodyHeight >= player[::input_n-1].body.type
::players[::new_input].body.bodyHeight != player[::input_n].body.visible
::players[::new_input].body.bodyHeight != player[::input_n].body.bodyPoints->aspect
::players[::new_input].body.bodyHeight < player[::input_n-1].body.bodyPoints->aspect
::players[::new_input].body.bodyHeight != player[::input_n-1].body.bodyMapsSize
::players[::new_input].body.bodyHeight != player[::input_n].body.bodySize
::players[::new_input].body.bodyHeight != player[::input_n-1].body.bodySize
::players[::new_input].body.bodyHeight != player[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyHeight >= player[::input_n].body.bodyHeight
::players[::new_input].body.bodyHeight != player[::input_n].basePosition.row
::players[::new_input].body.bodyHeight != player[::input_n].impulse[0][0]
::players[::new_input].body.bodyHeight >= player[::input_n].impulse[1][0]
::players[::new_input].body.bodyHeight != player[::input_n-1].impulse[1][0]
::players[::new_input].body.bodyHeight >= player[::input_n].impulse[3][0]
::players[::new_input].body.bodyHeight >= player[::input_n].impulse[5][0]
::players[::new_input].body.bodyHeight >= player[::input_n].impulse[7][0]
::players[::new_input].body.bodyHeight != player[::input_n-1].direction
::players[::new_input].body.bodyHeight < player[::new_input].body.bodyPoints->aspect
::players[::new_input].body.bodyHeight != player[::new_input].body.bodySize
::players[::new_input].body.bodyHeight != player[::new_input].basePosition.row
::players[::new_input].body.bodyHeight >= player[::new_input].impulse[1][0]
::players[::new_input].body.bodyHeight >= player[::new_input].impulse[3][0]
::players[::new_input].body.bodyHeight >= player[::new_input].impulse[5][0]
::players[::input_n-1].body.color >= ::players[::new_input].body.color
::players[::input_n-1].body.color != ::players[::new_input].basePosition.col
::players[::input_n-1].body.color < ::players[::new_input].basePosition.row
::players[::input_n-1].body.color > ::players[::new_input].direction
::players[::input_n-1].body.color != ::players[::new_input].stepCounter
::players[::input_n-1].body.color > player[::input_n].body.type
::players[::input_n-1].body.color > player[::input_n-1].body.type
::players[::input_n-1].body.color > player[::input_n].body.visible
::players[::input_n-1].body.color != player[::input_n].body.bodyPoints->aspect
::players[::input_n-1].body.color < player[::input_n-1].body.bodyPoints->aspect
::players[::input_n-1].body.color != player[::input_n-1].body.bodyMapsSize
::players[::input_n-1].body.color != player[::input_n].body.bodySize
::players[::input_n-1].body.color != player[::input_n-1].body.bodySize
::players[::input_n-1].body.color != player[::input_n].body.bodyWidth
::players[::input_n-1].body.color != player[::input_n-1].body.bodyWidth
::players[::input_n-1].body.color != player[::input_n].body.bodyHeight
::players[::input_n-1].body.color != player[::input_n-1].body.bodyHeight
::players[::input_n-1].body.color != player[::input_n].basePosition.col
::players[::input_n-1].body.color != player[::input_n-1].basePosition.col
::players[::input_n-1].body.color > player[::input_n].impulse[0][0]
::players[::input_n-1].body.color > player[::input_n].impulse[1][0]
::players[::input_n-1].body.color > player[::input_n-1].impulse[1][0]
::players[::input_n-1].body.color > player[::input_n].impulse[3][0]
::players[::input_n-1].body.color > player[::input_n].impulse[5][0]
::players[::input_n-1].body.color > player[::input_n].impulse[7][0]
::players[::input_n-1].body.color != player[::input_n].stepCounter
::players[::input_n-1].body.color != player[::input_n-1].stepCounter
::players[::input_n-1].body.color < player[::new_input].body.bodyPoints->aspect
::players[::input_n-1].body.color != player[::new_input].body.bodySize
::players[::input_n-1].body.color != player[::new_input].body.bodyWidth
::players[::input_n-1].body.color != player[::new_input].body.bodyHeight
::players[::input_n-1].body.color != player[::new_input].basePosition.col
::players[::input_n-1].body.color != player[::new_input].basePosition.row
::players[::input_n-1].body.color > player[::new_input].impulse[1][0]
::players[::input_n-1].body.color > player[::new_input].impulse[3][0]
::players[::input_n-1].body.color > player[::new_input].impulse[5][0]
::players[::input_n-1].body.color != player[::new_input].stepCounter
::players[::new_input].body.color < ::players[::input_n-1].basePosition.col
::players[::new_input].body.color < ::players[::input_n].basePosition.row
::players[::new_input].body.color < ::players[::new_input].basePosition.row
::players[::new_input].body.color >= ::players[::new_input].direction
::players[::new_input].body.color < ::players[::input_n].stepCounter
::players[::new_input].body.color != ::players[::new_input].stepCounter
::players[::new_input].body.color != player[::input_n].body.type
::players[::new_input].body.color >= player[::input_n-1].body.type
::players[::new_input].body.color != player[::input_n].body.visible
::players[::new_input].body.color != player[::input_n].body.bodyPoints->aspect
::players[::new_input].body.color < player[::input_n-1].body.bodyPoints->aspect
::players[::new_input].body.color != player[::input_n-1].body.bodyMapsSize
::players[::new_input].body.color != player[::input_n].body.bodySize
::players[::new_input].body.color != player[::input_n-1].body.bodySize
::players[::new_input].body.color != player[::input_n-1].body.bodyWidth
::players[::new_input].body.color != player[::input_n-1].body.bodyHeight
::players[::new_input].body.color != player[::input_n-1].basePosition.col
::players[::new_input].body.color != player[::input_n].impulse[0][0]
::players[::new_input].body.color >= player[::input_n].impulse[1][0]
::players[::new_input].body.color != player[::input_n-1].impulse[1][0]
::players[::new_input].body.color >= player[::input_n].impulse[3][0]
::players[::new_input].body.color >= player[::input_n].impulse[5][0]
::players[::new_input].body.color >= player[::input_n].impulse[7][0]
::players[::new_input].body.color != player[::input_n].stepCounter
::players[::new_input].body.color < player[::new_input].body.bodyPoints->aspect
::players[::new_input].body.color != player[::new_input].body.bodySize
::players[::new_input].body.color != player[::new_input].basePosition.row
::players[::new_input].body.color >= player[::new_input].impulse[1][0]
::players[::new_input].body.color >= player[::new_input].impulse[3][0]
::players[::new_input].body.color >= player[::new_input].impulse[5][0]
::players[::new_input].body.color != player[::new_input].stepCounter
::players[::input_n-1].basePosition.col >= ::players[::new_input].basePosition.col
::players[::input_n-1].basePosition.col > ::players[::new_input].basePosition.row
::players[::input_n-1].basePosition.col > ::players[::new_input].direction
::players[::input_n-1].basePosition.col > ::players[::new_input].stepCounter
::players[::input_n-1].basePosition.col > player[::input_n].body.type
::players[::input_n-1].basePosition.col > player[::input_n-1].body.type
::players[::input_n-1].basePosition.col > player[::input_n].body.visible
::players[::input_n-1].basePosition.col != player[::input_n].body.bodyPoints->aspect
::players[::input_n-1].basePosition.col != player[::input_n-1].body.bodyPoints->aspect
::players[::input_n-1].basePosition.col > player[::input_n-1].body.bodyMapsSize
::players[::input_n-1].basePosition.col > player[::input_n].body.bodySize
::players[::input_n-1].basePosition.col != player[::input_n-1].body.bodySize
::players[::input_n-1].basePosition.col > player[::input_n].body.bodyWidth
::players[::input_n-1].basePosition.col > player[::input_n-1].body.bodyWidth
::players[::input_n-1].basePosition.col > player[::input_n].body.bodyHeight
::players[::input_n-1].basePosition.col > player[::input_n-1].body.bodyHeight
::players[::input_n-1].basePosition.col > player[::input_n].body.color
::players[::input_n-1].basePosition.col > player[::input_n-1].body.color
::players[::input_n-1].basePosition.col > player[::input_n].basePosition.col
::players[::input_n-1].basePosition.col > player[::input_n].basePosition.row
::players[::input_n-1].basePosition.col > player[::input_n].impulse[0][0]
::players[::input_n-1].basePosition.col > player[::input_n].impulse[1][0]
::players[::input_n-1].basePosition.col > player[::input_n-1].impulse[1][0]
::players[::input_n-1].basePosition.col > player[::input_n].impulse[3][0]
::players[::input_n-1].basePosition.col > player[::input_n].impulse[5][0]
::players[::input_n-1].basePosition.col > player[::input_n].impulse[7][0]
::players[::input_n-1].basePosition.col > player[::input_n-1].direction
::players[::input_n-1].basePosition.col > player[::input_n].stepCounter
::players[::input_n-1].basePosition.col > player[::input_n-1].stepCounter
::players[::input_n-1].basePosition.col != player[::new_input].body.bodyPoints->aspect
::players[::input_n-1].basePosition.col != player[::new_input].body.bodySize
::players[::input_n-1].basePosition.col > player[::new_input].body.bodyWidth
::players[::input_n-1].basePosition.col > player[::new_input].body.bodyHeight
::players[::input_n-1].basePosition.col > player[::new_input].body.color
::players[::input_n-1].basePosition.col != player[::new_input].basePosition.col
::players[::input_n-1].basePosition.col > player[::new_input].basePosition.row
::players[::input_n-1].basePosition.col > player[::new_input].impulse[1][0]
::players[::input_n-1].basePosition.col > player[::new_input].impulse[3][0]
::players[::input_n-1].basePosition.col > player[::new_input].impulse[5][0]
::players[::input_n-1].basePosition.col > player[::new_input].direction
::players[::input_n-1].basePosition.col > player[::new_input].stepCounter
::players[::new_input].basePosition.col != ::players[::input_n].basePosition.row
::players[::new_input].basePosition.col != ::players[::new_input].basePosition.row
::players[::new_input].basePosition.col >= ::players[::new_input].direction
::players[::new_input].basePosition.col != ::players[::input_n].stepCounter
::players[::new_input].basePosition.col != ::players[::new_input].stepCounter
::players[::new_input].basePosition.col != player[::input_n].body.type
::players[::new_input].basePosition.col >= player[::input_n-1].body.type
::players[::new_input].basePosition.col != player[::input_n].body.visible
::players[::new_input].basePosition.col != player[::input_n].body.bodyPoints->aspect
::players[::new_input].basePosition.col != player[::input_n-1].body.bodyPoints->aspect
::players[::new_input].basePosition.col != player[::input_n-1].body.bodyMapsSize
::players[::new_input].basePosition.col != player[::input_n].body.bodySize
::players[::new_input].basePosition.col != player[::input_n-1].body.bodySize
::players[::new_input].basePosition.col >= player[::input_n].body.bodyWidth
::players[::new_input].basePosition.col != player[::input_n-1].body.bodyWidth
::players[::new_input].basePosition.col >= player[::input_n].body.bodyHeight
::players[::new_input].basePosition.col != player[::input_n-1].body.bodyHeight
::players[::new_input].basePosition.col >= player[::input_n].body.color
::players[::new_input].basePosition.col != player[::input_n-1].body.color
::players[::new_input].basePosition.col >= player[::input_n].basePosition.col
::players[::new_input].basePosition.col != player[::input_n-1].basePosition.col
::players[::new_input].basePosition.col != player[::input_n].basePosition.row
::players[::new_input].basePosition.col != player[::input_n].impulse[0][0]
::players[::new_input].basePosition.col >= player[::input_n].impulse[1][0]
::players[::new_input].basePosition.col != player[::input_n-1].impulse[1][0]
::players[::new_input].basePosition.col >= player[::input_n].impulse[3][0]
::players[::new_input].basePosition.col >= player[::input_n].impulse[5][0]
::players[::new_input].basePosition.col >= player[::input_n].impulse[7][0]
::players[::new_input].basePosition.col != player[::input_n-1].direction
::players[::new_input].basePosition.col != player[::input_n].stepCounter
::players[::new_input].basePosition.col >= player[::input_n-1].stepCounter
::players[::new_input].basePosition.col != player[::new_input].body.bodyPoints->aspect
::players[::new_input].basePosition.col != player[::new_input].body.bodySize
::players[::new_input].basePosition.col >= player[::new_input].body.bodyWidth
::players[::new_input].basePosition.col >= player[::new_input].body.bodyHeight
::players[::new_input].basePosition.col >= player[::new_input].body.color
::players[::new_input].basePosition.col != player[::new_input].basePosition.row
::players[::new_input].basePosition.col >= player[::new_input].impulse[1][0]
::players[::new_input].basePosition.col >= player[::new_input].impulse[3][0]
::players[::new_input].basePosition.col >= player[::new_input].impulse[5][0]
::players[::new_input].basePosition.col >= player[::new_input].direction
::players[::new_input].basePosition.col != player[::new_input].stepCounter
::players[::input_n].basePosition.row >= ::players[::new_input].basePosition.row
::players[::input_n].basePosition.row > ::players[::new_input].direction
::players[::input_n].basePosition.row > ::players[::new_input].stepCounter
::players[::input_n].basePosition.row > player[::input_n].body.type
::players[::input_n].basePosition.row > player[::input_n-1].body.type
::players[::input_n].basePosition.row > player[::input_n].body.visible
::players[::input_n].basePosition.row != player[::input_n].body.bodyPoints->aspect
::players[::input_n].basePosition.row < player[::input_n-1].body.bodyPoints->aspect
::players[::input_n].basePosition.row > player[::input_n-1].body.bodyMapsSize
::players[::input_n].basePosition.row != player[::input_n].body.bodySize
::players[::input_n].basePosition.row != player[::input_n-1].body.bodySize
::players[::input_n].basePosition.row > player[::input_n].body.bodyWidth
::players[::input_n].basePosition.row != player[::input_n-1].body.bodyWidth
::players[::input_n].basePosition.row > player[::input_n].body.bodyHeight
::players[::input_n].basePosition.row > player[::input_n-1].body.bodyHeight
::players[::input_n].basePosition.row > player[::input_n].body.color
::players[::input_n].basePosition.row > player[::input_n-1].body.color
::players[::input_n].basePosition.row != player[::input_n-1].basePosition.col
::players[::input_n].basePosition.row > player[::input_n].impulse[0][0]
::players[::input_n].basePosition.row > player[::input_n].impulse[1][0]
::players[::input_n].basePosition.row > player[::input_n-1].impulse[1][0]
::players[::input_n].basePosition.row > player[::input_n].impulse[3][0]
::players[::input_n].basePosition.row > player[::input_n].impulse[5][0]
::players[::input_n].basePosition.row > player[::input_n].impulse[7][0]
::players[::input_n].basePosition.row > player[::input_n-1].direction
::players[::input_n].basePosition.row > player[::input_n].stepCounter
::players[::input_n].basePosition.row > player[::input_n-1].stepCounter
::players[::input_n].basePosition.row < player[::new_input].body.bodyPoints->aspect
::players[::input_n].basePosition.row != player[::new_input].body.bodySize
::players[::input_n].basePosition.row != player[::new_input].body.bodyWidth
::players[::input_n].basePosition.row > player[::new_input].body.bodyHeight
::players[::input_n].basePosition.row > player[::new_input].body.color
::players[::input_n].basePosition.row != player[::new_input].basePosition.col
::players[::input_n].basePosition.row > player[::new_input].impulse[1][0]
::players[::input_n].basePosition.row > player[::new_input].impulse[3][0]
::players[::input_n].basePosition.row > player[::new_input].impulse[5][0]
::players[::input_n].basePosition.row > player[::new_input].direction
::players[::input_n].basePosition.row > player[::new_input].stepCounter
::players[::new_input].basePosition.row > ::players[::new_input].direction
::players[::new_input].basePosition.row >= ::players[::input_n].stepCounter
::players[::new_input].basePosition.row > ::players[::new_input].stepCounter
::players[::new_input].basePosition.row > player[::input_n].body.type
::players[::new_input].basePosition.row > player[::input_n-1].body.type
::players[::new_input].basePosition.row > player[::input_n].body.visible
::players[::new_input].basePosition.row != player[::input_n].body.bodyPoints->aspect
::players[::new_input].basePosition.row < player[::input_n-1].body.bodyPoints->aspect
::players[::new_input].basePosition.row > player[::input_n-1].body.bodyMapsSize
::players[::new_input].basePosition.row != player[::input_n].body.bodySize
::players[::new_input].basePosition.row != player[::input_n-1].body.bodySize
::players[::new_input].basePosition.row > player[::input_n].body.bodyWidth
::players[::new_input].basePosition.row != player[::input_n-1].body.bodyWidth
::players[::new_input].basePosition.row > player[::input_n].body.bodyHeight
::players[::new_input].basePosition.row > player[::input_n-1].body.bodyHeight
::players[::new_input].basePosition.row > player[::input_n].body.color
::players[::new_input].basePosition.row > player[::input_n-1].body.color
::players[::new_input].basePosition.row != player[::input_n].basePosition.col
::players[::new_input].basePosition.row != player[::input_n-1].basePosition.col
::players[::new_input].basePosition.row > player[::input_n].impulse[0][0]
::players[::new_input].basePosition.row > player[::input_n].impulse[1][0]
::players[::new_input].basePosition.row > player[::input_n-1].impulse[1][0]
::players[::new_input].basePosition.row > player[::input_n].impulse[3][0]
::players[::new_input].basePosition.row > player[::input_n].impulse[5][0]
::players[::new_input].basePosition.row > player[::input_n].impulse[7][0]
::players[::new_input].basePosition.row > player[::input_n-1].direction
::players[::new_input].basePosition.row >= player[::input_n].stepCounter
::players[::new_input].basePosition.row > player[::input_n-1].stepCounter
::players[::new_input].basePosition.row < player[::new_input].body.bodyPoints->aspect
::players[::new_input].basePosition.row != player[::new_input].body.bodySize
::players[::new_input].basePosition.row != player[::new_input].body.bodyWidth
::players[::new_input].basePosition.row > player[::new_input].body.bodyHeight
::players[::new_input].basePosition.row > player[::new_input].body.color
::players[::new_input].basePosition.row != player[::new_input].basePosition.col
::players[::new_input].basePosition.row > player[::new_input].impulse[1][0]
::players[::new_input].basePosition.row > player[::new_input].impulse[3][0]
::players[::new_input].basePosition.row > player[::new_input].impulse[5][0]
::players[::new_input].basePosition.row > player[::new_input].direction
::players[::new_input].basePosition.row > player[::new_input].stepCounter
::players[::new_input].direction < ::players[::input_n].stepCounter
::players[::new_input].direction != ::players[::new_input].stepCounter
::players[::new_input].direction >= player[::input_n-1].body.type
::players[::new_input].direction != player[::input_n].body.bodyPoints->aspect
::players[::new_input].direction < player[::input_n-1].body.bodyPoints->aspect
::players[::new_input].direction <= player[::input_n-1].body.bodyMapsSize
::players[::new_input].direction <= player[::input_n-1].body.bodySize
::players[::new_input].direction != player[::input_n-1].body.bodyWidth
::players[::new_input].direction != player[::input_n-1].body.bodyHeight
::players[::new_input].direction <= player[::input_n-1].body.color
::players[::new_input].direction < player[::input_n-1].basePosition.col
::players[::new_input].direction != player[::input_n].basePosition.row
::players[::new_input].direction >= player[::input_n].impulse[1][0]
::players[::new_input].direction >= player[::input_n].impulse[3][0]
::players[::new_input].direction >= player[::input_n].impulse[5][0]
::players[::new_input].direction >= player[::input_n].impulse[7][0]
::players[::new_input].direction <= player[::input_n-1].direction
::players[::new_input].direction != player[::input_n].stepCounter
::players[::new_input].direction <= player[::input_n-1].stepCounter
::players[::new_input].direction < player[::new_input].body.bodyPoints->aspect
::players[::new_input].direction <= player[::new_input].body.bodySize
::players[::new_input].direction <= player[::new_input].body.color
::players[::new_input].direction <= player[::new_input].basePosition.col
::players[::new_input].direction <= player[::new_input].basePosition.row
::players[::new_input].direction >= player[::new_input].impulse[1][0]
::players[::new_input].direction >= player[::new_input].impulse[3][0]
::players[::new_input].direction >= player[::new_input].impulse[5][0]
::players[::new_input].direction <= player[::new_input].direction
::players[::new_input].direction <= player[::new_input].stepCounter
::players[::input_n].stepCounter >= ::players[::new_input].stepCounter
::players[::input_n].stepCounter > player[::input_n].body.type
::players[::input_n].stepCounter > player[::input_n-1].body.type
::players[::input_n].stepCounter > player[::input_n].body.visible
::players[::input_n].stepCounter != player[::input_n].body.bodyPoints->aspect
::players[::input_n].stepCounter < player[::input_n-1].body.bodyPoints->aspect
::players[::input_n].stepCounter > player[::input_n-1].body.bodyMapsSize
::players[::input_n].stepCounter != player[::input_n].body.bodySize
::players[::input_n].stepCounter != player[::input_n-1].body.bodySize
::players[::input_n].stepCounter > player[::input_n].body.bodyWidth
::players[::input_n].stepCounter != player[::input_n-1].body.bodyWidth
::players[::input_n].stepCounter > player[::input_n].body.bodyHeight
::players[::input_n].stepCounter > player[::input_n-1].body.bodyHeight
::players[::input_n].stepCounter > player[::input_n].body.color
::players[::input_n].stepCounter > player[::input_n-1].body.color
::players[::input_n].stepCounter != player[::input_n].basePosition.col
::players[::input_n].stepCounter != player[::input_n-1].basePosition.col
::players[::input_n].stepCounter != player[::input_n].basePosition.row
::players[::input_n].stepCounter > player[::input_n].impulse[0][0]
::players[::input_n].stepCounter > player[::input_n].impulse[1][0]
::players[::input_n].stepCounter > player[::input_n-1].impulse[1][0]
::players[::input_n].stepCounter > player[::input_n].impulse[3][0]
::players[::input_n].stepCounter > player[::input_n].impulse[5][0]
::players[::input_n].stepCounter > player[::input_n].impulse[7][0]
::players[::input_n].stepCounter > player[::input_n-1].direction
::players[::input_n].stepCounter >= player[::input_n].stepCounter
::players[::input_n].stepCounter > player[::input_n-1].stepCounter
::players[::input_n].stepCounter < player[::new_input].body.bodyPoints->aspect
::players[::input_n].stepCounter != player[::new_input].body.bodySize
::players[::input_n].stepCounter != player[::new_input].body.bodyWidth
::players[::input_n].stepCounter > player[::new_input].body.bodyHeight
::players[::input_n].stepCounter > player[::new_input].body.color
::players[::input_n].stepCounter != player[::new_input].basePosition.col
::players[::input_n].stepCounter != player[::new_input].basePosition.row
::players[::input_n].stepCounter > player[::new_input].impulse[1][0]
::players[::input_n].stepCounter > player[::new_input].impulse[3][0]
::players[::input_n].stepCounter > player[::new_input].impulse[5][0]
::players[::input_n].stepCounter > player[::new_input].direction
::players[::input_n].stepCounter >= player[::new_input].stepCounter
::players[::new_input].stepCounter <= player[::input_n].body.bodyPoints->aspect
::players[::new_input].stepCounter < player[::input_n-1].body.bodyPoints->aspect
::players[::new_input].stepCounter != player[::input_n-1].body.bodyMapsSize
::players[::new_input].stepCounter < player[::input_n-1].body.bodySize
::players[::new_input].stepCounter != player[::input_n-1].body.color
::players[::new_input].stepCounter % player[::input_n-1].body.color == 0
::players[::new_input].stepCounter < player[::input_n-1].basePosition.col
::players[::new_input].stepCounter <= player[::input_n].basePosition.row
::players[::new_input].stepCounter != player[::input_n-1].direction
::players[::new_input].stepCounter % player[::input_n-1].direction == 0
::players[::new_input].stepCounter <= player[::input_n].stepCounter
::players[::new_input].stepCounter != player[::input_n-1].stepCounter
::players[::new_input].stepCounter < player[::new_input].body.bodyPoints->aspect
::players[::new_input].stepCounter != player[::new_input].body.bodySize
::players[::new_input].stepCounter % player[::new_input].body.bodySize == 0
::players[::new_input].stepCounter != player[::new_input].body.color
::players[::new_input].stepCounter != player[::new_input].basePosition.col
::players[::new_input].stepCounter < player[::new_input].basePosition.row
::players[::new_input].stepCounter != player[::new_input].direction
::players[::new_input].stepCounter % player[::new_input].stepCounter == 0
::players[::new_input].stepCounter <= player[::new_input].stepCounter
player[::input_n].body.type >= player[::input_n-1].body.type
player[::input_n].body.type < player[::input_n-1].body.bodyPoints->aspect
player[::input_n].body.type <= player[::input_n-1].body.bodyMapsSize
player[::input_n].body.type <= player[::input_n-1].body.bodySize
player[::input_n].body.type != player[::input_n-1].body.bodyWidth
player[::input_n].body.type != player[::input_n-1].body.bodyHeight
player[::input_n].body.type <= player[::input_n-1].body.color
player[::input_n].body.type < player[::input_n-1].basePosition.col
player[::input_n].body.type >= player[::input_n].impulse[1][0]
player[::input_n].body.type >= player[::input_n].impulse[5][0]
player[::input_n].body.type <= player[::input_n-1].direction
player[::input_n].body.type < player[::new_input].body.bodyPoints->aspect
player[::input_n].body.type % player[::new_input].body.bodySize == 0
player[::input_n].body.type != player[::new_input].body.bodyWidth
player[::input_n].body.type != player[::new_input].body.bodyHeight
player[::input_n].body.type != player[::new_input].basePosition.col
player[::input_n].body.type <= player[::new_input].basePosition.row
player[::input_n].body.type >= player[::new_input].impulse[3][0]
player[::input_n-1].body.type <= player[::input_n].body.visible
player[::input_n-1].body.type <= player[::input_n].body.bodyPoints->aspect
player[::input_n-1].body.type < player[::input_n-1].body.bodyPoints->aspect
player[::input_n-1].body.type <= player[::input_n].body.bodySize
player[::input_n-1].body.type % player[::input_n-1].body.bodySize == 0
player[::input_n-1].body.type != player[::input_n-1].body.bodyWidth
player[::input_n-1].body.type != player[::input_n-1].body.bodyHeight
player[::input_n-1].body.type <= player[::input_n-1].body.color
player[::input_n-1].body.type < player[::input_n-1].basePosition.col
player[::input_n-1].body.type >= player[::input_n].impulse[1][0]
player[::input_n-1].body.type >= player[::input_n].impulse[5][0]
player[::input_n-1].body.type <= player[::input_n-1].direction
player[::input_n-1].body.type <= player[::input_n].stepCounter
player[::input_n-1].body.type < player[::new_input].body.bodyPoints->aspect
player[::input_n-1].body.type % player[::new_input].body.bodySize == 0
player[::input_n-1].body.type <= player[::new_input].body.bodySize
player[::input_n-1].body.type <= player[::new_input].body.color
player[::input_n-1].body.type <= player[::new_input].basePosition.col
player[::input_n-1].body.type <= player[::new_input].basePosition.row
player[::input_n-1].body.type >= player[::new_input].impulse[3][0]
player[::input_n-1].body.type <= player[::new_input].direction
player[::input_n-1].body.type <= player[::new_input].stepCounter
player[::input_n].body.visible < player[::input_n-1].body.bodyPoints->aspect
player[::input_n].body.visible <= player[::input_n-1].body.bodyMapsSize
player[::input_n].body.visible <= player[::input_n-1].body.bodySize
player[::input_n].body.visible != player[::input_n-1].body.bodyWidth
player[::input_n].body.visible != player[::input_n-1].body.bodyHeight
player[::input_n].body.visible <= player[::input_n-1].body.color
player[::input_n].body.visible < player[::input_n-1].basePosition.col
player[::input_n].body.visible >= player[::input_n].impulse[1][0]
player[::input_n].body.visible >= player[::input_n-1].impulse[1][0]
player[::input_n].body.visible <= player[::input_n-1].direction
player[::input_n].body.visible <= player[::input_n].stepCounter
player[::input_n].body.visible < player[::new_input].body.bodyPoints->aspect
player[::input_n].body.visible <= player[::new_input].body.bodySize
player[::input_n].body.visible != player[::new_input].body.bodyWidth
player[::input_n].body.visible != player[::new_input].body.bodyHeight
player[::input_n].body.visible != player[::new_input].basePosition.col
player[::input_n].body.visible <= player[::new_input].basePosition.row
player[::input_n].body.visible >= player[::new_input].impulse[1][0]
player[::input_n].body.visible >= player[::new_input].impulse[3][0]
player[::input_n].body.visible <= player[::new_input].stepCounter
player[::input_n].body.bodyPoints->aspect != player[::input_n-1].body.bodyMapsSize
player[::input_n].body.bodyPoints->aspect != player[::input_n-1].body.bodySize
player[::input_n].body.bodyPoints->aspect != player[::input_n-1].body.bodyWidth
player[::input_n].body.bodyPoints->aspect != player[::input_n-1].body.bodyHeight
player[::input_n].body.bodyPoints->aspect != player[::input_n-1].body.color
player[::input_n].body.bodyPoints->aspect != player[::input_n-1].basePosition.col
player[::input_n].body.bodyPoints->aspect >= player[::input_n-1].impulse[1][0]
player[::input_n].body.bodyPoints->aspect != player[::input_n-1].direction
player[::input_n].body.bodyPoints->aspect != player[::input_n-1].stepCounter
player[::input_n].body.bodyPoints->aspect != player[::new_input].body.bodySize
player[::input_n].body.bodyPoints->aspect != player[::new_input].body.bodyWidth
player[::input_n].body.bodyPoints->aspect != player[::new_input].body.bodyHeight
player[::input_n].body.bodyPoints->aspect != player[::new_input].body.color
player[::input_n].body.bodyPoints->aspect != player[::new_input].basePosition.col
player[::input_n].body.bodyPoints->aspect != player[::new_input].basePosition.row
player[::input_n].body.bodyPoints->aspect >= player[::new_input].impulse[1][0]
player[::input_n].body.bodyPoints->aspect >= player[::new_input].impulse[3][0]
player[::input_n].body.bodyPoints->aspect != player[::new_input].impulse[5][0]
player[::input_n].body.bodyPoints->aspect != player[::new_input].direction
player[::input_n].body.bodyPoints->aspect != player[::new_input].stepCounter
player[::input_n-1].body.bodyPoints->aspect > player[::input_n-1].body.bodyMapsSize
player[::input_n-1].body.bodyPoints->aspect > player[::input_n].body.bodySize
player[::input_n-1].body.bodyPoints->aspect > player[::input_n-1].body.bodySize
player[::input_n-1].body.bodyPoints->aspect > player[::input_n].body.bodyWidth
player[::input_n-1].body.bodyPoints->aspect > player[::input_n-1].body.bodyWidth
player[::input_n-1].body.bodyPoints->aspect > player[::input_n].body.bodyHeight
player[::input_n-1].body.bodyPoints->aspect > player[::input_n-1].body.bodyHeight
player[::input_n-1].body.bodyPoints->aspect > player[::input_n].body.color
player[::input_n-1].body.bodyPoints->aspect > player[::input_n-1].body.color
player[::input_n-1].body.bodyPoints->aspect > player[::input_n].basePosition.col
player[::input_n-1].body.bodyPoints->aspect > player[::input_n-1].basePosition.col
player[::input_n-1].body.bodyPoints->aspect > player[::input_n].basePosition.row
player[::input_n-1].body.bodyPoints->aspect > player[::input_n].impulse[0][0]
player[::input_n-1].body.bodyPoints->aspect > player[::input_n].impulse[1][0]
player[::input_n-1].body.bodyPoints->aspect > player[::input_n-1].impulse[1][0]
player[::input_n-1].body.bodyPoints->aspect > player[::input_n].impulse[3][0]
player[::input_n-1].body.bodyPoints->aspect > player[::input_n].impulse[5][0]
player[::input_n-1].body.bodyPoints->aspect > player[::input_n].impulse[7][0]
player[::input_n-1].body.bodyPoints->aspect > player[::input_n-1].direction
player[::input_n-1].body.bodyPoints->aspect > player[::input_n].stepCounter
player[::input_n-1].body.bodyPoints->aspect > player[::input_n-1].stepCounter
player[::input_n-1].body.bodyPoints->aspect >= player[::new_input].body.bodyPoints->aspect
player[::input_n-1].body.bodyPoints->aspect > player[::new_input].body.bodySize
player[::input_n-1].body.bodyPoints->aspect > player[::new_input].body.bodyWidth
player[::input_n-1].body.bodyPoints->aspect > player[::new_input].body.bodyHeight
player[::input_n-1].body.bodyPoints->aspect > player[::new_input].body.color
player[::input_n-1].body.bodyPoints->aspect > player[::new_input].basePosition.col
player[::input_n-1].body.bodyPoints->aspect > player[::new_input].basePosition.row
player[::input_n-1].body.bodyPoints->aspect > player[::new_input].impulse[1][0]
player[::input_n-1].body.bodyPoints->aspect > player[::new_input].impulse[3][0]
player[::input_n-1].body.bodyPoints->aspect > player[::new_input].impulse[5][0]
player[::input_n-1].body.bodyPoints->aspect > player[::new_input].direction
player[::input_n-1].body.bodyPoints->aspect > player[::new_input].stepCounter
player[::input_n-1].body.bodySize % player[::input_n-1].body.bodyMapsSize == 0
player[::input_n-1].body.bodyMapsSize != player[::input_n].body.bodyWidth
player[::input_n-1].body.bodyMapsSize != player[::input_n-1].body.bodyWidth
player[::input_n-1].body.bodyWidth % player[::input_n-1].body.bodyMapsSize == 0
player[::input_n-1].body.bodyMapsSize != player[::input_n].body.bodyHeight
player[::input_n-1].body.bodyHeight % player[::input_n-1].body.bodyMapsSize == 0
player[::input_n-1].body.bodyMapsSize != player[::input_n].body.color
player[::input_n].body.color % player[::input_n-1].body.bodyMapsSize == 0
player[::input_n-1].body.bodyMapsSize != player[::input_n].basePosition.col
player[::input_n].basePosition.col % player[::input_n-1].body.bodyMapsSize == 0
player[::input_n-1].basePosition.col % player[::input_n-1].body.bodyMapsSize == 0
player[::input_n-1].body.bodyMapsSize < player[::input_n-1].basePosition.col
player[::input_n-1].body.bodyMapsSize != player[::input_n].basePosition.row
player[::input_n-1].body.bodyMapsSize >= player[::input_n].impulse[0][0]
player[::input_n-1].body.bodyMapsSize >= player[::input_n].impulse[1][0]
player[::input_n-1].body.bodyMapsSize >= player[::input_n-1].impulse[1][0]
player[::input_n-1].body.bodyMapsSize >= player[::input_n].impulse[3][0]
player[::input_n-1].body.bodyMapsSize >= player[::input_n].impulse[5][0]
player[::input_n-1].body.bodyMapsSize >= player[::input_n].impulse[7][0]
player[::input_n-1].body.bodyMapsSize != player[::input_n].stepCounter
player[::input_n-1].stepCounter % player[::input_n-1].body.bodyMapsSize == 0
player[::input_n-1].body.bodyMapsSize < player[::new_input].body.bodyPoints->aspect
player[::input_n-1].body.bodyMapsSize != player[::new_input].body.bodyWidth
player[::new_input].body.bodyWidth % player[::input_n-1].body.bodyMapsSize == 0
player[::input_n-1].body.bodyMapsSize != player[::new_input].body.bodyHeight
player[::new_input].body.bodyHeight % player[::input_n-1].body.bodyMapsSize == 0
player[::new_input].body.color % player[::input_n-1].body.bodyMapsSize == 0
player[::input_n-1].body.bodyMapsSize != player[::new_input].basePosition.col
player[::new_input].basePosition.col % player[::input_n-1].body.bodyMapsSize == 0
player[::input_n-1].body.bodyMapsSize <= player[::new_input].basePosition.row
player[::input_n-1].body.bodyMapsSize >= player[::new_input].impulse[1][0]
player[::new_input].direction % player[::input_n-1].body.bodyMapsSize == 0
player[::input_n-1].body.bodyMapsSize <= player[::new_input].stepCounter
player[::input_n].body.bodySize <= player[::input_n-1].body.bodySize
player[::input_n].body.bodySize != player[::input_n-1].body.bodyWidth
player[::input_n].body.bodySize != player[::input_n-1].body.bodyHeight
player[::input_n].body.bodySize != player[::input_n-1].basePosition.col
player[::input_n].body.bodySize >= player[::input_n-1].impulse[1][0]
player[::input_n].body.bodySize < player[::new_input].body.bodyPoints->aspect
player[::input_n].body.bodySize <= player[::new_input].body.bodySize
player[::input_n].body.bodySize != player[::new_input].body.bodyWidth
player[::input_n].body.bodySize != player[::new_input].body.bodyHeight
player[::input_n].body.bodySize != player[::new_input].basePosition.col
player[::input_n].body.bodySize >= player[::new_input].impulse[1][0]
player[::input_n].body.bodySize >= player[::new_input].impulse[3][0]
player[::input_n-1].body.bodySize > player[::input_n].body.bodyWidth
player[::input_n-1].body.bodySize > player[::input_n-1].body.bodyWidth
player[::input_n-1].body.bodySize > player[::input_n].body.bodyHeight
player[::input_n-1].body.bodySize > player[::input_n-1].body.bodyHeight
player[::input_n-1].body.bodySize != player[::input_n].body.color
player[::input_n].body.color % player[::input_n-1].body.bodySize == 0
player[::input_n-1].body.bodySize != player[::input_n].basePosition.col
player[::input_n-1].body.bodySize != player[::input_n-1].basePosition.col
player[::input_n-1].body.bodySize != player[::input_n].basePosition.row
player[::input_n-1].body.bodySize >= player[::input_n].impulse[0][0]
player[::input_n-1].body.bodySize >= player[::input_n].impulse[1][0]
player[::input_n].impulse[1][0] % player[::input_n-1].body.bodySize == 0
player[::input_n-1].body.bodySize >= player[::input_n].impulse[3][0]
player[::input_n-1].body.bodySize >= player[::input_n].impulse[5][0]
player[::input_n].impulse[5][0] % player[::input_n-1].body.bodySize == 0
player[::input_n-1].body.bodySize > player[::input_n].impulse[7][0]
player[::input_n-1].body.bodySize != player[::input_n].stepCounter
player[::input_n-1].body.bodySize < player[::new_input].body.bodyPoints->aspect
player[::input_n-1].body.bodySize % player[::new_input].body.bodySize == 0
player[::input_n-1].body.bodySize >= player[::new_input].body.bodySize
player[::input_n-1].body.bodySize > player[::new_input].body.bodyWidth
player[::input_n-1].body.bodySize > player[::new_input].body.bodyHeight
player[::input_n-1].body.bodySize != player[::new_input].basePosition.col
player[::input_n-1].body.bodySize >= player[::new_input].impulse[1][0]
player[::new_input].impulse[3][0] % player[::input_n-1].body.bodySize == 0
player[::input_n].body.bodyWidth <= player[::input_n-1].body.bodyWidth
player[::input_n].body.bodyWidth != player[::input_n-1].body.color
player[::input_n].body.bodyWidth % player[::input_n-1].body.color == 0
player[::input_n].body.bodyWidth <= player[::input_n].basePosition.col
player[::input_n].body.bodyWidth != player[::input_n-1].basePosition.col
player[::input_n].body.bodyWidth % player[::input_n-1].basePosition.col == 0
player[::input_n].body.bodyWidth != player[::input_n-1].direction
player[::input_n].body.bodyWidth % player[::input_n-1].direction == 0
player[::input_n].body.bodyWidth <= player[::input_n].stepCounter
player[::input_n].body.bodyWidth < player[::new_input].body.bodyPoints->aspect
player[::input_n].body.bodyWidth < player[::new_input].body.bodySize
player[::input_n].body.bodyWidth <= player[::new_input].body.bodyWidth
player[::input_n].body.bodyWidth != player[::new_input].basePosition.row
player[::input_n].body.bodyWidth != player[::new_input].stepCounter
player[::input_n].body.bodyWidth % player[::new_input].stepCounter == 0
player[::input_n-1].body.bodyWidth >= player[::input_n].body.bodyHeight
player[::input_n-1].body.bodyWidth != player[::input_n-1].body.color
player[::input_n-1].body.bodyWidth != player[::input_n-1].basePosition.col
player[::input_n-1].body.bodyWidth >= player[::input_n].impulse[7][0]
player[::input_n-1].body.bodyWidth != player[::input_n-1].direction
player[::input_n-1].body.bodyWidth != player[::input_n].stepCounter
player[::input_n-1].body.bodyWidth != player[::input_n-1].stepCounter
player[::input_n-1].body.bodyWidth < player[::new_input].body.bodyPoints->aspect
player[::input_n-1].body.bodyWidth != player[::new_input].body.bodySize
player[::input_n-1].body.bodyWidth >= player[::new_input].body.bodyWidth
player[::input_n-1].body.bodyWidth >= player[::new_input].body.bodyHeight
player[::input_n-1].body.bodyWidth != player[::new_input].body.color
player[::input_n-1].body.bodyWidth != player[::new_input].basePosition.col
player[::input_n-1].body.bodyWidth != player[::new_input].basePosition.row
player[::input_n-1].body.bodyWidth != player[::new_input].direction
player[::input_n-1].body.bodyWidth != player[::new_input].stepCounter
player[::input_n].body.bodyHeight <= player[::input_n-1].body.bodyHeight
player[::input_n].body.bodyHeight != player[::input_n-1].body.color
player[::input_n].body.bodyHeight % player[::input_n-1].body.color == 0
player[::input_n].body.bodyHeight <= player[::input_n].basePosition.col
player[::input_n].body.bodyHeight % player[::input_n-1].basePosition.col == 0
player[::input_n].body.bodyHeight <= player[::input_n-1].basePosition.col
player[::input_n].body.bodyHeight != player[::input_n-1].direction
player[::input_n].body.bodyHeight % player[::input_n-1].direction == 0
player[::input_n].body.bodyHeight <= player[::input_n].stepCounter
player[::input_n].body.bodyHeight <= player[::input_n-1].stepCounter
player[::input_n].body.bodyHeight < player[::new_input].body.bodyPoints->aspect
player[::input_n].body.bodyHeight < player[::new_input].body.bodySize
player[::input_n].body.bodyHeight <= player[::new_input].body.bodyWidth
player[::input_n].body.bodyHeight <= player[::new_input].body.bodyHeight
player[::input_n].body.bodyHeight <= player[::new_input].basePosition.col
player[::input_n].body.bodyHeight < player[::new_input].basePosition.row
player[::input_n].body.bodyHeight % player[::new_input].stepCounter == 0
player[::input_n].body.bodyHeight <= player[::new_input].stepCounter
player[::input_n-1].body.bodyHeight != player[::input_n-1].body.color
player[::input_n-1].body.bodyHeight != player[::input_n-1].basePosition.col
player[::input_n-1].body.bodyHeight >= player[::input_n].impulse[7][0]
player[::input_n-1].body.bodyHeight != player[::input_n-1].direction
player[::input_n-1].body.bodyHeight != player[::input_n].stepCounter
player[::input_n-1].body.bodyHeight != player[::input_n-1].stepCounter
player[::input_n-1].body.bodyHeight < player[::new_input].body.bodyPoints->aspect
player[::input_n-1].body.bodyHeight != player[::new_input].body.bodySize
player[::input_n-1].body.bodyHeight >= player[::new_input].body.bodyHeight
player[::input_n-1].body.bodyHeight != player[::new_input].body.color
player[::input_n-1].body.bodyHeight != player[::new_input].basePosition.col
player[::input_n-1].body.bodyHeight != player[::new_input].basePosition.row
player[::input_n-1].body.bodyHeight != player[::new_input].direction
player[::input_n-1].body.bodyHeight != player[::new_input].stepCounter
player[::input_n].body.color != player[::input_n-1].body.color
player[::input_n].body.color <= player[::input_n-1].basePosition.col
player[::input_n].body.color >= player[::input_n].impulse[1][0]
player[::input_n].body.color <= player[::input_n].stepCounter
player[::input_n].body.color < player[::new_input].body.bodyPoints->aspect
player[::input_n].body.color != player[::new_input].body.bodySize
player[::input_n].body.color % player[::new_input].body.bodySize == 0
player[::input_n].body.color <= player[::new_input].basePosition.col
player[::input_n].body.color != player[::new_input].basePosition.row
player[::input_n].body.color >= player[::new_input].impulse[3][0]
player[::input_n-1].body.color != player[::input_n].basePosition.col
player[::input_n-1].body.color < player[::input_n-1].basePosition.col
player[::input_n-1].body.color > player[::input_n].impulse[0][0]
player[::input_n-1].body.color > player[::input_n].impulse[1][0]
player[::input_n-1].body.color > player[::input_n-1].impulse[1][0]
player[::input_n-1].body.color >= player[::input_n].impulse[3][0]
player[::input_n-1].body.color > player[::input_n].impulse[5][0]
player[::input_n-1].body.color > player[::input_n].impulse[7][0]
player[::input_n-1].body.color != player[::input_n].stepCounter
player[::input_n-1].body.color != player[::input_n-1].stepCounter
player[::input_n-1].body.color < player[::new_input].body.bodyPoints->aspect
player[::input_n-1].body.color != player[::new_input].body.bodyWidth
player[::input_n-1].body.color != player[::new_input].body.bodyHeight
player[::input_n-1].body.color >= player[::new_input].body.color
player[::new_input].body.color % player[::input_n-1].body.color == 0
player[::input_n-1].body.color != player[::new_input].basePosition.col
player[::input_n-1].body.color > player[::new_input].impulse[1][0]
player[::input_n-1].body.color >= player[::new_input].impulse[3][0]
player[::input_n-1].body.color > player[::new_input].impulse[5][0]
player[::input_n-1].body.color != player[::new_input].stepCounter
player[::input_n].basePosition.col != player[::input_n-1].basePosition.col
player[::input_n].basePosition.col >= player[::input_n].impulse[1][0]
player[::input_n].basePosition.col != player[::input_n-1].direction
player[::input_n].basePosition.col < player[::new_input].body.bodyPoints->aspect
player[::input_n].basePosition.col != player[::new_input].body.bodySize
player[::input_n].basePosition.col != player[::new_input].basePosition.row
player[::input_n].basePosition.col >= player[::new_input].impulse[3][0]
player[::input_n].basePosition.col != player[::new_input].stepCounter
player[::input_n-1].basePosition.col != player[::input_n].basePosition.row
player[::input_n-1].basePosition.col > player[::input_n].impulse[0][0]
player[::input_n-1].basePosition.col > player[::input_n].impulse[1][0]
player[::input_n-1].basePosition.col > player[::input_n-1].impulse[1][0]
player[::input_n-1].basePosition.col > player[::input_n].impulse[3][0]
player[::input_n-1].basePosition.col > player[::input_n].impulse[5][0]
player[::input_n-1].basePosition.col > player[::input_n].impulse[7][0]
player[::input_n-1].basePosition.col != player[::input_n-1].direction
player[::input_n-1].basePosition.col != player[::new_input].body.bodyPoints->aspect
player[::input_n-1].basePosition.col != player[::new_input].body.bodySize
player[::input_n-1].basePosition.col != player[::new_input].body.bodyWidth
player[::input_n-1].basePosition.col != player[::new_input].body.bodyHeight
player[::input_n-1].basePosition.col > player[::new_input].body.color
player[::input_n-1].basePosition.col >= player[::new_input].basePosition.col
player[::new_input].basePosition.col % player[::input_n-1].basePosition.col == 0
player[::input_n-1].basePosition.col != player[::new_input].basePosition.row
player[::input_n-1].basePosition.col > player[::new_input].impulse[1][0]
player[::input_n-1].basePosition.col > player[::new_input].impulse[3][0]
player[::input_n-1].basePosition.col > player[::new_input].impulse[5][0]
player[::input_n-1].basePosition.col != player[::new_input].direction
player[::input_n].basePosition.row != player[::input_n-1].direction
player[::input_n].basePosition.row != player[::input_n-1].stepCounter
player[::input_n].basePosition.row < player[::new_input].body.bodyPoints->aspect
player[::input_n].basePosition.row != player[::new_input].body.bodySize
player[::input_n].basePosition.row % player[::new_input].body.bodySize == 0
player[::input_n].basePosition.row != player[::new_input].basePosition.col
player[::input_n].basePosition.row >= player[::new_input].impulse[3][0]
player[::input_n].basePosition.row != player[::new_input].direction
player[::input_n].basePosition.row != player[::new_input].stepCounter
player[::input_n].impulse[0][0] <= player[::input_n-1].impulse[1][0]
player[::input_n].impulse[0][0] % player[::input_n-1].direction == 0
player[::input_n].impulse[0][0] <= player[::input_n-1].direction
player[::input_n].impulse[0][0] != player[::input_n-1].stepCounter
player[::input_n].impulse[0][0] < player[::new_input].body.bodyPoints->aspect
player[::input_n].impulse[0][0] % player[::new_input].body.bodySize == 0
player[::input_n].impulse[0][0] <= player[::new_input].body.bodySize
player[::input_n].impulse[0][0] != player[::new_input].body.color
player[::input_n].impulse[0][0] != player[::new_input].basePosition.col
player[::input_n].impulse[0][0] < player[::new_input].basePosition.row
player[::input_n].impulse[0][0] < player[::new_input].stepCounter
player[::input_n].impulse[1][0] < player[::input_n-1].direction
player[::input_n].impulse[1][0] <= player[::input_n].stepCounter
player[::input_n].impulse[1][0] <= player[::input_n-1].stepCounter
player[::input_n].impulse[1][0] < player[::new_input].body.bodyPoints->aspect
player[::input_n].impulse[1][0] % player[::new_input].body.bodySize == 0
player[::input_n].impulse[1][0] <= player[::new_input].body.bodySize
player[::input_n].impulse[1][0] <= player[::new_input].body.color
player[::input_n].impulse[1][0] <= player[::new_input].basePosition.col
player[::input_n].impulse[1][0] < player[::new_input].basePosition.row
player[::input_n].impulse[1][0] <= player[::new_input].impulse[3][0]
player[::input_n].impulse[1][0] <= player[::new_input].direction
player[::input_n].impulse[1][0] < player[::new_input].stepCounter
player[::input_n-1].impulse[1][0] >= player[::input_n].impulse[7][0]
player[::input_n-1].impulse[1][0] % player[::input_n-1].direction == 0
player[::input_n-1].impulse[1][0] <= player[::input_n-1].direction
player[::input_n-1].impulse[1][0] <= player[::input_n].stepCounter
player[::input_n-1].impulse[1][0] != player[::input_n-1].stepCounter
player[::input_n-1].impulse[1][0] < player[::new_input].body.bodyPoints->aspect
player[::input_n-1].impulse[1][0] <= player[::new_input].body.bodySize
player[::input_n-1].impulse[1][0] != player[::new_input].body.color
player[::input_n-1].impulse[1][0] != player[::new_input].basePosition.col
player[::input_n-1].impulse[1][0] < player[::new_input].basePosition.row
player[::input_n-1].impulse[1][0] >= player[::new_input].impulse[1][0]
player[::input_n-1].impulse[1][0] < player[::new_input].stepCounter
player[::input_n].impulse[3][0] >= player[::input_n].impulse[7][0]
player[::input_n].impulse[3][0] <= player[::input_n-1].direction
player[::input_n].impulse[3][0] <= player[::input_n-1].stepCounter
player[::input_n].impulse[3][0] < player[::new_input].body.bodyPoints->aspect
player[::input_n].impulse[3][0] <= player[::new_input].body.bodySize
player[::input_n].impulse[3][0] <= player[::new_input].body.color
player[::input_n].impulse[3][0] <= player[::new_input].basePosition.col
player[::input_n].impulse[3][0] < player[::new_input].basePosition.row
player[::input_n].impulse[3][0] <= player[::new_input].direction
player[::input_n].impulse[3][0] < player[::new_input].stepCounter
player[::input_n].impulse[5][0] < player[::input_n-1].direction
player[::input_n].impulse[5][0] <= player[::input_n-1].stepCounter
player[::input_n].impulse[5][0] < player[::new_input].body.bodyPoints->aspect
player[::input_n].impulse[5][0] % player[::new_input].body.bodySize == 0
player[::input_n].impulse[5][0] <= player[::new_input].body.bodySize
player[::input_n].impulse[5][0] <= player[::new_input].body.color
player[::input_n].impulse[5][0] <= player[::new_input].basePosition.col
player[::input_n].impulse[5][0] % player[::new_input].basePosition.row == 0
player[::input_n].impulse[5][0] <= player[::new_input].basePosition.row
player[::input_n].impulse[5][0] <= player[::new_input].impulse[5][0]
player[::input_n].impulse[5][0] <= player[::new_input].direction
player[::input_n].impulse[5][0] % player[::new_input].stepCounter == 0
player[::input_n].impulse[5][0] <= player[::new_input].stepCounter
player[::input_n].impulse[7][0] % player[::input_n-1].direction == 0
player[::input_n].impulse[7][0] <= player[::input_n-1].direction
player[::input_n].impulse[7][0] <= player[::input_n-1].stepCounter
player[::input_n].impulse[7][0] < player[::new_input].body.bodyPoints->aspect
player[::input_n].impulse[7][0] < player[::new_input].body.bodySize
player[::input_n].impulse[7][0] <= player[::new_input].body.bodyWidth
player[::input_n].impulse[7][0] <= player[::new_input].body.bodyHeight
player[::input_n].impulse[7][0] <= player[::new_input].body.color
player[::input_n].impulse[7][0] <= player[::new_input].basePosition.col
player[::input_n].impulse[7][0] < player[::new_input].basePosition.row
player[::input_n].impulse[7][0] <= player[::new_input].impulse[1][0]
player[::input_n].impulse[7][0] <= player[::new_input].direction
player[::input_n].impulse[7][0] < player[::new_input].stepCounter
player[::input_n-1].direction != player[::input_n].stepCounter
player[::input_n-1].direction != player[::input_n-1].stepCounter
player[::input_n-1].direction < player[::new_input].body.bodyPoints->aspect
player[::input_n-1].direction != player[::new_input].body.bodyWidth
player[::input_n-1].direction != player[::new_input].body.bodyHeight
player[::input_n-1].direction != player[::new_input].basePosition.col
player[::input_n-1].direction != player[::new_input].basePosition.row
player[::input_n-1].direction >= player[::new_input].impulse[1][0]
player[::new_input].impulse[1][0] % player[::input_n-1].direction == 0
player[::input_n-1].direction > player[::new_input].impulse[3][0]
player[::input_n-1].direction > player[::new_input].impulse[5][0]
player[::input_n-1].direction >= player[::new_input].direction
player[::new_input].direction % player[::input_n-1].direction == 0
player[::input_n-1].direction != player[::new_input].stepCounter
player[::input_n].stepCounter < player[::new_input].body.bodyPoints->aspect
player[::input_n].stepCounter != player[::new_input].body.bodySize
player[::input_n].stepCounter != player[::new_input].body.bodyWidth
player[::input_n].stepCounter != player[::new_input].body.bodyHeight
player[::input_n].stepCounter != player[::new_input].body.color
player[::input_n].stepCounter != player[::new_input].basePosition.row
player[::input_n].stepCounter >= player[::new_input].impulse[1][0]
player[::input_n].stepCounter >= player[::new_input].impulse[3][0]
player[::input_n].stepCounter != player[::new_input].impulse[5][0]
player[::input_n].stepCounter != player[::new_input].direction
player[::input_n-1].stepCounter < player[::new_input].body.bodyPoints->aspect
player[::input_n-1].stepCounter >= player[::new_input].impulse[1][0]
player[::input_n-1].stepCounter % player[::new_input].stepCounter == 0
player[::input_n-1].stepCounter <= player[::new_input].stepCounter
player[::new_input].body.bodyPoints->aspect > player[::new_input].body.bodySize
player[::new_input].body.bodyPoints->aspect > player[::new_input].body.bodyWidth
player[::new_input].body.bodyPoints->aspect > player[::new_input].body.bodyHeight
player[::new_input].body.bodyPoints->aspect > player[::new_input].body.color
player[::new_input].body.bodyPoints->aspect > player[::new_input].basePosition.col
player[::new_input].body.bodyPoints->aspect > player[::new_input].basePosition.row
player[::new_input].body.bodyPoints->aspect > player[::new_input].impulse[1][0]
player[::new_input].body.bodyPoints->aspect > player[::new_input].impulse[3][0]
player[::new_input].body.bodyPoints->aspect > player[::new_input].impulse[5][0]
player[::new_input].body.bodyPoints->aspect > player[::new_input].direction
player[::new_input].body.bodyPoints->aspect > player[::new_input].stepCounter
player[::new_input].body.bodySize > player[::new_input].body.bodyWidth
player[::new_input].body.bodySize > player[::new_input].body.bodyHeight
player[::new_input].body.bodySize != player[::new_input].basePosition.col
player[::new_input].impulse[3][0] % player[::new_input].body.bodySize == 0
player[::new_input].body.bodyWidth != player[::new_input].basePosition.row
player[::new_input].body.bodyWidth != player[::new_input].stepCounter
player[::new_input].body.bodyHeight != player[::new_input].basePosition.row
player[::new_input].body.bodyHeight != player[::new_input].stepCounter
player[::new_input].body.color >= player[::new_input].impulse[1][0]
player[::new_input].body.color >= player[::new_input].impulse[3][0]
player[::new_input].body.color != player[::new_input].stepCounter
player[::new_input].basePosition.col != player[::new_input].basePosition.row
player[::new_input].basePosition.col >= player[::new_input].impulse[1][0]
player[::new_input].basePosition.row > player[::new_input].impulse[1][0]
player[::new_input].basePosition.row > player[::new_input].impulse[3][0]
player[::new_input].basePosition.row != player[::new_input].direction
player[::new_input].impulse[1][0] <= player[::new_input].direction
player[::new_input].impulse[1][0] < player[::new_input].stepCounter
player[::new_input].impulse[3][0] <= player[::new_input].direction
player[::new_input].impulse[3][0] < player[::new_input].stepCounter
player[::new_input].impulse[5][0] <= player[::new_input].direction
player[::new_input].direction != player[::new_input].stepCounter
11 * ::new_input - player[::input_n-1].body.bodyPoints->aspect + player[::new_input].body.bodyPoints->aspect == 0
3 * ::new_input - player[::input_n-1].body.color + player[::new_input].body.color == 0
40 * ::new_input - player[::input_n-1].basePosition.col + player[::new_input].basePosition.col == 0
9 * ::new_input + player[::input_n-1].stepCounter - player[::new_input].stepCounter == 0
::players[::new_input].body.bodyPoints->aspect + player[::input_n-1].body.bodyPoints->aspect - player[::new_input].body.bodyPoints->aspect - 46 == 0
3 * ::players[::new_input].body.bodyPoints->aspect + 11 * player[::input_n-1].body.color - 11 * player[::new_input].body.color - 138 == 0
40 * ::players[::new_input].body.bodyPoints->aspect + 11 * player[::input_n-1].basePosition.col - 11 * player[::new_input].basePosition.col - 1840 == 0
9 * ::players[::new_input].body.bodyPoints->aspect - 11 * player[::input_n-1].stepCounter + 11 * player[::new_input].stepCounter - 414 == 0
11 * ::players[::new_input].body.bodyMapsSize + 3 * player[::input_n-1].body.bodyPoints->aspect - 3 * player[::new_input].body.bodyPoints->aspect - 44 == 0
::players[::new_input].body.bodyMapsSize + player[::input_n-1].body.color - player[::new_input].body.color - 4 == 0
40 * ::players[::new_input].body.bodyMapsSize + 3 * player[::input_n-1].basePosition.col - 3 * player[::new_input].basePosition.col - 160 == 0
3 * ::players[::new_input].body.bodyMapsSize - player[::input_n-1].stepCounter + player[::new_input].stepCounter - 12 == 0
11 * ::players[::new_input].body.bodySize + 27 * player[::input_n-1].body.bodyPoints->aspect - 27 * player[::new_input].body.bodyPoints->aspect - 308 == 0
::players[::new_input].body.bodySize + 9 * player[::input_n-1].body.color - 9 * player[::new_input].body.color - 28 == 0
40 * ::players[::new_input].body.bodySize + 27 * player[::input_n-1].basePosition.col - 27 * player[::new_input].basePosition.col - 1120 == 0
::players[::new_input].body.bodySize - 3 * player[::input_n-1].stepCounter + 3 * player[::new_input].stepCounter - 28 == 0
11 * ::players[::new_input].body.bodyWidth + 8 * player[::input_n-1].body.bodyPoints->aspect - 8 * player[::new_input].body.bodyPoints->aspect - 88 == 0
3 * ::players[::new_input].body.bodyWidth + 8 * player[::input_n-1].body.color - 8 * player[::new_input].body.color - 24 == 0
5 * ::players[::new_input].body.bodyWidth + player[::input_n-1].basePosition.col - player[::new_input].basePosition.col - 40 == 0
9 * ::players[::new_input].body.bodyWidth - 8 * player[::input_n-1].stepCounter + 8 * player[::new_input].stepCounter - 72 == 0
11 * ::players[::new_input].body.bodyHeight + 4 * player[::input_n-1].body.bodyPoints->aspect - 4 * player[::new_input].body.bodyPoints->aspect - 44 == 0
3 * ::players[::new_input].body.bodyHeight + 4 * player[::input_n-1].body.color - 4 * player[::new_input].body.color - 12 == 0
10 * ::players[::new_input].body.bodyHeight + player[::input_n-1].basePosition.col - player[::new_input].basePosition.col - 40 == 0
9 * ::players[::new_input].body.bodyHeight - 4 * player[::input_n-1].stepCounter + 4 * player[::new_input].stepCounter - 36 == 0
11 * ::players[::new_input].body.color + 3 * player[::input_n-1].body.bodyPoints->aspect - 3 * player[::new_input].body.bodyPoints->aspect - 33 == 0
::players[::new_input].body.color + player[::input_n-1].body.color - player[::new_input].body.color - 3 == 0
40 * ::players[::new_input].body.color + 3 * player[::input_n-1].basePosition.col - 3 * player[::new_input].basePosition.col - 120 == 0
3 * ::players[::new_input].body.color - player[::input_n-1].stepCounter + player[::new_input].stepCounter - 9 == 0
11 * ::players[::new_input].basePosition.col + 40 * player[::input_n-1].body.bodyPoints->aspect - 40 * player[::new_input].body.bodyPoints->aspect - 440 == 0
3 * ::players[::new_input].basePosition.col + 40 * player[::input_n-1].body.color - 40 * player[::new_input].body.color - 120 == 0
::players[::new_input].basePosition.col + player[::input_n-1].basePosition.col - player[::new_input].basePosition.col - 40 == 0
9 * ::players[::new_input].basePosition.col - 40 * player[::input_n-1].stepCounter + 40 * player[::new_input].stepCounter - 360 == 0
11 * ::players[::new_input].basePosition.row - player[::input_n-1].body.bodyPoints->aspect + player[::new_input].body.bodyPoints->aspect - 99 == 0
3 * ::players[::new_input].basePosition.row - player[::input_n-1].body.color + player[::new_input].body.color - 27 == 0
40 * ::players[::new_input].basePosition.row - player[::input_n-1].basePosition.col + player[::new_input].basePosition.col - 360 == 0
9 * ::players[::new_input].basePosition.row + player[::input_n-1].stepCounter - player[::new_input].stepCounter - 81 == 0
11 * ::players[::new_input].direction + player[::input_n-1].body.bodyPoints->aspect - player[::new_input].body.bodyPoints->aspect - 11 == 0
3 * ::players[::new_input].direction + player[::input_n-1].body.color - player[::new_input].body.color - 3 == 0
40 * ::players[::new_input].direction + player[::input_n-1].basePosition.col - player[::new_input].basePosition.col - 40 == 0
9 * ::players[::new_input].direction - player[::input_n-1].stepCounter + player[::new_input].stepCounter - 9 == 0
11 * ::players[::new_input].stepCounter - 9 * player[::input_n-1].body.bodyPoints->aspect + 9 * player[::new_input].body.bodyPoints->aspect == 0
::players[::new_input].stepCounter - 3 * player[::input_n-1].body.color + 3 * player[::new_input].body.color == 0
40 * ::players[::new_input].stepCounter - 9 * player[::input_n-1].basePosition.col + 9 * player[::new_input].basePosition.col == 0
::players[::new_input].stepCounter + player[::input_n-1].stepCounter - player[::new_input].stepCounter == 0
52 * player[::input_n].body.visible - 2 * player[::new_input].body.color + player[::new_input].basePosition.col - 52 == 0
3 * player[::input_n-1].body.bodyPoints->aspect - 11 * player[::input_n-1].body.bodyMapsSize - 3 * player[::new_input].body.bodyPoints->aspect + 11 == 0
player[::input_n-1].body.bodyMapsSize - player[::input_n-1].body.color + player[::new_input].body.color - 1 == 0
40 * player[::input_n-1].body.bodyMapsSize - 3 * player[::input_n-1].basePosition.col + 3 * player[::new_input].basePosition.col - 40 == 0
3 * player[::input_n-1].body.bodyMapsSize + player[::input_n-1].stepCounter - player[::new_input].stepCounter - 3 == 0
5 * player[::input_n].body.bodyWidth + 8 * player[::input_n].body.color - 4 * player[::input_n].basePosition.col == 0
5 * player[::input_n].body.bodyHeight + 4 * player[::input_n].body.color - 2 * player[::input_n].basePosition.col == 0
2 * player[::input_n].body.color - player[::input_n].basePosition.col + 10 * player[::input_n].impulse[7][0] == 0
===========================================================================
..movePlayer():::EXIT
::crashedPlayers == orig(::crashedPlayers)
::crashedPlayers[] == orig(::crashedPlayers[])
::crashedPlayers[].start == ::crashedPlayers[].end
::crashedPlayers[].start == ::playerSpace[].playerNodes->start->prev
::crashedPlayers[].start == ::playerSpace[].playerNodes->end->next
::crashedPlayers[].start == ::playerSpace[].guideNodes->start
::crashedPlayers[].start == ::playerSpace[].guideNodes->end
::crashedPlayers[].start == space[].playerNodes->start->prev
::crashedPlayers[].start == space[].playerNodes->end->next
::crashedPlayers[].start == space[].guideNodes->start
::crashedPlayers[].start == space[].guideNodes->end
::crashedPlayers[].start == orig(::crashedPlayers[].start)
::crashedPlayers[].start == orig(::crashedPlayers[].end)
::crashedPlayers[].start == orig(::playerSpace[].playerNodes->start->prev)
::crashedPlayers[].start == orig(::playerSpace[].playerNodes->end->next)
::crashedPlayers[].start == orig(::playerSpace[].guideNodes->start)
::crashedPlayers[].start == orig(::playerSpace[].guideNodes->end)
::crashedPlayers[].start == orig(space[].playerNodes->start->prev)
::crashedPlayers[].start == orig(space[].playerNodes->end->next)
::crashedPlayers[].start == orig(space[].guideNodes->start)
::crashedPlayers[].start == orig(space[].guideNodes->end)
::playerSpace == orig(::playerSpace)
::playerSpace == orig(space)
::playerSpace[] == space[]
::playerSpace[] == orig(::playerSpace[])
::playerSpace[] == orig(space[])
::playerSpace[].playerNodes == space[].playerNodes
::playerSpace[].playerNodes == orig(::playerSpace[].playerNodes)
::playerSpace[].playerNodes == orig(space[].playerNodes)
::playerSpace[].playerNodes[0] == space[].playerNodes[0]
::playerSpace[].playerNodes[0] == orig(::playerSpace[].playerNodes[0])
::playerSpace[].playerNodes[0] == orig(space[].playerNodes[0])
::playerSpace[].playerNodes->start == space[].playerNodes->start
::playerSpace[].playerNodes->start == orig(::playerSpace[].playerNodes->start)
::playerSpace[].playerNodes->start == orig(space[].playerNodes->start)
::playerSpace[].playerNodes->start[0] == space[].playerNodes->start[0]
::playerSpace[].playerNodes->start[0] == orig(::playerSpace[].playerNodes->start[0])
::playerSpace[].playerNodes->start[0] == orig(space[].playerNodes->start[0])
::playerSpace[].playerNodes->start->next == space[].playerNodes->start->next
::playerSpace[].playerNodes->start->next == orig(::playerSpace[].playerNodes->start->next)
::playerSpace[].playerNodes->start->next == orig(space[].playerNodes->start->next)
::playerSpace[].playerNodes->start->next[0] == space[].playerNodes->start->next[0]
::playerSpace[].playerNodes->start->next[0] == orig(::playerSpace[].playerNodes->start->next[0])
::playerSpace[].playerNodes->start->next[0] == orig(space[].playerNodes->start->next[0])
::playerSpace[].playerNodes->start->data == space[].playerNodes->start->data
::playerSpace[].playerNodes->start->data == orig(::playerSpace[].playerNodes->start->data)
::playerSpace[].playerNodes->start->data == orig(space[].playerNodes->start->data)
::playerSpace[].playerNodes->end == space[].playerNodes->end
::playerSpace[].playerNodes->end == orig(::playerSpace[].playerNodes->end)
::playerSpace[].playerNodes->end == orig(space[].playerNodes->end)
::playerSpace[].playerNodes->end[0] == space[].playerNodes->end[0]
::playerSpace[].playerNodes->end[0] == orig(::playerSpace[].playerNodes->end[0])
::playerSpace[].playerNodes->end[0] == orig(space[].playerNodes->end[0])
::playerSpace[].playerNodes->end->data == space[].playerNodes->end->data
::playerSpace[].playerNodes->end->data == orig(::playerSpace[].playerNodes->end->data)
::playerSpace[].playerNodes->end->data == orig(space[].playerNodes->end->data)
::playerSpace[].playerNodes->end->prev == space[].playerNodes->end->prev
::playerSpace[].playerNodes->end->prev == orig(::playerSpace[].playerNodes->end->prev)
::playerSpace[].playerNodes->end->prev == orig(space[].playerNodes->end->prev)
::playerSpace[].playerNodes->end->prev[0] == space[].playerNodes->end->prev[0]
::playerSpace[].playerNodes->end->prev[0] == orig(::playerSpace[].playerNodes->end->prev[0])
::playerSpace[].playerNodes->end->prev[0] == orig(space[].playerNodes->end->prev[0])
::playerSpace[].playerMap == space[].playerMap
::playerSpace[].playerMap == orig(::playerSpace[].playerMap)
::playerSpace[].playerMap == orig(space[].playerMap)
::playerSpace[].guideNodes == space[].guideNodes
::playerSpace[].guideNodes == orig(::playerSpace[].guideNodes)
::playerSpace[].guideNodes == orig(space[].guideNodes)
::playerSpace[].guideNodes[0] == space[].guideNodes[0]
::playerSpace[].guideNodes[0] == orig(::playerSpace[].guideNodes[0])
::playerSpace[].guideNodes[0] == orig(space[].guideNodes[0])
::playerSpace[].groundMap == space[].groundMap
::playerSpace[].groundMap == orig(::playerSpace[].groundMap)
::playerSpace[].groundMap == orig(space[].groundMap)
::playerSpace[].actionGroup == space[].actionGroup
::playerSpace[].actionGroup == orig(::playerSpace[].actionGroup)
::playerSpace[].actionGroup == orig(space[].actionGroup)
::playerSpace[].actionGroup[0] == space[].actionGroup[0]
::playerSpace[].actionGroup[0] == orig(::playerSpace[].actionGroup[0])
::playerSpace[].actionGroup[0] == orig(space[].actionGroup[0])
::playerSpace[].actionGroup->numActions == space[].actionGroup->numActions
::playerSpace[].actionGroup->numActions == orig(::playerSpace[].actionGroup->numActions)
::playerSpace[].actionGroup->numActions == orig(space[].actionGroup->numActions)
::players == orig(::players)
::players == ::players[::new_input].body.bodyPoints->player
::players[] == orig(::players[])
::players[].id == ::players[].type
::players[].id == ::players[].retired
::players[].id == ::players[].impulse[2][0]
::players[].id == ::players[].impulse[4][0]
::players[].id == ::players[].impulse[6][0]
::players[].id == ::players[].impulse[8][0]
::players[].id == orig(::players[].id)
::players[].id == orig(::players[].type)
::players[].id == orig(::players[].retired)
::players[].id == orig(::players[].impulse[2][0])
::players[].id == orig(::players[].impulse[4][0])
::players[].id == orig(::players[].impulse[6][0])
::players[].id == orig(::players[].impulse[8][0])
::players[].body == orig(::players[].body)
::players[].body.type == orig(::players[].body.type)
::players[].body.visible == ::players[].body.tangible
::players[].body.visible == orig(::players[].body.visible)
::players[].body.visible == orig(::players[].body.tangible)
::players[].body.bodyPoints == orig(::players[].body.bodyPoints)
::players[].body.bodyPoints[0] == orig(::players[].body.bodyPoints[0])
::players[].body.bodyPoints->position == orig(::players[].body.bodyPoints->position)
::players[].body.bodyPoints->player == orig(::players[].body.bodyPoints->player)
::players[].body.bodyPoints->player[0] == orig(::players[].body.bodyPoints->player[0])
::players[].body.bodyPoints->aspect == orig(::players[].body.bodyPoints->aspect)
::players[].body.bodyMaps == orig(::players[].body.bodyMaps)
::players[].body.bodyMapsSize == orig(::players[].body.bodyMapsSize)
::players[].body.bodySize == orig(::players[].body.bodySize)
::players[].body.bodyWidth == orig(::players[].body.bodyWidth)
::players[].body.bodyHeight == orig(::players[].body.bodyHeight)
::players[].body.color == orig(::players[].body.color)
::players[].basePosition == orig(::players[].basePosition)
::players[].impulse[0] == orig(::players[].impulse[0])
::players[].impulse[0][0] == orig(::players[].impulse[0][0])
::players[].impulse[1] == orig(::players[].impulse[1])
::players[].impulse[1][0] == orig(::players[].impulse[1][0])
::players[].impulse[2] == orig(::players[].impulse[2])
::players[].impulse[3] == orig(::players[].impulse[3])
::players[].impulse[3][0] == orig(::players[].impulse[3][0])
::players[].impulse[4] == orig(::players[].impulse[4])
::players[].impulse[5] == orig(::players[].impulse[5])
::players[].impulse[5][0] == orig(::players[].impulse[5][0])
::players[].impulse[6] == orig(::players[].impulse[6])
::players[].impulse[7] == orig(::players[].impulse[7])
::players[].impulse[7][0] == orig(::players[].impulse[7][0])
::players[].impulse[8] == orig(::players[].impulse[8])
::players[].direction == orig(::players[].direction)
::players[].magnetos == orig(::players[].magnetos)
::players[].magnetos[0] == orig(::players[].magnetos[0])
::players[].stepCounter == orig(::players[].stepCounter)
::players[].pilot == orig(::players[].pilot)
::players[].onCrash == orig(::players[].onCrash)
::players[].onPushed == orig(::players[].onPushed)
::snakeBodyMap == orig(::snakeBodyMap)
::trainBodyMap == orig(::trainBodyMap)
::giantBodyMap == orig(::giantBodyMap)
::squareBodyMap == orig(::squareBodyMap)
::circleBodyMap == orig(::circleBodyMap)
::input_n == ::input_i
::input_n == orig(::input_n)
::input_n == orig(::input_i)
::input_n == size(::crashedPlayers[])
::input_n == size(::playerSpace[])
::input_n == size(::playerSpace[].playerNodes[0])
::input_n == size(::playerSpace[].playerNodes->start[0])
::input_n == size(::playerSpace[].playerNodes->start->next[0])
::input_n == size(::playerSpace[].playerNodes->end[0])
::input_n == size(::playerSpace[].playerNodes->end->prev[0])
::input_n == size(::playerSpace[].guideNodes[0])
::input_n == size(::playerSpace[].actionGroup[0])
::input_n == orig(size(::crashedPlayers[]))
::input_n == orig(size(::playerSpace[]))
::input_n == orig(size(::playerSpace[].playerNodes[0]))
::input_n == orig(size(::playerSpace[].playerNodes->start[0]))
::input_n == orig(size(::playerSpace[].playerNodes->start->next[0]))
::input_n == orig(size(::playerSpace[].playerNodes->end[0]))
::input_n == orig(size(::playerSpace[].playerNodes->end->prev[0]))
::input_n == orig(size(::playerSpace[].guideNodes[0]))
::input_n == orig(size(::playerSpace[].actionGroup[0]))
::input_n == orig(size(space[]))
::input_n == orig(size(space[].playerNodes[0]))
::input_n == orig(size(space[].playerNodes->start[0]))
::input_n == orig(size(space[].playerNodes->start->next[0]))
::input_n == orig(size(space[].playerNodes->end[0]))
::input_n == orig(size(space[].playerNodes->end->prev[0]))
::input_n == orig(size(space[].guideNodes[0]))
::input_n == orig(size(space[].actionGroup[0]))
::input_n == ::players[::input_n].body.type
::input_n == ::players[::input_i].body.type
::input_n == ::players[orig(::input_n)].body.type
::input_n == ::players[orig(::input_i)].body.type
::input_n == ::players[::input_n].body.visible
::input_n == ::players[::input_n-1].body.visible
::input_n == ::players[::input_i].body.visible
::input_n == ::players[::input_i-1].body.visible
::input_n == ::players[::new_input].body.visible
::input_n == ::players[orig(::input_n)].body.visible
::input_n == ::players[orig(::input_n)-1].body.visible
::input_n == ::players[orig(::input_i)].body.visible
::input_n == ::players[orig(::input_i)-1].body.visible
::input_n == ::players[orig(::new_input)].body.visible
::input_n == ::players[::input_n].body.tangible
::input_n == ::players[::input_n-1].body.tangible
::input_n == ::players[::input_i].body.tangible
::input_n == ::players[::input_i-1].body.tangible
::input_n == ::players[::new_input].body.tangible
::input_n == ::players[orig(::input_n)].body.tangible
::input_n == ::players[orig(::input_n)-1].body.tangible
::input_n == ::players[orig(::input_i)].body.tangible
::input_n == ::players[orig(::input_i)-1].body.tangible
::input_n == ::players[orig(::new_input)].body.tangible
::input_n == ::players[::input_n].body.bodyMapsSize
::input_n == ::players[::input_i].body.bodyMapsSize
::input_n == ::players[orig(::input_n)].body.bodyMapsSize
::input_n == ::players[orig(::input_i)].body.bodyMapsSize
::input_n == ::players[::input_n].body.bodySize
::input_n == ::players[::input_i].body.bodySize
::input_n == ::players[orig(::input_n)].body.bodySize
::input_n == ::players[orig(::input_i)].body.bodySize
::input_n == ::players[::input_n-1].direction
::input_n == ::players[::input_i-1].direction
::input_n == ::players[::new_input].direction
::input_n == ::players[orig(::input_n)-1].direction
::input_n == ::players[orig(::input_i)-1].direction
::input_n == player[::input_n-1].body.visible
::input_n == player[::input_n-1].body.tangible
::input_n == orig(::players[post(::input_n)].body.type)
::input_n == orig(::players[post(::input_n)].body.visible)
::input_n == orig(::players[post(::input_n)-1].body.visible)
::input_n == orig(::players[post(::input_n)].body.tangible)
::input_n == orig(::players[post(::input_n)-1].body.tangible)
::input_n == orig(::players[post(::input_n)].body.bodyMapsSize)
::input_n == orig(::players[post(::input_n)].body.bodySize)
::input_n == orig(::players[post(::input_n)-1].direction)
::input_n == orig(player[post(::input_n)-1].body.visible)
::input_n == orig(player[post(::input_n)-1].body.tangible)
::input_n == player[::input_i-1].body.visible
::input_n == player[::input_i-1].body.tangible
::input_n == orig(::players[post(::input_i)].body.type)
::input_n == orig(::players[post(::input_i)].body.visible)
::input_n == orig(::players[post(::input_i)-1].body.visible)
::input_n == orig(::players[post(::input_i)].body.tangible)
::input_n == orig(::players[post(::input_i)-1].body.tangible)
::input_n == orig(::players[post(::input_i)].body.bodyMapsSize)
::input_n == orig(::players[post(::input_i)].body.bodySize)
::input_n == orig(::players[post(::input_i)-1].direction)
::input_n == orig(player[post(::input_i)-1].body.visible)
::input_n == orig(player[post(::input_i)-1].body.tangible)
::input_n == player[::new_input].body.visible
::input_n == player[::new_input].body.tangible
::input_n == orig(::players[post(::new_input)].body.visible)
::input_n == orig(::players[post(::new_input)].body.tangible)
::input_n == orig(::players[post(::new_input)].direction)
::input_n == orig(player[post(::new_input)].body.visible)
::input_n == orig(player[post(::new_input)].body.tangible)
::input_n == player[orig(::input_n)-1].body.visible
::input_n == player[orig(::input_i)-1].body.visible
::input_n == player[orig(::new_input)].body.visible
::input_n == player[orig(::input_n)-1].body.tangible
::input_n == player[orig(::input_i)-1].body.tangible
::input_n == player[orig(::new_input)].body.tangible
::input_n == player[orig(::new_input)].body.bodyMapsSize
::input_n == orig(::players[::input_n].body.type)
::input_n == orig(::players[::input_i].body.type)
::input_n == orig(::players[::input_n].body.visible)
::input_n == orig(::players[::input_n-1].body.visible)
::input_n == orig(::players[::input_i].body.visible)
::input_n == orig(::players[::input_i-1].body.visible)
::input_n == orig(::players[::new_input].body.visible)
::input_n == orig(::players[::input_n].body.tangible)
::input_n == orig(::players[::input_n-1].body.tangible)
::input_n == orig(::players[::input_i].body.tangible)
::input_n == orig(::players[::input_i-1].body.tangible)
::input_n == orig(::players[::new_input].body.tangible)
::input_n == orig(::players[::input_n].body.bodyMapsSize)
::input_n == orig(::players[::input_i].body.bodyMapsSize)
::input_n == orig(::players[::input_n].body.bodySize)
::input_n == orig(::players[::input_i].body.bodySize)
::input_n == orig(::players[::input_n-1].direction)
::input_n == orig(::players[::input_i-1].direction)
::input_n == orig(player[::input_n-1].body.visible)
::input_n == orig(player[::input_n-1].body.tangible)
::input_n == orig(player[::input_i-1].body.visible)
::input_n == orig(player[::input_i-1].body.tangible)
::input_n == orig(player[::new_input].body.visible)
::input_n == orig(player[::new_input].body.tangible)
::input_n == orig(player[::new_input].body.bodyMapsSize)
::new_input == size(::crashedPlayers[])-1
::new_input == size(::playerSpace[])-1
::new_input == size(::playerSpace[].playerNodes[0])-1
::new_input == size(::playerSpace[].playerNodes->start[0])-1
::new_input == size(::playerSpace[].playerNodes->start->next[0])-1
::new_input == size(::playerSpace[].playerNodes->end[0])-1
::new_input == size(::playerSpace[].playerNodes->end->prev[0])-1
::new_input == size(::playerSpace[].guideNodes[0])-1
::new_input == size(::playerSpace[].actionGroup[0])-1
::new_input == size(space[])-1
::new_input == size(space[].playerNodes[0])-1
::new_input == size(space[].playerNodes->start[0])-1
::new_input == size(space[].playerNodes->start->next[0])-1
::new_input == size(space[].playerNodes->end[0])-1
::new_input == size(space[].playerNodes->end->prev[0])-1
::new_input == size(space[].guideNodes[0])-1
::new_input == size(space[].actionGroup[0])-1
::new_input == orig(size(::crashedPlayers[]))-1
::new_input == orig(size(::playerSpace[]))-1
::new_input == orig(size(::playerSpace[].playerNodes[0]))-1
::new_input == orig(size(::playerSpace[].playerNodes->start[0]))-1
::new_input == orig(size(::playerSpace[].playerNodes->start->next[0]))-1
::new_input == orig(size(::playerSpace[].playerNodes->end[0]))-1
::new_input == orig(size(::playerSpace[].playerNodes->end->prev[0]))-1
::new_input == orig(size(::playerSpace[].guideNodes[0]))-1
::new_input == orig(size(::playerSpace[].actionGroup[0]))-1
::new_input == orig(size(space[]))-1
::new_input == orig(size(space[].playerNodes[0]))-1
::new_input == orig(size(space[].playerNodes->start[0]))-1
::new_input == orig(size(space[].playerNodes->start->next[0]))-1
::new_input == orig(size(space[].playerNodes->end[0]))-1
::new_input == orig(size(space[].playerNodes->end->prev[0]))-1
::new_input == orig(size(space[].guideNodes[0]))-1
::new_input == orig(size(space[].actionGroup[0]))-1
::new_input == ::playerSpace[::input_n-1].actionGroup->numActions
::new_input == ::playerSpace[::input_i-1].actionGroup->numActions
::new_input == ::playerSpace[::new_input].actionGroup->numActions
::new_input == ::playerSpace[orig(::input_n)-1].actionGroup->numActions
::new_input == ::playerSpace[orig(::input_i)-1].actionGroup->numActions
::new_input == ::players[::input_n].id
::new_input == ::players[::input_n-1].id
::new_input == ::players[::input_i].id
::new_input == ::players[::input_i-1].id
::new_input == ::players[::new_input].id
::new_input == ::players[orig(::input_n)].id
::new_input == ::players[orig(::input_n)-1].id
::new_input == ::players[orig(::input_i)].id
::new_input == ::players[orig(::input_i)-1].id
::new_input == ::players[orig(::new_input)].id
::new_input == ::players[::input_n].type
::new_input == ::players[::input_n-1].type
::new_input == ::players[::input_i].type
::new_input == ::players[::input_i-1].type
::new_input == ::players[::new_input].type
::new_input == ::players[orig(::input_n)].type
::new_input == ::players[orig(::input_n)-1].type
::new_input == ::players[orig(::input_i)].type
::new_input == ::players[orig(::input_i)-1].type
::new_input == ::players[orig(::new_input)].type
::new_input == ::players[::input_n].retired
::new_input == ::players[::input_n-1].retired
::new_input == ::players[::input_i].retired
::new_input == ::players[::input_i-1].retired
::new_input == ::players[::new_input].retired
::new_input == ::players[orig(::input_n)].retired
::new_input == ::players[orig(::input_n)-1].retired
::new_input == ::players[orig(::input_i)].retired
::new_input == ::players[orig(::input_i)-1].retired
::new_input == ::players[orig(::new_input)].retired
::new_input == ::players[::input_n-1].body.type
::new_input == ::players[::input_i-1].body.type
::new_input == ::players[::new_input].body.type
::new_input == ::players[orig(::input_n)-1].body.type
::new_input == ::players[orig(::input_i)-1].body.type
::new_input == ::players[::input_n].body.bodyWidth
::new_input == ::players[::input_i].body.bodyWidth
::new_input == ::players[orig(::input_n)].body.bodyWidth
::new_input == ::players[orig(::input_i)].body.bodyWidth
::new_input == ::players[::input_n].body.bodyHeight
::new_input == ::players[::input_i].body.bodyHeight
::new_input == ::players[orig(::input_n)].body.bodyHeight
::new_input == ::players[orig(::input_i)].body.bodyHeight
::new_input == ::players[::input_n].body.color
::new_input == ::players[::input_i].body.color
::new_input == ::players[orig(::input_n)].body.color
::new_input == ::players[orig(::input_i)].body.color
::new_input == ::players[::input_n].basePosition.col
::new_input == ::players[::input_i].basePosition.col
::new_input == ::players[orig(::input_n)].basePosition.col
::new_input == ::players[orig(::input_i)].basePosition.col
::new_input == ::players[::input_n-1].impulse[0][0]
::new_input == ::players[::input_i-1].impulse[0][0]
::new_input == ::players[::new_input].impulse[0][0]
::new_input == ::players[orig(::input_n)-1].impulse[0][0]
::new_input == ::players[orig(::input_i)-1].impulse[0][0]
::new_input == ::players[::input_n].impulse[1][0]
::new_input == ::players[::input_i].impulse[1][0]
::new_input == ::players[orig(::input_n)].impulse[1][0]
::new_input == ::players[orig(::input_i)].impulse[1][0]
::new_input == ::players[orig(::new_input)].impulse[1][0]
::new_input == ::players[::input_n].impulse[2][0]
::new_input == ::players[::input_n-1].impulse[2][0]
::new_input == ::players[::input_i].impulse[2][0]
::new_input == ::players[::input_i-1].impulse[2][0]
::new_input == ::players[::new_input].impulse[2][0]
::new_input == ::players[orig(::input_n)].impulse[2][0]
::new_input == ::players[orig(::input_n)-1].impulse[2][0]
::new_input == ::players[orig(::input_i)].impulse[2][0]
::new_input == ::players[orig(::input_i)-1].impulse[2][0]
::new_input == ::players[orig(::new_input)].impulse[2][0]
::new_input == ::players[::input_n].impulse[3][0]
::new_input == ::players[::input_n-1].impulse[3][0]
::new_input == ::players[::input_i].impulse[3][0]
::new_input == ::players[::input_i-1].impulse[3][0]
::new_input == ::players[::new_input].impulse[3][0]
::new_input == ::players[orig(::input_n)].impulse[3][0]
::new_input == ::players[orig(::input_n)-1].impulse[3][0]
::new_input == ::players[orig(::input_i)].impulse[3][0]
::new_input == ::players[orig(::input_i)-1].impulse[3][0]
::new_input == ::players[orig(::new_input)].impulse[3][0]
::new_input == ::players[::input_n].impulse[4][0]
::new_input == ::players[::input_n-1].impulse[4][0]
::new_input == ::players[::input_i].impulse[4][0]
::new_input == ::players[::input_i-1].impulse[4][0]
::new_input == ::players[::new_input].impulse[4][0]
::new_input == ::players[orig(::input_n)].impulse[4][0]
::new_input == ::players[orig(::input_n)-1].impulse[4][0]
::new_input == ::players[orig(::input_i)].impulse[4][0]
::new_input == ::players[orig(::input_i)-1].impulse[4][0]
::new_input == ::players[orig(::new_input)].impulse[4][0]
::new_input == ::players[::input_n].impulse[5][0]
::new_input == ::players[::input_n-1].impulse[5][0]
::new_input == ::players[::input_i].impulse[5][0]
::new_input == ::players[::input_i-1].impulse[5][0]
::new_input == ::players[::new_input].impulse[5][0]
::new_input == ::players[orig(::input_n)].impulse[5][0]
::new_input == ::players[orig(::input_n)-1].impulse[5][0]
::new_input == ::players[orig(::input_i)].impulse[5][0]
::new_input == ::players[orig(::input_i)-1].impulse[5][0]
::new_input == ::players[orig(::new_input)].impulse[5][0]
::new_input == ::players[::input_n].impulse[6][0]
::new_input == ::players[::input_n-1].impulse[6][0]
::new_input == ::players[::input_i].impulse[6][0]
::new_input == ::players[::input_i-1].impulse[6][0]
::new_input == ::players[::new_input].impulse[6][0]
::new_input == ::players[orig(::input_n)].impulse[6][0]
::new_input == ::players[orig(::input_n)-1].impulse[6][0]
::new_input == ::players[orig(::input_i)].impulse[6][0]
::new_input == ::players[orig(::input_i)-1].impulse[6][0]
::new_input == ::players[orig(::new_input)].impulse[6][0]
::new_input == ::players[::input_n].impulse[7][0]
::new_input == ::players[::input_n-1].impulse[7][0]
::new_input == ::players[::input_i].impulse[7][0]
::new_input == ::players[::input_i-1].impulse[7][0]
::new_input == ::players[::new_input].impulse[7][0]
::new_input == ::players[orig(::input_n)].impulse[7][0]
::new_input == ::players[orig(::input_n)-1].impulse[7][0]
::new_input == ::players[orig(::input_i)].impulse[7][0]
::new_input == ::players[orig(::input_i)-1].impulse[7][0]
::new_input == ::players[orig(::new_input)].impulse[7][0]
::new_input == ::players[::input_n].impulse[8][0]
::new_input == ::players[::input_n-1].impulse[8][0]
::new_input == ::players[::input_i].impulse[8][0]
::new_input == ::players[::input_i-1].impulse[8][0]
::new_input == ::players[::new_input].impulse[8][0]
::new_input == ::players[orig(::input_n)].impulse[8][0]
::new_input == ::players[orig(::input_n)-1].impulse[8][0]
::new_input == ::players[orig(::input_i)].impulse[8][0]
::new_input == ::players[orig(::input_i)-1].impulse[8][0]
::new_input == ::players[orig(::new_input)].impulse[8][0]
::new_input == ::players[::input_n].direction
::new_input == ::players[::input_i].direction
::new_input == ::players[orig(::input_n)].direction
::new_input == ::players[orig(::input_i)].direction
::new_input == ::players[::input_n-1].stepCounter
::new_input == ::players[::input_i-1].stepCounter
::new_input == ::players[::new_input].stepCounter
::new_input == ::players[orig(::input_n)-1].stepCounter
::new_input == ::players[orig(::input_i)-1].stepCounter
::new_input == space[::input_n-1].actionGroup->numActions
::new_input == player[::input_n].id
::new_input == player[::input_n-1].id
::new_input == player[::input_n].type
::new_input == player[::input_n-1].type
::new_input == player[::input_n].retired
::new_input == player[::input_n-1].retired
::new_input == player[::input_n-1].impulse[0][0]
::new_input == player[::input_n].impulse[2][0]
::new_input == player[::input_n-1].impulse[2][0]
::new_input == player[::input_n].impulse[4][0]
::new_input == player[::input_n-1].impulse[4][0]
::new_input == player[::input_n].impulse[6][0]
::new_input == player[::input_n-1].impulse[6][0]
::new_input == player[::input_n-1].impulse[7][0]
::new_input == player[::input_n].impulse[8][0]
::new_input == player[::input_n-1].impulse[8][0]
::new_input == player[::input_n].direction
::new_input == orig(::playerSpace[post(::input_n)-1].actionGroup->numActions)
::new_input == orig(::players[post(::input_n)].id)
::new_input == orig(::players[post(::input_n)-1].id)
::new_input == orig(::players[post(::input_n)].type)
::new_input == orig(::players[post(::input_n)-1].type)
::new_input == orig(::players[post(::input_n)].retired)
::new_input == orig(::players[post(::input_n)-1].retired)
::new_input == orig(::players[post(::input_n)-1].body.type)
::new_input == orig(::players[post(::input_n)].body.bodyWidth)
::new_input == orig(::players[post(::input_n)].body.bodyHeight)
::new_input == orig(::players[post(::input_n)].body.color)
::new_input == orig(::players[post(::input_n)].basePosition.col)
::new_input == orig(::players[post(::input_n)-1].impulse[0][0])
::new_input == orig(::players[post(::input_n)].impulse[1][0])
::new_input == orig(::players[post(::input_n)].impulse[2][0])
::new_input == orig(::players[post(::input_n)-1].impulse[2][0])
::new_input == orig(::players[post(::input_n)].impulse[3][0])
::new_input == orig(::players[post(::input_n)-1].impulse[3][0])
::new_input == orig(::players[post(::input_n)].impulse[4][0])
::new_input == orig(::players[post(::input_n)-1].impulse[4][0])
::new_input == orig(::players[post(::input_n)].impulse[5][0])
::new_input == orig(::players[post(::input_n)-1].impulse[5][0])
::new_input == orig(::players[post(::input_n)].impulse[6][0])
::new_input == orig(::players[post(::input_n)-1].impulse[6][0])
::new_input == orig(::players[post(::input_n)].impulse[7][0])
::new_input == orig(::players[post(::input_n)-1].impulse[7][0])
::new_input == orig(::players[post(::input_n)].impulse[8][0])
::new_input == orig(::players[post(::input_n)-1].impulse[8][0])
::new_input == orig(::players[post(::input_n)].direction)
::new_input == orig(::players[post(::input_n)-1].stepCounter)
::new_input == orig(space[post(::input_n)-1].actionGroup->numActions)
::new_input == orig(player[post(::input_n)].id)
::new_input == orig(player[post(::input_n)-1].id)
::new_input == orig(player[post(::input_n)].type)
::new_input == orig(player[post(::input_n)-1].type)
::new_input == orig(player[post(::input_n)].retired)
::new_input == orig(player[post(::input_n)-1].retired)
::new_input == orig(player[post(::input_n)-1].impulse[0][0])
::new_input == orig(player[post(::input_n)].impulse[2][0])
::new_input == orig(player[post(::input_n)-1].impulse[2][0])
::new_input == orig(player[post(::input_n)].impulse[4][0])
::new_input == orig(player[post(::input_n)-1].impulse[4][0])
::new_input == orig(player[post(::input_n)].impulse[6][0])
::new_input == orig(player[post(::input_n)-1].impulse[6][0])
::new_input == orig(player[post(::input_n)-1].impulse[7][0])
::new_input == orig(player[post(::input_n)].impulse[8][0])
::new_input == orig(player[post(::input_n)-1].impulse[8][0])
::new_input == orig(player[post(::input_n)].direction)
::new_input == space[::input_i-1].actionGroup->numActions
::new_input == player[::input_i].id
::new_input == player[::input_i-1].id
::new_input == player[::input_i].type
::new_input == player[::input_i-1].type
::new_input == player[::input_i].retired
::new_input == player[::input_i-1].retired
::new_input == player[::input_i-1].impulse[0][0]
::new_input == player[::input_i].impulse[2][0]
::new_input == player[::input_i-1].impulse[2][0]
::new_input == player[::input_i].impulse[4][0]
::new_input == player[::input_i-1].impulse[4][0]
::new_input == player[::input_i].impulse[6][0]
::new_input == player[::input_i-1].impulse[6][0]
::new_input == player[::input_i-1].impulse[7][0]
::new_input == player[::input_i].impulse[8][0]
::new_input == player[::input_i-1].impulse[8][0]
::new_input == player[::input_i].direction
::new_input == orig(::playerSpace[post(::input_i)-1].actionGroup->numActions)
::new_input == orig(::players[post(::input_i)].id)
::new_input == orig(::players[post(::input_i)-1].id)
::new_input == orig(::players[post(::input_i)].type)
::new_input == orig(::players[post(::input_i)-1].type)
::new_input == orig(::players[post(::input_i)].retired)
::new_input == orig(::players[post(::input_i)-1].retired)
::new_input == orig(::players[post(::input_i)-1].body.type)
::new_input == orig(::players[post(::input_i)].body.bodyWidth)
::new_input == orig(::players[post(::input_i)].body.bodyHeight)
::new_input == orig(::players[post(::input_i)].body.color)
::new_input == orig(::players[post(::input_i)].basePosition.col)
::new_input == orig(::players[post(::input_i)-1].impulse[0][0])
::new_input == orig(::players[post(::input_i)].impulse[1][0])
::new_input == orig(::players[post(::input_i)].impulse[2][0])
::new_input == orig(::players[post(::input_i)-1].impulse[2][0])
::new_input == orig(::players[post(::input_i)].impulse[3][0])
::new_input == orig(::players[post(::input_i)-1].impulse[3][0])
::new_input == orig(::players[post(::input_i)].impulse[4][0])
::new_input == orig(::players[post(::input_i)-1].impulse[4][0])
::new_input == orig(::players[post(::input_i)].impulse[5][0])
::new_input == orig(::players[post(::input_i)-1].impulse[5][0])
::new_input == orig(::players[post(::input_i)].impulse[6][0])
::new_input == orig(::players[post(::input_i)-1].impulse[6][0])
::new_input == orig(::players[post(::input_i)].impulse[7][0])
::new_input == orig(::players[post(::input_i)-1].impulse[7][0])
::new_input == orig(::players[post(::input_i)].impulse[8][0])
::new_input == orig(::players[post(::input_i)-1].impulse[8][0])
::new_input == orig(::players[post(::input_i)].direction)
::new_input == orig(::players[post(::input_i)-1].stepCounter)
::new_input == orig(space[post(::input_i)-1].actionGroup->numActions)
::new_input == orig(player[post(::input_i)].id)
::new_input == orig(player[post(::input_i)-1].id)
::new_input == orig(player[post(::input_i)].type)
::new_input == orig(player[post(::input_i)-1].type)
::new_input == orig(player[post(::input_i)].retired)
::new_input == orig(player[post(::input_i)-1].retired)
::new_input == orig(player[post(::input_i)-1].impulse[0][0])
::new_input == orig(player[post(::input_i)].impulse[2][0])
::new_input == orig(player[post(::input_i)-1].impulse[2][0])
::new_input == orig(player[post(::input_i)].impulse[4][0])
::new_input == orig(player[post(::input_i)-1].impulse[4][0])
::new_input == orig(player[post(::input_i)].impulse[6][0])
::new_input == orig(player[post(::input_i)-1].impulse[6][0])
::new_input == orig(player[post(::input_i)-1].impulse[7][0])
::new_input == orig(player[post(::input_i)].impulse[8][0])
::new_input == orig(player[post(::input_i)-1].impulse[8][0])
::new_input == orig(player[post(::input_i)].direction)
::new_input == space[::new_input].actionGroup->numActions
::new_input == player[::new_input].id
::new_input == player[::new_input].type
::new_input == player[::new_input].retired
::new_input == player[::new_input].impulse[0][0]
::new_input == player[::new_input].impulse[2][0]
::new_input == player[::new_input].impulse[4][0]
::new_input == player[::new_input].impulse[6][0]
::new_input == player[::new_input].impulse[7][0]
::new_input == player[::new_input].impulse[8][0]
::new_input == orig(::playerSpace[post(::new_input)].actionGroup->numActions)
::new_input == orig(::players[post(::new_input)].id)
::new_input == orig(::players[post(::new_input)].type)
::new_input == orig(::players[post(::new_input)].retired)
::new_input == orig(::players[post(::new_input)].body.type)
::new_input == orig(::players[post(::new_input)].impulse[0][0])
::new_input == orig(::players[post(::new_input)].impulse[2][0])
::new_input == orig(::players[post(::new_input)].impulse[3][0])
::new_input == orig(::players[post(::new_input)].impulse[4][0])
::new_input == orig(::players[post(::new_input)].impulse[5][0])
::new_input == orig(::players[post(::new_input)].impulse[6][0])
::new_input == orig(::players[post(::new_input)].impulse[7][0])
::new_input == orig(::players[post(::new_input)].impulse[8][0])
::new_input == orig(::players[post(::new_input)].stepCounter)
::new_input == orig(space[post(::new_input)].actionGroup->numActions)
::new_input == orig(player[post(::new_input)].id)
::new_input == orig(player[post(::new_input)].type)
::new_input == orig(player[post(::new_input)].retired)
::new_input == orig(player[post(::new_input)].impulse[0][0])
::new_input == orig(player[post(::new_input)].impulse[2][0])
::new_input == orig(player[post(::new_input)].impulse[4][0])
::new_input == orig(player[post(::new_input)].impulse[6][0])
::new_input == orig(player[post(::new_input)].impulse[7][0])
::new_input == orig(player[post(::new_input)].impulse[8][0])
::new_input == space[orig(::input_n)-1].actionGroup->numActions
::new_input == space[orig(::input_i)-1].actionGroup->numActions
::new_input == player[orig(::input_n)].id
::new_input == player[orig(::input_n)-1].id
::new_input == player[orig(::input_i)].id
::new_input == player[orig(::input_i)-1].id
::new_input == player[orig(::new_input)].id
::new_input == player[orig(::input_n)].type
::new_input == player[orig(::input_n)-1].type
::new_input == player[orig(::input_i)].type
::new_input == player[orig(::input_i)-1].type
::new_input == player[orig(::new_input)].type
::new_input == player[orig(::input_n)].retired
::new_input == player[orig(::input_n)-1].retired
::new_input == player[orig(::input_i)].retired
::new_input == player[orig(::input_i)-1].retired
::new_input == player[orig(::new_input)].retired
::new_input == player[orig(::input_n)-1].impulse[0][0]
::new_input == player[orig(::input_i)-1].impulse[0][0]
::new_input == player[orig(::input_n)].impulse[2][0]
::new_input == player[orig(::input_n)-1].impulse[2][0]
::new_input == player[orig(::input_i)].impulse[2][0]
::new_input == player[orig(::input_i)-1].impulse[2][0]
::new_input == player[orig(::new_input)].impulse[2][0]
::new_input == player[orig(::input_n)].impulse[4][0]
::new_input == player[orig(::input_n)-1].impulse[4][0]
::new_input == player[orig(::input_i)].impulse[4][0]
::new_input == player[orig(::input_i)-1].impulse[4][0]
::new_input == player[orig(::new_input)].impulse[4][0]
::new_input == player[orig(::input_n)].impulse[6][0]
::new_input == player[orig(::input_n)-1].impulse[6][0]
::new_input == player[orig(::input_i)].impulse[6][0]
::new_input == player[orig(::input_i)-1].impulse[6][0]
::new_input == player[orig(::new_input)].impulse[6][0]
::new_input == player[orig(::input_n)-1].impulse[7][0]
::new_input == player[orig(::input_i)-1].impulse[7][0]
::new_input == player[orig(::new_input)].impulse[7][0]
::new_input == player[orig(::input_n)].impulse[8][0]
::new_input == player[orig(::input_n)-1].impulse[8][0]
::new_input == player[orig(::input_i)].impulse[8][0]
::new_input == player[orig(::input_i)-1].impulse[8][0]
::new_input == player[orig(::new_input)].impulse[8][0]
::new_input == player[orig(::input_n)].direction
::new_input == player[orig(::input_i)].direction
::new_input == orig(::playerSpace[::input_n-1].actionGroup->numActions)
::new_input == orig(::playerSpace[::input_i-1].actionGroup->numActions)
::new_input == orig(::players[::input_n].id)
::new_input == orig(::players[::input_n-1].id)
::new_input == orig(::players[::input_i].id)
::new_input == orig(::players[::input_i-1].id)
::new_input == orig(::players[::new_input].id)
::new_input == orig(::players[::input_n].type)
::new_input == orig(::players[::input_n-1].type)
::new_input == orig(::players[::input_i].type)
::new_input == orig(::players[::input_i-1].type)
::new_input == orig(::players[::new_input].type)
::new_input == orig(::players[::input_n].retired)
::new_input == orig(::players[::input_n-1].retired)
::new_input == orig(::players[::input_i].retired)
::new_input == orig(::players[::input_i-1].retired)
::new_input == orig(::players[::new_input].retired)
::new_input == orig(::players[::input_n-1].body.type)
::new_input == orig(::players[::input_i-1].body.type)
::new_input == orig(::players[::input_n].body.bodyWidth)
::new_input == orig(::players[::input_i].body.bodyWidth)
::new_input == orig(::players[::input_n].body.bodyHeight)
::new_input == orig(::players[::input_i].body.bodyHeight)
::new_input == orig(::players[::input_n].body.color)
::new_input == orig(::players[::input_i].body.color)
::new_input == orig(::players[::input_n].basePosition.col)
::new_input == orig(::players[::input_i].basePosition.col)
::new_input == orig(::players[::input_n-1].impulse[0][0])
::new_input == orig(::players[::input_i-1].impulse[0][0])
::new_input == orig(::players[::input_n].impulse[1][0])
::new_input == orig(::players[::input_i].impulse[1][0])
::new_input == orig(::players[::new_input].impulse[1][0])
::new_input == orig(::players[::input_n].impulse[2][0])
::new_input == orig(::players[::input_n-1].impulse[2][0])
::new_input == orig(::players[::input_i].impulse[2][0])
::new_input == orig(::players[::input_i-1].impulse[2][0])
::new_input == orig(::players[::new_input].impulse[2][0])
::new_input == orig(::players[::input_n].impulse[3][0])
::new_input == orig(::players[::input_n-1].impulse[3][0])
::new_input == orig(::players[::input_i].impulse[3][0])
::new_input == orig(::players[::input_i-1].impulse[3][0])
::new_input == orig(::players[::new_input].impulse[3][0])
::new_input == orig(::players[::input_n].impulse[4][0])
::new_input == orig(::players[::input_n-1].impulse[4][0])
::new_input == orig(::players[::input_i].impulse[4][0])
::new_input == orig(::players[::input_i-1].impulse[4][0])
::new_input == orig(::players[::new_input].impulse[4][0])
::new_input == orig(::players[::input_n].impulse[5][0])
::new_input == orig(::players[::input_n-1].impulse[5][0])
::new_input == orig(::players[::input_i].impulse[5][0])
::new_input == orig(::players[::input_i-1].impulse[5][0])
::new_input == orig(::players[::new_input].impulse[5][0])
::new_input == orig(::players[::input_n].impulse[6][0])
::new_input == orig(::players[::input_n-1].impulse[6][0])
::new_input == orig(::players[::input_i].impulse[6][0])
::new_input == orig(::players[::input_i-1].impulse[6][0])
::new_input == orig(::players[::new_input].impulse[6][0])
::new_input == orig(::players[::input_n].impulse[7][0])
::new_input == orig(::players[::input_n-1].impulse[7][0])
::new_input == orig(::players[::input_i].impulse[7][0])
::new_input == orig(::players[::input_i-1].impulse[7][0])
::new_input == orig(::players[::new_input].impulse[7][0])
::new_input == orig(::players[::input_n].impulse[8][0])
::new_input == orig(::players[::input_n-1].impulse[8][0])
::new_input == orig(::players[::input_i].impulse[8][0])
::new_input == orig(::players[::input_i-1].impulse[8][0])
::new_input == orig(::players[::new_input].impulse[8][0])
::new_input == orig(::players[::input_n].direction)
::new_input == orig(::players[::input_i].direction)
::new_input == orig(::players[::input_n-1].stepCounter)
::new_input == orig(::players[::input_i-1].stepCounter)
::new_input == orig(space[::input_n-1].actionGroup->numActions)
::new_input == orig(player[::input_n].id)
::new_input == orig(player[::input_n-1].id)
::new_input == orig(player[::input_n].type)
::new_input == orig(player[::input_n-1].type)
::new_input == orig(player[::input_n].retired)
::new_input == orig(player[::input_n-1].retired)
::new_input == orig(player[::input_n-1].impulse[0][0])
::new_input == orig(player[::input_n].impulse[2][0])
::new_input == orig(player[::input_n-1].impulse[2][0])
::new_input == orig(player[::input_n].impulse[4][0])
::new_input == orig(player[::input_n-1].impulse[4][0])
::new_input == orig(player[::input_n].impulse[6][0])
::new_input == orig(player[::input_n-1].impulse[6][0])
::new_input == orig(player[::input_n-1].impulse[7][0])
::new_input == orig(player[::input_n].impulse[8][0])
::new_input == orig(player[::input_n-1].impulse[8][0])
::new_input == orig(player[::input_n].direction)
::new_input == orig(space[::input_i-1].actionGroup->numActions)
::new_input == orig(player[::input_i].id)
::new_input == orig(player[::input_i-1].id)
::new_input == orig(player[::input_i].type)
::new_input == orig(player[::input_i-1].type)
::new_input == orig(player[::input_i].retired)
::new_input == orig(player[::input_i-1].retired)
::new_input == orig(player[::input_i-1].impulse[0][0])
::new_input == orig(player[::input_i].impulse[2][0])
::new_input == orig(player[::input_i-1].impulse[2][0])
::new_input == orig(player[::input_i].impulse[4][0])
::new_input == orig(player[::input_i-1].impulse[4][0])
::new_input == orig(player[::input_i].impulse[6][0])
::new_input == orig(player[::input_i-1].impulse[6][0])
::new_input == orig(player[::input_i-1].impulse[7][0])
::new_input == orig(player[::input_i].impulse[8][0])
::new_input == orig(player[::input_i-1].impulse[8][0])
::new_input == orig(player[::input_i].direction)
::new_input == orig(player[::new_input].id)
::new_input == orig(player[::new_input].type)
::new_input == orig(player[::new_input].retired)
::new_input == orig(player[::new_input].impulse[2][0])
::new_input == orig(player[::new_input].impulse[4][0])
::new_input == orig(player[::new_input].impulse[6][0])
::new_input == orig(player[::new_input].impulse[7][0])
::new_input == orig(player[::new_input].impulse[8][0])
::input_key == orig(::input_key)
player[] == orig(player[])
player[].id == player[].type
player[].id == player[].retired
player[].id == player[].impulse[2][0]
player[].id == player[].impulse[4][0]
player[].id == player[].impulse[6][0]
player[].id == player[].impulse[8][0]
player[].id == orig(player[].id)
player[].id == orig(player[].type)
player[].id == orig(player[].retired)
player[].id == orig(player[].impulse[2][0])
player[].id == orig(player[].impulse[4][0])
player[].id == orig(player[].impulse[6][0])
player[].id == orig(player[].impulse[8][0])
player[].body == orig(player[].body)
player[].body.type == orig(player[].body.type)
player[].body.visible == player[].body.tangible
player[].body.visible == orig(player[].body.visible)
player[].body.visible == orig(player[].body.tangible)
player[].body.bodyPoints == orig(player[].body.bodyPoints)
player[].body.bodyPoints[0] == orig(player[].body.bodyPoints[0])
player[].body.bodyPoints->position == orig(player[].body.bodyPoints->position)
player[].body.bodyPoints->player == orig(player[].body.bodyPoints->player)
player[].body.bodyPoints->player[0] == orig(player[].body.bodyPoints->player[0])
player[].body.bodyPoints->aspect == orig(player[].body.bodyPoints->aspect)
player[].body.bodyMaps == orig(player[].body.bodyMaps)
player[].body.bodyMapsSize == orig(player[].body.bodyMapsSize)
player[].body.bodySize == orig(player[].body.bodySize)
player[].body.bodyWidth == orig(player[].body.bodyWidth)
player[].body.bodyHeight == orig(player[].body.bodyHeight)
player[].body.color == orig(player[].body.color)
player[].basePosition == orig(player[].basePosition)
player[].impulse[0] == orig(player[].impulse[0])
player[].impulse[0][0] == orig(player[].impulse[0][0])
player[].impulse[1] == orig(player[].impulse[1])
player[].impulse[1][0] == orig(player[].impulse[1][0])
player[].impulse[2] == orig(player[].impulse[2])
player[].impulse[3] == orig(player[].impulse[3])
player[].impulse[3][0] == orig(player[].impulse[3][0])
player[].impulse[4] == orig(player[].impulse[4])
player[].impulse[5] == orig(player[].impulse[5])
player[].impulse[5][0] == orig(player[].impulse[5][0])
player[].impulse[6] == orig(player[].impulse[6])
player[].impulse[7] == orig(player[].impulse[7])
player[].impulse[7][0] == orig(player[].impulse[7][0])
player[].impulse[8] == orig(player[].impulse[8])
player[].direction == orig(player[].direction)
player[].magnetos == orig(player[].magnetos)
player[].magnetos[0] == orig(player[].magnetos[0])
player[].stepCounter == orig(player[].stepCounter)
player[].pilot == orig(player[].pilot)
player[].onCrash == orig(player[].onCrash)
player[].onPushed == orig(player[].onPushed)
orig(::new_input) == ::players[orig(::new_input)].body.type
orig(::new_input) == ::players[::input_n].impulse[0][0]
orig(::new_input) == ::players[::input_i].impulse[0][0]
orig(::new_input) == ::players[orig(::input_n)].impulse[0][0]
orig(::new_input) == ::players[orig(::input_i)].impulse[0][0]
orig(::new_input) == ::players[orig(::new_input)].impulse[0][0]
orig(::new_input) == ::players[::input_n-1].impulse[1][0]
orig(::new_input) == ::players[::input_i-1].impulse[1][0]
orig(::new_input) == ::players[::new_input].impulse[1][0]
orig(::new_input) == ::players[orig(::input_n)-1].impulse[1][0]
orig(::new_input) == ::players[orig(::input_i)-1].impulse[1][0]
orig(::new_input) == orig(::players[post(::input_n)].impulse[0][0])
orig(::new_input) == orig(::players[post(::input_n)-1].impulse[1][0])
orig(::new_input) == orig(::players[post(::input_i)].impulse[0][0])
orig(::new_input) == orig(::players[post(::input_i)-1].impulse[1][0])
orig(::new_input) == orig(::players[post(::new_input)].impulse[1][0])
orig(::new_input) == player[orig(::new_input)].impulse[0][0]
orig(player) == player[::input_n-1].body.bodyPoints->player
orig(player) == orig(player[post(::input_n)-1].body.bodyPoints->player)
orig(player) == player[::input_i-1].body.bodyPoints->player
orig(player) == orig(player[post(::input_i)-1].body.bodyPoints->player)
orig(player) == player[::new_input].body.bodyPoints->player
orig(player) == orig(player[post(::new_input)].body.bodyPoints->player)
orig(player) == player[orig(::input_n)-1].body.bodyPoints->player
orig(player) == player[orig(::input_i)-1].body.bodyPoints->player
size(::players[]) == size(::players[].body.bodyPoints[0])
size(::players[]) == size(::players[].body.bodyPoints->player[0])
size(::players[]) == size(::players[].impulse[0])
size(::players[]) == size(::players[].impulse[0][0])
size(::players[]) == size(::players[].impulse[1])
size(::players[]) == size(::players[].impulse[1][0])
size(::players[]) == size(::players[].impulse[2])
size(::players[]) == size(::players[].impulse[2][0])
size(::players[]) == size(::players[].impulse[3])
size(::players[]) == size(::players[].impulse[3][0])
size(::players[]) == size(::players[].impulse[4])
size(::players[]) == size(::players[].impulse[4][0])
size(::players[]) == size(::players[].impulse[5])
size(::players[]) == size(::players[].impulse[5][0])
size(::players[]) == size(::players[].impulse[6])
size(::players[]) == size(::players[].impulse[6][0])
size(::players[]) == size(::players[].impulse[7])
size(::players[]) == size(::players[].impulse[7][0])
size(::players[]) == size(::players[].impulse[8])
size(::players[]) == size(::players[].impulse[8][0])
size(::players[]) == size(::players[].magnetos[0])
size(::players[]) == orig(size(::players[].body.bodyPoints[0]))
size(::players[]) == orig(size(::players[].body.bodyPoints->player[0]))
size(::players[]) == orig(size(::players[].impulse[0]))
size(::players[]) == orig(size(::players[].impulse[0][0]))
size(::players[]) == orig(size(::players[].impulse[1]))
size(::players[]) == orig(size(::players[].impulse[1][0]))
size(::players[]) == orig(size(::players[].impulse[2]))
size(::players[]) == orig(size(::players[].impulse[2][0]))
size(::players[]) == orig(size(::players[].impulse[3]))
size(::players[]) == orig(size(::players[].impulse[3][0]))
size(::players[]) == orig(size(::players[].impulse[4]))
size(::players[]) == orig(size(::players[].impulse[4][0]))
size(::players[]) == orig(size(::players[].impulse[5]))
size(::players[]) == orig(size(::players[].impulse[5][0]))
size(::players[]) == orig(size(::players[].impulse[6]))
size(::players[]) == orig(size(::players[].impulse[6][0]))
size(::players[]) == orig(size(::players[].impulse[7]))
size(::players[]) == orig(size(::players[].impulse[7][0]))
size(::players[]) == orig(size(::players[].impulse[8]))
size(::players[]) == orig(size(::players[].impulse[8][0]))
size(::players[]) == orig(size(::players[].magnetos[0]))
::crashedPlayers[::input_n-1] == ::crashedPlayers[::new_input]
::crashedPlayers[::input_i-1] == ::crashedPlayers[::new_input]
::crashedPlayers[::new_input] == ::crashedPlayers[orig(::input_n)-1]
::crashedPlayers[::new_input] == ::crashedPlayers[orig(::input_i)-1]
::crashedPlayers[::new_input] == orig(::crashedPlayers[post(::input_n)-1])
::crashedPlayers[::new_input] == orig(::crashedPlayers[post(::input_i)-1])
::crashedPlayers[::new_input] == orig(::crashedPlayers[::input_n-1])
::crashedPlayers[::new_input] == orig(::crashedPlayers[::input_i-1])
::crashedPlayers[::input_n-1].start == ::crashedPlayers[::new_input].start
::crashedPlayers[::input_i-1].start == ::crashedPlayers[::new_input].start
::crashedPlayers[::new_input].start == ::crashedPlayers[orig(::input_n)-1].start
::crashedPlayers[::new_input].start == ::crashedPlayers[orig(::input_i)-1].start
::crashedPlayers[::new_input].start == ::crashedPlayers[::input_n-1].end
::crashedPlayers[::new_input].start == ::crashedPlayers[::input_i-1].end
::crashedPlayers[::new_input].start == ::crashedPlayers[orig(::input_n)-1].end
::crashedPlayers[::new_input].start == ::crashedPlayers[orig(::input_i)-1].end
::crashedPlayers[::new_input].start == ::playerSpace[::input_n-1].playerNodes->start->prev
::crashedPlayers[::new_input].start == ::playerSpace[::input_i-1].playerNodes->start->prev
::crashedPlayers[::new_input].start == ::playerSpace[orig(::input_n)-1].playerNodes->start->prev
::crashedPlayers[::new_input].start == ::playerSpace[orig(::input_i)-1].playerNodes->start->prev
::crashedPlayers[::new_input].start == ::playerSpace[::input_n-1].playerNodes->end->next
::crashedPlayers[::new_input].start == ::playerSpace[::input_i-1].playerNodes->end->next
::crashedPlayers[::new_input].start == ::playerSpace[orig(::input_n)-1].playerNodes->end->next
::crashedPlayers[::new_input].start == ::playerSpace[orig(::input_i)-1].playerNodes->end->next
::crashedPlayers[::new_input].start == ::playerSpace[::input_n-1].guideNodes->start
::crashedPlayers[::new_input].start == ::playerSpace[::input_i-1].guideNodes->start
::crashedPlayers[::new_input].start == ::playerSpace[orig(::input_n)-1].guideNodes->start
::crashedPlayers[::new_input].start == ::playerSpace[orig(::input_i)-1].guideNodes->start
::crashedPlayers[::new_input].start == ::playerSpace[::input_n-1].guideNodes->end
::crashedPlayers[::new_input].start == ::playerSpace[::input_i-1].guideNodes->end
::crashedPlayers[::new_input].start == ::playerSpace[orig(::input_n)-1].guideNodes->end
::crashedPlayers[::new_input].start == ::playerSpace[orig(::input_i)-1].guideNodes->end
::crashedPlayers[::new_input].start == space[::input_n-1].playerNodes->start->prev
::crashedPlayers[::new_input].start == space[::input_n-1].playerNodes->end->next
::crashedPlayers[::new_input].start == space[::input_n-1].guideNodes->start
::crashedPlayers[::new_input].start == space[::input_n-1].guideNodes->end
::crashedPlayers[::new_input].start == orig(::crashedPlayers[post(::input_n)-1].start)
::crashedPlayers[::new_input].start == orig(::crashedPlayers[post(::input_n)-1].end)
::crashedPlayers[::new_input].start == orig(::playerSpace[post(::input_n)-1].playerNodes->start->prev)
::crashedPlayers[::new_input].start == orig(::playerSpace[post(::input_n)-1].playerNodes->end->next)
::crashedPlayers[::new_input].start == orig(::playerSpace[post(::input_n)-1].guideNodes->start)
::crashedPlayers[::new_input].start == orig(::playerSpace[post(::input_n)-1].guideNodes->end)
::crashedPlayers[::new_input].start == orig(space[post(::input_n)-1].playerNodes->start->prev)
::crashedPlayers[::new_input].start == orig(space[post(::input_n)-1].playerNodes->end->next)
::crashedPlayers[::new_input].start == orig(space[post(::input_n)-1].guideNodes->start)
::crashedPlayers[::new_input].start == orig(space[post(::input_n)-1].guideNodes->end)
::crashedPlayers[::new_input].start == space[::input_i-1].playerNodes->start->prev
::crashedPlayers[::new_input].start == space[::input_i-1].playerNodes->end->next
::crashedPlayers[::new_input].start == space[::input_i-1].guideNodes->start
::crashedPlayers[::new_input].start == space[::input_i-1].guideNodes->end
::crashedPlayers[::new_input].start == orig(::crashedPlayers[post(::input_i)-1].start)
::crashedPlayers[::new_input].start == orig(::crashedPlayers[post(::input_i)-1].end)
::crashedPlayers[::new_input].start == orig(::playerSpace[post(::input_i)-1].playerNodes->start->prev)
::crashedPlayers[::new_input].start == orig(::playerSpace[post(::input_i)-1].playerNodes->end->next)
::crashedPlayers[::new_input].start == orig(::playerSpace[post(::input_i)-1].guideNodes->start)
::crashedPlayers[::new_input].start == orig(::playerSpace[post(::input_i)-1].guideNodes->end)
::crashedPlayers[::new_input].start == orig(space[post(::input_i)-1].playerNodes->start->prev)
::crashedPlayers[::new_input].start == orig(space[post(::input_i)-1].playerNodes->end->next)
::crashedPlayers[::new_input].start == orig(space[post(::input_i)-1].guideNodes->start)
::crashedPlayers[::new_input].start == orig(space[post(::input_i)-1].guideNodes->end)
::crashedPlayers[::new_input].start == space[orig(::input_n)-1].playerNodes->start->prev
::crashedPlayers[::new_input].start == space[orig(::input_i)-1].playerNodes->start->prev
::crashedPlayers[::new_input].start == space[orig(::input_n)-1].playerNodes->end->next
::crashedPlayers[::new_input].start == space[orig(::input_i)-1].playerNodes->end->next
::crashedPlayers[::new_input].start == space[orig(::input_n)-1].guideNodes->start
::crashedPlayers[::new_input].start == space[orig(::input_i)-1].guideNodes->start
::crashedPlayers[::new_input].start == space[orig(::input_n)-1].guideNodes->end
::crashedPlayers[::new_input].start == space[orig(::input_i)-1].guideNodes->end
::crashedPlayers[::new_input].start == orig(::crashedPlayers[::input_n-1].start)
::crashedPlayers[::new_input].start == orig(::crashedPlayers[::input_i-1].start)
::crashedPlayers[::new_input].start == orig(::crashedPlayers[::input_n-1].end)
::crashedPlayers[::new_input].start == orig(::crashedPlayers[::input_i-1].end)
::crashedPlayers[::new_input].start == orig(::playerSpace[::input_n-1].playerNodes->start->prev)
::crashedPlayers[::new_input].start == orig(::playerSpace[::input_i-1].playerNodes->start->prev)
::crashedPlayers[::new_input].start == orig(::playerSpace[::input_n-1].playerNodes->end->next)
::crashedPlayers[::new_input].start == orig(::playerSpace[::input_i-1].playerNodes->end->next)
::crashedPlayers[::new_input].start == orig(::playerSpace[::input_n-1].guideNodes->start)
::crashedPlayers[::new_input].start == orig(::playerSpace[::input_i-1].guideNodes->start)
::crashedPlayers[::new_input].start == orig(::playerSpace[::input_n-1].guideNodes->end)
::crashedPlayers[::new_input].start == orig(::playerSpace[::input_i-1].guideNodes->end)
::crashedPlayers[::new_input].start == orig(space[::input_n-1].playerNodes->start->prev)
::crashedPlayers[::new_input].start == orig(space[::input_n-1].playerNodes->end->next)
::crashedPlayers[::new_input].start == orig(space[::input_n-1].guideNodes->start)
::crashedPlayers[::new_input].start == orig(space[::input_n-1].guideNodes->end)
::crashedPlayers[::new_input].start == orig(space[::input_i-1].playerNodes->start->prev)
::crashedPlayers[::new_input].start == orig(space[::input_i-1].playerNodes->end->next)
::crashedPlayers[::new_input].start == orig(space[::input_i-1].guideNodes->start)
::crashedPlayers[::new_input].start == orig(space[::input_i-1].guideNodes->end)
::playerSpace[::input_n-1] == ::playerSpace[::new_input]
::playerSpace[::input_i-1] == ::playerSpace[::new_input]
::playerSpace[::new_input] == ::playerSpace[orig(::input_n)-1]
::playerSpace[::new_input] == ::playerSpace[orig(::input_i)-1]
::playerSpace[::new_input] == space[::input_n-1]
::playerSpace[::new_input] == orig(::playerSpace[post(::input_n)-1])
::playerSpace[::new_input] == orig(space[post(::input_n)-1])
::playerSpace[::new_input] == space[::input_i-1]
::playerSpace[::new_input] == orig(::playerSpace[post(::input_i)-1])
::playerSpace[::new_input] == orig(space[post(::input_i)-1])
::playerSpace[::new_input] == space[orig(::input_n)-1]
::playerSpace[::new_input] == space[orig(::input_i)-1]
::playerSpace[::new_input] == orig(::playerSpace[::input_n-1])
::playerSpace[::new_input] == orig(::playerSpace[::input_i-1])
::playerSpace[::new_input] == orig(space[::input_n-1])
::playerSpace[::new_input] == orig(space[::input_i-1])
::playerSpace[::input_n-1].playerNodes == ::playerSpace[::new_input].playerNodes
::playerSpace[::input_i-1].playerNodes == ::playerSpace[::new_input].playerNodes
::playerSpace[::new_input].playerNodes == ::playerSpace[orig(::input_n)-1].playerNodes
::playerSpace[::new_input].playerNodes == ::playerSpace[orig(::input_i)-1].playerNodes
::playerSpace[::new_input].playerNodes == space[::input_n-1].playerNodes
::playerSpace[::new_input].playerNodes == orig(::playerSpace[post(::input_n)-1].playerNodes)
::playerSpace[::new_input].playerNodes == orig(space[post(::input_n)-1].playerNodes)
::playerSpace[::new_input].playerNodes == space[::input_i-1].playerNodes
::playerSpace[::new_input].playerNodes == orig(::playerSpace[post(::input_i)-1].playerNodes)
::playerSpace[::new_input].playerNodes == orig(space[post(::input_i)-1].playerNodes)
::playerSpace[::new_input].playerNodes == space[orig(::input_n)-1].playerNodes
::playerSpace[::new_input].playerNodes == space[orig(::input_i)-1].playerNodes
::playerSpace[::new_input].playerNodes == orig(::playerSpace[::input_n-1].playerNodes)
::playerSpace[::new_input].playerNodes == orig(::playerSpace[::input_i-1].playerNodes)
::playerSpace[::new_input].playerNodes == orig(space[::input_n-1].playerNodes)
::playerSpace[::new_input].playerNodes == orig(space[::input_i-1].playerNodes)
::playerSpace[::input_n-1].playerNodes[0] == ::playerSpace[::new_input].playerNodes[0]
::playerSpace[::input_i-1].playerNodes[0] == ::playerSpace[::new_input].playerNodes[0]
::playerSpace[::new_input].playerNodes[0] == ::playerSpace[orig(::input_n)-1].playerNodes[0]
::playerSpace[::new_input].playerNodes[0] == ::playerSpace[orig(::input_i)-1].playerNodes[0]
::playerSpace[::new_input].playerNodes[0] == space[::input_n-1].playerNodes[0]
::playerSpace[::new_input].playerNodes[0] == orig(::playerSpace[post(::input_n)-1].playerNodes[0])
::playerSpace[::new_input].playerNodes[0] == orig(space[post(::input_n)-1].playerNodes[0])
::playerSpace[::new_input].playerNodes[0] == space[::input_i-1].playerNodes[0]
::playerSpace[::new_input].playerNodes[0] == orig(::playerSpace[post(::input_i)-1].playerNodes[0])
::playerSpace[::new_input].playerNodes[0] == orig(space[post(::input_i)-1].playerNodes[0])
::playerSpace[::new_input].playerNodes[0] == space[orig(::input_n)-1].playerNodes[0]
::playerSpace[::new_input].playerNodes[0] == space[orig(::input_i)-1].playerNodes[0]
::playerSpace[::new_input].playerNodes[0] == orig(::playerSpace[::input_n-1].playerNodes[0])
::playerSpace[::new_input].playerNodes[0] == orig(::playerSpace[::input_i-1].playerNodes[0])
::playerSpace[::new_input].playerNodes[0] == orig(space[::input_n-1].playerNodes[0])
::playerSpace[::new_input].playerNodes[0] == orig(space[::input_i-1].playerNodes[0])
::playerSpace[::input_n-1].playerNodes->start == ::playerSpace[::new_input].playerNodes->start
::playerSpace[::input_i-1].playerNodes->start == ::playerSpace[::new_input].playerNodes->start
::playerSpace[::new_input].playerNodes->start == ::playerSpace[orig(::input_n)-1].playerNodes->start
::playerSpace[::new_input].playerNodes->start == ::playerSpace[orig(::input_i)-1].playerNodes->start
::playerSpace[::new_input].playerNodes->start == space[::input_n-1].playerNodes->start
::playerSpace[::new_input].playerNodes->start == orig(::playerSpace[post(::input_n)-1].playerNodes->start)
::playerSpace[::new_input].playerNodes->start == orig(space[post(::input_n)-1].playerNodes->start)
::playerSpace[::new_input].playerNodes->start == space[::input_i-1].playerNodes->start
::playerSpace[::new_input].playerNodes->start == orig(::playerSpace[post(::input_i)-1].playerNodes->start)
::playerSpace[::new_input].playerNodes->start == orig(space[post(::input_i)-1].playerNodes->start)
::playerSpace[::new_input].playerNodes->start == space[orig(::input_n)-1].playerNodes->start
::playerSpace[::new_input].playerNodes->start == space[orig(::input_i)-1].playerNodes->start
::playerSpace[::new_input].playerNodes->start == orig(::playerSpace[::input_n-1].playerNodes->start)
::playerSpace[::new_input].playerNodes->start == orig(::playerSpace[::input_i-1].playerNodes->start)
::playerSpace[::new_input].playerNodes->start == orig(space[::input_n-1].playerNodes->start)
::playerSpace[::new_input].playerNodes->start == orig(space[::input_i-1].playerNodes->start)
::playerSpace[::input_n-1].playerNodes->start[0] == ::playerSpace[::new_input].playerNodes->start[0]
::playerSpace[::input_i-1].playerNodes->start[0] == ::playerSpace[::new_input].playerNodes->start[0]
::playerSpace[::new_input].playerNodes->start[0] == ::playerSpace[orig(::input_n)-1].playerNodes->start[0]
::playerSpace[::new_input].playerNodes->start[0] == ::playerSpace[orig(::input_i)-1].playerNodes->start[0]
::playerSpace[::new_input].playerNodes->start[0] == space[::input_n-1].playerNodes->start[0]
::playerSpace[::new_input].playerNodes->start[0] == orig(::playerSpace[post(::input_n)-1].playerNodes->start[0])
::playerSpace[::new_input].playerNodes->start[0] == orig(space[post(::input_n)-1].playerNodes->start[0])
::playerSpace[::new_input].playerNodes->start[0] == space[::input_i-1].playerNodes->start[0]
::playerSpace[::new_input].playerNodes->start[0] == orig(::playerSpace[post(::input_i)-1].playerNodes->start[0])
::playerSpace[::new_input].playerNodes->start[0] == orig(space[post(::input_i)-1].playerNodes->start[0])
::playerSpace[::new_input].playerNodes->start[0] == space[orig(::input_n)-1].playerNodes->start[0]
::playerSpace[::new_input].playerNodes->start[0] == space[orig(::input_i)-1].playerNodes->start[0]
::playerSpace[::new_input].playerNodes->start[0] == orig(::playerSpace[::input_n-1].playerNodes->start[0])
::playerSpace[::new_input].playerNodes->start[0] == orig(::playerSpace[::input_i-1].playerNodes->start[0])
::playerSpace[::new_input].playerNodes->start[0] == orig(space[::input_n-1].playerNodes->start[0])
::playerSpace[::new_input].playerNodes->start[0] == orig(space[::input_i-1].playerNodes->start[0])
::playerSpace[::input_n-1].playerNodes->start->next == ::playerSpace[::new_input].playerNodes->start->next
::playerSpace[::input_i-1].playerNodes->start->next == ::playerSpace[::new_input].playerNodes->start->next
::playerSpace[::new_input].playerNodes->start->next == ::playerSpace[orig(::input_n)-1].playerNodes->start->next
::playerSpace[::new_input].playerNodes->start->next == ::playerSpace[orig(::input_i)-1].playerNodes->start->next
::playerSpace[::new_input].playerNodes->start->next == space[::input_n-1].playerNodes->start->next
::playerSpace[::new_input].playerNodes->start->next == orig(::playerSpace[post(::input_n)-1].playerNodes->start->next)
::playerSpace[::new_input].playerNodes->start->next == orig(space[post(::input_n)-1].playerNodes->start->next)
::playerSpace[::new_input].playerNodes->start->next == space[::input_i-1].playerNodes->start->next
::playerSpace[::new_input].playerNodes->start->next == orig(::playerSpace[post(::input_i)-1].playerNodes->start->next)
::playerSpace[::new_input].playerNodes->start->next == orig(space[post(::input_i)-1].playerNodes->start->next)
::playerSpace[::new_input].playerNodes->start->next == space[orig(::input_n)-1].playerNodes->start->next
::playerSpace[::new_input].playerNodes->start->next == space[orig(::input_i)-1].playerNodes->start->next
::playerSpace[::new_input].playerNodes->start->next == orig(::playerSpace[::input_n-1].playerNodes->start->next)
::playerSpace[::new_input].playerNodes->start->next == orig(::playerSpace[::input_i-1].playerNodes->start->next)
::playerSpace[::new_input].playerNodes->start->next == orig(space[::input_n-1].playerNodes->start->next)
::playerSpace[::new_input].playerNodes->start->next == orig(space[::input_i-1].playerNodes->start->next)
::playerSpace[::input_n-1].playerNodes->start->next[0] == ::playerSpace[::new_input].playerNodes->start->next[0]
::playerSpace[::input_i-1].playerNodes->start->next[0] == ::playerSpace[::new_input].playerNodes->start->next[0]
::playerSpace[::new_input].playerNodes->start->next[0] == ::playerSpace[orig(::input_n)-1].playerNodes->start->next[0]
::playerSpace[::new_input].playerNodes->start->next[0] == ::playerSpace[orig(::input_i)-1].playerNodes->start->next[0]
::playerSpace[::new_input].playerNodes->start->next[0] == space[::input_n-1].playerNodes->start->next[0]
::playerSpace[::new_input].playerNodes->start->next[0] == orig(::playerSpace[post(::input_n)-1].playerNodes->start->next[0])
::playerSpace[::new_input].playerNodes->start->next[0] == orig(space[post(::input_n)-1].playerNodes->start->next[0])
::playerSpace[::new_input].playerNodes->start->next[0] == space[::input_i-1].playerNodes->start->next[0]
::playerSpace[::new_input].playerNodes->start->next[0] == orig(::playerSpace[post(::input_i)-1].playerNodes->start->next[0])
::playerSpace[::new_input].playerNodes->start->next[0] == orig(space[post(::input_i)-1].playerNodes->start->next[0])
::playerSpace[::new_input].playerNodes->start->next[0] == space[orig(::input_n)-1].playerNodes->start->next[0]
::playerSpace[::new_input].playerNodes->start->next[0] == space[orig(::input_i)-1].playerNodes->start->next[0]
::playerSpace[::new_input].playerNodes->start->next[0] == orig(::playerSpace[::input_n-1].playerNodes->start->next[0])
::playerSpace[::new_input].playerNodes->start->next[0] == orig(::playerSpace[::input_i-1].playerNodes->start->next[0])
::playerSpace[::new_input].playerNodes->start->next[0] == orig(space[::input_n-1].playerNodes->start->next[0])
::playerSpace[::new_input].playerNodes->start->next[0] == orig(space[::input_i-1].playerNodes->start->next[0])
::playerSpace[::input_n-1].playerNodes->start->data == ::playerSpace[::new_input].playerNodes->start->data
::playerSpace[::input_i-1].playerNodes->start->data == ::playerSpace[::new_input].playerNodes->start->data
::playerSpace[::new_input].playerNodes->start->data == ::playerSpace[orig(::input_n)-1].playerNodes->start->data
::playerSpace[::new_input].playerNodes->start->data == ::playerSpace[orig(::input_i)-1].playerNodes->start->data
::playerSpace[::new_input].playerNodes->start->data == space[::input_n-1].playerNodes->start->data
::playerSpace[::new_input].playerNodes->start->data == orig(::playerSpace[post(::input_n)-1].playerNodes->start->data)
::playerSpace[::new_input].playerNodes->start->data == orig(space[post(::input_n)-1].playerNodes->start->data)
::playerSpace[::new_input].playerNodes->start->data == space[::input_i-1].playerNodes->start->data
::playerSpace[::new_input].playerNodes->start->data == orig(::playerSpace[post(::input_i)-1].playerNodes->start->data)
::playerSpace[::new_input].playerNodes->start->data == orig(space[post(::input_i)-1].playerNodes->start->data)
::playerSpace[::new_input].playerNodes->start->data == space[orig(::input_n)-1].playerNodes->start->data
::playerSpace[::new_input].playerNodes->start->data == space[orig(::input_i)-1].playerNodes->start->data
::playerSpace[::new_input].playerNodes->start->data == orig(::playerSpace[::input_n-1].playerNodes->start->data)
::playerSpace[::new_input].playerNodes->start->data == orig(::playerSpace[::input_i-1].playerNodes->start->data)
::playerSpace[::new_input].playerNodes->start->data == orig(space[::input_n-1].playerNodes->start->data)
::playerSpace[::new_input].playerNodes->start->data == orig(space[::input_i-1].playerNodes->start->data)
::playerSpace[::input_n-1].playerNodes->end == ::playerSpace[::new_input].playerNodes->end
::playerSpace[::input_i-1].playerNodes->end == ::playerSpace[::new_input].playerNodes->end
::playerSpace[::new_input].playerNodes->end == ::playerSpace[orig(::input_n)-1].playerNodes->end
::playerSpace[::new_input].playerNodes->end == ::playerSpace[orig(::input_i)-1].playerNodes->end
::playerSpace[::new_input].playerNodes->end == space[::input_n-1].playerNodes->end
::playerSpace[::new_input].playerNodes->end == orig(::playerSpace[post(::input_n)-1].playerNodes->end)
::playerSpace[::new_input].playerNodes->end == orig(space[post(::input_n)-1].playerNodes->end)
::playerSpace[::new_input].playerNodes->end == space[::input_i-1].playerNodes->end
::playerSpace[::new_input].playerNodes->end == orig(::playerSpace[post(::input_i)-1].playerNodes->end)
::playerSpace[::new_input].playerNodes->end == orig(space[post(::input_i)-1].playerNodes->end)
::playerSpace[::new_input].playerNodes->end == space[orig(::input_n)-1].playerNodes->end
::playerSpace[::new_input].playerNodes->end == space[orig(::input_i)-1].playerNodes->end
::playerSpace[::new_input].playerNodes->end == orig(::playerSpace[::input_n-1].playerNodes->end)
::playerSpace[::new_input].playerNodes->end == orig(::playerSpace[::input_i-1].playerNodes->end)
::playerSpace[::new_input].playerNodes->end == orig(space[::input_n-1].playerNodes->end)
::playerSpace[::new_input].playerNodes->end == orig(space[::input_i-1].playerNodes->end)
::playerSpace[::input_n-1].playerNodes->end[0] == ::playerSpace[::new_input].playerNodes->end[0]
::playerSpace[::input_i-1].playerNodes->end[0] == ::playerSpace[::new_input].playerNodes->end[0]
::playerSpace[::new_input].playerNodes->end[0] == ::playerSpace[orig(::input_n)-1].playerNodes->end[0]
::playerSpace[::new_input].playerNodes->end[0] == ::playerSpace[orig(::input_i)-1].playerNodes->end[0]
::playerSpace[::new_input].playerNodes->end[0] == space[::input_n-1].playerNodes->end[0]
::playerSpace[::new_input].playerNodes->end[0] == orig(::playerSpace[post(::input_n)-1].playerNodes->end[0])
::playerSpace[::new_input].playerNodes->end[0] == orig(space[post(::input_n)-1].playerNodes->end[0])
::playerSpace[::new_input].playerNodes->end[0] == space[::input_i-1].playerNodes->end[0]
::playerSpace[::new_input].playerNodes->end[0] == orig(::playerSpace[post(::input_i)-1].playerNodes->end[0])
::playerSpace[::new_input].playerNodes->end[0] == orig(space[post(::input_i)-1].playerNodes->end[0])
::playerSpace[::new_input].playerNodes->end[0] == space[orig(::input_n)-1].playerNodes->end[0]
::playerSpace[::new_input].playerNodes->end[0] == space[orig(::input_i)-1].playerNodes->end[0]
::playerSpace[::new_input].playerNodes->end[0] == orig(::playerSpace[::input_n-1].playerNodes->end[0])
::playerSpace[::new_input].playerNodes->end[0] == orig(::playerSpace[::input_i-1].playerNodes->end[0])
::playerSpace[::new_input].playerNodes->end[0] == orig(space[::input_n-1].playerNodes->end[0])
::playerSpace[::new_input].playerNodes->end[0] == orig(space[::input_i-1].playerNodes->end[0])
::playerSpace[::input_n-1].playerNodes->end->data == ::playerSpace[::new_input].playerNodes->end->data
::playerSpace[::input_i-1].playerNodes->end->data == ::playerSpace[::new_input].playerNodes->end->data
::playerSpace[::new_input].playerNodes->end->data == ::playerSpace[orig(::input_n)-1].playerNodes->end->data
::playerSpace[::new_input].playerNodes->end->data == ::playerSpace[orig(::input_i)-1].playerNodes->end->data
::playerSpace[::new_input].playerNodes->end->data == space[::input_n-1].playerNodes->end->data
::playerSpace[::new_input].playerNodes->end->data == orig(::playerSpace[post(::input_n)-1].playerNodes->end->data)
::playerSpace[::new_input].playerNodes->end->data == orig(space[post(::input_n)-1].playerNodes->end->data)
::playerSpace[::new_input].playerNodes->end->data == space[::input_i-1].playerNodes->end->data
::playerSpace[::new_input].playerNodes->end->data == orig(::playerSpace[post(::input_i)-1].playerNodes->end->data)
::playerSpace[::new_input].playerNodes->end->data == orig(space[post(::input_i)-1].playerNodes->end->data)
::playerSpace[::new_input].playerNodes->end->data == space[orig(::input_n)-1].playerNodes->end->data
::playerSpace[::new_input].playerNodes->end->data == space[orig(::input_i)-1].playerNodes->end->data
::playerSpace[::new_input].playerNodes->end->data == orig(::playerSpace[::input_n-1].playerNodes->end->data)
::playerSpace[::new_input].playerNodes->end->data == orig(::playerSpace[::input_i-1].playerNodes->end->data)
::playerSpace[::new_input].playerNodes->end->data == orig(space[::input_n-1].playerNodes->end->data)
::playerSpace[::new_input].playerNodes->end->data == orig(space[::input_i-1].playerNodes->end->data)
::playerSpace[::input_n-1].playerNodes->end->prev == ::playerSpace[::new_input].playerNodes->end->prev
::playerSpace[::input_i-1].playerNodes->end->prev == ::playerSpace[::new_input].playerNodes->end->prev
::playerSpace[::new_input].playerNodes->end->prev == ::playerSpace[orig(::input_n)-1].playerNodes->end->prev
::playerSpace[::new_input].playerNodes->end->prev == ::playerSpace[orig(::input_i)-1].playerNodes->end->prev
::playerSpace[::new_input].playerNodes->end->prev == space[::input_n-1].playerNodes->end->prev
::playerSpace[::new_input].playerNodes->end->prev == orig(::playerSpace[post(::input_n)-1].playerNodes->end->prev)
::playerSpace[::new_input].playerNodes->end->prev == orig(space[post(::input_n)-1].playerNodes->end->prev)
::playerSpace[::new_input].playerNodes->end->prev == space[::input_i-1].playerNodes->end->prev
::playerSpace[::new_input].playerNodes->end->prev == orig(::playerSpace[post(::input_i)-1].playerNodes->end->prev)
::playerSpace[::new_input].playerNodes->end->prev == orig(space[post(::input_i)-1].playerNodes->end->prev)
::playerSpace[::new_input].playerNodes->end->prev == space[orig(::input_n)-1].playerNodes->end->prev
::playerSpace[::new_input].playerNodes->end->prev == space[orig(::input_i)-1].playerNodes->end->prev
::playerSpace[::new_input].playerNodes->end->prev == orig(::playerSpace[::input_n-1].playerNodes->end->prev)
::playerSpace[::new_input].playerNodes->end->prev == orig(::playerSpace[::input_i-1].playerNodes->end->prev)
::playerSpace[::new_input].playerNodes->end->prev == orig(space[::input_n-1].playerNodes->end->prev)
::playerSpace[::new_input].playerNodes->end->prev == orig(space[::input_i-1].playerNodes->end->prev)
::playerSpace[::input_n-1].playerNodes->end->prev[0] == ::playerSpace[::new_input].playerNodes->end->prev[0]
::playerSpace[::input_i-1].playerNodes->end->prev[0] == ::playerSpace[::new_input].playerNodes->end->prev[0]
::playerSpace[::new_input].playerNodes->end->prev[0] == ::playerSpace[orig(::input_n)-1].playerNodes->end->prev[0]
::playerSpace[::new_input].playerNodes->end->prev[0] == ::playerSpace[orig(::input_i)-1].playerNodes->end->prev[0]
::playerSpace[::new_input].playerNodes->end->prev[0] == space[::input_n-1].playerNodes->end->prev[0]
::playerSpace[::new_input].playerNodes->end->prev[0] == orig(::playerSpace[post(::input_n)-1].playerNodes->end->prev[0])
::playerSpace[::new_input].playerNodes->end->prev[0] == orig(space[post(::input_n)-1].playerNodes->end->prev[0])
::playerSpace[::new_input].playerNodes->end->prev[0] == space[::input_i-1].playerNodes->end->prev[0]
::playerSpace[::new_input].playerNodes->end->prev[0] == orig(::playerSpace[post(::input_i)-1].playerNodes->end->prev[0])
::playerSpace[::new_input].playerNodes->end->prev[0] == orig(space[post(::input_i)-1].playerNodes->end->prev[0])
::playerSpace[::new_input].playerNodes->end->prev[0] == space[orig(::input_n)-1].playerNodes->end->prev[0]
::playerSpace[::new_input].playerNodes->end->prev[0] == space[orig(::input_i)-1].playerNodes->end->prev[0]
::playerSpace[::new_input].playerNodes->end->prev[0] == orig(::playerSpace[::input_n-1].playerNodes->end->prev[0])
::playerSpace[::new_input].playerNodes->end->prev[0] == orig(::playerSpace[::input_i-1].playerNodes->end->prev[0])
::playerSpace[::new_input].playerNodes->end->prev[0] == orig(space[::input_n-1].playerNodes->end->prev[0])
::playerSpace[::new_input].playerNodes->end->prev[0] == orig(space[::input_i-1].playerNodes->end->prev[0])
::playerSpace[::input_n-1].playerMap == ::playerSpace[::new_input].playerMap
::playerSpace[::input_i-1].playerMap == ::playerSpace[::new_input].playerMap
::playerSpace[::new_input].playerMap == ::playerSpace[orig(::input_n)-1].playerMap
::playerSpace[::new_input].playerMap == ::playerSpace[orig(::input_i)-1].playerMap
::playerSpace[::new_input].playerMap == space[::input_n-1].playerMap
::playerSpace[::new_input].playerMap == orig(::playerSpace[post(::input_n)-1].playerMap)
::playerSpace[::new_input].playerMap == orig(space[post(::input_n)-1].playerMap)
::playerSpace[::new_input].playerMap == space[::input_i-1].playerMap
::playerSpace[::new_input].playerMap == orig(::playerSpace[post(::input_i)-1].playerMap)
::playerSpace[::new_input].playerMap == orig(space[post(::input_i)-1].playerMap)
::playerSpace[::new_input].playerMap == space[orig(::input_n)-1].playerMap
::playerSpace[::new_input].playerMap == space[orig(::input_i)-1].playerMap
::playerSpace[::new_input].playerMap == orig(::playerSpace[::input_n-1].playerMap)
::playerSpace[::new_input].playerMap == orig(::playerSpace[::input_i-1].playerMap)
::playerSpace[::new_input].playerMap == orig(space[::input_n-1].playerMap)
::playerSpace[::new_input].playerMap == orig(space[::input_i-1].playerMap)
::playerSpace[::input_n-1].guideNodes == ::playerSpace[::new_input].guideNodes
::playerSpace[::input_i-1].guideNodes == ::playerSpace[::new_input].guideNodes
::playerSpace[::new_input].guideNodes == ::playerSpace[orig(::input_n)-1].guideNodes
::playerSpace[::new_input].guideNodes == ::playerSpace[orig(::input_i)-1].guideNodes
::playerSpace[::new_input].guideNodes == space[::input_n-1].guideNodes
::playerSpace[::new_input].guideNodes == orig(::playerSpace[post(::input_n)-1].guideNodes)
::playerSpace[::new_input].guideNodes == orig(space[post(::input_n)-1].guideNodes)
::playerSpace[::new_input].guideNodes == space[::input_i-1].guideNodes
::playerSpace[::new_input].guideNodes == orig(::playerSpace[post(::input_i)-1].guideNodes)
::playerSpace[::new_input].guideNodes == orig(space[post(::input_i)-1].guideNodes)
::playerSpace[::new_input].guideNodes == space[orig(::input_n)-1].guideNodes
::playerSpace[::new_input].guideNodes == space[orig(::input_i)-1].guideNodes
::playerSpace[::new_input].guideNodes == orig(::playerSpace[::input_n-1].guideNodes)
::playerSpace[::new_input].guideNodes == orig(::playerSpace[::input_i-1].guideNodes)
::playerSpace[::new_input].guideNodes == orig(space[::input_n-1].guideNodes)
::playerSpace[::new_input].guideNodes == orig(space[::input_i-1].guideNodes)
::playerSpace[::input_n-1].guideNodes[0] == ::playerSpace[::new_input].guideNodes[0]
::playerSpace[::input_i-1].guideNodes[0] == ::playerSpace[::new_input].guideNodes[0]
::playerSpace[::new_input].guideNodes[0] == ::playerSpace[orig(::input_n)-1].guideNodes[0]
::playerSpace[::new_input].guideNodes[0] == ::playerSpace[orig(::input_i)-1].guideNodes[0]
::playerSpace[::new_input].guideNodes[0] == space[::input_n-1].guideNodes[0]
::playerSpace[::new_input].guideNodes[0] == orig(::playerSpace[post(::input_n)-1].guideNodes[0])
::playerSpace[::new_input].guideNodes[0] == orig(space[post(::input_n)-1].guideNodes[0])
::playerSpace[::new_input].guideNodes[0] == space[::input_i-1].guideNodes[0]
::playerSpace[::new_input].guideNodes[0] == orig(::playerSpace[post(::input_i)-1].guideNodes[0])
::playerSpace[::new_input].guideNodes[0] == orig(space[post(::input_i)-1].guideNodes[0])
::playerSpace[::new_input].guideNodes[0] == space[orig(::input_n)-1].guideNodes[0]
::playerSpace[::new_input].guideNodes[0] == space[orig(::input_i)-1].guideNodes[0]
::playerSpace[::new_input].guideNodes[0] == orig(::playerSpace[::input_n-1].guideNodes[0])
::playerSpace[::new_input].guideNodes[0] == orig(::playerSpace[::input_i-1].guideNodes[0])
::playerSpace[::new_input].guideNodes[0] == orig(space[::input_n-1].guideNodes[0])
::playerSpace[::new_input].guideNodes[0] == orig(space[::input_i-1].guideNodes[0])
::playerSpace[::input_n-1].groundMap == ::playerSpace[::new_input].groundMap
::playerSpace[::input_i-1].groundMap == ::playerSpace[::new_input].groundMap
::playerSpace[::new_input].groundMap == ::playerSpace[orig(::input_n)-1].groundMap
::playerSpace[::new_input].groundMap == ::playerSpace[orig(::input_i)-1].groundMap
::playerSpace[::new_input].groundMap == space[::input_n-1].groundMap
::playerSpace[::new_input].groundMap == orig(::playerSpace[post(::input_n)-1].groundMap)
::playerSpace[::new_input].groundMap == orig(space[post(::input_n)-1].groundMap)
::playerSpace[::new_input].groundMap == space[::input_i-1].groundMap
::playerSpace[::new_input].groundMap == orig(::playerSpace[post(::input_i)-1].groundMap)
::playerSpace[::new_input].groundMap == orig(space[post(::input_i)-1].groundMap)
::playerSpace[::new_input].groundMap == space[orig(::input_n)-1].groundMap
::playerSpace[::new_input].groundMap == space[orig(::input_i)-1].groundMap
::playerSpace[::new_input].groundMap == orig(::playerSpace[::input_n-1].groundMap)
::playerSpace[::new_input].groundMap == orig(::playerSpace[::input_i-1].groundMap)
::playerSpace[::new_input].groundMap == orig(space[::input_n-1].groundMap)
::playerSpace[::new_input].groundMap == orig(space[::input_i-1].groundMap)
::playerSpace[::input_n-1].actionGroup == ::playerSpace[::new_input].actionGroup
::playerSpace[::input_i-1].actionGroup == ::playerSpace[::new_input].actionGroup
::playerSpace[::new_input].actionGroup == ::playerSpace[orig(::input_n)-1].actionGroup
::playerSpace[::new_input].actionGroup == ::playerSpace[orig(::input_i)-1].actionGroup
::playerSpace[::new_input].actionGroup == space[::input_n-1].actionGroup
::playerSpace[::new_input].actionGroup == orig(::playerSpace[post(::input_n)-1].actionGroup)
::playerSpace[::new_input].actionGroup == orig(space[post(::input_n)-1].actionGroup)
::playerSpace[::new_input].actionGroup == space[::input_i-1].actionGroup
::playerSpace[::new_input].actionGroup == orig(::playerSpace[post(::input_i)-1].actionGroup)
::playerSpace[::new_input].actionGroup == orig(space[post(::input_i)-1].actionGroup)
::playerSpace[::new_input].actionGroup == space[orig(::input_n)-1].actionGroup
::playerSpace[::new_input].actionGroup == space[orig(::input_i)-1].actionGroup
::playerSpace[::new_input].actionGroup == orig(::playerSpace[::input_n-1].actionGroup)
::playerSpace[::new_input].actionGroup == orig(::playerSpace[::input_i-1].actionGroup)
::playerSpace[::new_input].actionGroup == orig(space[::input_n-1].actionGroup)
::playerSpace[::new_input].actionGroup == orig(space[::input_i-1].actionGroup)
::playerSpace[::input_n-1].actionGroup[0] == ::playerSpace[::new_input].actionGroup[0]
::playerSpace[::input_i-1].actionGroup[0] == ::playerSpace[::new_input].actionGroup[0]
::playerSpace[::new_input].actionGroup[0] == ::playerSpace[orig(::input_n)-1].actionGroup[0]
::playerSpace[::new_input].actionGroup[0] == ::playerSpace[orig(::input_i)-1].actionGroup[0]
::playerSpace[::new_input].actionGroup[0] == space[::input_n-1].actionGroup[0]
::playerSpace[::new_input].actionGroup[0] == orig(::playerSpace[post(::input_n)-1].actionGroup[0])
::playerSpace[::new_input].actionGroup[0] == orig(space[post(::input_n)-1].actionGroup[0])
::playerSpace[::new_input].actionGroup[0] == space[::input_i-1].actionGroup[0]
::playerSpace[::new_input].actionGroup[0] == orig(::playerSpace[post(::input_i)-1].actionGroup[0])
::playerSpace[::new_input].actionGroup[0] == orig(space[post(::input_i)-1].actionGroup[0])
::playerSpace[::new_input].actionGroup[0] == space[orig(::input_n)-1].actionGroup[0]
::playerSpace[::new_input].actionGroup[0] == space[orig(::input_i)-1].actionGroup[0]
::playerSpace[::new_input].actionGroup[0] == orig(::playerSpace[::input_n-1].actionGroup[0])
::playerSpace[::new_input].actionGroup[0] == orig(::playerSpace[::input_i-1].actionGroup[0])
::playerSpace[::new_input].actionGroup[0] == orig(space[::input_n-1].actionGroup[0])
::playerSpace[::new_input].actionGroup[0] == orig(space[::input_i-1].actionGroup[0])
::players[::input_n] == ::players[::input_n].body.bodyPoints->player[0]
::players[::input_n] == ::players[::input_i].body.bodyPoints->player[0]
::players[::input_n] == ::players[orig(::input_n)].body.bodyPoints->player[0]
::players[::input_n] == ::players[orig(::input_i)].body.bodyPoints->player[0]
::players[::input_n] == orig(::players[post(::input_n)].body.bodyPoints->player[0])
::players[::input_n] == orig(::players[post(::input_i)].body.bodyPoints->player[0])
::players[::input_n] == orig(::players[::input_n].body.bodyPoints->player[0])
::players[::input_n] == orig(::players[::input_i].body.bodyPoints->player[0])
::players[::input_n-1] == ::players[::new_input]
::players[::input_i-1] == ::players[::new_input]
::players[::new_input] == ::players[orig(::input_n)-1]
::players[::new_input] == ::players[orig(::input_i)-1]
::players[::new_input] == ::players[::input_n-1].body.bodyPoints->player[0]
::players[::new_input] == ::players[::input_i-1].body.bodyPoints->player[0]
::players[::new_input] == ::players[::new_input].body.bodyPoints->player[0]
::players[::new_input] == ::players[orig(::input_n)-1].body.bodyPoints->player[0]
::players[::new_input] == ::players[orig(::input_i)-1].body.bodyPoints->player[0]
::players[::new_input] == orig(::players[post(::input_n)-1])
::players[::new_input] == orig(::players[post(::input_n)-1].body.bodyPoints->player[0])
::players[::new_input] == orig(::players[post(::input_i)-1])
::players[::new_input] == orig(::players[post(::input_i)-1].body.bodyPoints->player[0])
::players[::new_input] == orig(::players[post(::new_input)].body.bodyPoints->player[0])
::players[::new_input] == orig(::players[::input_n-1])
::players[::new_input] == orig(::players[::input_i-1])
::players[::new_input] == orig(::players[::input_n-1].body.bodyPoints->player[0])
::players[::new_input] == orig(::players[::input_i-1].body.bodyPoints->player[0])
::players[orig(::new_input)] == ::players[orig(::new_input)].body.bodyPoints->player[0]
::players[orig(::new_input)] == orig(::players[::new_input].body.bodyPoints->player[0])
::players[::input_n-1].body == ::players[::new_input].body
::players[::input_i-1].body == ::players[::new_input].body
::players[::new_input].body == ::players[orig(::input_n)-1].body
::players[::new_input].body == ::players[orig(::input_i)-1].body
::players[::new_input].body == orig(::players[post(::input_n)-1].body)
::players[::new_input].body == orig(::players[post(::input_i)-1].body)
::players[::new_input].body == orig(::players[::input_n-1].body)
::players[::new_input].body == orig(::players[::input_i-1].body)
::players[::input_n-1].body.bodyPoints == ::players[::new_input].body.bodyPoints
::players[::input_i-1].body.bodyPoints == ::players[::new_input].body.bodyPoints
::players[::new_input].body.bodyPoints == ::players[orig(::input_n)-1].body.bodyPoints
::players[::new_input].body.bodyPoints == ::players[orig(::input_i)-1].body.bodyPoints
::players[::new_input].body.bodyPoints == orig(::players[post(::input_n)-1].body.bodyPoints)
::players[::new_input].body.bodyPoints == orig(::players[post(::input_i)-1].body.bodyPoints)
::players[::new_input].body.bodyPoints == orig(::players[::input_n-1].body.bodyPoints)
::players[::new_input].body.bodyPoints == orig(::players[::input_i-1].body.bodyPoints)
::players[::input_n-1].body.bodyPoints[0] == ::players[::new_input].body.bodyPoints[0]
::players[::input_i-1].body.bodyPoints[0] == ::players[::new_input].body.bodyPoints[0]
::players[::new_input].body.bodyPoints[0] == ::players[orig(::input_n)-1].body.bodyPoints[0]
::players[::new_input].body.bodyPoints[0] == ::players[orig(::input_i)-1].body.bodyPoints[0]
::players[::new_input].body.bodyPoints[0] == orig(::players[post(::input_n)-1].body.bodyPoints[0])
::players[::new_input].body.bodyPoints[0] == orig(::players[post(::input_i)-1].body.bodyPoints[0])
::players[::new_input].body.bodyPoints[0] == orig(::players[::input_n-1].body.bodyPoints[0])
::players[::new_input].body.bodyPoints[0] == orig(::players[::input_i-1].body.bodyPoints[0])
::players[::input_n-1].body.bodyPoints->position == ::players[::new_input].body.bodyPoints->position
::players[::input_i-1].body.bodyPoints->position == ::players[::new_input].body.bodyPoints->position
::players[::new_input].body.bodyPoints->position == ::players[orig(::input_n)-1].body.bodyPoints->position
::players[::new_input].body.bodyPoints->position == ::players[orig(::input_i)-1].body.bodyPoints->position
::players[::new_input].body.bodyPoints->position == orig(::players[post(::input_n)-1].body.bodyPoints->position)
::players[::new_input].body.bodyPoints->position == orig(::players[post(::input_i)-1].body.bodyPoints->position)
::players[::new_input].body.bodyPoints->position == orig(::players[::input_n-1].body.bodyPoints->position)
::players[::new_input].body.bodyPoints->position == orig(::players[::input_i-1].body.bodyPoints->position)
::players[::input_n-1].body.bodyPoints->player == ::players[::new_input].body.bodyPoints->player
::players[::input_i-1].body.bodyPoints->player == ::players[::new_input].body.bodyPoints->player
::players[::new_input].body.bodyPoints->player == ::players[orig(::input_n)-1].body.bodyPoints->player
::players[::new_input].body.bodyPoints->player == ::players[orig(::input_i)-1].body.bodyPoints->player
::players[::new_input].body.bodyPoints->player == orig(::players[post(::input_n)-1].body.bodyPoints->player)
::players[::new_input].body.bodyPoints->player == orig(::players[post(::input_i)-1].body.bodyPoints->player)
::players[::new_input].body.bodyPoints->player == orig(::players[::input_n-1].body.bodyPoints->player)
::players[::new_input].body.bodyPoints->player == orig(::players[::input_i-1].body.bodyPoints->player)
::players[::input_n-1].body.bodyPoints->aspect == ::players[::new_input].body.bodyPoints->aspect
::players[::input_i-1].body.bodyPoints->aspect == ::players[::new_input].body.bodyPoints->aspect
::players[::new_input].body.bodyPoints->aspect == ::players[orig(::input_n)-1].body.bodyPoints->aspect
::players[::new_input].body.bodyPoints->aspect == ::players[orig(::input_i)-1].body.bodyPoints->aspect
::players[::new_input].body.bodyPoints->aspect == orig(::players[post(::input_n)-1].body.bodyPoints->aspect)
::players[::new_input].body.bodyPoints->aspect == orig(::players[post(::input_i)-1].body.bodyPoints->aspect)
::players[::new_input].body.bodyPoints->aspect == orig(::players[::input_n-1].body.bodyPoints->aspect)
::players[::new_input].body.bodyPoints->aspect == orig(::players[::input_i-1].body.bodyPoints->aspect)
::players[::input_n-1].body.bodyMaps == ::players[::new_input].body.bodyMaps
::players[::input_i-1].body.bodyMaps == ::players[::new_input].body.bodyMaps
::players[::new_input].body.bodyMaps == ::players[orig(::input_n)-1].body.bodyMaps
::players[::new_input].body.bodyMaps == ::players[orig(::input_i)-1].body.bodyMaps
::players[::new_input].body.bodyMaps == orig(::players[post(::input_n)-1].body.bodyMaps)
::players[::new_input].body.bodyMaps == orig(::players[post(::input_i)-1].body.bodyMaps)
::players[::new_input].body.bodyMaps == orig(::players[::input_n-1].body.bodyMaps)
::players[::new_input].body.bodyMaps == orig(::players[::input_i-1].body.bodyMaps)
::players[::input_n-1].body.bodyMapsSize == ::players[::new_input].body.bodyMapsSize
::players[::input_i-1].body.bodyMapsSize == ::players[::new_input].body.bodyMapsSize
::players[::new_input].body.bodyMapsSize == ::players[orig(::input_n)-1].body.bodyMapsSize
::players[::new_input].body.bodyMapsSize == ::players[orig(::input_i)-1].body.bodyMapsSize
::players[::new_input].body.bodyMapsSize == ::players[::input_n-1].body.bodyHeight
::players[::new_input].body.bodyMapsSize == ::players[::input_i-1].body.bodyHeight
::players[::new_input].body.bodyMapsSize == ::players[::new_input].body.bodyHeight
::players[::new_input].body.bodyMapsSize == ::players[orig(::input_n)-1].body.bodyHeight
::players[::new_input].body.bodyMapsSize == ::players[orig(::input_i)-1].body.bodyHeight
::players[::new_input].body.bodyMapsSize == orig(::players[post(::input_n)-1].body.bodyMapsSize)
::players[::new_input].body.bodyMapsSize == orig(::players[post(::input_n)-1].body.bodyHeight)
::players[::new_input].body.bodyMapsSize == orig(::players[post(::input_i)-1].body.bodyMapsSize)
::players[::new_input].body.bodyMapsSize == orig(::players[post(::input_i)-1].body.bodyHeight)
::players[::new_input].body.bodyMapsSize == orig(::players[post(::new_input)].body.bodyHeight)
::players[::new_input].body.bodyMapsSize == orig(::players[::input_n-1].body.bodyMapsSize)
::players[::new_input].body.bodyMapsSize == orig(::players[::input_i-1].body.bodyMapsSize)
::players[::new_input].body.bodyMapsSize == orig(::players[::input_n-1].body.bodyHeight)
::players[::new_input].body.bodyMapsSize == orig(::players[::input_i-1].body.bodyHeight)
::players[::input_n-1].body.bodySize == ::players[::new_input].body.bodySize
::players[::input_i-1].body.bodySize == ::players[::new_input].body.bodySize
::players[::new_input].body.bodySize == ::players[orig(::input_n)-1].body.bodySize
::players[::new_input].body.bodySize == ::players[orig(::input_i)-1].body.bodySize
::players[::new_input].body.bodySize == orig(::players[post(::input_n)-1].body.bodySize)
::players[::new_input].body.bodySize == orig(::players[post(::input_i)-1].body.bodySize)
::players[::new_input].body.bodySize == orig(::players[::input_n-1].body.bodySize)
::players[::new_input].body.bodySize == orig(::players[::input_i-1].body.bodySize)
::players[::input_n-1].body.bodyWidth == ::players[::new_input].body.bodyWidth
::players[::input_i-1].body.bodyWidth == ::players[::new_input].body.bodyWidth
::players[::new_input].body.bodyWidth == ::players[orig(::input_n)-1].body.bodyWidth
::players[::new_input].body.bodyWidth == ::players[orig(::input_i)-1].body.bodyWidth
::players[::new_input].body.bodyWidth == orig(::players[post(::input_n)-1].body.bodyWidth)
::players[::new_input].body.bodyWidth == orig(::players[post(::input_i)-1].body.bodyWidth)
::players[::new_input].body.bodyWidth == orig(::players[::input_n-1].body.bodyWidth)
::players[::new_input].body.bodyWidth == orig(::players[::input_i-1].body.bodyWidth)
::players[::input_n-1].body.color == ::players[::new_input].body.color
::players[::input_i-1].body.color == ::players[::new_input].body.color
::players[::new_input].body.color == ::players[orig(::input_n)-1].body.color
::players[::new_input].body.color == ::players[orig(::input_i)-1].body.color
::players[::new_input].body.color == orig(::players[post(::input_n)-1].body.color)
::players[::new_input].body.color == orig(::players[post(::input_i)-1].body.color)
::players[::new_input].body.color == orig(::players[::input_n-1].body.color)
::players[::new_input].body.color == orig(::players[::input_i-1].body.color)
::players[::input_n-1].basePosition == ::players[::new_input].basePosition
::players[::input_i-1].basePosition == ::players[::new_input].basePosition
::players[::new_input].basePosition == ::players[orig(::input_n)-1].basePosition
::players[::new_input].basePosition == ::players[orig(::input_i)-1].basePosition
::players[::new_input].basePosition == orig(::players[post(::input_n)-1].basePosition)
::players[::new_input].basePosition == orig(::players[post(::input_i)-1].basePosition)
::players[::new_input].basePosition == orig(::players[::input_n-1].basePosition)
::players[::new_input].basePosition == orig(::players[::input_i-1].basePosition)
::players[::input_n-1].basePosition.col == ::players[::new_input].basePosition.col
::players[::input_i-1].basePosition.col == ::players[::new_input].basePosition.col
::players[::new_input].basePosition.col == ::players[orig(::input_n)-1].basePosition.col
::players[::new_input].basePosition.col == ::players[orig(::input_i)-1].basePosition.col
::players[::new_input].basePosition.col == orig(::players[post(::input_n)-1].basePosition.col)
::players[::new_input].basePosition.col == orig(::players[post(::input_i)-1].basePosition.col)
::players[::new_input].basePosition.col == orig(::players[post(::new_input)].basePosition.col)
::players[::new_input].basePosition.col == orig(::players[::input_n-1].basePosition.col)
::players[::new_input].basePosition.col == orig(::players[::input_i-1].basePosition.col)
::players[orig(::new_input)].basePosition.col == orig(::players[::new_input].basePosition.col)
::players[::input_n].basePosition.row == orig(::players[post(::input_n)].basePosition.row)
::players[::input_n].basePosition.row == orig(::players[post(::input_i)].basePosition.row)
::players[::input_n].basePosition.row == orig(::players[::input_n].basePosition.row)
::players[::input_n].basePosition.row == orig(::players[::input_i].basePosition.row)
::players[::input_n-1].basePosition.row == ::players[::input_n].stepCounter
::players[::input_i-1].basePosition.row == ::players[::input_n].stepCounter
::players[::new_input].basePosition.row == ::players[::input_n].stepCounter
::players[orig(::input_n)-1].basePosition.row == ::players[::input_n].stepCounter
::players[orig(::input_i)-1].basePosition.row == ::players[::input_n].stepCounter
::players[orig(::new_input)].basePosition.row == orig(::players[post(::input_n)-1].basePosition.row)
::players[orig(::new_input)].basePosition.row == orig(::players[post(::input_i)-1].basePosition.row)
::players[orig(::new_input)].basePosition.row == orig(::players[post(::new_input)].basePosition.row)
::players[orig(::new_input)].basePosition.row == orig(::players[::input_n-1].basePosition.row)
::players[orig(::new_input)].basePosition.row == orig(::players[::input_i-1].basePosition.row)
::players[orig(::new_input)].basePosition.row == orig(::players[::new_input].basePosition.row)
::players[::input_n-1].impulse[0] == ::players[::new_input].impulse[0]
::players[::input_i-1].impulse[0] == ::players[::new_input].impulse[0]
::players[::new_input].impulse[0] == ::players[orig(::input_n)-1].impulse[0]
::players[::new_input].impulse[0] == ::players[orig(::input_i)-1].impulse[0]
::players[::new_input].impulse[0] == orig(::players[post(::input_n)-1].impulse[0])
::players[::new_input].impulse[0] == orig(::players[post(::input_i)-1].impulse[0])
::players[::new_input].impulse[0] == orig(::players[::input_n-1].impulse[0])
::players[::new_input].impulse[0] == orig(::players[::input_i-1].impulse[0])
::players[::input_n-1].impulse[1] == ::players[::new_input].impulse[1]
::players[::input_i-1].impulse[1] == ::players[::new_input].impulse[1]
::players[::new_input].impulse[1] == ::players[orig(::input_n)-1].impulse[1]
::players[::new_input].impulse[1] == ::players[orig(::input_i)-1].impulse[1]
::players[::new_input].impulse[1] == orig(::players[post(::input_n)-1].impulse[1])
::players[::new_input].impulse[1] == orig(::players[post(::input_i)-1].impulse[1])
::players[::new_input].impulse[1] == orig(::players[::input_n-1].impulse[1])
::players[::new_input].impulse[1] == orig(::players[::input_i-1].impulse[1])
::players[::input_n-1].impulse[2] == ::players[::new_input].impulse[2]
::players[::input_i-1].impulse[2] == ::players[::new_input].impulse[2]
::players[::new_input].impulse[2] == ::players[orig(::input_n)-1].impulse[2]
::players[::new_input].impulse[2] == ::players[orig(::input_i)-1].impulse[2]
::players[::new_input].impulse[2] == orig(::players[post(::input_n)-1].impulse[2])
::players[::new_input].impulse[2] == orig(::players[post(::input_i)-1].impulse[2])
::players[::new_input].impulse[2] == orig(::players[::input_n-1].impulse[2])
::players[::new_input].impulse[2] == orig(::players[::input_i-1].impulse[2])
::players[::input_n-1].impulse[3] == ::players[::new_input].impulse[3]
::players[::input_i-1].impulse[3] == ::players[::new_input].impulse[3]
::players[::new_input].impulse[3] == ::players[orig(::input_n)-1].impulse[3]
::players[::new_input].impulse[3] == ::players[orig(::input_i)-1].impulse[3]
::players[::new_input].impulse[3] == orig(::players[post(::input_n)-1].impulse[3])
::players[::new_input].impulse[3] == orig(::players[post(::input_i)-1].impulse[3])
::players[::new_input].impulse[3] == orig(::players[::input_n-1].impulse[3])
::players[::new_input].impulse[3] == orig(::players[::input_i-1].impulse[3])
::players[::input_n-1].impulse[4] == ::players[::new_input].impulse[4]
::players[::input_i-1].impulse[4] == ::players[::new_input].impulse[4]
::players[::new_input].impulse[4] == ::players[orig(::input_n)-1].impulse[4]
::players[::new_input].impulse[4] == ::players[orig(::input_i)-1].impulse[4]
::players[::new_input].impulse[4] == orig(::players[post(::input_n)-1].impulse[4])
::players[::new_input].impulse[4] == orig(::players[post(::input_i)-1].impulse[4])
::players[::new_input].impulse[4] == orig(::players[::input_n-1].impulse[4])
::players[::new_input].impulse[4] == orig(::players[::input_i-1].impulse[4])
::players[::input_n-1].impulse[5] == ::players[::new_input].impulse[5]
::players[::input_i-1].impulse[5] == ::players[::new_input].impulse[5]
::players[::new_input].impulse[5] == ::players[orig(::input_n)-1].impulse[5]
::players[::new_input].impulse[5] == ::players[orig(::input_i)-1].impulse[5]
::players[::new_input].impulse[5] == orig(::players[post(::input_n)-1].impulse[5])
::players[::new_input].impulse[5] == orig(::players[post(::input_i)-1].impulse[5])
::players[::new_input].impulse[5] == orig(::players[::input_n-1].impulse[5])
::players[::new_input].impulse[5] == orig(::players[::input_i-1].impulse[5])
::players[::input_n-1].impulse[6] == ::players[::new_input].impulse[6]
::players[::input_i-1].impulse[6] == ::players[::new_input].impulse[6]
::players[::new_input].impulse[6] == ::players[orig(::input_n)-1].impulse[6]
::players[::new_input].impulse[6] == ::players[orig(::input_i)-1].impulse[6]
::players[::new_input].impulse[6] == orig(::players[post(::input_n)-1].impulse[6])
::players[::new_input].impulse[6] == orig(::players[post(::input_i)-1].impulse[6])
::players[::new_input].impulse[6] == orig(::players[::input_n-1].impulse[6])
::players[::new_input].impulse[6] == orig(::players[::input_i-1].impulse[6])
::players[::input_n-1].impulse[7] == ::players[::new_input].impulse[7]
::players[::input_i-1].impulse[7] == ::players[::new_input].impulse[7]
::players[::new_input].impulse[7] == ::players[orig(::input_n)-1].impulse[7]
::players[::new_input].impulse[7] == ::players[orig(::input_i)-1].impulse[7]
::players[::new_input].impulse[7] == orig(::players[post(::input_n)-1].impulse[7])
::players[::new_input].impulse[7] == orig(::players[post(::input_i)-1].impulse[7])
::players[::new_input].impulse[7] == orig(::players[::input_n-1].impulse[7])
::players[::new_input].impulse[7] == orig(::players[::input_i-1].impulse[7])
::players[::input_n-1].impulse[8] == ::players[::new_input].impulse[8]
::players[::input_i-1].impulse[8] == ::players[::new_input].impulse[8]
::players[::new_input].impulse[8] == ::players[orig(::input_n)-1].impulse[8]
::players[::new_input].impulse[8] == ::players[orig(::input_i)-1].impulse[8]
::players[::new_input].impulse[8] == orig(::players[post(::input_n)-1].impulse[8])
::players[::new_input].impulse[8] == orig(::players[post(::input_i)-1].impulse[8])
::players[::new_input].impulse[8] == orig(::players[::input_n-1].impulse[8])
::players[::new_input].impulse[8] == orig(::players[::input_i-1].impulse[8])
::players[::input_n-1].magnetos == ::players[::new_input].magnetos
::players[::input_i-1].magnetos == ::players[::new_input].magnetos
::players[::new_input].magnetos == ::players[orig(::input_n)-1].magnetos
::players[::new_input].magnetos == ::players[orig(::input_i)-1].magnetos
::players[::new_input].magnetos == orig(::players[post(::input_n)-1].magnetos)
::players[::new_input].magnetos == orig(::players[post(::input_i)-1].magnetos)
::players[::new_input].magnetos == orig(::players[::input_n-1].magnetos)
::players[::new_input].magnetos == orig(::players[::input_i-1].magnetos)
::players[::input_n-1].magnetos[0] == ::players[::new_input].magnetos[0]
::players[::input_i-1].magnetos[0] == ::players[::new_input].magnetos[0]
::players[::new_input].magnetos[0] == ::players[orig(::input_n)-1].magnetos[0]
::players[::new_input].magnetos[0] == ::players[orig(::input_i)-1].magnetos[0]
::players[::new_input].magnetos[0] == orig(::players[post(::input_n)-1].magnetos[0])
::players[::new_input].magnetos[0] == orig(::players[post(::input_i)-1].magnetos[0])
::players[::new_input].magnetos[0] == orig(::players[::input_n-1].magnetos[0])
::players[::new_input].magnetos[0] == orig(::players[::input_i-1].magnetos[0])
::players[::input_n-1].pilot == ::players[::new_input].pilot
::players[::input_i-1].pilot == ::players[::new_input].pilot
::players[::new_input].pilot == ::players[orig(::input_n)-1].pilot
::players[::new_input].pilot == ::players[orig(::input_i)-1].pilot
::players[::new_input].pilot == orig(::players[post(::input_n)-1].pilot)
::players[::new_input].pilot == orig(::players[post(::input_i)-1].pilot)
::players[::new_input].pilot == orig(::players[::input_n-1].pilot)
::players[::new_input].pilot == orig(::players[::input_i-1].pilot)
::players[::input_n-1].onCrash == ::players[::new_input].onCrash
::players[::input_i-1].onCrash == ::players[::new_input].onCrash
::players[::new_input].onCrash == ::players[orig(::input_n)-1].onCrash
::players[::new_input].onCrash == ::players[orig(::input_i)-1].onCrash
::players[::new_input].onCrash == orig(::players[post(::input_n)-1].onCrash)
::players[::new_input].onCrash == orig(::players[post(::input_i)-1].onCrash)
::players[::new_input].onCrash == orig(::players[::input_n-1].onCrash)
::players[::new_input].onCrash == orig(::players[::input_i-1].onCrash)
::players[::input_n].onPushed == ::players[::input_n-1].onPushed
::players[::input_n].onPushed == ::players[::input_i-1].onPushed
::players[::input_n].onPushed == ::players[::new_input].onPushed
::players[::input_n].onPushed == ::players[orig(::input_n)-1].onPushed
::players[::input_n].onPushed == ::players[orig(::input_i)-1].onPushed
::players[::input_n].onPushed == ::players[orig(::new_input)].onPushed
::players[::input_n].onPushed == player[::input_n-1].onPushed
::players[::input_n].onPushed == orig(::players[post(::input_n)-1].onPushed)
::players[::input_n].onPushed == orig(player[post(::input_n)-1].onPushed)
::players[::input_n].onPushed == player[::input_i-1].onPushed
::players[::input_n].onPushed == orig(::players[post(::input_i)-1].onPushed)
::players[::input_n].onPushed == orig(player[post(::input_i)-1].onPushed)
::players[::input_n].onPushed == player[::new_input].onPushed
::players[::input_n].onPushed == orig(::players[post(::new_input)].onPushed)
::players[::input_n].onPushed == orig(player[post(::new_input)].onPushed)
::players[::input_n].onPushed == player[orig(::input_n)-1].onPushed
::players[::input_n].onPushed == player[orig(::input_i)-1].onPushed
::players[::input_n].onPushed == player[orig(::new_input)].onPushed
::players[::input_n].onPushed == orig(::players[::input_n-1].onPushed)
::players[::input_n].onPushed == orig(::players[::input_i-1].onPushed)
::players[::input_n].onPushed == orig(::players[::new_input].onPushed)
::players[::input_n].onPushed == orig(player[::input_n-1].onPushed)
::players[::input_n].onPushed == orig(player[::input_i-1].onPushed)
::players[::input_n].onPushed == orig(player[::new_input].onPushed)
player[::input_n-1] == player[::new_input]
player[::input_n-1].body == player[::new_input].body
player[::input_n].body.type == player[orig(::new_input)].body.type
player[::input_n].body.type == orig(player[::new_input].body.type)
player[::input_n-1].body.type == player[::new_input].body.type
player[::input_n].body.visible == player[::input_n].body.bodyMapsSize
player[::input_n].body.visible == orig(player[post(::input_n)].body.bodyMapsSize)
player[::input_n].body.visible == player[::input_i].body.bodyMapsSize
player[::input_n].body.visible == orig(player[post(::input_i)].body.bodyMapsSize)
player[::input_n].body.visible == player[orig(::input_n)].body.bodyMapsSize
player[::input_n].body.visible == player[orig(::input_i)].body.bodyMapsSize
player[::input_n].body.visible == orig(player[::input_n].body.bodyMapsSize)
player[::input_n].body.visible == orig(player[::input_i].body.bodyMapsSize)
player[::input_n-1].body.bodyPoints == player[::new_input].body.bodyPoints
player[::input_n-1].body.bodyPoints[0] == player[::new_input].body.bodyPoints[0]
player[::input_n-1].body.bodyPoints->position == player[::new_input].body.bodyPoints->position
player[::input_n-1].body.bodyPoints->player[0] == player[::new_input]
player[::input_n-1].body.bodyPoints->aspect == player[::new_input].body.bodyPoints->aspect
player[::input_n-1].body.bodyMaps == player[::new_input].body.bodyMaps
player[::input_n-1].body.bodyMapsSize == player[::new_input].body.bodyMapsSize
player[::input_n-1].body.bodySize == player[::new_input].body.bodySize
player[::input_n-1].body.bodyWidth == player[::new_input].body.bodyWidth
player[::input_n-1].body.bodyHeight == player[::new_input].body.bodyHeight
player[::input_n-1].body.color == player[::new_input].body.color
player[::input_n-1].basePosition == player[::new_input].basePosition
player[::input_n].basePosition.col == orig(player[post(::input_n)].basePosition.col)
player[::input_n].basePosition.col == orig(player[post(::input_i)].basePosition.col)
player[::input_n].basePosition.col == orig(player[::input_n].basePosition.col)
player[::input_n].basePosition.col == orig(player[::input_i].basePosition.col)
player[::input_n-1].basePosition.col == player[::new_input].basePosition.col
player[::input_n].basePosition.row == orig(player[post(::input_n)].basePosition.row)
player[::input_n].basePosition.row == orig(player[post(::input_i)].basePosition.row)
player[::input_n].basePosition.row == orig(player[::input_n].basePosition.row)
player[::input_n].basePosition.row == orig(player[::input_i].basePosition.row)
player[::input_n-1].basePosition.row == player[::new_input].basePosition.row
player[::input_n-1].impulse[0] == player[::new_input].impulse[0]
player[::input_n-1].impulse[1] == player[::new_input].impulse[1]
player[::input_n-1].impulse[1][0] == player[::new_input].impulse[1][0]
player[::input_n-1].impulse[2] == player[::new_input].impulse[2]
player[::input_n-1].impulse[3] == player[::new_input].impulse[3]
player[::input_n-1].impulse[3][0] == player[::new_input].impulse[3][0]
player[::input_n-1].impulse[4] == player[::new_input].impulse[4]
player[::input_n-1].impulse[5] == player[::new_input].impulse[5]
player[::input_n-1].impulse[5][0] == player[::new_input].impulse[5][0]
player[::input_n-1].impulse[6] == player[::new_input].impulse[6]
player[::input_n-1].impulse[7] == player[::new_input].impulse[7]
player[::input_n-1].impulse[8] == player[::new_input].impulse[8]
player[::input_n-1].direction == player[::new_input].direction
player[::input_n-1].magnetos == player[::new_input].magnetos
player[::input_n-1].magnetos[0] == player[::new_input].magnetos[0]
player[::input_n-1].stepCounter == player[::new_input].stepCounter
player[::input_n-1].pilot == player[::new_input].pilot
player[::input_n-1].onCrash == player[::new_input].onCrash
orig(player[post(::input_n)-1]) == player[::new_input]
orig(player[post(::input_n)-1].body) == player[::new_input].body
orig(player[post(::input_n)-1].body.type) == player[::new_input].body.type
orig(player[post(::input_n)-1].body.bodyPoints) == player[::new_input].body.bodyPoints
orig(player[post(::input_n)-1].body.bodyPoints[0]) == player[::new_input].body.bodyPoints[0]
orig(player[post(::input_n)-1].body.bodyPoints->position) == player[::new_input].body.bodyPoints->position
orig(player[post(::input_n)-1].body.bodyPoints->player[0]) == player[::new_input]
orig(player[post(::input_n)-1].body.bodyPoints->aspect) == player[::new_input].body.bodyPoints->aspect
orig(player[post(::input_n)-1].body.bodyMaps) == player[::new_input].body.bodyMaps
orig(player[post(::input_n)-1].body.bodyMapsSize) == player[::new_input].body.bodyMapsSize
orig(player[post(::input_n)-1].body.bodySize) == player[::new_input].body.bodySize
orig(player[post(::input_n)-1].body.bodyWidth) == player[::new_input].body.bodyWidth
orig(player[post(::input_n)-1].body.bodyHeight) == player[::new_input].body.bodyHeight
orig(player[post(::input_n)-1].body.color) == player[::new_input].body.color
orig(player[post(::input_n)-1].basePosition) == player[::new_input].basePosition
orig(player[post(::input_n)-1].basePosition.col) == orig(player[post(::new_input)].basePosition.col)
orig(player[post(::input_n)-1].basePosition.row) == orig(player[::new_input].basePosition.row)
orig(player[post(::input_n)-1].impulse[0]) == player[::new_input].impulse[0]
orig(player[post(::input_n)-1].impulse[1]) == player[::new_input].impulse[1]
orig(player[post(::input_n)-1].impulse[1][0]) == player[::new_input].impulse[1][0]
orig(player[post(::input_n)-1].impulse[2]) == player[::new_input].impulse[2]
orig(player[post(::input_n)-1].impulse[3]) == player[::new_input].impulse[3]
orig(player[post(::input_n)-1].impulse[3][0]) == player[::new_input].impulse[3][0]
orig(player[post(::input_n)-1].impulse[4]) == player[::new_input].impulse[4]
orig(player[post(::input_n)-1].impulse[5]) == player[::new_input].impulse[5]
orig(player[post(::input_n)-1].impulse[5][0]) == player[::new_input].impulse[5][0]
orig(player[post(::input_n)-1].impulse[6]) == player[::new_input].impulse[6]
orig(player[post(::input_n)-1].impulse[7]) == player[::new_input].impulse[7]
orig(player[post(::input_n)-1].impulse[8]) == player[::new_input].impulse[8]
orig(player[post(::input_n)-1].direction) == player[::new_input].direction
orig(player[post(::input_n)-1].magnetos) == player[::new_input].magnetos
orig(player[post(::input_n)-1].magnetos[0]) == player[::new_input].magnetos[0]
orig(player[post(::input_n)-1].stepCounter) == player[::new_input].stepCounter
orig(player[post(::input_n)-1].pilot) == player[::new_input].pilot
orig(player[post(::input_n)-1].onCrash) == player[::new_input].onCrash
player[::input_i-1] == player[::new_input]
player[::input_i-1].body == player[::new_input].body
player[::input_i-1].body.type == player[::new_input].body.type
player[::input_i-1].body.bodyPoints == player[::new_input].body.bodyPoints
player[::input_i-1].body.bodyPoints[0] == player[::new_input].body.bodyPoints[0]
player[::input_i-1].body.bodyPoints->position == player[::new_input].body.bodyPoints->position
player[::input_i-1].body.bodyPoints->player[0] == player[::new_input]
player[::input_i-1].body.bodyPoints->aspect == player[::new_input].body.bodyPoints->aspect
player[::input_i-1].body.bodyMaps == player[::new_input].body.bodyMaps
player[::input_i-1].body.bodyMapsSize == player[::new_input].body.bodyMapsSize
player[::input_i-1].body.bodySize == player[::new_input].body.bodySize
player[::input_i-1].body.bodyWidth == player[::new_input].body.bodyWidth
player[::input_i-1].body.bodyHeight == player[::new_input].body.bodyHeight
player[::input_i-1].body.color == player[::new_input].body.color
player[::input_i-1].basePosition == player[::new_input].basePosition
player[::input_i-1].basePosition.col == player[::new_input].basePosition.col
player[::input_i-1].basePosition.row == player[::new_input].basePosition.row
player[::input_i-1].impulse[0] == player[::new_input].impulse[0]
player[::input_i-1].impulse[1] == player[::new_input].impulse[1]
player[::input_i-1].impulse[1][0] == player[::new_input].impulse[1][0]
player[::input_i-1].impulse[2] == player[::new_input].impulse[2]
player[::input_i-1].impulse[3] == player[::new_input].impulse[3]
player[::input_i-1].impulse[3][0] == player[::new_input].impulse[3][0]
player[::input_i-1].impulse[4] == player[::new_input].impulse[4]
player[::input_i-1].impulse[5] == player[::new_input].impulse[5]
player[::input_i-1].impulse[5][0] == player[::new_input].impulse[5][0]
player[::input_i-1].impulse[6] == player[::new_input].impulse[6]
player[::input_i-1].impulse[7] == player[::new_input].impulse[7]
player[::input_i-1].impulse[8] == player[::new_input].impulse[8]
player[::input_i-1].direction == player[::new_input].direction
player[::input_i-1].magnetos == player[::new_input].magnetos
player[::input_i-1].magnetos[0] == player[::new_input].magnetos[0]
player[::input_i-1].stepCounter == player[::new_input].stepCounter
player[::input_i-1].pilot == player[::new_input].pilot
player[::input_i-1].onCrash == player[::new_input].onCrash
orig(player[post(::input_i)-1]) == player[::new_input]
orig(player[post(::input_i)-1].body) == player[::new_input].body
orig(player[post(::input_i)-1].body.type) == player[::new_input].body.type
orig(player[post(::input_i)-1].body.bodyPoints) == player[::new_input].body.bodyPoints
orig(player[post(::input_i)-1].body.bodyPoints[0]) == player[::new_input].body.bodyPoints[0]
orig(player[post(::input_i)-1].body.bodyPoints->position) == player[::new_input].body.bodyPoints->position
orig(player[post(::input_i)-1].body.bodyPoints->player[0]) == player[::new_input]
orig(player[post(::input_i)-1].body.bodyPoints->aspect) == player[::new_input].body.bodyPoints->aspect
orig(player[post(::input_i)-1].body.bodyMaps) == player[::new_input].body.bodyMaps
orig(player[post(::input_i)-1].body.bodyMapsSize) == player[::new_input].body.bodyMapsSize
orig(player[post(::input_i)-1].body.bodySize) == player[::new_input].body.bodySize
orig(player[post(::input_i)-1].body.bodyWidth) == player[::new_input].body.bodyWidth
orig(player[post(::input_i)-1].body.bodyHeight) == player[::new_input].body.bodyHeight
orig(player[post(::input_i)-1].body.color) == player[::new_input].body.color
orig(player[post(::input_i)-1].basePosition) == player[::new_input].basePosition
orig(player[post(::input_i)-1].basePosition.col) == orig(player[post(::new_input)].basePosition.col)
orig(player[post(::input_i)-1].basePosition.row) == orig(player[::new_input].basePosition.row)
orig(player[post(::input_i)-1].impulse[0]) == player[::new_input].impulse[0]
orig(player[post(::input_i)-1].impulse[1]) == player[::new_input].impulse[1]
orig(player[post(::input_i)-1].impulse[1][0]) == player[::new_input].impulse[1][0]
orig(player[post(::input_i)-1].impulse[2]) == player[::new_input].impulse[2]
orig(player[post(::input_i)-1].impulse[3]) == player[::new_input].impulse[3]
orig(player[post(::input_i)-1].impulse[3][0]) == player[::new_input].impulse[3][0]
orig(player[post(::input_i)-1].impulse[4]) == player[::new_input].impulse[4]
orig(player[post(::input_i)-1].impulse[5]) == player[::new_input].impulse[5]
orig(player[post(::input_i)-1].impulse[5][0]) == player[::new_input].impulse[5][0]
orig(player[post(::input_i)-1].impulse[6]) == player[::new_input].impulse[6]
orig(player[post(::input_i)-1].impulse[7]) == player[::new_input].impulse[7]
orig(player[post(::input_i)-1].impulse[8]) == player[::new_input].impulse[8]
orig(player[post(::input_i)-1].direction) == player[::new_input].direction
orig(player[post(::input_i)-1].magnetos) == player[::new_input].magnetos
orig(player[post(::input_i)-1].magnetos[0]) == player[::new_input].magnetos[0]
orig(player[post(::input_i)-1].stepCounter) == player[::new_input].stepCounter
orig(player[post(::input_i)-1].pilot) == player[::new_input].pilot
orig(player[post(::input_i)-1].onCrash) == player[::new_input].onCrash
player[::new_input] == player[::new_input].body.bodyPoints->player[0]
player[::new_input] == orig(player[post(::new_input)].body.bodyPoints->player[0])
player[::new_input] == player[orig(::input_n)-1]
player[::new_input] == player[orig(::input_i)-1]
player[::new_input] == player[orig(::input_n)-1].body.bodyPoints->player[0]
player[::new_input] == player[orig(::input_i)-1].body.bodyPoints->player[0]
player[::new_input] == orig(player[::input_n-1])
player[::new_input] == orig(player[::input_n-1].body.bodyPoints->player[0])
player[::new_input] == orig(player[::input_i-1])
player[::new_input] == orig(player[::input_i-1].body.bodyPoints->player[0])
player[::new_input].body == player[orig(::input_n)-1].body
player[::new_input].body == player[orig(::input_i)-1].body
player[::new_input].body == orig(player[::input_n-1].body)
player[::new_input].body == orig(player[::input_i-1].body)
player[::new_input].body.type == player[orig(::input_n)-1].body.type
player[::new_input].body.type == player[orig(::input_i)-1].body.type
player[::new_input].body.type == orig(player[::input_n-1].body.type)
player[::new_input].body.type == orig(player[::input_i-1].body.type)
player[::new_input].body.bodyPoints == player[orig(::input_n)-1].body.bodyPoints
player[::new_input].body.bodyPoints == player[orig(::input_i)-1].body.bodyPoints
player[::new_input].body.bodyPoints == orig(player[::input_n-1].body.bodyPoints)
player[::new_input].body.bodyPoints == orig(player[::input_i-1].body.bodyPoints)
player[::new_input].body.bodyPoints[0] == player[orig(::input_n)-1].body.bodyPoints[0]
player[::new_input].body.bodyPoints[0] == player[orig(::input_i)-1].body.bodyPoints[0]
player[::new_input].body.bodyPoints[0] == orig(player[::input_n-1].body.bodyPoints[0])
player[::new_input].body.bodyPoints[0] == orig(player[::input_i-1].body.bodyPoints[0])
player[::new_input].body.bodyPoints->position == player[orig(::input_n)-1].body.bodyPoints->position
player[::new_input].body.bodyPoints->position == player[orig(::input_i)-1].body.bodyPoints->position
player[::new_input].body.bodyPoints->position == orig(player[::input_n-1].body.bodyPoints->position)
player[::new_input].body.bodyPoints->position == orig(player[::input_i-1].body.bodyPoints->position)
player[::new_input].body.bodyPoints->aspect == player[orig(::input_n)-1].body.bodyPoints->aspect
player[::new_input].body.bodyPoints->aspect == player[orig(::input_i)-1].body.bodyPoints->aspect
player[::new_input].body.bodyPoints->aspect == orig(player[::input_n-1].body.bodyPoints->aspect)
player[::new_input].body.bodyPoints->aspect == orig(player[::input_i-1].body.bodyPoints->aspect)
player[::new_input].body.bodyMaps == player[orig(::input_n)-1].body.bodyMaps
player[::new_input].body.bodyMaps == player[orig(::input_i)-1].body.bodyMaps
player[::new_input].body.bodyMaps == orig(player[::input_n-1].body.bodyMaps)
player[::new_input].body.bodyMaps == orig(player[::input_i-1].body.bodyMaps)
player[::new_input].body.bodyMapsSize == player[orig(::input_n)-1].body.bodyMapsSize
player[::new_input].body.bodyMapsSize == player[orig(::input_i)-1].body.bodyMapsSize
player[::new_input].body.bodyMapsSize == orig(player[::input_n-1].body.bodyMapsSize)
player[::new_input].body.bodyMapsSize == orig(player[::input_i-1].body.bodyMapsSize)
player[::new_input].body.bodySize == player[orig(::input_n)-1].body.bodySize
player[::new_input].body.bodySize == player[orig(::input_i)-1].body.bodySize
player[::new_input].body.bodySize == orig(player[::input_n-1].body.bodySize)
player[::new_input].body.bodySize == orig(player[::input_i-1].body.bodySize)
player[::new_input].body.bodyWidth == player[orig(::input_n)-1].body.bodyWidth
player[::new_input].body.bodyWidth == player[orig(::input_i)-1].body.bodyWidth
player[::new_input].body.bodyWidth == orig(player[::input_n-1].body.bodyWidth)
player[::new_input].body.bodyWidth == orig(player[::input_i-1].body.bodyWidth)
player[::new_input].body.bodyHeight == player[orig(::input_n)-1].body.bodyHeight
player[::new_input].body.bodyHeight == player[orig(::input_i)-1].body.bodyHeight
player[::new_input].body.bodyHeight == orig(player[::input_n-1].body.bodyHeight)
player[::new_input].body.bodyHeight == orig(player[::input_i-1].body.bodyHeight)
player[::new_input].body.color == player[orig(::input_n)-1].body.color
player[::new_input].body.color == player[orig(::input_i)-1].body.color
player[::new_input].body.color == orig(player[::input_n-1].body.color)
player[::new_input].body.color == orig(player[::input_i-1].body.color)
player[::new_input].basePosition == player[orig(::input_n)-1].basePosition
player[::new_input].basePosition == player[orig(::input_i)-1].basePosition
player[::new_input].basePosition == orig(player[::input_n-1].basePosition)
player[::new_input].basePosition == orig(player[::input_i-1].basePosition)
player[::new_input].basePosition.col == player[orig(::input_n)-1].basePosition.col
player[::new_input].basePosition.col == player[orig(::input_i)-1].basePosition.col
player[::new_input].basePosition.row == player[orig(::input_n)-1].basePosition.row
player[::new_input].basePosition.row == player[orig(::input_i)-1].basePosition.row
player[::new_input].impulse[0] == player[orig(::input_n)-1].impulse[0]
player[::new_input].impulse[0] == player[orig(::input_i)-1].impulse[0]
player[::new_input].impulse[0] == orig(player[::input_n-1].impulse[0])
player[::new_input].impulse[0] == orig(player[::input_i-1].impulse[0])
player[::new_input].impulse[1] == player[orig(::input_n)-1].impulse[1]
player[::new_input].impulse[1] == player[orig(::input_i)-1].impulse[1]
player[::new_input].impulse[1] == orig(player[::input_n-1].impulse[1])
player[::new_input].impulse[1] == orig(player[::input_i-1].impulse[1])
player[::new_input].impulse[1][0] == player[orig(::input_n)-1].impulse[1][0]
player[::new_input].impulse[1][0] == player[orig(::input_i)-1].impulse[1][0]
player[::new_input].impulse[1][0] == orig(player[::input_n-1].impulse[1][0])
player[::new_input].impulse[1][0] == orig(player[::input_i-1].impulse[1][0])
player[::new_input].impulse[2] == player[orig(::input_n)-1].impulse[2]
player[::new_input].impulse[2] == player[orig(::input_i)-1].impulse[2]
player[::new_input].impulse[2] == orig(player[::input_n-1].impulse[2])
player[::new_input].impulse[2] == orig(player[::input_i-1].impulse[2])
player[::new_input].impulse[3] == player[orig(::input_n)-1].impulse[3]
player[::new_input].impulse[3] == player[orig(::input_i)-1].impulse[3]
player[::new_input].impulse[3] == orig(player[::input_n-1].impulse[3])
player[::new_input].impulse[3] == orig(player[::input_i-1].impulse[3])
player[::new_input].impulse[3][0] == player[orig(::input_n)-1].impulse[3][0]
player[::new_input].impulse[3][0] == player[orig(::input_i)-1].impulse[3][0]
player[::new_input].impulse[3][0] == player[orig(::new_input)].impulse[3][0]
player[::new_input].impulse[3][0] == orig(player[::input_n-1].impulse[3][0])
player[::new_input].impulse[3][0] == orig(player[::input_i-1].impulse[3][0])
player[::new_input].impulse[3][0] == orig(player[::new_input].impulse[3][0])
player[::new_input].impulse[4] == player[orig(::input_n)-1].impulse[4]
player[::new_input].impulse[4] == player[orig(::input_i)-1].impulse[4]
player[::new_input].impulse[4] == orig(player[::input_n-1].impulse[4])
player[::new_input].impulse[4] == orig(player[::input_i-1].impulse[4])
player[::new_input].impulse[5] == player[orig(::input_n)-1].impulse[5]
player[::new_input].impulse[5] == player[orig(::input_i)-1].impulse[5]
player[::new_input].impulse[5] == orig(player[::input_n-1].impulse[5])
player[::new_input].impulse[5] == orig(player[::input_i-1].impulse[5])
player[::new_input].impulse[5][0] == player[orig(::input_n)-1].impulse[5][0]
player[::new_input].impulse[5][0] == player[orig(::input_i)-1].impulse[5][0]
player[::new_input].impulse[5][0] == player[orig(::new_input)].impulse[5][0]
player[::new_input].impulse[5][0] == orig(player[::input_n-1].impulse[5][0])
player[::new_input].impulse[5][0] == orig(player[::input_i-1].impulse[5][0])
player[::new_input].impulse[5][0] == orig(player[::new_input].impulse[5][0])
player[::new_input].impulse[6] == player[orig(::input_n)-1].impulse[6]
player[::new_input].impulse[6] == player[orig(::input_i)-1].impulse[6]
player[::new_input].impulse[6] == orig(player[::input_n-1].impulse[6])
player[::new_input].impulse[6] == orig(player[::input_i-1].impulse[6])
player[::new_input].impulse[7] == player[orig(::input_n)-1].impulse[7]
player[::new_input].impulse[7] == player[orig(::input_i)-1].impulse[7]
player[::new_input].impulse[7] == orig(player[::input_n-1].impulse[7])
player[::new_input].impulse[7] == orig(player[::input_i-1].impulse[7])
player[::new_input].impulse[8] == player[orig(::input_n)-1].impulse[8]
player[::new_input].impulse[8] == player[orig(::input_i)-1].impulse[8]
player[::new_input].impulse[8] == orig(player[::input_n-1].impulse[8])
player[::new_input].impulse[8] == orig(player[::input_i-1].impulse[8])
player[::new_input].direction == player[orig(::input_n)-1].direction
player[::new_input].direction == player[orig(::input_i)-1].direction
player[::new_input].direction == orig(player[::input_n-1].direction)
player[::new_input].direction == orig(player[::input_i-1].direction)
player[::new_input].magnetos == player[orig(::input_n)-1].magnetos
player[::new_input].magnetos == player[orig(::input_i)-1].magnetos
player[::new_input].magnetos == orig(player[::input_n-1].magnetos)
player[::new_input].magnetos == orig(player[::input_i-1].magnetos)
player[::new_input].magnetos[0] == player[orig(::input_n)-1].magnetos[0]
player[::new_input].magnetos[0] == player[orig(::input_i)-1].magnetos[0]
player[::new_input].magnetos[0] == orig(player[::input_n-1].magnetos[0])
player[::new_input].magnetos[0] == orig(player[::input_i-1].magnetos[0])
player[::new_input].stepCounter == player[orig(::input_n)-1].stepCounter
player[::new_input].stepCounter == player[orig(::input_i)-1].stepCounter
player[::new_input].stepCounter == orig(player[::input_n-1].stepCounter)
player[::new_input].stepCounter == orig(player[::input_i-1].stepCounter)
player[::new_input].pilot == player[orig(::input_n)-1].pilot
player[::new_input].pilot == player[orig(::input_i)-1].pilot
player[::new_input].pilot == orig(player[::input_n-1].pilot)
player[::new_input].pilot == orig(player[::input_i-1].pilot)
player[::new_input].onCrash == player[orig(::input_n)-1].onCrash
player[::new_input].onCrash == player[orig(::input_i)-1].onCrash
player[::new_input].onCrash == orig(player[::input_n-1].onCrash)
player[::new_input].onCrash == orig(player[::input_i-1].onCrash)
orig(player[post(::new_input)].basePosition.col) == orig(player[::input_n-1].basePosition.col)
orig(player[post(::new_input)].basePosition.col) == orig(player[::input_i-1].basePosition.col)
orig(player[post(::new_input)].basePosition.row) == orig(player[::new_input].basePosition.row)
player[orig(::new_input)] == player[orig(::new_input)].body.bodyPoints->player[0]
player[orig(::new_input)] == orig(player[::new_input].body.bodyPoints->player[0])
::crashedPlayers has only one value
::crashedPlayers[] contains no nulls and has only one value, of length 1
::crashedPlayers[] elements has only one value
::crashedPlayers[].start == [null]
::crashedPlayers[].start elements == null
::playerSpace has only one value
::playerSpace[] contains no nulls and has only one value, of length 1
::playerSpace[] elements has only one value
::playerSpace[].playerNodes contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes elements has only one value
::playerSpace[].playerNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes[0] elements has only one value
::playerSpace[].playerNodes->start contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start elements has only one value
::playerSpace[].playerNodes->start[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start[0] elements has only one value
::playerSpace[].playerNodes->start->next contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next elements has only one value
::playerSpace[].playerNodes->start->next[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next[0] elements has only one value
::playerSpace[].playerNodes->start->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->data elements has only one value
::playerSpace[].playerNodes->end contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end elements has only one value
::playerSpace[].playerNodes->end[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end[0] elements has only one value
::playerSpace[].playerNodes->end->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->data elements has only one value
::playerSpace[].playerNodes->end->prev contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->prev elements has only one value
::playerSpace[].playerNodes->end->prev[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->prev[0] elements has only one value
::playerSpace[].playerMap contains no nulls and has only one value, of length 1
::playerSpace[].playerMap elements has only one value
::playerSpace[].guideNodes contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes elements has only one value
::playerSpace[].guideNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes[0] elements has only one value
::playerSpace[].groundMap contains no nulls and has only one value, of length 1
::playerSpace[].groundMap elements has only one value
::playerSpace[].actionGroup contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup elements has only one value
::playerSpace[].actionGroup[0] contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup[0] elements has only one value
::playerSpace[].actionGroup->numActions == [0]
::playerSpace[].actionGroup->numActions elements == 0
::players has only one value
::players[] contains no nulls and has only one value, of length 100
::players[].id == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].id elements == 0
::players[].body contains no nulls and has only one value, of length 100
::players[].body.type == [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.type elements one of { 0, 1 }
::players[].body.visible == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.visible elements one of { 0, 1 }
::players[].body.visible sorted by >=
::players[].body.bodyPoints contains no nulls and has only one value, of length 100
::players[].body.bodyPoints[0] contains no nulls and has only one value, of length 100
::players[].body.bodyPoints->position contains no nulls and has only one value, of length 100
::players[].body.bodyPoints->player has only one value, of length 100
::players[].body.bodyPoints->player[0] has only one value, of length 100
::players[].body.bodyPoints->aspect == [46, 35, 35, 35, 35, 35, 86, 86, 86, 86, 86, 88, 91, 91, 91, 91, 91, 91, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyPoints->aspect elements >= 0
::players[].body.bodyMaps contains no nulls and has only one value, of length 100
::players[].body.bodyMapsSize == [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyMapsSize elements one of { 0, 1, 4 }
::players[].body.bodyMapsSize sorted by >=
::players[].body.bodySize == [28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodySize elements >= 0
::players[].body.bodyWidth == [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyWidth elements one of { 0, 8, 14 }
::players[].body.bodyHeight == [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyHeight elements one of { 0, 4, 6 }
::players[].body.color == [3, 0, 1, 2, 3, 4, 0, 2, 4, 6, 8, 2, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.color elements >= 0
::players[].basePosition contains no nulls and has only one value, of length 100
::players[].basePosition.col elements >= 0
::players[].basePosition.row elements >= 0
::players[].impulse[0] contains no nulls and has only one value, of length 100
::players[].impulse[0][0] elements one of { 0, 1 }
::players[].impulse[1] contains no nulls and has only one value, of length 100
::players[].impulse[1][0] elements one of { 0, 1, 5 }
::players[].impulse[2] contains no nulls and has only one value, of length 100
::players[].impulse[3] contains no nulls and has only one value, of length 100
::players[].impulse[3][0] elements one of { 0, 1 }
::players[].impulse[4] contains no nulls and has only one value, of length 100
::players[].impulse[5] contains no nulls and has only one value, of length 100
::players[].impulse[5][0] elements one of { 0, 1 }
::players[].impulse[6] contains no nulls and has only one value, of length 100
::players[].impulse[7] contains no nulls and has only one value, of length 100
::players[].impulse[7][0] elements one of { 0, 1 }
::players[].impulse[7][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[8] contains no nulls and has only one value, of length 100
::players[].direction elements >= 0
::players[].magnetos has only one value, of length 100
::players[].magnetos[0] has only one value, of length 100
::players[].stepCounter one of { [0, 9, 7, 7, 4, 8, 9, 1, 8, 7, 1, 4, 8, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 9, 7, 7, 4, 8, 9, 1, 8, 7, 1, 4, 8, 2, 10, 4, 2, 9, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].stepCounter elements >= 0
::players[].pilot has only one value, of length 100
::players[].onCrash has only one value, of length 100
::players[].onPushed has only one value, of length 100
::snakeBodyMap has only one value
::trainBodyMap has only one value
::giantBodyMap has only one value
::squareBodyMap has only one value
::circleBodyMap has only one value
::input_n == 1
::input_key == "k"
::trace_pos == "(40, 10) -> (40, 9)\n"
player[].id elements == 0
player[].body.type elements one of { 0, 1 }
player[].body.visible elements one of { 0, 1 }
player[].body.visible sorted by >=
player[].body.bodyPoints->aspect elements >= 0
player[].body.bodyMapsSize elements one of { 0, 1, 4 }
player[].body.bodyMapsSize sorted by >=
player[].body.bodySize elements >= 0
player[].body.bodyWidth elements one of { 0, 8, 14 }
player[].body.bodyHeight elements one of { 0, 4, 6 }
player[].body.color elements >= 0
player[].basePosition.col elements >= 0
player[].basePosition.row elements >= 0
player[].impulse[0][0] elements one of { 0, 1 }
player[].impulse[1][0] elements one of { 0, 1, 5 }
player[].impulse[3][0] elements one of { 0, 1 }
player[].impulse[5][0] elements one of { 0, 1 }
player[].impulse[7][0] elements one of { 0, 1 }
player[].direction elements >= 0
player[].direction sorted by >=
player[].stepCounter elements >= 0
size(::players[]) == 100
::players[::input_n] has only one value
::players[::new_input] has only one value
::players[::input_n].body has only one value
::players[::new_input].body has only one value
::players[::input_n].body.bodyPoints has only one value
::players[::new_input].body.bodyPoints has only one value
::players[::input_n].body.bodyPoints[0] has only one value
::players[::new_input].body.bodyPoints[0] has only one value
::players[::input_n].body.bodyPoints->position has only one value
::players[::new_input].body.bodyPoints->position has only one value
::players[::input_n].body.bodyPoints->player has only one value
::players[::new_input].body.bodyPoints->player has only one value
::players[::input_n].body.bodyPoints->aspect == 35
::players[::new_input].body.bodyPoints->aspect == 46
::players[orig(::new_input)].body.bodyPoints->aspect one of { 35, 46 }
::players[::input_n].body.bodyMaps has only one value
::players[::new_input].body.bodyMaps has only one value
::players[::new_input].body.bodyMapsSize == 4
::players[orig(::new_input)].body.bodyMapsSize one of { 1, 4 }
::players[::new_input].body.bodySize == 28
::players[orig(::new_input)].body.bodySize one of { 1, 28 }
::players[::new_input].body.bodyWidth == 8
::players[orig(::new_input)].body.bodyWidth one of { 0, 8 }
::players[orig(::new_input)].body.bodyHeight one of { 0, 4 }
::players[::new_input].body.color == 3
::players[orig(::new_input)].body.color one of { 0, 3 }
::players[::input_n].basePosition has only one value
::players[::new_input].basePosition has only one value
::players[::new_input].basePosition.col == 40
::players[orig(::new_input)].basePosition.col one of { 0, 40 }
::players[::input_n].basePosition.row == 10
::players[orig(::new_input)].basePosition.row one of { 9, 10 }
::players[::input_n].impulse[0] has only one value
::players[::new_input].impulse[0] has only one value
::players[::input_n].impulse[1] has only one value
::players[::new_input].impulse[1] has only one value
::players[::input_n].impulse[2] has only one value
::players[::new_input].impulse[2] has only one value
::players[::input_n].impulse[3] has only one value
::players[::new_input].impulse[3] has only one value
::players[::input_n].impulse[4] has only one value
::players[::new_input].impulse[4] has only one value
::players[::input_n].impulse[5] has only one value
::players[::new_input].impulse[5] has only one value
::players[::input_n].impulse[6] has only one value
::players[::new_input].impulse[6] has only one value
::players[::input_n].impulse[7] has only one value
::players[::new_input].impulse[7] has only one value
::players[::input_n].impulse[8] has only one value
::players[::new_input].impulse[8] has only one value
::players[orig(::new_input)].direction one of { 0, 1 }
::players[::input_n].magnetos has only one value
::players[::new_input].magnetos has only one value
::players[::input_n].magnetos[0] has only one value
::players[::new_input].magnetos[0] has only one value
::players[::input_n].stepCounter == 9
::players[orig(::new_input)].stepCounter one of { 0, 9 }
::players[::input_n].pilot has only one value
::players[::new_input].pilot has only one value
::players[::input_n].onCrash == null
::players[::new_input].onCrash has only one value
::players[::input_n].onPushed has only one value
player[::input_n].body.bodySize one of { 0, 1, 24 }
player[::input_n].body.bodyWidth one of { 0, 8 }
player[::input_n].body.bodyHeight one of { 0, 4 }
player[::input_n].impulse[1][0] one of { 0, 1 }
player[::new_input].body.bodyMapsSize one of { 1, 4 }
player[::new_input].body.bodySize >= 1
player[::new_input].impulse[1][0] one of { 0, 1 }
player[::new_input].direction one of { 1, 3, 5 }
player[orig(::new_input)].body.bodySize one of { 1, 24, 44 }
player[orig(::new_input)].impulse[1][0] one of { 0, 1 }
::crashedPlayers[] elements == ::crashedPlayers[::new_input]
::crashedPlayers[].start elements == ::crashedPlayers[::new_input].start
::playerSpace[] elements == ::playerSpace[::new_input]
::playerSpace[].playerNodes elements == ::playerSpace[::new_input].playerNodes
::playerSpace[].playerNodes[0] elements == ::playerSpace[::new_input].playerNodes[0]
::playerSpace[].playerNodes->start elements == ::playerSpace[::new_input].playerNodes->start
::playerSpace[].playerNodes->start[0] elements == ::playerSpace[::new_input].playerNodes->start[0]
::playerSpace[].playerNodes->start->next elements == ::playerSpace[::new_input].playerNodes->start->next
::playerSpace[].playerNodes->start->next[0] elements == ::playerSpace[::new_input].playerNodes->start->next[0]
::playerSpace[].playerNodes->start->data elements == ::playerSpace[::new_input].playerNodes->start->data
::playerSpace[].playerNodes->end elements == ::playerSpace[::new_input].playerNodes->end
::playerSpace[].playerNodes->end[0] elements == ::playerSpace[::new_input].playerNodes->end[0]
::playerSpace[].playerNodes->end->data elements == ::playerSpace[::new_input].playerNodes->end->data
::playerSpace[].playerNodes->end->prev elements == ::playerSpace[::new_input].playerNodes->end->prev
::playerSpace[].playerNodes->end->prev[0] elements == ::playerSpace[::new_input].playerNodes->end->prev[0]
::playerSpace[].playerMap elements == ::playerSpace[::new_input].playerMap
::playerSpace[].guideNodes elements == ::playerSpace[::new_input].guideNodes
::playerSpace[].guideNodes[0] elements == ::playerSpace[::new_input].guideNodes[0]
::playerSpace[].groundMap elements == ::playerSpace[::new_input].groundMap
::playerSpace[].actionGroup elements == ::playerSpace[::new_input].actionGroup
::playerSpace[].actionGroup[0] elements == ::playerSpace[::new_input].actionGroup[0]
::playerSpace[].actionGroup->numActions < ::players[].direction (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].direction (lexically)
::playerSpace[].actionGroup->numActions elements == ::new_input
::playerSpace[].actionGroup->numActions < player[].id (lexically)
::playerSpace[].actionGroup->numActions <= player[].id (lexically)
::playerSpace[].actionGroup->numActions < player[].body.type (lexically)
::playerSpace[].actionGroup->numActions <= player[].body.type (lexically)
::playerSpace[].actionGroup->numActions < player[].body.visible (lexically)
::playerSpace[].actionGroup->numActions <= player[].body.visible (lexically)
::playerSpace[].actionGroup->numActions < player[].body.bodyPoints->aspect (lexically)
::playerSpace[].actionGroup->numActions <= player[].body.bodyPoints->aspect (lexically)
::playerSpace[].actionGroup->numActions < player[].body.bodyMapsSize (lexically)
::playerSpace[].actionGroup->numActions <= player[].body.bodyMapsSize (lexically)
::playerSpace[].actionGroup->numActions < player[].body.bodySize (lexically)
::playerSpace[].actionGroup->numActions <= player[].body.bodySize (lexically)
::playerSpace[].actionGroup->numActions < player[].body.bodyWidth (lexically)
::playerSpace[].actionGroup->numActions <= player[].body.bodyWidth (lexically)
::playerSpace[].actionGroup->numActions < player[].body.bodyHeight (lexically)
::playerSpace[].actionGroup->numActions <= player[].body.bodyHeight (lexically)
::playerSpace[].actionGroup->numActions < player[].body.color (lexically)
::playerSpace[].actionGroup->numActions <= player[].body.color (lexically)
::playerSpace[].actionGroup->numActions < player[].basePosition.col (lexically)
::playerSpace[].actionGroup->numActions <= player[].basePosition.col (lexically)
::playerSpace[].actionGroup->numActions < player[].basePosition.row (lexically)
::playerSpace[].actionGroup->numActions <= player[].basePosition.row (lexically)
::playerSpace[].actionGroup->numActions < player[].impulse[0][0] (lexically)
::playerSpace[].actionGroup->numActions <= player[].impulse[0][0] (lexically)
::playerSpace[].actionGroup->numActions < player[].impulse[1][0] (lexically)
::playerSpace[].actionGroup->numActions <= player[].impulse[1][0] (lexically)
::playerSpace[].actionGroup->numActions < player[].impulse[3][0] (lexically)
::playerSpace[].actionGroup->numActions <= player[].impulse[3][0] (lexically)
::playerSpace[].actionGroup->numActions < player[].impulse[5][0] (lexically)
::playerSpace[].actionGroup->numActions <= player[].impulse[5][0] (lexically)
::playerSpace[].actionGroup->numActions < player[].impulse[7][0] (lexically)
::playerSpace[].actionGroup->numActions <= player[].impulse[7][0] (lexically)
::playerSpace[].actionGroup->numActions < player[].direction (lexically)
::playerSpace[].actionGroup->numActions <= player[].direction (lexically)
::playerSpace[].actionGroup->numActions < player[].stepCounter (lexically)
::playerSpace[].actionGroup->numActions <= player[].stepCounter (lexically)
::playerSpace[].actionGroup->numActions < orig(player[].basePosition.col) (lexically)
::playerSpace[].actionGroup->numActions <= orig(player[].basePosition.col) (lexically)
::playerSpace[].actionGroup->numActions < orig(player[].basePosition.row) (lexically)
::playerSpace[].actionGroup->numActions <= orig(player[].basePosition.row) (lexically)
::players in ::players[].body.bodyPoints->player
player[::input_n] in ::players[]
player[::new_input] in ::players[]
player[orig(::new_input)] in ::players[]
::players[].id <= ::players[].body.type (elementwise)
::players[].id <= ::players[].body.visible (elementwise)
::players[].id <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].id <= ::players[].body.bodyMapsSize (elementwise)
::players[].id <= ::players[].body.bodySize (elementwise)
::players[].id <= ::players[].body.bodyWidth (elementwise)
::players[].id <= ::players[].body.bodyHeight (elementwise)
::players[].id <= ::players[].body.color (elementwise)
::players[].id <= ::players[].basePosition.col (elementwise)
::players[].id <= ::players[].basePosition.row (elementwise)
::players[].id <= ::players[].impulse[0][0] (elementwise)
::players[].id <= ::players[].impulse[1][0] (elementwise)
::players[].id <= ::players[].impulse[3][0] (elementwise)
::players[].id <= ::players[].impulse[5][0] (elementwise)
::players[].id <= ::players[].impulse[7][0] (elementwise)
::players[].id < ::players[].direction (lexically)
::players[].id <= ::players[].direction (elementwise)
::players[].id <= ::players[].stepCounter (elementwise)
::players[].id elements == ::new_input
::players[].id >= player[].id (lexically)
::players[].id < player[].body.visible (lexically)
::players[].id <= player[].body.visible (lexically)
::players[].id < player[].body.bodyPoints->aspect (lexically)
::players[].id <= player[].body.bodyPoints->aspect (lexically)
::players[].id < player[].body.bodyMapsSize (lexically)
::players[].id <= player[].body.bodyMapsSize (lexically)
::players[].id < player[].body.bodySize (lexically)
::players[].id <= player[].body.bodySize (lexically)
::players[].id < player[].body.bodyWidth (lexically)
::players[].id <= player[].body.bodyWidth (lexically)
::players[].id < player[].body.bodyHeight (lexically)
::players[].id <= player[].body.bodyHeight (lexically)
::players[].id < player[].body.color (lexically)
::players[].id <= player[].body.color (lexically)
::players[].id < player[].basePosition.col (lexically)
::players[].id <= player[].basePosition.col (lexically)
::players[].id < player[].basePosition.row (lexically)
::players[].id <= player[].basePosition.row (lexically)
::players[].id < player[].impulse[5][0] (lexically)
::players[].id <= player[].impulse[5][0] (lexically)
::players[].id < player[].direction (lexically)
::players[].id <= player[].direction (lexically)
::players[].id < player[].stepCounter (lexically)
::players[].id <= player[].stepCounter (lexically)
::players[].id <= orig(::players[].basePosition.col) (elementwise)
::players[].id <= orig(::players[].basePosition.row) (elementwise)
::players[].id < orig(player[].basePosition.col) (lexically)
::players[].id <= orig(player[].basePosition.col) (lexically)
::players[].id < orig(player[].basePosition.row) (lexically)
::players[].id <= orig(player[].basePosition.row) (lexically)
player[::input_n].body in ::players[].body
player[::new_input].body in ::players[].body
player[orig(::new_input)].body in ::players[].body
::players[].body.type <= ::players[].body.visible (elementwise)
::players[].body.type <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].body.type <= ::players[].body.bodyMapsSize (elementwise)
::players[].body.type <= ::players[].body.bodySize (elementwise)
::players[].body.type >= ::players[].impulse[0][0] (elementwise)
::players[].body.type < ::players[].direction (lexically)
::players[].body.type <= ::players[].direction (lexically)
::players[].body.type <= ::players[].stepCounter (elementwise)
::players[].body.type elements <= ::input_n
::players[].body.type elements >= ::new_input
::players[].body.type > player[].id (lexically)
::players[].body.type >= player[].id (lexically)
::players[].body.type < player[].body.visible (lexically)
::players[].body.type <= player[].body.visible (lexically)
::players[].body.type < player[].body.bodyPoints->aspect (lexically)
::players[].body.type <= player[].body.bodyPoints->aspect (lexically)
::players[].body.type < player[].body.bodyMapsSize (lexically)
::players[].body.type <= player[].body.bodyMapsSize (lexically)
::players[].body.type < player[].body.bodySize (lexically)
::players[].body.type <= player[].body.bodySize (lexically)
::players[].body.type < player[].body.color (lexically)
::players[].body.type <= player[].body.color (lexically)
::players[].body.type < player[].basePosition.col (lexically)
::players[].body.type <= player[].basePosition.col (lexically)
::players[].body.type < player[].basePosition.row (lexically)
::players[].body.type <= player[].basePosition.row (lexically)
::players[].body.type > player[].impulse[0][0] (lexically)
::players[].body.type >= player[].impulse[0][0] (lexically)
::players[].body.type > player[].impulse[7][0] (lexically)
::players[].body.type >= player[].impulse[7][0] (lexically)
::players[].body.type < player[].direction (lexically)
::players[].body.type <= player[].direction (lexically)
::players[].body.type < player[].stepCounter (lexically)
::players[].body.type <= player[].stepCounter (lexically)
::players[].body.type < orig(player[].basePosition.col) (lexically)
::players[].body.type <= orig(player[].basePosition.col) (lexically)
::players[].body.type < orig(player[].basePosition.row) (lexically)
::players[].body.type <= orig(player[].basePosition.row) (lexically)
::players[].body.type elements < size(::players[])-1
::players[].body.type elements < size(player[])-1
::players[].body.type elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.type elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.type elements < ::players[orig(::new_input)].body.bodyPoints->aspect
::players[].body.type elements < ::players[::new_input].body.bodyMapsSize
::players[].body.type elements <= ::players[orig(::new_input)].body.bodyMapsSize
::players[].body.type elements < ::players[::new_input].body.bodySize
::players[].body.type elements <= ::players[orig(::new_input)].body.bodySize
::players[].body.type elements < ::players[::new_input].body.bodyWidth
::players[].body.type elements < ::players[::new_input].body.color
::players[].body.type elements < ::players[::new_input].basePosition.col
::players[].body.type elements < ::players[::input_n].basePosition.row
::players[].body.type elements < ::players[orig(::new_input)].basePosition.row
::players[orig(::new_input)].direction in ::players[].body.type
::players[].body.type elements < ::players[::input_n].stepCounter
player[::input_n].body.type in ::players[].body.type
player[::input_n].body.visible in ::players[].body.type
player[::input_n].impulse[0][0] in ::players[].body.type
player[::input_n].impulse[1][0] in ::players[].body.type
player[::input_n].impulse[3][0] in ::players[].body.type
player[::input_n].impulse[5][0] in ::players[].body.type
player[::input_n].impulse[7][0] in ::players[].body.type
player[::new_input].body.type in ::players[].body.type
::players[].body.type elements < player[::new_input].body.bodyPoints->aspect
::players[].body.type elements <= player[::new_input].body.bodyMapsSize
::players[].body.type elements <= player[::new_input].body.bodySize
::players[].body.type elements <= player[::new_input].body.color
::players[].body.type elements < player[::new_input].basePosition.col
::players[].body.type elements < player[::new_input].basePosition.row
player[::new_input].impulse[1][0] in ::players[].body.type
player[::new_input].impulse[3][0] in ::players[].body.type
player[::new_input].impulse[5][0] in ::players[].body.type
::players[].body.type elements <= player[::new_input].direction
::players[].body.type elements < orig(player[post(::new_input)].basePosition.col)
::players[].body.type elements < player[orig(::new_input)].body.bodyPoints->aspect
::players[].body.type elements <= player[orig(::new_input)].body.bodySize
::players[].body.type elements < player[orig(::new_input)].basePosition.row
player[orig(::new_input)].impulse[1][0] in ::players[].body.type
::players[].body.type elements <= player[orig(::new_input)].stepCounter
::players[].body.type elements <= orig(player[::new_input].basePosition.row)
::players[].body.visible <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].body.visible <= ::players[].body.bodyMapsSize (elementwise)
::players[].body.visible <= ::players[].body.bodySize (elementwise)
::players[].body.visible >= ::players[].impulse[0][0] (elementwise)
::players[].body.visible >= ::players[].impulse[3][0] (elementwise)
::players[].body.visible >= ::players[].impulse[5][0] (elementwise)
::players[].body.visible >= ::players[].impulse[7][0] (elementwise)
::players[].body.visible > ::players[].direction (lexically)
::players[].body.visible >= ::players[].direction (lexically)
::players[].body.visible elements <= ::input_n
::new_input in ::players[].body.visible
::players[].body.visible elements >= ::new_input
::players[].body.visible > player[].id (lexically)
::players[].body.visible >= player[].id (lexically)
::players[].body.visible > player[].body.type (lexically)
::players[].body.visible >= player[].body.type (lexically)
::players[].body.visible >= player[].body.visible (lexically)
::players[].body.visible < player[].body.bodyPoints->aspect (lexically)
::players[].body.visible <= player[].body.bodyPoints->aspect (lexically)
::players[].body.visible < player[].body.bodySize (lexically)
::players[].body.visible <= player[].body.bodySize (lexically)
::players[].body.visible < player[].body.color (lexically)
::players[].body.visible <= player[].body.color (lexically)
::players[].body.visible < player[].basePosition.col (lexically)
::players[].body.visible <= player[].basePosition.col (lexically)
::players[].body.visible < player[].basePosition.row (lexically)
::players[].body.visible <= player[].basePosition.row (lexically)
::players[].body.visible > player[].impulse[0][0] (lexically)
::players[].body.visible >= player[].impulse[0][0] (lexically)
::players[].body.visible > player[].impulse[1][0] (lexically)
::players[].body.visible >= player[].impulse[1][0] (lexically)
::players[].body.visible > player[].impulse[3][0] (lexically)
::players[].body.visible >= player[].impulse[3][0] (lexically)
::players[].body.visible > player[].impulse[5][0] (lexically)
::players[].body.visible >= player[].impulse[5][0] (lexically)
::players[].body.visible > player[].impulse[7][0] (lexically)
::players[].body.visible >= player[].impulse[7][0] (lexically)
orig(::new_input) in ::players[].body.visible
::players[].body.visible < orig(player[].basePosition.col) (lexically)
::players[].body.visible <= orig(player[].basePosition.col) (lexically)
::players[].body.visible < orig(player[].basePosition.row) (lexically)
::players[].body.visible <= orig(player[].basePosition.row) (lexically)
::players[].body.visible elements < size(::players[])-1
::players[].body.visible elements < size(player[])-1
::players[].body.visible elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.visible elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.visible elements < ::players[orig(::new_input)].body.bodyPoints->aspect
::players[].body.visible elements < ::players[::new_input].body.bodyMapsSize
::players[].body.visible elements <= ::players[orig(::new_input)].body.bodyMapsSize
::players[].body.visible elements < ::players[::new_input].body.bodySize
::players[].body.visible elements <= ::players[orig(::new_input)].body.bodySize
::players[].body.visible elements < ::players[::new_input].body.bodyWidth
::players[].body.visible elements < ::players[::new_input].body.color
::players[].body.visible elements < ::players[::new_input].basePosition.col
::players[].body.visible elements < ::players[::input_n].basePosition.row
::players[].body.visible elements < ::players[orig(::new_input)].basePosition.row
::players[orig(::new_input)].direction in ::players[].body.visible
::players[].body.visible elements < ::players[::input_n].stepCounter
player[::input_n].body.type in ::players[].body.visible
player[::input_n].body.visible in ::players[].body.visible
player[::input_n].impulse[0][0] in ::players[].body.visible
player[::input_n].impulse[1][0] in ::players[].body.visible
player[::input_n].impulse[3][0] in ::players[].body.visible
player[::input_n].impulse[5][0] in ::players[].body.visible
player[::input_n].impulse[7][0] in ::players[].body.visible
player[::new_input].body.type in ::players[].body.visible
::players[].body.visible elements < player[::new_input].body.bodyPoints->aspect
::players[].body.visible elements <= player[::new_input].body.bodyMapsSize
::players[].body.visible elements <= player[::new_input].body.bodySize
::players[].body.visible elements <= player[::new_input].body.color
::players[].body.visible elements < player[::new_input].basePosition.col
::players[].body.visible elements < player[::new_input].basePosition.row
player[::new_input].impulse[1][0] in ::players[].body.visible
player[::new_input].impulse[3][0] in ::players[].body.visible
player[::new_input].impulse[5][0] in ::players[].body.visible
::players[].body.visible elements <= player[::new_input].direction
::players[].body.visible elements < orig(player[post(::new_input)].basePosition.col)
::players[].body.visible elements < player[orig(::new_input)].body.bodyPoints->aspect
::players[].body.visible elements <= player[orig(::new_input)].body.bodySize
::players[].body.visible elements < player[orig(::new_input)].basePosition.row
player[orig(::new_input)].impulse[1][0] in ::players[].body.visible
::players[].body.visible elements <= player[orig(::new_input)].stepCounter
::players[].body.visible elements <= orig(player[::new_input].basePosition.row)
player[::input_n].body.bodyPoints in ::players[].body.bodyPoints
player[::new_input].body.bodyPoints in ::players[].body.bodyPoints
player[orig(::new_input)].body.bodyPoints in ::players[].body.bodyPoints
player[::input_n].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
player[::new_input].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
player[orig(::new_input)].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
::players[].body.bodyPoints->position - ::players[].basePosition + 7304 == 0
player[::input_n].body.bodyPoints->position in ::players[].body.bodyPoints->position
player[::new_input].body.bodyPoints->position in ::players[].body.bodyPoints->position
player[orig(::new_input)].body.bodyPoints->position in ::players[].body.bodyPoints->position
orig(player) in ::players[].body.bodyPoints->player
player[::input_n].body.bodyPoints->player in ::players[].body.bodyPoints->player
player[orig(::new_input)].body.bodyPoints->player in ::players[].body.bodyPoints->player
player[::input_n].body.bodyPoints->player[0] in ::players[].body.bodyPoints->player[0]
player[::new_input] in ::players[].body.bodyPoints->player[0]
player[orig(::new_input)] in ::players[].body.bodyPoints->player[0]
::players[].body.bodyPoints->aspect >= ::players[].body.bodyMapsSize (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodySize (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodyWidth (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.color (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].basePosition.col (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].basePosition.row (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[0][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[1][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[3][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[5][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyPoints->aspect > ::players[].direction (lexically)
::players[].body.bodyPoints->aspect >= ::players[].direction (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].stepCounter (elementwise)
::new_input in ::players[].body.bodyPoints->aspect
::players[].body.bodyPoints->aspect elements >= ::new_input
::players[].body.bodyPoints->aspect > player[].id (lexically)
::players[].body.bodyPoints->aspect >= player[].id (lexically)
::players[].body.bodyPoints->aspect > player[].body.type (lexically)
::players[].body.bodyPoints->aspect >= player[].body.type (lexically)
::players[].body.bodyPoints->aspect > player[].body.visible (lexically)
::players[].body.bodyPoints->aspect >= player[].body.visible (lexically)
::players[].body.bodyPoints->aspect > player[].body.bodyMapsSize (lexically)
::players[].body.bodyPoints->aspect >= player[].body.bodyMapsSize (lexically)
::players[].body.bodyPoints->aspect > player[].body.bodySize (lexically)
::players[].body.bodyPoints->aspect >= player[].body.bodySize (lexically)
::players[].body.bodyPoints->aspect > player[].body.bodyWidth (lexically)
::players[].body.bodyPoints->aspect >= player[].body.bodyWidth (lexically)
::players[].body.bodyPoints->aspect > player[].body.bodyHeight (lexically)
::players[].body.bodyPoints->aspect >= player[].body.bodyHeight (lexically)
::players[].body.bodyPoints->aspect > player[].body.color (lexically)
::players[].body.bodyPoints->aspect >= player[].body.color (lexically)
::players[].body.bodyPoints->aspect > player[].basePosition.row (lexically)
::players[].body.bodyPoints->aspect >= player[].basePosition.row (lexically)
::players[].body.bodyPoints->aspect > player[].impulse[0][0] (lexically)
::players[].body.bodyPoints->aspect >= player[].impulse[0][0] (lexically)
::players[].body.bodyPoints->aspect > player[].impulse[1][0] (lexically)
::players[].body.bodyPoints->aspect >= player[].impulse[1][0] (lexically)
::players[].body.bodyPoints->aspect > player[].impulse[3][0] (lexically)
::players[].body.bodyPoints->aspect >= player[].impulse[3][0] (lexically)
::players[].body.bodyPoints->aspect > player[].impulse[5][0] (lexically)
::players[].body.bodyPoints->aspect >= player[].impulse[5][0] (lexically)
::players[].body.bodyPoints->aspect > player[].impulse[7][0] (lexically)
::players[].body.bodyPoints->aspect >= player[].impulse[7][0] (lexically)
::players[].body.bodyPoints->aspect > player[].direction (lexically)
::players[].body.bodyPoints->aspect >= player[].direction (lexically)
::players[].body.bodyPoints->aspect > player[].stepCounter (lexically)
::players[].body.bodyPoints->aspect >= player[].stepCounter (lexically)
::players[].body.bodyPoints->aspect >= orig(::players[].basePosition.col) (elementwise)
::players[].body.bodyPoints->aspect >= orig(::players[].basePosition.row) (elementwise)
::players[].body.bodyPoints->aspect > orig(player[].basePosition.row) (lexically)
::players[].body.bodyPoints->aspect >= orig(player[].basePosition.row) (lexically)
::players[].body.bodyPoints->aspect elements < size(::players[])-1
player[::input_n].body.bodyPoints->aspect in ::players[].body.bodyPoints->aspect
player[::new_input].body.bodyPoints->aspect in ::players[].body.bodyPoints->aspect
player[orig(::new_input)].body.bodyPoints->aspect in ::players[].body.bodyPoints->aspect
player[::input_n].body.bodyMaps in ::players[].body.bodyMaps
player[::new_input].body.bodyMaps in ::players[].body.bodyMaps
player[orig(::new_input)].body.bodyMaps in ::players[].body.bodyMaps
::players[].body.bodyMapsSize <= ::players[].body.bodySize (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[0][0] (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[3][0] (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[5][0] (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyMapsSize > ::players[].direction (lexically)
::players[].body.bodyMapsSize >= ::players[].direction (lexically)
::new_input in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements >= ::new_input
::players[].body.bodyMapsSize > player[].id (lexically)
::players[].body.bodyMapsSize >= player[].id (lexically)
::players[].body.bodyMapsSize > player[].body.type (lexically)
::players[].body.bodyMapsSize >= player[].body.type (lexically)
::players[].body.bodyMapsSize > player[].body.visible (lexically)
::players[].body.bodyMapsSize >= player[].body.visible (lexically)
::players[].body.bodyMapsSize < player[].body.bodyPoints->aspect (lexically)
::players[].body.bodyMapsSize <= player[].body.bodyPoints->aspect (lexically)
::players[].body.bodyMapsSize >= player[].body.bodyMapsSize (lexically)
::players[].body.bodyMapsSize > player[].impulse[0][0] (lexically)
::players[].body.bodyMapsSize >= player[].impulse[0][0] (lexically)
::players[].body.bodyMapsSize > player[].impulse[1][0] (lexically)
::players[].body.bodyMapsSize >= player[].impulse[1][0] (lexically)
::players[].body.bodyMapsSize > player[].impulse[3][0] (lexically)
::players[].body.bodyMapsSize >= player[].impulse[3][0] (lexically)
::players[].body.bodyMapsSize > player[].impulse[5][0] (lexically)
::players[].body.bodyMapsSize >= player[].impulse[5][0] (lexically)
::players[].body.bodyMapsSize > player[].impulse[7][0] (lexically)
::players[].body.bodyMapsSize >= player[].impulse[7][0] (lexically)
orig(::new_input) in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < size(::players[])-1
::players[].body.bodyMapsSize elements < size(player[])-1
::players[].body.bodyMapsSize elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements < ::players[orig(::new_input)].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements <= ::players[::new_input].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::new_input].body.bodySize
::players[].body.bodyMapsSize elements < ::players[::new_input].body.bodyWidth
::players[orig(::new_input)].body.bodyHeight in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::new_input].basePosition.col
::players[].body.bodyMapsSize elements < ::players[::input_n].basePosition.row
::players[].body.bodyMapsSize elements < ::players[orig(::new_input)].basePosition.row
::players[orig(::new_input)].direction in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::input_n].stepCounter
player[::input_n].body.type in ::players[].body.bodyMapsSize
player[::input_n].body.visible in ::players[].body.bodyMapsSize
player[::input_n].body.bodyHeight in ::players[].body.bodyMapsSize
player[::input_n].impulse[0][0] in ::players[].body.bodyMapsSize
player[::input_n].impulse[1][0] in ::players[].body.bodyMapsSize
player[::input_n].impulse[3][0] in ::players[].body.bodyMapsSize
player[::input_n].impulse[5][0] in ::players[].body.bodyMapsSize
player[::input_n].impulse[7][0] in ::players[].body.bodyMapsSize
player[::new_input].body.type in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].body.bodyMapsSize in ::players[].body.bodyMapsSize
player[::new_input].impulse[1][0] in ::players[].body.bodyMapsSize
player[::new_input].impulse[3][0] in ::players[].body.bodyMapsSize
player[::new_input].impulse[5][0] in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < player[orig(::new_input)].body.bodyPoints->aspect
player[orig(::new_input)].impulse[1][0] in ::players[].body.bodyMapsSize
::players[].body.bodySize >= ::players[].body.bodyWidth (elementwise)
::players[].body.bodySize >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodySize >= ::players[].impulse[0][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[1][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[3][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[5][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodySize > ::players[].direction (lexically)
::players[].body.bodySize >= ::players[].direction (lexically)
::new_input in ::players[].body.bodySize
::players[].body.bodySize elements >= ::new_input
::players[].body.bodySize > player[].id (lexically)
::players[].body.bodySize >= player[].id (lexically)
::players[].body.bodySize > player[].body.type (lexically)
::players[].body.bodySize >= player[].body.type (lexically)
::players[].body.bodySize > player[].body.visible (lexically)
::players[].body.bodySize >= player[].body.visible (lexically)
::players[].body.bodySize < player[].body.bodyPoints->aspect (lexically)
::players[].body.bodySize <= player[].body.bodyPoints->aspect (lexically)
::players[].body.bodySize > player[].body.bodyMapsSize (lexically)
::players[].body.bodySize >= player[].body.bodyMapsSize (lexically)
::players[].body.bodySize > player[].body.bodyWidth (lexically)
::players[].body.bodySize >= player[].body.bodyWidth (lexically)
::players[].body.bodySize > player[].body.bodyHeight (lexically)
::players[].body.bodySize >= player[].body.bodyHeight (lexically)
::players[].body.bodySize > player[].body.color (lexically)
::players[].body.bodySize >= player[].body.color (lexically)
::players[].body.bodySize > player[].basePosition.row (lexically)
::players[].body.bodySize >= player[].basePosition.row (lexically)
::players[].body.bodySize > player[].impulse[0][0] (lexically)
::players[].body.bodySize >= player[].impulse[0][0] (lexically)
::players[].body.bodySize > player[].impulse[1][0] (lexically)
::players[].body.bodySize >= player[].impulse[1][0] (lexically)
::players[].body.bodySize > player[].impulse[3][0] (lexically)
::players[].body.bodySize >= player[].impulse[3][0] (lexically)
::players[].body.bodySize > player[].impulse[5][0] (lexically)
::players[].body.bodySize >= player[].impulse[5][0] (lexically)
::players[].body.bodySize > player[].impulse[7][0] (lexically)
::players[].body.bodySize >= player[].impulse[7][0] (lexically)
::players[].body.bodySize > player[].direction (lexically)
::players[].body.bodySize >= player[].direction (lexically)
::players[].body.bodySize > player[].stepCounter (lexically)
::players[].body.bodySize >= player[].stepCounter (lexically)
orig(::new_input) in ::players[].body.bodySize
::players[].body.bodySize > orig(player[].basePosition.row) (lexically)
::players[].body.bodySize >= orig(player[].basePosition.row) (lexically)
::players[].body.bodySize elements < size(::players[])-1
::players[].body.bodySize elements < size(player[])-1
::players[].body.bodySize elements < ::players[::new_input].body.bodyPoints->aspect
::players[orig(::new_input)].direction in ::players[].body.bodySize
player[::input_n].body.type in ::players[].body.bodySize
player[::input_n].body.visible in ::players[].body.bodySize
player[::input_n].body.bodySize in ::players[].body.bodySize
player[::input_n].impulse[0][0] in ::players[].body.bodySize
player[::input_n].impulse[1][0] in ::players[].body.bodySize
player[::input_n].impulse[3][0] in ::players[].body.bodySize
player[::input_n].impulse[5][0] in ::players[].body.bodySize
player[::input_n].impulse[7][0] in ::players[].body.bodySize
player[::new_input].body.type in ::players[].body.bodySize
player[::new_input].body.bodySize in ::players[].body.bodySize
player[::new_input].impulse[1][0] in ::players[].body.bodySize
player[::new_input].impulse[3][0] in ::players[].body.bodySize
player[::new_input].impulse[5][0] in ::players[].body.bodySize
player[orig(::new_input)].body.bodySize in ::players[].body.bodySize
player[orig(::new_input)].impulse[1][0] in ::players[].body.bodySize
::players[].body.bodyWidth >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodyWidth >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyWidth > ::players[].direction (lexically)
::players[].body.bodyWidth >= ::players[].direction (lexically)
::players[].body.bodyWidth elements >= ::new_input
::players[].body.bodyWidth > player[].id (lexically)
::players[].body.bodyWidth >= player[].id (lexically)
::players[].body.bodyWidth > player[].body.type (lexically)
::players[].body.bodyWidth >= player[].body.type (lexically)
::players[].body.bodyWidth > player[].body.visible (lexically)
::players[].body.bodyWidth >= player[].body.visible (lexically)
::players[].body.bodyWidth < player[].body.bodyPoints->aspect (lexically)
::players[].body.bodyWidth <= player[].body.bodyPoints->aspect (lexically)
::players[].body.bodyWidth > player[].body.bodyMapsSize (lexically)
::players[].body.bodyWidth >= player[].body.bodyMapsSize (lexically)
::players[].body.bodyWidth > player[].body.bodyHeight (lexically)
::players[].body.bodyWidth >= player[].body.bodyHeight (lexically)
::players[].body.bodyWidth > player[].body.color (lexically)
::players[].body.bodyWidth >= player[].body.color (lexically)
::players[].body.bodyWidth > player[].impulse[0][0] (lexically)
::players[].body.bodyWidth >= player[].impulse[0][0] (lexically)
::players[].body.bodyWidth > player[].impulse[1][0] (lexically)
::players[].body.bodyWidth >= player[].impulse[1][0] (lexically)
::players[].body.bodyWidth > player[].impulse[3][0] (lexically)
::players[].body.bodyWidth >= player[].impulse[3][0] (lexically)
::players[].body.bodyWidth > player[].impulse[5][0] (lexically)
::players[].body.bodyWidth >= player[].impulse[5][0] (lexically)
::players[].body.bodyWidth > player[].impulse[7][0] (lexically)
::players[].body.bodyWidth >= player[].impulse[7][0] (lexically)
::players[].body.bodyWidth > player[].direction (lexically)
::players[].body.bodyWidth >= player[].direction (lexically)
::players[].body.bodyWidth elements < size(::players[])-1
::players[].body.bodyWidth elements < size(player[])-1
::players[].body.bodyWidth elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[orig(::new_input)].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[::new_input].body.bodySize
::players[].body.bodyWidth elements < ::players[::new_input].basePosition.col
player[::input_n].body.bodyWidth in ::players[].body.bodyWidth
::players[].body.bodyWidth elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].body.bodyWidth in ::players[].body.bodyWidth
::players[].body.bodyWidth elements < player[orig(::new_input)].body.bodyPoints->aspect
player[orig(::new_input)].body.bodyWidth in ::players[].body.bodyWidth
::players[].body.bodyHeight >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyHeight > ::players[].direction (lexically)
::players[].body.bodyHeight >= ::players[].direction (lexically)
::players[].body.bodyHeight elements >= ::new_input
::players[].body.bodyHeight > player[].id (lexically)
::players[].body.bodyHeight >= player[].id (lexically)
::players[].body.bodyHeight > player[].body.type (lexically)
::players[].body.bodyHeight >= player[].body.type (lexically)
::players[].body.bodyHeight > player[].body.visible (lexically)
::players[].body.bodyHeight >= player[].body.visible (lexically)
::players[].body.bodyHeight < player[].body.bodyPoints->aspect (lexically)
::players[].body.bodyHeight <= player[].body.bodyPoints->aspect (lexically)
::players[].body.bodyHeight > player[].impulse[0][0] (lexically)
::players[].body.bodyHeight >= player[].impulse[0][0] (lexically)
::players[].body.bodyHeight > player[].impulse[1][0] (lexically)
::players[].body.bodyHeight >= player[].impulse[1][0] (lexically)
::players[].body.bodyHeight > player[].impulse[3][0] (lexically)
::players[].body.bodyHeight >= player[].impulse[3][0] (lexically)
::players[].body.bodyHeight > player[].impulse[5][0] (lexically)
::players[].body.bodyHeight >= player[].impulse[5][0] (lexically)
::players[].body.bodyHeight > player[].impulse[7][0] (lexically)
::players[].body.bodyHeight >= player[].impulse[7][0] (lexically)
::players[].body.bodyHeight elements < size(::players[])-1
::players[].body.bodyHeight elements < size(player[])-1
::players[].body.bodyHeight elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[orig(::new_input)].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[::new_input].body.bodySize
::players[].body.bodyHeight elements < ::players[::new_input].body.bodyWidth
::players[].body.bodyHeight elements < ::players[::new_input].basePosition.col
::players[].body.bodyHeight elements < ::players[::input_n].basePosition.row
::players[].body.bodyHeight elements < ::players[orig(::new_input)].basePosition.row
::players[].body.bodyHeight elements < ::players[::input_n].stepCounter
player[::input_n].body.bodyHeight in ::players[].body.bodyHeight
::players[].body.bodyHeight elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].body.bodyHeight in ::players[].body.bodyHeight
::players[].body.bodyHeight elements < player[orig(::new_input)].body.bodyPoints->aspect
player[orig(::new_input)].body.bodyHeight in ::players[].body.bodyHeight
::players[].body.color <= ::players[].basePosition.col (elementwise)
::players[].body.color >= ::players[].impulse[5][0] (elementwise)
::players[].body.color > ::players[].direction (lexically)
::players[].body.color >= ::players[].direction (lexically)
::input_n in ::players[].body.color
::players[].body.color elements >= ::new_input
::players[].body.color > player[].id (lexically)
::players[].body.color >= player[].id (lexically)
::players[].body.color > player[].body.type (lexically)
::players[].body.color >= player[].body.type (lexically)
::players[].body.color > player[].body.visible (lexically)
::players[].body.color >= player[].body.visible (lexically)
::players[].body.color < player[].body.bodyPoints->aspect (lexically)
::players[].body.color <= player[].body.bodyPoints->aspect (lexically)
::players[].body.color < player[].basePosition.col (lexically)
::players[].body.color <= player[].basePosition.col (lexically)
::players[].body.color > player[].impulse[0][0] (lexically)
::players[].body.color >= player[].impulse[0][0] (lexically)
::players[].body.color > player[].impulse[1][0] (lexically)
::players[].body.color >= player[].impulse[1][0] (lexically)
::players[].body.color > player[].impulse[3][0] (lexically)
::players[].body.color >= player[].impulse[3][0] (lexically)
::players[].body.color > player[].impulse[5][0] (lexically)
::players[].body.color >= player[].impulse[5][0] (lexically)
::players[].body.color > player[].impulse[7][0] (lexically)
::players[].body.color >= player[].impulse[7][0] (lexically)
::players[].body.color <= orig(::players[].basePosition.col) (elementwise)
orig(::new_input) in ::players[].body.color
::players[].body.color elements < size(::players[])-1
::players[].body.color elements < size(player[])-1
::players[].body.color elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.color elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.color elements < ::players[orig(::new_input)].body.bodyPoints->aspect
::players[::new_input].body.bodyMapsSize in ::players[].body.color
::players[orig(::new_input)].body.bodyMapsSize in ::players[].body.color
::players[].body.color elements < ::players[::new_input].body.bodySize
::players[::new_input].body.bodyWidth in ::players[].body.color
::players[].body.color elements <= ::players[::new_input].body.bodyWidth
::players[orig(::new_input)].body.bodyWidth in ::players[].body.color
::players[orig(::new_input)].body.bodyHeight in ::players[].body.color
::players[].body.color elements < ::players[::new_input].basePosition.col
::players[].body.color elements < ::players[::input_n].basePosition.row
::players[].body.color elements < ::players[orig(::new_input)].basePosition.row
::players[orig(::new_input)].direction in ::players[].body.color
::players[].body.color elements < ::players[::input_n].stepCounter
player[::input_n].body.type in ::players[].body.color
player[::input_n].body.visible in ::players[].body.color
player[::input_n].body.bodyWidth in ::players[].body.color
player[::input_n].body.bodyHeight in ::players[].body.color
player[::input_n].body.color in ::players[].body.color
player[::input_n].impulse[0][0] in ::players[].body.color
player[::input_n].impulse[1][0] in ::players[].body.color
player[::input_n].impulse[3][0] in ::players[].body.color
player[::input_n].impulse[5][0] in ::players[].body.color
player[::input_n].impulse[7][0] in ::players[].body.color
player[::new_input].body.type in ::players[].body.color
::players[].body.color elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].body.bodyMapsSize in ::players[].body.color
player[::new_input].body.bodyHeight in ::players[].body.color
player[::new_input].body.color in ::players[].body.color
player[::new_input].impulse[1][0] in ::players[].body.color
player[::new_input].impulse[3][0] in ::players[].body.color
player[::new_input].impulse[5][0] in ::players[].body.color
player[::new_input].direction in ::players[].body.color
player[::new_input].stepCounter in ::players[].body.color
::players[].body.color elements < player[orig(::new_input)].body.bodyPoints->aspect
player[orig(::new_input)].body.bodyHeight in ::players[].body.color
player[orig(::new_input)].body.color in ::players[].body.color
player[orig(::new_input)].impulse[1][0] in ::players[].body.color
player[orig(::new_input)].direction in ::players[].body.color
player[::input_n].basePosition in ::players[].basePosition
player[::new_input].basePosition in ::players[].basePosition
player[orig(::new_input)].basePosition in ::players[].basePosition
::players[].basePosition.col > ::players[].basePosition.row (lexically)
::players[].basePosition.col >= ::players[].basePosition.row (lexically)
::players[].basePosition.col > ::players[].impulse[0][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[0][0] (lexically)
::players[].basePosition.col > ::players[].impulse[1][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[1][0] (lexically)
::players[].basePosition.col > ::players[].impulse[3][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[3][0] (elementwise)
::players[].basePosition.col > ::players[].impulse[5][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[5][0] (elementwise)
::players[].basePosition.col > ::players[].impulse[7][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[7][0] (elementwise)
::players[].basePosition.col > ::players[].direction (lexically)
::players[].basePosition.col >= ::players[].direction (lexically)
::players[].basePosition.col > ::players[].stepCounter (lexically)
::players[].basePosition.col >= ::players[].stepCounter (lexically)
::players[].basePosition.col elements >= ::new_input
::players[].basePosition.col > player[].id (lexically)
::players[].basePosition.col >= player[].id (lexically)
::players[].basePosition.col > player[].body.type (lexically)
::players[].basePosition.col >= player[].body.type (lexically)
::players[].basePosition.col > player[].body.visible (lexically)
::players[].basePosition.col >= player[].body.visible (lexically)
::players[].basePosition.col > player[].body.bodyMapsSize (lexically)
::players[].basePosition.col >= player[].body.bodyMapsSize (lexically)
::players[].basePosition.col > player[].body.bodyWidth (lexically)
::players[].basePosition.col >= player[].body.bodyWidth (lexically)
::players[].basePosition.col > player[].body.bodyHeight (lexically)
::players[].basePosition.col >= player[].body.bodyHeight (lexically)
::players[].basePosition.col > player[].body.color (lexically)
::players[].basePosition.col >= player[].body.color (lexically)
::players[].basePosition.col > player[].basePosition.row (lexically)
::players[].basePosition.col >= player[].basePosition.row (lexically)
::players[].basePosition.col > player[].impulse[0][0] (lexically)
::players[].basePosition.col >= player[].impulse[0][0] (lexically)
::players[].basePosition.col > player[].impulse[1][0] (lexically)
::players[].basePosition.col >= player[].impulse[1][0] (lexically)
::players[].basePosition.col > player[].impulse[3][0] (lexically)
::players[].basePosition.col >= player[].impulse[3][0] (lexically)
::players[].basePosition.col > player[].impulse[5][0] (lexically)
::players[].basePosition.col >= player[].impulse[5][0] (lexically)
::players[].basePosition.col > player[].impulse[7][0] (lexically)
::players[].basePosition.col >= player[].impulse[7][0] (lexically)
::players[].basePosition.col > player[].direction (lexically)
::players[].basePosition.col >= player[].direction (lexically)
::players[].basePosition.col > player[].stepCounter (lexically)
::players[].basePosition.col >= player[].stepCounter (lexically)
::players[].basePosition.col >= orig(::players[].basePosition.col) (elementwise)
::players[].basePosition.col > orig(::players[].basePosition.row) (lexically)
::players[].basePosition.col >= orig(::players[].basePosition.row) (lexically)
::players[].basePosition.col > orig(player[].basePosition.row) (lexically)
::players[].basePosition.col >= orig(player[].basePosition.row) (lexically)
::players[].basePosition.col elements < size(::players[])-1
::players[].basePosition.col elements < size(player[])-1
::players[::new_input].body.bodyMapsSize in ::players[].basePosition.col
::players[::new_input].body.bodyWidth in ::players[].basePosition.col
::players[orig(::new_input)].body.bodyWidth in ::players[].basePosition.col
::players[orig(::new_input)].body.bodyHeight in ::players[].basePosition.col
::players[orig(::new_input)].body.color in ::players[].basePosition.col
::players[::input_n].basePosition.row in ::players[].basePosition.col
player[::input_n].body.bodyWidth in ::players[].basePosition.col
player[::input_n].body.bodyHeight in ::players[].basePosition.col
player[::input_n].basePosition.col in ::players[].basePosition.col
player[::new_input].basePosition.col in ::players[].basePosition.col
player[orig(::new_input)].basePosition.col in ::players[].basePosition.col
::players[].basePosition.row > ::players[].impulse[0][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[0][0] (lexically)
::players[].basePosition.row > ::players[].impulse[1][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[1][0] (elementwise)
::players[].basePosition.row > ::players[].impulse[3][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[3][0] (lexically)
::players[].basePosition.row > ::players[].impulse[5][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[5][0] (elementwise)
::players[].basePosition.row > ::players[].impulse[7][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[7][0] (lexically)
::players[].basePosition.row > ::players[].direction (lexically)
::players[].basePosition.row >= ::players[].direction (lexically)
::players[].basePosition.row > ::players[].stepCounter (lexically)
::players[].basePosition.row >= ::players[].stepCounter (lexically)
::input_n in ::players[].basePosition.row
::new_input in ::players[].basePosition.row
::players[].basePosition.row elements >= ::new_input
::players[].basePosition.row > player[].id (lexically)
::players[].basePosition.row >= player[].id (lexically)
::players[].basePosition.row > player[].body.type (lexically)
::players[].basePosition.row >= player[].body.type (lexically)
::players[].basePosition.row > player[].body.visible (lexically)
::players[].basePosition.row >= player[].body.visible (lexically)
::players[].basePosition.row < player[].body.bodyPoints->aspect (lexically)
::players[].basePosition.row <= player[].body.bodyPoints->aspect (lexically)
::players[].basePosition.row > player[].body.bodyMapsSize (lexically)
::players[].basePosition.row >= player[].body.bodyMapsSize (lexically)
::players[].basePosition.row > player[].body.bodyHeight (lexically)
::players[].basePosition.row >= player[].body.bodyHeight (lexically)
::players[].basePosition.row > player[].body.color (lexically)
::players[].basePosition.row >= player[].body.color (lexically)
::players[].basePosition.row > player[].impulse[0][0] (lexically)
::players[].basePosition.row >= player[].impulse[0][0] (lexically)
::players[].basePosition.row > player[].impulse[1][0] (lexically)
::players[].basePosition.row >= player[].impulse[1][0] (lexically)
::players[].basePosition.row > player[].impulse[3][0] (lexically)
::players[].basePosition.row >= player[].impulse[3][0] (lexically)
::players[].basePosition.row > player[].impulse[5][0] (lexically)
::players[].basePosition.row >= player[].impulse[5][0] (lexically)
::players[].basePosition.row > player[].impulse[7][0] (lexically)
::players[].basePosition.row >= player[].impulse[7][0] (lexically)
::players[].basePosition.row > player[].direction (lexically)
::players[].basePosition.row >= player[].direction (lexically)
::players[].basePosition.row > player[].stepCounter (lexically)
::players[].basePosition.row >= player[].stepCounter (lexically)
::players[].basePosition.row < orig(::players[].basePosition.col) (lexically)
::players[].basePosition.row <= orig(::players[].basePosition.col) (lexically)
orig(::new_input) in ::players[].basePosition.row
::players[].basePosition.row elements < size(::players[])-1
::players[].basePosition.row elements < size(player[])-1
::players[].basePosition.row elements < ::players[::input_n].body.bodyPoints->aspect
::players[].basePosition.row elements < ::players[::new_input].body.bodyPoints->aspect
::players[].basePosition.row elements < ::players[orig(::new_input)].body.bodyPoints->aspect
::players[::new_input].body.bodyMapsSize in ::players[].basePosition.row
::players[orig(::new_input)].body.bodyMapsSize in ::players[].basePosition.row
::players[].basePosition.row elements < ::players[::new_input].body.bodySize
::players[orig(::new_input)].body.bodyHeight in ::players[].basePosition.row
::players[::new_input].body.color in ::players[].basePosition.row
::players[orig(::new_input)].body.color in ::players[].basePosition.row
::players[].basePosition.row elements < ::players[::new_input].basePosition.col
::players[orig(::new_input)].direction in ::players[].basePosition.row
::players[orig(::new_input)].stepCounter in ::players[].basePosition.row
player[::input_n].body.type in ::players[].basePosition.row
player[::input_n].body.visible in ::players[].basePosition.row
player[::input_n].body.bodyHeight in ::players[].basePosition.row
player[::input_n].body.color in ::players[].basePosition.row
player[::input_n].basePosition.row in ::players[].basePosition.row
player[::input_n].impulse[0][0] in ::players[].basePosition.row
player[::input_n].impulse[1][0] in ::players[].basePosition.row
player[::input_n].impulse[3][0] in ::players[].basePosition.row
player[::input_n].impulse[5][0] in ::players[].basePosition.row
player[::input_n].impulse[7][0] in ::players[].basePosition.row
player[::new_input].body.type in ::players[].basePosition.row
::players[].basePosition.row elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].body.bodyMapsSize in ::players[].basePosition.row
player[::new_input].body.bodyHeight in ::players[].basePosition.row
player[::new_input].basePosition.row in ::players[].basePosition.row
player[::new_input].impulse[1][0] in ::players[].basePosition.row
player[::new_input].impulse[3][0] in ::players[].basePosition.row
player[::new_input].impulse[5][0] in ::players[].basePosition.row
player[::new_input].direction in ::players[].basePosition.row
::players[].basePosition.row elements < player[orig(::new_input)].body.bodyPoints->aspect
player[orig(::new_input)].body.bodyHeight in ::players[].basePosition.row
player[orig(::new_input)].basePosition.row in ::players[].basePosition.row
player[orig(::new_input)].impulse[1][0] in ::players[].basePosition.row
player[orig(::new_input)].direction in ::players[].basePosition.row
::players[].impulse[0] - ::players[].impulse[1] + 4 == 0
::players[].impulse[0] - ::players[].impulse[2] + 8 == 0
::players[].impulse[0] - ::players[].impulse[3] + 12 == 0
::players[].impulse[0] - ::players[].impulse[4] + 16 == 0
::players[].impulse[0] - ::players[].impulse[5] + 20 == 0
::players[].impulse[0] - ::players[].impulse[6] + 24 == 0
::players[].impulse[0] - ::players[].impulse[7] + 28 == 0
::players[].impulse[0] - ::players[].impulse[8] + 32 == 0
player[::input_n].impulse[0] in ::players[].impulse[0]
player[::new_input].impulse[0] in ::players[].impulse[0]
player[orig(::new_input)].impulse[0] in ::players[].impulse[0]
::players[].impulse[0][0] < ::players[].direction (lexically)
::players[].impulse[0][0] <= ::players[].direction (lexically)
::players[].impulse[0][0] < ::players[].stepCounter (lexically)
::players[].impulse[0][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[0][0] elements <= ::input_n
::players[].impulse[0][0] elements >= ::new_input
::players[].impulse[0][0] > player[].id (lexically)
::players[].impulse[0][0] >= player[].id (lexically)
::players[].impulse[0][0] < player[].body.visible (lexically)
::players[].impulse[0][0] <= player[].body.visible (lexically)
::players[].impulse[0][0] < player[].body.bodyPoints->aspect (lexically)
::players[].impulse[0][0] <= player[].body.bodyPoints->aspect (lexically)
::players[].impulse[0][0] < player[].body.bodyMapsSize (lexically)
::players[].impulse[0][0] <= player[].body.bodyMapsSize (lexically)
::players[].impulse[0][0] < player[].body.bodySize (lexically)
::players[].impulse[0][0] <= player[].body.bodySize (lexically)
::players[].impulse[0][0] < player[].body.color (lexically)
::players[].impulse[0][0] <= player[].body.color (lexically)
::players[].impulse[0][0] < player[].basePosition.col (lexically)
::players[].impulse[0][0] <= player[].basePosition.col (lexically)
::players[].impulse[0][0] < player[].basePosition.row (lexically)
::players[].impulse[0][0] <= player[].basePosition.row (lexically)
::players[].impulse[0][0] < player[].direction (lexically)
::players[].impulse[0][0] <= player[].direction (lexically)
::players[].impulse[0][0] < player[].stepCounter (lexically)
::players[].impulse[0][0] <= player[].stepCounter (lexically)
::players[].impulse[0][0] < orig(::players[].basePosition.col) (lexically)
::players[].impulse[0][0] <= orig(::players[].basePosition.col) (lexically)
::players[].impulse[0][0] < orig(::players[].basePosition.row) (lexically)
::players[].impulse[0][0] <= orig(::players[].basePosition.row) (lexically)
::players[].impulse[0][0] < orig(player[].basePosition.col) (lexically)
::players[].impulse[0][0] <= orig(player[].basePosition.col) (lexically)
::players[].impulse[0][0] < orig(player[].basePosition.row) (lexically)
::players[].impulse[0][0] <= orig(player[].basePosition.row) (lexically)
::players[].impulse[0][0] elements < size(::players[])-1
::players[].impulse[0][0] elements < size(player[])-1
::players[].impulse[0][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[orig(::new_input)].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[::new_input].body.bodyMapsSize
::players[].impulse[0][0] elements <= ::players[orig(::new_input)].body.bodyMapsSize
::players[].impulse[0][0] elements < ::players[::new_input].body.bodySize
::players[].impulse[0][0] elements <= ::players[orig(::new_input)].body.bodySize
::players[].impulse[0][0] elements < ::players[::new_input].body.bodyWidth
::players[].impulse[0][0] elements < ::players[::new_input].body.color
::players[].impulse[0][0] elements < ::players[::new_input].basePosition.col
::players[].impulse[0][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[0][0] elements < ::players[orig(::new_input)].basePosition.row
::players[].impulse[0][0] elements < ::players[::input_n].stepCounter
::players[].impulse[0][0] elements <= player[::input_n].body.type
player[::input_n].body.type in ::players[].impulse[0][0]
::players[].impulse[0][0] elements <= player[::input_n].body.visible
::players[].impulse[0][0] elements <= player[::input_n].body.bodyPoints->aspect
::players[].impulse[0][0] elements <= player[::input_n].body.bodySize
player[::input_n].impulse[0][0] in ::players[].impulse[0][0]
player[::input_n].impulse[1][0] in ::players[].impulse[0][0]
player[::input_n].impulse[5][0] in ::players[].impulse[0][0]
::players[].impulse[0][0] elements <= player[::input_n].stepCounter
player[::new_input].body.type in ::players[].impulse[0][0]
::players[].impulse[0][0] elements < player[::new_input].body.bodyPoints->aspect
::players[].impulse[0][0] elements <= player[::new_input].body.bodyMapsSize
::players[].impulse[0][0] elements <= player[::new_input].body.bodySize
::players[].impulse[0][0] elements <= player[::new_input].body.color
::players[].impulse[0][0] elements < player[::new_input].basePosition.col
::players[].impulse[0][0] elements < player[::new_input].basePosition.row
player[::new_input].impulse[3][0] in ::players[].impulse[0][0]
::players[].impulse[0][0] elements <= player[::new_input].direction
::players[].impulse[0][0] elements < orig(player[post(::new_input)].basePosition.col)
::players[].impulse[0][0] elements < player[orig(::new_input)].body.bodyPoints->aspect
::players[].impulse[0][0] elements <= player[orig(::new_input)].body.bodySize
::players[].impulse[0][0] elements < player[orig(::new_input)].basePosition.row
::players[].impulse[0][0] elements <= player[orig(::new_input)].stepCounter
::players[].impulse[0][0] elements <= orig(player[::new_input].basePosition.row)
::players[].impulse[1] - ::players[].impulse[2] + 4 == 0
::players[].impulse[1] - ::players[].impulse[3] + 8 == 0
::players[].impulse[1] - ::players[].impulse[4] + 12 == 0
::players[].impulse[1] - ::players[].impulse[5] + 16 == 0
::players[].impulse[1] - ::players[].impulse[6] + 20 == 0
::players[].impulse[1] - ::players[].impulse[7] + 24 == 0
::players[].impulse[1] - ::players[].impulse[8] + 28 == 0
player[::input_n].impulse[1] in ::players[].impulse[1]
player[::new_input].impulse[1] in ::players[].impulse[1]
player[orig(::new_input)].impulse[1] in ::players[].impulse[1]
::players[].impulse[1][0] >= ::players[].impulse[7][0] (lexically)
::players[].impulse[1][0] elements >= ::new_input
::players[].impulse[1][0] > player[].id (lexically)
::players[].impulse[1][0] >= player[].id (lexically)
::players[].impulse[1][0] < player[].body.visible (lexically)
::players[].impulse[1][0] <= player[].body.visible (lexically)
::players[].impulse[1][0] < player[].body.bodyPoints->aspect (lexically)
::players[].impulse[1][0] <= player[].body.bodyPoints->aspect (lexically)
::players[].impulse[1][0] < player[].body.bodyMapsSize (lexically)
::players[].impulse[1][0] <= player[].body.bodyMapsSize (lexically)
::players[].impulse[1][0] < player[].body.bodySize (lexically)
::players[].impulse[1][0] <= player[].body.bodySize (lexically)
::players[].impulse[1][0] < player[].body.color (lexically)
::players[].impulse[1][0] <= player[].body.color (lexically)
::players[].impulse[1][0] < player[].basePosition.col (lexically)
::players[].impulse[1][0] <= player[].basePosition.col (lexically)
::players[].impulse[1][0] < player[].basePosition.row (lexically)
::players[].impulse[1][0] <= player[].basePosition.row (lexically)
::players[].impulse[1][0] < orig(::players[].basePosition.col) (lexically)
::players[].impulse[1][0] <= orig(::players[].basePosition.col) (lexically)
::players[].impulse[1][0] < orig(::players[].basePosition.row) (lexically)
::players[].impulse[1][0] <= orig(::players[].basePosition.row) (elementwise)
::players[].impulse[1][0] < orig(player[].basePosition.col) (lexically)
::players[].impulse[1][0] <= orig(player[].basePosition.col) (lexically)
::players[].impulse[1][0] < orig(player[].basePosition.row) (lexically)
::players[].impulse[1][0] <= orig(player[].basePosition.row) (lexically)
::players[].impulse[1][0] elements < size(::players[])-1
::players[].impulse[1][0] elements < size(player[])-1
::players[].impulse[1][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[orig(::new_input)].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[::new_input].body.bodySize
::players[].impulse[1][0] elements < ::players[::new_input].body.bodyWidth
::players[].impulse[1][0] elements < ::players[::new_input].basePosition.col
::players[].impulse[1][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[1][0] elements < ::players[orig(::new_input)].basePosition.row
::players[].impulse[1][0] elements < ::players[::input_n].stepCounter
player[::input_n].body.type in ::players[].impulse[1][0]
player[::input_n].body.visible in ::players[].impulse[1][0]
::players[].impulse[1][0] elements <= player[::input_n].body.bodyPoints->aspect
player[::input_n].impulse[0][0] in ::players[].impulse[1][0]
player[::input_n].impulse[1][0] in ::players[].impulse[1][0]
player[::input_n].impulse[3][0] in ::players[].impulse[1][0]
player[::input_n].impulse[5][0] in ::players[].impulse[1][0]
player[::input_n].impulse[7][0] in ::players[].impulse[1][0]
player[::new_input].body.type in ::players[].impulse[1][0]
::players[].impulse[1][0] elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].impulse[1][0] in ::players[].impulse[1][0]
player[::new_input].impulse[3][0] in ::players[].impulse[1][0]
::players[].impulse[1][0] elements < player[orig(::new_input)].body.bodyPoints->aspect
player[orig(::new_input)].impulse[1][0] in ::players[].impulse[1][0]
::players[].impulse[2] - ::players[].impulse[3] + 4 == 0
::players[].impulse[2] - ::players[].impulse[4] + 8 == 0
::players[].impulse[2] - ::players[].impulse[5] + 12 == 0
::players[].impulse[2] - ::players[].impulse[6] + 16 == 0
::players[].impulse[2] - ::players[].impulse[7] + 20 == 0
::players[].impulse[2] - ::players[].impulse[8] + 24 == 0
player[::input_n].impulse[2] in ::players[].impulse[2]
player[::new_input].impulse[2] in ::players[].impulse[2]
player[orig(::new_input)].impulse[2] in ::players[].impulse[2]
::players[].impulse[3] - ::players[].impulse[4] + 4 == 0
::players[].impulse[3] - ::players[].impulse[5] + 8 == 0
::players[].impulse[3] - ::players[].impulse[6] + 12 == 0
::players[].impulse[3] - ::players[].impulse[7] + 16 == 0
::players[].impulse[3] - ::players[].impulse[8] + 20 == 0
player[::input_n].impulse[3] in ::players[].impulse[3]
player[::new_input].impulse[3] in ::players[].impulse[3]
player[orig(::new_input)].impulse[3] in ::players[].impulse[3]
::players[].impulse[3][0] >= ::players[].impulse[7][0] (lexically)
::players[].impulse[3][0] < ::players[].direction (lexically)
::players[].impulse[3][0] <= ::players[].direction (lexically)
::players[].impulse[3][0] < ::players[].stepCounter (lexically)
::players[].impulse[3][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[3][0] elements <= ::input_n
::players[].impulse[3][0] elements >= ::new_input
::players[].impulse[3][0] > player[].id (lexically)
::players[].impulse[3][0] >= player[].id (lexically)
::players[].impulse[3][0] < player[].body.visible (lexically)
::players[].impulse[3][0] <= player[].body.visible (lexically)
::players[].impulse[3][0] < player[].body.bodyPoints->aspect (lexically)
::players[].impulse[3][0] <= player[].body.bodyPoints->aspect (lexically)
::players[].impulse[3][0] < player[].body.bodyMapsSize (lexically)
::players[].impulse[3][0] <= player[].body.bodyMapsSize (lexically)
::players[].impulse[3][0] < player[].body.bodySize (lexically)
::players[].impulse[3][0] <= player[].body.bodySize (lexically)
::players[].impulse[3][0] < player[].body.color (lexically)
::players[].impulse[3][0] <= player[].body.color (lexically)
::players[].impulse[3][0] < player[].basePosition.col (lexically)
::players[].impulse[3][0] <= player[].basePosition.col (lexically)
::players[].impulse[3][0] < player[].basePosition.row (lexically)
::players[].impulse[3][0] <= player[].basePosition.row (lexically)
::players[].impulse[3][0] < player[].direction (lexically)
::players[].impulse[3][0] <= player[].direction (lexically)
::players[].impulse[3][0] < player[].stepCounter (lexically)
::players[].impulse[3][0] <= player[].stepCounter (lexically)
::players[].impulse[3][0] < orig(::players[].basePosition.col) (lexically)
::players[].impulse[3][0] <= orig(::players[].basePosition.col) (elementwise)
::players[].impulse[3][0] < orig(::players[].basePosition.row) (lexically)
::players[].impulse[3][0] <= orig(::players[].basePosition.row) (lexically)
orig(::new_input) in ::players[].impulse[3][0]
::players[].impulse[3][0] < orig(player[].basePosition.col) (lexically)
::players[].impulse[3][0] <= orig(player[].basePosition.col) (lexically)
::players[].impulse[3][0] < orig(player[].basePosition.row) (lexically)
::players[].impulse[3][0] <= orig(player[].basePosition.row) (lexically)
::players[].impulse[3][0] elements < size(::players[])-1
::players[].impulse[3][0] elements < size(player[])-1
::players[].impulse[3][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[orig(::new_input)].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[::new_input].body.bodyMapsSize
::players[].impulse[3][0] elements <= ::players[orig(::new_input)].body.bodyMapsSize
::players[].impulse[3][0] elements < ::players[::new_input].body.bodySize
::players[].impulse[3][0] elements <= ::players[orig(::new_input)].body.bodySize
::players[].impulse[3][0] elements < ::players[::new_input].body.bodyWidth
::players[].impulse[3][0] elements < ::players[::new_input].body.color
::players[].impulse[3][0] elements < ::players[::new_input].basePosition.col
::players[].impulse[3][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[3][0] elements < ::players[orig(::new_input)].basePosition.row
::players[].impulse[3][0] elements < ::players[::input_n].stepCounter
player[::input_n].body.type in ::players[].impulse[3][0]
::players[].impulse[3][0] elements <= player[::input_n].body.visible
player[::input_n].body.visible in ::players[].impulse[3][0]
::players[].impulse[3][0] elements <= player[::input_n].body.bodyPoints->aspect
::players[].impulse[3][0] elements <= player[::input_n].body.bodySize
player[::input_n].impulse[0][0] in ::players[].impulse[3][0]
player[::input_n].impulse[1][0] in ::players[].impulse[3][0]
player[::input_n].impulse[3][0] in ::players[].impulse[3][0]
player[::input_n].impulse[5][0] in ::players[].impulse[3][0]
player[::input_n].impulse[7][0] in ::players[].impulse[3][0]
::players[].impulse[3][0] elements <= player[::input_n].stepCounter
player[::new_input].body.type in ::players[].impulse[3][0]
::players[].impulse[3][0] elements < player[::new_input].body.bodyPoints->aspect
::players[].impulse[3][0] elements <= player[::new_input].body.bodyMapsSize
::players[].impulse[3][0] elements <= player[::new_input].body.bodySize
::players[].impulse[3][0] elements <= player[::new_input].body.color
::players[].impulse[3][0] elements < player[::new_input].basePosition.col
::players[].impulse[3][0] elements < player[::new_input].basePosition.row
player[::new_input].impulse[1][0] in ::players[].impulse[3][0]
player[::new_input].impulse[3][0] in ::players[].impulse[3][0]
::players[].impulse[3][0] elements <= player[::new_input].direction
::players[].impulse[3][0] elements < orig(player[post(::new_input)].basePosition.col)
::players[].impulse[3][0] elements < player[orig(::new_input)].body.bodyPoints->aspect
::players[].impulse[3][0] elements <= player[orig(::new_input)].body.bodySize
::players[].impulse[3][0] elements < player[orig(::new_input)].basePosition.row
player[orig(::new_input)].impulse[1][0] in ::players[].impulse[3][0]
::players[].impulse[3][0] elements <= player[orig(::new_input)].stepCounter
::players[].impulse[3][0] elements <= orig(player[::new_input].basePosition.row)
::players[].impulse[4] - ::players[].impulse[5] + 4 == 0
::players[].impulse[4] - ::players[].impulse[6] + 8 == 0
::players[].impulse[4] - ::players[].impulse[7] + 12 == 0
::players[].impulse[4] - ::players[].impulse[8] + 16 == 0
player[::input_n].impulse[4] in ::players[].impulse[4]
player[::new_input].impulse[4] in ::players[].impulse[4]
player[orig(::new_input)].impulse[4] in ::players[].impulse[4]
::players[].impulse[5] - ::players[].impulse[6] + 4 == 0
::players[].impulse[5] - ::players[].impulse[7] + 8 == 0
::players[].impulse[5] - ::players[].impulse[8] + 12 == 0
player[::input_n].impulse[5] in ::players[].impulse[5]
player[::new_input].impulse[5] in ::players[].impulse[5]
player[orig(::new_input)].impulse[5] in ::players[].impulse[5]
::players[].impulse[5][0] < ::players[].direction (lexically)
::players[].impulse[5][0] <= ::players[].direction (lexically)
::players[].impulse[5][0] < ::players[].stepCounter (lexically)
::players[].impulse[5][0] <= ::players[].stepCounter (elementwise)
::input_n in ::players[].impulse[5][0]
::players[].impulse[5][0] elements <= ::input_n
::players[].impulse[5][0] elements >= ::new_input
::players[].impulse[5][0] > player[].id (lexically)
::players[].impulse[5][0] >= player[].id (lexically)
::players[].impulse[5][0] < player[].body.visible (lexically)
::players[].impulse[5][0] <= player[].body.visible (lexically)
::players[].impulse[5][0] < player[].body.bodyPoints->aspect (lexically)
::players[].impulse[5][0] <= player[].body.bodyPoints->aspect (lexically)
::players[].impulse[5][0] < player[].body.bodyMapsSize (lexically)
::players[].impulse[5][0] <= player[].body.bodyMapsSize (lexically)
::players[].impulse[5][0] < player[].body.bodySize (lexically)
::players[].impulse[5][0] <= player[].body.bodySize (lexically)
::players[].impulse[5][0] < player[].body.color (lexically)
::players[].impulse[5][0] <= player[].body.color (lexically)
::players[].impulse[5][0] < player[].basePosition.col (lexically)
::players[].impulse[5][0] <= player[].basePosition.col (lexically)
::players[].impulse[5][0] < player[].basePosition.row (lexically)
::players[].impulse[5][0] <= player[].basePosition.row (lexically)
::players[].impulse[5][0] <= player[].impulse[5][0] (lexically)
::players[].impulse[5][0] < player[].direction (lexically)
::players[].impulse[5][0] <= player[].direction (lexically)
::players[].impulse[5][0] < player[].stepCounter (lexically)
::players[].impulse[5][0] <= player[].stepCounter (lexically)
::players[].impulse[5][0] < orig(::players[].basePosition.col) (lexically)
::players[].impulse[5][0] <= orig(::players[].basePosition.col) (elementwise)
::players[].impulse[5][0] < orig(::players[].basePosition.row) (lexically)
::players[].impulse[5][0] <= orig(::players[].basePosition.row) (elementwise)
orig(::new_input) in ::players[].impulse[5][0]
::players[].impulse[5][0] < orig(player[].basePosition.col) (lexically)
::players[].impulse[5][0] <= orig(player[].basePosition.col) (lexically)
::players[].impulse[5][0] < orig(player[].basePosition.row) (lexically)
::players[].impulse[5][0] <= orig(player[].basePosition.row) (lexically)
::players[].impulse[5][0] elements < size(::players[])-1
::players[].impulse[5][0] elements < size(player[])-1
::players[].impulse[5][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[orig(::new_input)].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[::new_input].body.bodyMapsSize
::players[].impulse[5][0] elements <= ::players[orig(::new_input)].body.bodyMapsSize
::players[].impulse[5][0] elements < ::players[::new_input].body.bodySize
::players[].impulse[5][0] elements <= ::players[orig(::new_input)].body.bodySize
::players[].impulse[5][0] elements < ::players[::new_input].body.bodyWidth
::players[].impulse[5][0] elements < ::players[::new_input].body.color
::players[].impulse[5][0] elements < ::players[::new_input].basePosition.col
::players[].impulse[5][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[5][0] elements < ::players[orig(::new_input)].basePosition.row
::players[orig(::new_input)].direction in ::players[].impulse[5][0]
::players[].impulse[5][0] elements < ::players[::input_n].stepCounter
player[::input_n].body.type in ::players[].impulse[5][0]
player[::input_n].body.visible in ::players[].impulse[5][0]
player[::input_n].impulse[0][0] in ::players[].impulse[5][0]
player[::input_n].impulse[1][0] in ::players[].impulse[5][0]
player[::input_n].impulse[3][0] in ::players[].impulse[5][0]
player[::input_n].impulse[5][0] in ::players[].impulse[5][0]
player[::input_n].impulse[7][0] in ::players[].impulse[5][0]
player[::new_input].body.type in ::players[].impulse[5][0]
::players[].impulse[5][0] elements < player[::new_input].body.bodyPoints->aspect
::players[].impulse[5][0] elements <= player[::new_input].body.bodyMapsSize
::players[].impulse[5][0] elements <= player[::new_input].body.bodySize
::players[].impulse[5][0] elements <= player[::new_input].body.color
::players[].impulse[5][0] elements < player[::new_input].basePosition.col
::players[].impulse[5][0] elements < player[::new_input].basePosition.row
player[::new_input].impulse[1][0] in ::players[].impulse[5][0]
player[::new_input].impulse[3][0] in ::players[].impulse[5][0]
player[::new_input].impulse[5][0] in ::players[].impulse[5][0]
::players[].impulse[5][0] elements <= player[::new_input].direction
::players[].impulse[5][0] elements < orig(player[post(::new_input)].basePosition.col)
::players[].impulse[5][0] elements < player[orig(::new_input)].body.bodyPoints->aspect
::players[].impulse[5][0] elements <= player[orig(::new_input)].body.bodySize
::players[].impulse[5][0] elements < player[orig(::new_input)].basePosition.row
player[orig(::new_input)].impulse[1][0] in ::players[].impulse[5][0]
::players[].impulse[5][0] elements <= player[orig(::new_input)].stepCounter
::players[].impulse[5][0] elements <= orig(player[::new_input].basePosition.row)
::players[].impulse[6] - ::players[].impulse[7] + 4 == 0
::players[].impulse[6] - ::players[].impulse[8] + 8 == 0
player[::input_n].impulse[6] in ::players[].impulse[6]
player[::new_input].impulse[6] in ::players[].impulse[6]
player[orig(::new_input)].impulse[6] in ::players[].impulse[6]
::players[].impulse[7] - ::players[].impulse[8] + 4 == 0
player[::input_n].impulse[7] in ::players[].impulse[7]
player[::new_input].impulse[7] in ::players[].impulse[7]
player[orig(::new_input)].impulse[7] in ::players[].impulse[7]
::players[].impulse[7][0] < ::players[].direction (lexically)
::players[].impulse[7][0] <= ::players[].direction (lexically)
::players[].impulse[7][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[7][0] elements <= ::input_n
::players[].impulse[7][0] elements >= ::new_input
::players[].impulse[7][0] > player[].id (lexically)
::players[].impulse[7][0] >= player[].id (lexically)
::players[].impulse[7][0] < player[].body.visible (lexically)
::players[].impulse[7][0] <= player[].body.visible (lexically)
::players[].impulse[7][0] < player[].body.bodyPoints->aspect (lexically)
::players[].impulse[7][0] <= player[].body.bodyPoints->aspect (lexically)
::players[].impulse[7][0] < player[].body.bodyMapsSize (lexically)
::players[].impulse[7][0] <= player[].body.bodyMapsSize (lexically)
::players[].impulse[7][0] < player[].body.bodySize (lexically)
::players[].impulse[7][0] <= player[].body.bodySize (lexically)
::players[].impulse[7][0] < player[].body.bodyWidth (lexically)
::players[].impulse[7][0] <= player[].body.bodyWidth (lexically)
::players[].impulse[7][0] < player[].body.bodyHeight (lexically)
::players[].impulse[7][0] <= player[].body.bodyHeight (lexically)
::players[].impulse[7][0] < player[].body.color (lexically)
::players[].impulse[7][0] <= player[].body.color (lexically)
::players[].impulse[7][0] < player[].basePosition.col (lexically)
::players[].impulse[7][0] <= player[].basePosition.col (lexically)
::players[].impulse[7][0] < player[].basePosition.row (lexically)
::players[].impulse[7][0] <= player[].basePosition.row (lexically)
::players[].impulse[7][0] < player[].impulse[5][0] (lexically)
::players[].impulse[7][0] <= player[].impulse[5][0] (lexically)
::players[].impulse[7][0] < player[].direction (lexically)
::players[].impulse[7][0] <= player[].direction (lexically)
::players[].impulse[7][0] < player[].stepCounter (lexically)
::players[].impulse[7][0] <= player[].stepCounter (lexically)
::players[].impulse[7][0] < orig(::players[].basePosition.col) (lexically)
::players[].impulse[7][0] <= orig(::players[].basePosition.col) (elementwise)
::players[].impulse[7][0] < orig(::players[].basePosition.row) (lexically)
::players[].impulse[7][0] <= orig(::players[].basePosition.row) (lexically)
orig(::new_input) in ::players[].impulse[7][0]
::players[].impulse[7][0] < orig(player[].basePosition.col) (lexically)
::players[].impulse[7][0] <= orig(player[].basePosition.col) (lexically)
::players[].impulse[7][0] < orig(player[].basePosition.row) (lexically)
::players[].impulse[7][0] <= orig(player[].basePosition.row) (lexically)
::players[].impulse[7][0] elements < size(::players[])-1
::players[].impulse[7][0] elements < size(player[])-1
::players[].impulse[7][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[orig(::new_input)].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[::new_input].body.bodyMapsSize
::players[].impulse[7][0] elements <= ::players[orig(::new_input)].body.bodyMapsSize
::players[].impulse[7][0] elements < ::players[::new_input].body.bodySize
::players[].impulse[7][0] elements <= ::players[orig(::new_input)].body.bodySize
::players[].impulse[7][0] elements < ::players[::new_input].body.bodyWidth
::players[].impulse[7][0] elements < ::players[::new_input].body.color
::players[].impulse[7][0] elements < ::players[::new_input].basePosition.col
::players[].impulse[7][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[7][0] elements < ::players[orig(::new_input)].basePosition.row
::players[].impulse[7][0] elements < ::players[::input_n].stepCounter
player[::input_n].body.type in ::players[].impulse[7][0]
::players[].impulse[7][0] elements <= player[::input_n].body.visible
player[::input_n].body.visible in ::players[].impulse[7][0]
::players[].impulse[7][0] elements <= player[::input_n].body.bodyPoints->aspect
::players[].impulse[7][0] elements <= player[::input_n].body.bodySize
player[::input_n].impulse[0][0] in ::players[].impulse[7][0]
player[::input_n].impulse[1][0] in ::players[].impulse[7][0]
player[::input_n].impulse[3][0] in ::players[].impulse[7][0]
player[::input_n].impulse[5][0] in ::players[].impulse[7][0]
player[::input_n].impulse[7][0] in ::players[].impulse[7][0]
::players[].impulse[7][0] elements <= player[::input_n].stepCounter
player[::new_input].body.type in ::players[].impulse[7][0]
::players[].impulse[7][0] elements < player[::new_input].body.bodyPoints->aspect
::players[].impulse[7][0] elements <= player[::new_input].body.bodyMapsSize
::players[].impulse[7][0] elements <= player[::new_input].body.bodySize
::players[].impulse[7][0] elements <= player[::new_input].body.color
::players[].impulse[7][0] elements < player[::new_input].basePosition.col
::players[].impulse[7][0] elements < player[::new_input].basePosition.row
player[::new_input].impulse[1][0] in ::players[].impulse[7][0]
player[::new_input].impulse[3][0] in ::players[].impulse[7][0]
::players[].impulse[7][0] elements <= player[::new_input].direction
::players[].impulse[7][0] elements < orig(player[post(::new_input)].basePosition.col)
::players[].impulse[7][0] elements < player[orig(::new_input)].body.bodyPoints->aspect
::players[].impulse[7][0] elements <= player[orig(::new_input)].body.bodySize
::players[].impulse[7][0] elements < player[orig(::new_input)].basePosition.row
player[orig(::new_input)].impulse[1][0] in ::players[].impulse[7][0]
::players[].impulse[7][0] elements <= player[orig(::new_input)].stepCounter
::players[].impulse[7][0] elements <= orig(player[::new_input].basePosition.row)
player[::input_n].impulse[8] in ::players[].impulse[8]
player[::new_input].impulse[8] in ::players[].impulse[8]
player[orig(::new_input)].impulse[8] in ::players[].impulse[8]
::players[].direction > ::players[].stepCounter (lexically)
::players[].direction >= ::players[].stepCounter (lexically)
::players[].direction elements >= ::new_input
::players[].direction > player[].id (lexically)
::players[].direction >= player[].id (lexically)
::players[].direction < player[].body.bodyPoints->aspect (lexically)
::players[].direction <= player[].body.bodyPoints->aspect (lexically)
::players[].direction < player[].body.bodySize (lexically)
::players[].direction <= player[].body.bodySize (lexically)
::players[].direction < player[].body.color (lexically)
::players[].direction <= player[].body.color (lexically)
::players[].direction < player[].basePosition.col (lexically)
::players[].direction <= player[].basePosition.col (lexically)
::players[].direction < player[].basePosition.row (lexically)
::players[].direction <= player[].basePosition.row (lexically)
::players[].direction > player[].impulse[0][0] (lexically)
::players[].direction >= player[].impulse[0][0] (lexically)
::players[].direction > player[].impulse[7][0] (lexically)
::players[].direction >= player[].impulse[7][0] (lexically)
::players[].direction < orig(::players[].basePosition.col) (lexically)
::players[].direction <= orig(::players[].basePosition.col) (lexically)
::players[].direction < orig(::players[].basePosition.row) (lexically)
::players[].direction <= orig(::players[].basePosition.row) (lexically)
orig(::new_input) in ::players[].direction
::players[].direction < orig(player[].basePosition.col) (lexically)
::players[].direction <= orig(player[].basePosition.col) (lexically)
::players[].direction < orig(player[].basePosition.row) (lexically)
::players[].direction <= orig(player[].basePosition.row) (lexically)
::players[].direction elements < size(::players[])-1
::players[].direction elements < size(player[])-1
::players[].direction elements < ::players[::input_n].body.bodyPoints->aspect
::players[].direction elements < ::players[::new_input].body.bodyPoints->aspect
::players[].direction elements < ::players[orig(::new_input)].body.bodyPoints->aspect
::players[].direction elements < ::players[::new_input].body.bodySize
::players[].direction elements <= ::players[orig(::new_input)].body.bodySize
::players[].direction elements < ::players[::new_input].body.bodyWidth
::players[orig(::new_input)].body.color in ::players[].direction
::players[].direction elements < ::players[::new_input].basePosition.col
::players[].direction elements < ::players[::input_n].basePosition.row
::players[].direction elements < ::players[orig(::new_input)].basePosition.row
::players[].direction elements < ::players[::input_n].stepCounter
player[::input_n].body.type in ::players[].direction
player[::input_n].body.visible in ::players[].direction
player[::input_n].impulse[0][0] in ::players[].direction
player[::input_n].impulse[1][0] in ::players[].direction
player[::input_n].impulse[3][0] in ::players[].direction
player[::input_n].impulse[5][0] in ::players[].direction
player[::input_n].impulse[7][0] in ::players[].direction
player[::new_input].body.type in ::players[].direction
::players[].direction elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].impulse[1][0] in ::players[].direction
player[::new_input].impulse[3][0] in ::players[].direction
player[::new_input].impulse[5][0] in ::players[].direction
player[::new_input].direction in ::players[].direction
::players[].direction elements < player[orig(::new_input)].body.bodyPoints->aspect
player[orig(::new_input)].impulse[1][0] in ::players[].direction
player[orig(::new_input)].direction in ::players[].direction
player[::input_n].magnetos in ::players[].magnetos
player[::new_input].magnetos in ::players[].magnetos
player[orig(::new_input)].magnetos in ::players[].magnetos
player[::input_n].magnetos[0] in ::players[].magnetos[0]
player[::new_input].magnetos[0] in ::players[].magnetos[0]
player[orig(::new_input)].magnetos[0] in ::players[].magnetos[0]
::input_n in ::players[].stepCounter
::players[].stepCounter elements >= ::new_input
::players[].stepCounter > player[].id (lexically)
::players[].stepCounter >= player[].id (lexically)
::players[].stepCounter < player[].body.visible (lexically)
::players[].stepCounter <= player[].body.visible (lexically)
::players[].stepCounter < player[].body.bodyPoints->aspect (lexically)
::players[].stepCounter <= player[].body.bodyPoints->aspect (lexically)
::players[].stepCounter < player[].body.bodyMapsSize (lexically)
::players[].stepCounter <= player[].body.bodyMapsSize (lexically)
::players[].stepCounter < player[].body.bodySize (lexically)
::players[].stepCounter <= player[].body.bodySize (lexically)
::players[].stepCounter < player[].body.color (lexically)
::players[].stepCounter <= player[].body.color (lexically)
::players[].stepCounter < player[].basePosition.col (lexically)
::players[].stepCounter <= player[].basePosition.col (lexically)
::players[].stepCounter < player[].basePosition.row (lexically)
::players[].stepCounter <= player[].basePosition.row (lexically)
::players[].stepCounter > player[].impulse[0][0] (lexically)
::players[].stepCounter >= player[].impulse[0][0] (lexically)
::players[].stepCounter > player[].impulse[7][0] (lexically)
::players[].stepCounter >= player[].impulse[7][0] (lexically)
::players[].stepCounter < player[].direction (lexically)
::players[].stepCounter <= player[].direction (lexically)
::players[].stepCounter <= player[].stepCounter (lexically)
::players[].stepCounter < orig(::players[].basePosition.col) (lexically)
::players[].stepCounter <= orig(::players[].basePosition.col) (lexically)
::players[].stepCounter < orig(::players[].basePosition.row) (lexically)
::players[].stepCounter <= orig(::players[].basePosition.row) (lexically)
orig(::new_input) in ::players[].stepCounter
::players[].stepCounter < orig(player[].basePosition.col) (lexically)
::players[].stepCounter <= orig(player[].basePosition.col) (lexically)
::players[].stepCounter < orig(player[].basePosition.row) (lexically)
::players[].stepCounter <= orig(player[].basePosition.row) (lexically)
::players[].stepCounter elements < size(::players[])-1
::players[].stepCounter elements < size(player[])-1
::players[].stepCounter elements < ::players[::input_n].body.bodyPoints->aspect
::players[].stepCounter elements < ::players[::new_input].body.bodyPoints->aspect
::players[].stepCounter elements < ::players[orig(::new_input)].body.bodyPoints->aspect
::players[::new_input].body.bodyMapsSize in ::players[].stepCounter
::players[orig(::new_input)].body.bodyMapsSize in ::players[].stepCounter
::players[].stepCounter elements < ::players[::new_input].body.bodySize
::players[::new_input].body.bodyWidth in ::players[].stepCounter
::players[orig(::new_input)].body.bodyWidth in ::players[].stepCounter
::players[orig(::new_input)].body.bodyHeight in ::players[].stepCounter
::players[].stepCounter elements < ::players[::new_input].basePosition.col
::players[].stepCounter elements <= ::players[::input_n].basePosition.row
::players[orig(::new_input)].basePosition.row in ::players[].stepCounter
::players[orig(::new_input)].direction in ::players[].stepCounter
player[::input_n].body.type in ::players[].stepCounter
player[::input_n].body.visible in ::players[].stepCounter
player[::input_n].body.bodyWidth in ::players[].stepCounter
player[::input_n].body.bodyHeight in ::players[].stepCounter
player[::input_n].impulse[0][0] in ::players[].stepCounter
player[::input_n].impulse[1][0] in ::players[].stepCounter
player[::input_n].impulse[3][0] in ::players[].stepCounter
player[::input_n].impulse[5][0] in ::players[].stepCounter
player[::input_n].impulse[7][0] in ::players[].stepCounter
player[::input_n].stepCounter in ::players[].stepCounter
player[::new_input].body.type in ::players[].stepCounter
::players[].stepCounter elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].body.bodyMapsSize in ::players[].stepCounter
player[::new_input].impulse[1][0] in ::players[].stepCounter
player[::new_input].impulse[3][0] in ::players[].stepCounter
player[::new_input].impulse[5][0] in ::players[].stepCounter
player[::new_input].stepCounter in ::players[].stepCounter
::players[].stepCounter elements < player[orig(::new_input)].body.bodyPoints->aspect
player[orig(::new_input)].impulse[1][0] in ::players[].stepCounter
player[orig(::new_input)].stepCounter in ::players[].stepCounter
::players[::input_n].onCrash in ::players[].pilot
player[::input_n].pilot in ::players[].pilot
player[::new_input].pilot in ::players[].pilot
player[orig(::new_input)].pilot in ::players[].pilot
player[::input_n].onCrash in ::players[].onCrash
player[::new_input].onCrash in ::players[].onCrash
player[orig(::new_input)].onCrash in ::players[].onCrash
::players[::input_n].onCrash in ::players[].onPushed
player[::input_n].onPushed in ::players[].onPushed
player[].body.type elements <= ::input_n
player[].body.visible elements <= ::input_n
player[].impulse[0][0] elements <= ::input_n
player[].impulse[3][0] elements <= ::input_n
::input_n in player[].impulse[5][0]
player[].impulse[5][0] elements <= ::input_n
player[].impulse[7][0] elements <= ::input_n
::input_n in player[].stepCounter
::input_n in orig(::players[].basePosition.row)
::input_n < size(player[])-1
::input_n < ::players[orig(::new_input)].body.bodyPoints->aspect
::input_n != ::players[orig(::new_input)].body.bodyWidth
::input_n != ::players[orig(::new_input)].body.bodyHeight
::input_n != ::players[orig(::new_input)].body.color
::input_n != ::players[orig(::new_input)].basePosition.col
::input_n < ::players[orig(::new_input)].basePosition.row
::input_n >= ::players[orig(::new_input)].direction
::input_n != ::players[orig(::new_input)].stepCounter
::input_n >= player[::input_n].body.visible
::input_n != player[::input_n].body.bodyPoints->aspect
::input_n != player[::input_n].body.bodyWidth
::input_n != player[::input_n].body.bodyHeight
::input_n != player[::input_n].body.color
::input_n != player[::input_n].basePosition.col
::input_n != player[::input_n].basePosition.row
::input_n >= player[::input_n].impulse[0][0]
::input_n >= player[::input_n].impulse[1][0]
::input_n >= player[::input_n].impulse[3][0]
::input_n >= player[::input_n].impulse[5][0]
::input_n >= player[::input_n].impulse[7][0]
::input_n != player[::input_n].stepCounter
::input_n < player[::new_input].body.bodyPoints->aspect
::input_n != player[::new_input].body.bodyWidth
::input_n != player[::new_input].body.bodyHeight
::input_n <= player[::new_input].body.color
::input_n < player[::new_input].basePosition.col
::input_n < player[::new_input].basePosition.row
::input_n >= player[::new_input].impulse[1][0]
::input_n <= player[::new_input].direction
::input_n < orig(player[post(::new_input)].basePosition.col)
::input_n < player[orig(::new_input)].body.bodyPoints->aspect
::input_n != player[orig(::new_input)].body.bodyWidth
::input_n != player[orig(::new_input)].body.bodyHeight
::input_n != player[orig(::new_input)].basePosition.col
::input_n < player[orig(::new_input)].basePosition.row
::input_n >= player[orig(::new_input)].impulse[1][0]
::input_n <= player[orig(::new_input)].stepCounter
::input_n != orig(player[::new_input].basePosition.col)
::input_n <= orig(player[::new_input].basePosition.row)
player[].id elements == ::new_input
::new_input in player[].body.type
player[].body.type elements >= ::new_input
::new_input in player[].body.visible
player[].body.visible elements >= ::new_input
::new_input in player[].body.bodyPoints->aspect
player[].body.bodyPoints->aspect elements >= ::new_input
::new_input in player[].body.bodyMapsSize
player[].body.bodyMapsSize elements >= ::new_input
::new_input in player[].body.bodySize
player[].body.bodySize elements >= ::new_input
::new_input in player[].body.bodyWidth
player[].body.bodyWidth elements >= ::new_input
::new_input in player[].body.bodyHeight
player[].body.bodyHeight elements >= ::new_input
::new_input in player[].body.color
player[].body.color elements >= ::new_input
::new_input in player[].basePosition.col
player[].basePosition.col elements >= ::new_input
::new_input in player[].basePosition.row
player[].basePosition.row elements >= ::new_input
player[].impulse[0][0] elements >= ::new_input
::new_input in player[].impulse[1][0]
player[].impulse[1][0] elements >= ::new_input
::new_input in player[].impulse[3][0]
player[].impulse[3][0] elements >= ::new_input
::new_input in player[].impulse[5][0]
player[].impulse[5][0] elements >= ::new_input
player[].impulse[7][0] elements >= ::new_input
player[].direction elements >= ::new_input
::new_input in player[].stepCounter
player[].stepCounter elements >= ::new_input
orig(::players[].basePosition.col) elements >= ::new_input
::new_input in orig(::players[].basePosition.row)
orig(::players[].basePosition.row) elements >= ::new_input
::new_input in orig(player[].basePosition.col)
orig(player[].basePosition.col) elements >= ::new_input
::new_input in orig(player[].basePosition.row)
orig(player[].basePosition.row) elements >= ::new_input
::input_key > ::trace_pos
::input_key > orig(::trace_pos)
::trace_pos >= orig(::trace_pos)
player[].id <= player[].body.type (elementwise)
player[].id < player[].body.visible (lexically)
player[].id <= player[].body.visible (elementwise)
player[].id < player[].body.bodyPoints->aspect (lexically)
player[].id <= player[].body.bodyPoints->aspect (elementwise)
player[].id < player[].body.bodyMapsSize (lexically)
player[].id <= player[].body.bodyMapsSize (elementwise)
player[].id < player[].body.bodySize (lexically)
player[].id <= player[].body.bodySize (elementwise)
player[].id < player[].body.bodyWidth (lexically)
player[].id <= player[].body.bodyWidth (elementwise)
player[].id < player[].body.bodyHeight (lexically)
player[].id <= player[].body.bodyHeight (elementwise)
player[].id < player[].body.color (lexically)
player[].id <= player[].body.color (elementwise)
player[].id < player[].basePosition.col (lexically)
player[].id <= player[].basePosition.col (elementwise)
player[].id < player[].basePosition.row (lexically)
player[].id <= player[].basePosition.row (elementwise)
player[].id <= player[].impulse[0][0] (elementwise)
player[].id <= player[].impulse[1][0] (elementwise)
player[].id <= player[].impulse[3][0] (elementwise)
player[].id < player[].impulse[5][0] (lexically)
player[].id <= player[].impulse[5][0] (elementwise)
player[].id <= player[].impulse[7][0] (elementwise)
player[].id < player[].direction (lexically)
player[].id <= player[].direction (elementwise)
player[].id < player[].stepCounter (lexically)
player[].id <= player[].stepCounter (elementwise)
player[].id < orig(::players[].basePosition.col) (lexically)
player[].id <= orig(::players[].basePosition.col) (lexically)
player[].id < orig(::players[].basePosition.row) (lexically)
player[].id <= orig(::players[].basePosition.row) (lexically)
player[].id < orig(player[].basePosition.col) (lexically)
player[].id <= orig(player[].basePosition.col) (elementwise)
player[].id < orig(player[].basePosition.row) (lexically)
player[].id <= orig(player[].basePosition.row) (elementwise)
player[].body.type < player[].body.visible (lexically)
player[].body.type <= player[].body.visible (elementwise)
player[].body.type < player[].body.bodyPoints->aspect (lexically)
player[].body.type <= player[].body.bodyPoints->aspect (elementwise)
player[].body.type < player[].body.bodyMapsSize (lexically)
player[].body.type <= player[].body.bodyMapsSize (elementwise)
player[].body.type < player[].body.bodySize (lexically)
player[].body.type <= player[].body.bodySize (elementwise)
player[].body.type < player[].body.color (lexically)
player[].body.type <= player[].body.color (lexically)
player[].body.type < player[].basePosition.col (lexically)
player[].body.type <= player[].basePosition.col (lexically)
player[].body.type < player[].basePosition.row (lexically)
player[].body.type <= player[].basePosition.row (lexically)
player[].body.type >= player[].impulse[0][0] (elementwise)
player[].body.type < player[].stepCounter (lexically)
player[].body.type <= player[].stepCounter (elementwise)
player[].body.type < orig(::players[].basePosition.col) (lexically)
player[].body.type <= orig(::players[].basePosition.col) (lexically)
player[].body.type < orig(::players[].basePosition.row) (lexically)
player[].body.type <= orig(::players[].basePosition.row) (lexically)
orig(::new_input) in player[].body.type
player[].body.type < orig(player[].basePosition.col) (lexically)
player[].body.type <= orig(player[].basePosition.col) (lexically)
player[].body.type < orig(player[].basePosition.row) (lexically)
player[].body.type <= orig(player[].basePosition.row) (lexically)
player[].body.type elements < size(::players[])-1
player[].body.type elements < size(player[])-1
player[].body.type elements < ::players[::input_n].body.bodyPoints->aspect
player[].body.type elements < ::players[::new_input].body.bodyPoints->aspect
player[].body.type elements < ::players[orig(::new_input)].body.bodyPoints->aspect
player[].body.type elements < ::players[::new_input].body.bodyMapsSize
player[].body.type elements <= ::players[orig(::new_input)].body.bodyMapsSize
player[].body.type elements < ::players[::new_input].body.bodySize
player[].body.type elements <= ::players[orig(::new_input)].body.bodySize
player[].body.type elements < ::players[::new_input].body.bodyWidth
player[].body.type elements < ::players[::new_input].body.color
player[].body.type elements < ::players[::new_input].basePosition.col
player[].body.type elements < ::players[::input_n].basePosition.row
player[].body.type elements < ::players[orig(::new_input)].basePosition.row
player[].body.type elements < ::players[::input_n].stepCounter
player[].body.type elements <= player[::input_n].body.type
player[].body.type elements <= player[::input_n].body.visible
player[].body.type elements <= player[::input_n].body.bodyPoints->aspect
player[].body.type elements <= player[::input_n].body.bodySize
player[::input_n].impulse[0][0] in player[].body.type
player[::input_n].impulse[1][0] in player[].body.type
player[::input_n].impulse[5][0] in player[].body.type
player[].body.type elements <= player[::input_n].stepCounter
player[].body.type elements < player[::new_input].body.bodyPoints->aspect
player[].body.type elements <= player[::new_input].body.bodyMapsSize
player[].body.type elements <= player[::new_input].body.bodySize
player[].body.type elements <= player[::new_input].body.color
player[].body.type elements < player[::new_input].basePosition.col
player[].body.type elements < player[::new_input].basePosition.row
player[::new_input].impulse[3][0] in player[].body.type
player[].body.type elements <= player[::new_input].direction
player[].body.type elements < orig(player[post(::new_input)].basePosition.col)
player[].body.type elements < player[orig(::new_input)].body.bodyPoints->aspect
player[].body.type elements <= player[orig(::new_input)].body.bodySize
player[].body.type elements < player[orig(::new_input)].basePosition.row
player[].body.type elements <= player[orig(::new_input)].stepCounter
player[].body.type elements <= orig(player[::new_input].basePosition.row)
player[].body.visible < player[].body.bodyPoints->aspect (lexically)
player[].body.visible <= player[].body.bodyPoints->aspect (elementwise)
player[].body.visible <= player[].body.bodyMapsSize (elementwise)
player[].body.visible < player[].body.bodySize (lexically)
player[].body.visible <= player[].body.bodySize (elementwise)
player[].body.visible < player[].body.color (lexically)
player[].body.visible <= player[].body.color (lexically)
player[].body.visible < player[].basePosition.col (lexically)
player[].body.visible <= player[].basePosition.col (lexically)
player[].body.visible < player[].basePosition.row (lexically)
player[].body.visible <= player[].basePosition.row (lexically)
player[].body.visible > player[].impulse[0][0] (lexically)
player[].body.visible >= player[].impulse[0][0] (elementwise)
player[].body.visible > player[].impulse[1][0] (lexically)
player[].body.visible >= player[].impulse[1][0] (lexically)
player[].body.visible > player[].impulse[3][0] (lexically)
player[].body.visible >= player[].impulse[3][0] (elementwise)
player[].body.visible >= player[].impulse[5][0] (elementwise)
player[].body.visible > player[].impulse[7][0] (lexically)
player[].body.visible >= player[].impulse[7][0] (elementwise)
player[].body.visible < orig(::players[].basePosition.col) (lexically)
player[].body.visible <= orig(::players[].basePosition.col) (lexically)
player[].body.visible < orig(::players[].basePosition.row) (lexically)
player[].body.visible <= orig(::players[].basePosition.row) (lexically)
orig(::new_input) in player[].body.visible
player[].body.visible < orig(player[].basePosition.col) (lexically)
player[].body.visible <= orig(player[].basePosition.col) (lexically)
player[].body.visible < orig(player[].basePosition.row) (lexically)
player[].body.visible <= orig(player[].basePosition.row) (lexically)
player[].body.visible elements < size(::players[])-1
player[].body.visible elements < size(player[])-1
player[].body.visible elements < ::players[::input_n].body.bodyPoints->aspect
player[].body.visible elements < ::players[::new_input].body.bodyPoints->aspect
player[].body.visible elements < ::players[orig(::new_input)].body.bodyPoints->aspect
player[].body.visible elements < ::players[::new_input].body.bodyMapsSize
player[].body.visible elements <= ::players[orig(::new_input)].body.bodyMapsSize
player[].body.visible elements < ::players[::new_input].body.bodySize
player[].body.visible elements <= ::players[orig(::new_input)].body.bodySize
player[].body.visible elements < ::players[::new_input].body.bodyWidth
player[].body.visible elements < ::players[::new_input].body.color
player[].body.visible elements < ::players[::new_input].basePosition.col
player[].body.visible elements < ::players[::input_n].basePosition.row
player[].body.visible elements < ::players[orig(::new_input)].basePosition.row
::players[orig(::new_input)].direction in player[].body.visible
player[].body.visible elements < ::players[::input_n].stepCounter
player[::input_n].body.type in player[].body.visible
player[::input_n].impulse[0][0] in player[].body.visible
player[::input_n].impulse[1][0] in player[].body.visible
player[::input_n].impulse[3][0] in player[].body.visible
player[::input_n].impulse[5][0] in player[].body.visible
player[::input_n].impulse[7][0] in player[].body.visible
player[::new_input].body.type in player[].body.visible
player[].body.visible elements < player[::new_input].body.bodyPoints->aspect
player[].body.visible elements <= player[::new_input].body.bodyMapsSize
player[].body.visible elements <= player[::new_input].body.bodySize
player[].body.visible elements <= player[::new_input].body.color
player[].body.visible elements < player[::new_input].basePosition.col
player[].body.visible elements < player[::new_input].basePosition.row
player[::new_input].impulse[1][0] in player[].body.visible
player[::new_input].impulse[3][0] in player[].body.visible
player[::new_input].impulse[5][0] in player[].body.visible
player[].body.visible elements <= player[::new_input].direction
player[].body.visible elements < orig(player[post(::new_input)].basePosition.col)
player[].body.visible elements < player[orig(::new_input)].body.bodyPoints->aspect
player[].body.visible elements <= player[orig(::new_input)].body.bodySize
player[].body.visible elements < player[orig(::new_input)].basePosition.row
player[orig(::new_input)].impulse[1][0] in player[].body.visible
player[].body.visible elements <= player[orig(::new_input)].stepCounter
player[].body.visible elements <= orig(player[::new_input].basePosition.row)
player[].body.bodyPoints->position - player[].basePosition + 7304 == 0
player[].body.bodyPoints->aspect > player[].body.bodyMapsSize (lexically)
player[].body.bodyPoints->aspect >= player[].body.bodyMapsSize (elementwise)
player[].body.bodyPoints->aspect > player[].body.bodySize (lexically)
player[].body.bodyPoints->aspect >= player[].body.bodySize (elementwise)
player[].body.bodyPoints->aspect > player[].body.bodyWidth (lexically)
player[].body.bodyPoints->aspect >= player[].body.bodyWidth (elementwise)
player[].body.bodyPoints->aspect > player[].body.bodyHeight (lexically)
player[].body.bodyPoints->aspect >= player[].body.bodyHeight (elementwise)
player[].body.bodyPoints->aspect > player[].body.color (lexically)
player[].body.bodyPoints->aspect >= player[].body.color (elementwise)
player[].body.bodyPoints->aspect > player[].basePosition.col (lexically)
player[].body.bodyPoints->aspect >= player[].basePosition.col (elementwise)
player[].body.bodyPoints->aspect > player[].basePosition.row (lexically)
player[].body.bodyPoints->aspect >= player[].basePosition.row (elementwise)
player[].body.bodyPoints->aspect > player[].impulse[0][0] (lexically)
player[].body.bodyPoints->aspect >= player[].impulse[0][0] (elementwise)
player[].body.bodyPoints->aspect > player[].impulse[1][0] (lexically)
player[].body.bodyPoints->aspect >= player[].impulse[1][0] (elementwise)
player[].body.bodyPoints->aspect > player[].impulse[3][0] (lexically)
player[].body.bodyPoints->aspect >= player[].impulse[3][0] (elementwise)
player[].body.bodyPoints->aspect > player[].impulse[5][0] (lexically)
player[].body.bodyPoints->aspect >= player[].impulse[5][0] (elementwise)
player[].body.bodyPoints->aspect > player[].impulse[7][0] (lexically)
player[].body.bodyPoints->aspect >= player[].impulse[7][0] (elementwise)
player[].body.bodyPoints->aspect > player[].direction (lexically)
player[].body.bodyPoints->aspect >= player[].direction (elementwise)
player[].body.bodyPoints->aspect > player[].stepCounter (lexically)
player[].body.bodyPoints->aspect >= player[].stepCounter (elementwise)
player[].body.bodyPoints->aspect > orig(::players[].basePosition.row) (lexically)
player[].body.bodyPoints->aspect >= orig(::players[].basePosition.row) (lexically)
player[].body.bodyPoints->aspect > orig(player[].basePosition.col) (lexically)
player[].body.bodyPoints->aspect >= orig(player[].basePosition.col) (elementwise)
player[].body.bodyPoints->aspect > orig(player[].basePosition.row) (lexically)
player[].body.bodyPoints->aspect >= orig(player[].basePosition.row) (elementwise)
player[].body.bodyPoints->aspect elements < size(::players[])-1
player[].body.bodyMapsSize < player[].body.bodySize (lexically)
player[].body.bodyMapsSize <= player[].body.bodySize (elementwise)
player[].body.bodyMapsSize < player[].basePosition.col (lexically)
player[].body.bodyMapsSize <= player[].basePosition.col (lexically)
player[].body.bodyMapsSize < player[].basePosition.row (lexically)
player[].body.bodyMapsSize <= player[].basePosition.row (lexically)
player[].body.bodyMapsSize > player[].impulse[0][0] (lexically)
player[].body.bodyMapsSize >= player[].impulse[0][0] (elementwise)
player[].body.bodyMapsSize > player[].impulse[1][0] (lexically)
player[].body.bodyMapsSize >= player[].impulse[1][0] (lexically)
player[].body.bodyMapsSize > player[].impulse[3][0] (lexically)
player[].body.bodyMapsSize >= player[].impulse[3][0] (elementwise)
player[].body.bodyMapsSize >= player[].impulse[5][0] (elementwise)
player[].body.bodyMapsSize > player[].impulse[7][0] (lexically)
player[].body.bodyMapsSize >= player[].impulse[7][0] (elementwise)
player[].body.bodyMapsSize < orig(::players[].basePosition.col) (lexically)
player[].body.bodyMapsSize <= orig(::players[].basePosition.col) (lexically)
player[].body.bodyMapsSize < orig(::players[].basePosition.row) (lexically)
player[].body.bodyMapsSize <= orig(::players[].basePosition.row) (lexically)
orig(::new_input) in player[].body.bodyMapsSize
player[].body.bodyMapsSize < orig(player[].basePosition.col) (lexically)
player[].body.bodyMapsSize <= orig(player[].basePosition.col) (lexically)
player[].body.bodyMapsSize < orig(player[].basePosition.row) (lexically)
player[].body.bodyMapsSize <= orig(player[].basePosition.row) (lexically)
player[].body.bodyMapsSize elements < size(::players[])-1
player[].body.bodyMapsSize elements < size(player[])-1
player[].body.bodyMapsSize elements < ::players[::input_n].body.bodyPoints->aspect
player[].body.bodyMapsSize elements < ::players[::new_input].body.bodyPoints->aspect
player[].body.bodyMapsSize elements < ::players[orig(::new_input)].body.bodyPoints->aspect
player[].body.bodyMapsSize elements <= ::players[::new_input].body.bodyMapsSize
player[].body.bodyMapsSize elements < ::players[::new_input].body.bodySize
player[].body.bodyMapsSize elements < ::players[::new_input].body.bodyWidth
player[].body.bodyMapsSize elements < ::players[::new_input].basePosition.col
player[].body.bodyMapsSize elements < ::players[::input_n].basePosition.row
player[].body.bodyMapsSize elements < ::players[orig(::new_input)].basePosition.row
::players[orig(::new_input)].direction in player[].body.bodyMapsSize
player[].body.bodyMapsSize elements < ::players[::input_n].stepCounter
player[::input_n].body.type in player[].body.bodyMapsSize
player[::input_n].impulse[0][0] in player[].body.bodyMapsSize
player[::input_n].impulse[1][0] in player[].body.bodyMapsSize
player[::input_n].impulse[3][0] in player[].body.bodyMapsSize
player[::input_n].impulse[5][0] in player[].body.bodyMapsSize
player[::input_n].impulse[7][0] in player[].body.bodyMapsSize
player[::new_input].body.type in player[].body.bodyMapsSize
player[].body.bodyMapsSize elements < player[::new_input].body.bodyPoints->aspect
player[].body.bodyMapsSize elements <= player[::new_input].body.bodyMapsSize
player[].body.bodyMapsSize elements <= player[::new_input].body.bodySize
player[].body.bodyMapsSize elements < player[::new_input].basePosition.col
player[].body.bodyMapsSize elements < player[::new_input].basePosition.row
player[::new_input].impulse[1][0] in player[].body.bodyMapsSize
player[::new_input].impulse[3][0] in player[].body.bodyMapsSize
player[::new_input].impulse[5][0] in player[].body.bodyMapsSize
player[].body.bodyMapsSize elements < orig(player[post(::new_input)].basePosition.col)
player[].body.bodyMapsSize elements < player[orig(::new_input)].body.bodyPoints->aspect
player[].body.bodyMapsSize elements < player[orig(::new_input)].basePosition.row
player[orig(::new_input)].impulse[1][0] in player[].body.bodyMapsSize
player[].body.bodyMapsSize elements <= player[orig(::new_input)].stepCounter
player[].body.bodyMapsSize elements <= orig(player[::new_input].basePosition.row)
player[].body.bodySize > player[].body.bodyWidth (lexically)
player[].body.bodySize >= player[].body.bodyWidth (elementwise)
player[].body.bodySize > player[].body.bodyHeight (lexically)
player[].body.bodySize >= player[].body.bodyHeight (elementwise)
player[].body.bodySize > player[].impulse[0][0] (lexically)
player[].body.bodySize >= player[].impulse[0][0] (elementwise)
player[].body.bodySize > player[].impulse[1][0] (lexically)
player[].body.bodySize >= player[].impulse[1][0] (elementwise)
player[].body.bodySize > player[].impulse[3][0] (lexically)
player[].body.bodySize >= player[].impulse[3][0] (elementwise)
player[].body.bodySize > player[].impulse[5][0] (lexically)
player[].body.bodySize >= player[].impulse[5][0] (elementwise)
player[].body.bodySize > player[].impulse[7][0] (lexically)
player[].body.bodySize >= player[].impulse[7][0] (elementwise)
orig(::new_input) in player[].body.bodySize
player[].body.bodySize elements < size(::players[])-1
player[].body.bodySize elements < size(player[])-1
player[].body.bodySize elements < ::players[::new_input].body.bodyPoints->aspect
player[::input_n].body.type in player[].body.bodySize
player[::input_n].impulse[0][0] in player[].body.bodySize
player[::input_n].impulse[1][0] in player[].body.bodySize
player[::input_n].impulse[5][0] in player[].body.bodySize
player[::new_input].body.type in player[].body.bodySize
player[::new_input].impulse[3][0] in player[].body.bodySize
player[].body.bodyWidth > player[].body.bodyHeight (lexically)
player[].body.bodyWidth >= player[].body.bodyHeight (elementwise)
player[].body.bodyWidth > player[].impulse[7][0] (lexically)
player[].body.bodyWidth >= player[].impulse[7][0] (elementwise)
player[].body.bodyWidth < orig(::players[].basePosition.col) (lexically)
player[].body.bodyWidth <= orig(::players[].basePosition.col) (lexically)
player[].body.bodyWidth elements < size(::players[])-1
player[].body.bodyWidth elements < size(player[])-1
player[].body.bodyWidth elements < ::players[::input_n].body.bodyPoints->aspect
player[].body.bodyWidth elements < ::players[::new_input].body.bodyPoints->aspect
player[].body.bodyWidth elements < ::players[orig(::new_input)].body.bodyPoints->aspect
player[].body.bodyWidth elements < ::players[::new_input].body.bodySize
::players[::new_input].body.bodyWidth in player[].body.bodyWidth
::players[orig(::new_input)].body.bodyWidth in player[].body.bodyWidth
player[].body.bodyWidth elements < ::players[::new_input].basePosition.col
player[].body.bodyWidth elements < player[::new_input].body.bodyPoints->aspect
player[].body.bodyWidth elements < player[orig(::new_input)].body.bodyPoints->aspect
player[].body.bodyHeight > player[].impulse[7][0] (lexically)
player[].body.bodyHeight >= player[].impulse[7][0] (elementwise)
player[].body.bodyHeight < orig(::players[].basePosition.col) (lexically)
player[].body.bodyHeight <= orig(::players[].basePosition.col) (lexically)
player[].body.bodyHeight < orig(::players[].basePosition.row) (lexically)
player[].body.bodyHeight <= orig(::players[].basePosition.row) (lexically)
player[].body.bodyHeight elements < size(::players[])-1
player[].body.bodyHeight elements < size(player[])-1
player[].body.bodyHeight elements < ::players[::input_n].body.bodyPoints->aspect
player[].body.bodyHeight elements < ::players[::new_input].body.bodyPoints->aspect
player[].body.bodyHeight elements < ::players[orig(::new_input)].body.bodyPoints->aspect
::players[::new_input].body.bodyMapsSize in player[].body.bodyHeight
player[].body.bodyHeight elements < ::players[::new_input].body.bodySize
player[].body.bodyHeight elements < ::players[::new_input].body.bodyWidth
::players[orig(::new_input)].body.bodyHeight in player[].body.bodyHeight
player[].body.bodyHeight elements < ::players[::new_input].basePosition.col
player[].body.bodyHeight elements < ::players[::input_n].basePosition.row
player[].body.bodyHeight elements < ::players[orig(::new_input)].basePosition.row
player[].body.bodyHeight elements < ::players[::input_n].stepCounter
player[].body.bodyHeight elements < player[::new_input].body.bodyPoints->aspect
player[].body.bodyHeight elements < player[orig(::new_input)].body.bodyPoints->aspect
player[].body.color < player[].basePosition.col (lexically)
player[].body.color <= player[].basePosition.col (elementwise)
player[].body.color > player[].impulse[0][0] (lexically)
player[].body.color >= player[].impulse[0][0] (lexically)
player[].body.color > player[].impulse[1][0] (lexically)
player[].body.color >= player[].impulse[1][0] (lexically)
player[].body.color > player[].impulse[3][0] (lexically)
player[].body.color >= player[].impulse[3][0] (lexically)
player[].body.color > player[].impulse[5][0] (lexically)
player[].body.color >= player[].impulse[5][0] (elementwise)
player[].body.color > player[].impulse[7][0] (lexically)
player[].body.color >= player[].impulse[7][0] (lexically)
player[].body.color < orig(::players[].basePosition.col) (lexically)
player[].body.color <= orig(::players[].basePosition.col) (lexically)
player[].body.color < orig(::players[].basePosition.row) (lexically)
player[].body.color <= orig(::players[].basePosition.row) (lexically)
orig(::new_input) in player[].body.color
player[].body.color < orig(player[].basePosition.col) (lexically)
player[].body.color <= orig(player[].basePosition.col) (elementwise)
player[].body.color elements < size(::players[])-1
player[].body.color elements < size(player[])-1
player[].body.color elements < ::players[::input_n].body.bodyPoints->aspect
player[].body.color elements < ::players[::new_input].body.bodyPoints->aspect
player[].body.color elements < ::players[orig(::new_input)].body.bodyPoints->aspect
player[].body.color elements < ::players[::new_input].body.bodySize
player[].body.color elements <= ::players[::new_input].body.bodyWidth
player[].body.color elements < ::players[::new_input].basePosition.col
player[].body.color elements < ::players[::input_n].basePosition.row
player[].body.color elements < ::players[orig(::new_input)].basePosition.row
player[].body.color elements < ::players[::input_n].stepCounter
player[::input_n].body.type in player[].body.color
player[::input_n].body.visible in player[].body.color
player[::input_n].body.bodyHeight in player[].body.color
player[::input_n].impulse[0][0] in player[].body.color
player[::input_n].impulse[1][0] in player[].body.color
player[::input_n].impulse[3][0] in player[].body.color
player[::input_n].impulse[5][0] in player[].body.color
player[::input_n].impulse[7][0] in player[].body.color
player[::new_input].body.type in player[].body.color
player[].body.color elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].impulse[1][0] in player[].body.color
player[::new_input].impulse[3][0] in player[].body.color
player[].body.color elements < player[orig(::new_input)].body.bodyPoints->aspect
player[orig(::new_input)].impulse[1][0] in player[].body.color
player[].basePosition.col > player[].impulse[0][0] (lexically)
player[].basePosition.col >= player[].impulse[0][0] (lexically)
player[].basePosition.col > player[].impulse[1][0] (lexically)
player[].basePosition.col >= player[].impulse[1][0] (lexically)
player[].basePosition.col > player[].impulse[3][0] (lexically)
player[].basePosition.col >= player[].impulse[3][0] (elementwise)
player[].basePosition.col > player[].impulse[5][0] (lexically)
player[].basePosition.col >= player[].impulse[5][0] (elementwise)
player[].basePosition.col > player[].impulse[7][0] (lexically)
player[].basePosition.col >= player[].impulse[7][0] (elementwise)
player[].basePosition.col >= orig(player[].basePosition.col) (elementwise)
player[].basePosition.col elements < size(::players[])-1
player[].basePosition.col elements < size(player[])-1
player[::input_n].body.bodyHeight in player[].basePosition.col
player[].basePosition.row > player[].impulse[0][0] (lexically)
player[].basePosition.row >= player[].impulse[0][0] (lexically)
player[].basePosition.row > player[].impulse[1][0] (lexically)
player[].basePosition.row >= player[].impulse[1][0] (elementwise)
player[].basePosition.row > player[].impulse[3][0] (lexically)
player[].basePosition.row >= player[].impulse[3][0] (lexically)
player[].basePosition.row > player[].impulse[5][0] (lexically)
player[].basePosition.row >= player[].impulse[5][0] (elementwise)
player[].basePosition.row > player[].impulse[7][0] (lexically)
player[].basePosition.row >= player[].impulse[7][0] (lexically)
player[].basePosition.row < orig(::players[].basePosition.col) (lexically)
player[].basePosition.row <= orig(::players[].basePosition.col) (lexically)
orig(::new_input) in player[].basePosition.row
player[].basePosition.row elements < size(::players[])-1
player[].basePosition.row elements < size(player[])-1
player[].basePosition.row elements < ::players[::input_n].body.bodyPoints->aspect
player[].basePosition.row elements < ::players[::new_input].body.bodyPoints->aspect
player[].basePosition.row elements < ::players[orig(::new_input)].body.bodyPoints->aspect
player[].basePosition.row elements < ::players[::new_input].body.bodySize
player[].basePosition.row elements < ::players[::new_input].basePosition.col
::players[orig(::new_input)].stepCounter in player[].basePosition.row
player[::input_n].body.type in player[].basePosition.row
player[::input_n].body.visible in player[].basePosition.row
player[::input_n].body.bodyHeight in player[].basePosition.row
player[::input_n].body.color in player[].basePosition.row
player[::input_n].impulse[0][0] in player[].basePosition.row
player[::input_n].impulse[1][0] in player[].basePosition.row
player[::input_n].impulse[3][0] in player[].basePosition.row
player[::input_n].impulse[5][0] in player[].basePosition.row
player[::input_n].impulse[7][0] in player[].basePosition.row
player[::new_input].body.type in player[].basePosition.row
player[].basePosition.row elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].impulse[1][0] in player[].basePosition.row
player[::new_input].impulse[3][0] in player[].basePosition.row
player[].basePosition.row elements < player[orig(::new_input)].body.bodyPoints->aspect
player[orig(::new_input)].impulse[1][0] in player[].basePosition.row
player[].impulse[0] - player[].impulse[1] + 4 == 0
player[].impulse[0] - player[].impulse[2] + 8 == 0
player[].impulse[0] - player[].impulse[3] + 12 == 0
player[].impulse[0] - player[].impulse[4] + 16 == 0
player[].impulse[0] - player[].impulse[5] + 20 == 0
player[].impulse[0] - player[].impulse[6] + 24 == 0
player[].impulse[0] - player[].impulse[7] + 28 == 0
player[].impulse[0] - player[].impulse[8] + 32 == 0
player[].impulse[0][0] < player[].direction (lexically)
player[].impulse[0][0] <= player[].direction (lexically)
player[].impulse[0][0] < player[].stepCounter (lexically)
player[].impulse[0][0] <= player[].stepCounter (elementwise)
player[].impulse[0][0] < orig(::players[].basePosition.col) (lexically)
player[].impulse[0][0] <= orig(::players[].basePosition.col) (lexically)
player[].impulse[0][0] < orig(::players[].basePosition.row) (lexically)
player[].impulse[0][0] <= orig(::players[].basePosition.row) (lexically)
player[].impulse[0][0] < orig(player[].basePosition.col) (lexically)
player[].impulse[0][0] <= orig(player[].basePosition.col) (lexically)
player[].impulse[0][0] < orig(player[].basePosition.row) (lexically)
player[].impulse[0][0] <= orig(player[].basePosition.row) (lexically)
player[].impulse[0][0] elements < size(::players[])-1
player[].impulse[0][0] elements < size(player[])-1
player[].impulse[0][0] elements < ::players[::input_n].body.bodyPoints->aspect
player[].impulse[0][0] elements < ::players[::new_input].body.bodyPoints->aspect
player[].impulse[0][0] elements < ::players[orig(::new_input)].body.bodyPoints->aspect
player[].impulse[0][0] elements < ::players[::new_input].body.bodyMapsSize
player[].impulse[0][0] elements <= ::players[orig(::new_input)].body.bodyMapsSize
player[].impulse[0][0] elements < ::players[::new_input].body.bodySize
player[].impulse[0][0] elements <= ::players[orig(::new_input)].body.bodySize
player[].impulse[0][0] elements < ::players[::new_input].body.bodyWidth
player[].impulse[0][0] elements < ::players[::new_input].body.color
player[].impulse[0][0] elements < ::players[::new_input].basePosition.col
player[].impulse[0][0] elements < ::players[::input_n].basePosition.row
player[].impulse[0][0] elements < ::players[orig(::new_input)].basePosition.row
player[].impulse[0][0] elements < ::players[::input_n].stepCounter
player[::input_n].body.type in player[].impulse[0][0]
player[].impulse[0][0] elements <= player[::input_n].body.type
player[].impulse[0][0] elements <= player[::input_n].body.visible
player[].impulse[0][0] elements <= player[::input_n].body.bodyPoints->aspect
player[].impulse[0][0] elements <= player[::input_n].body.bodySize
player[::input_n].impulse[1][0] in player[].impulse[0][0]
player[::input_n].impulse[5][0] in player[].impulse[0][0]
player[].impulse[0][0] elements <= player[::input_n].stepCounter
player[::new_input].body.type in player[].impulse[0][0]
player[].impulse[0][0] elements < player[::new_input].body.bodyPoints->aspect
player[].impulse[0][0] elements <= player[::new_input].body.bodyMapsSize
player[].impulse[0][0] elements <= player[::new_input].body.bodySize
player[].impulse[0][0] elements <= player[::new_input].body.color
player[].impulse[0][0] elements < player[::new_input].basePosition.col
player[].impulse[0][0] elements < player[::new_input].basePosition.row
player[::new_input].impulse[3][0] in player[].impulse[0][0]
player[].impulse[0][0] elements <= player[::new_input].direction
player[].impulse[0][0] elements < orig(player[post(::new_input)].basePosition.col)
player[].impulse[0][0] elements < player[orig(::new_input)].body.bodyPoints->aspect
player[].impulse[0][0] elements <= player[orig(::new_input)].body.bodySize
player[].impulse[0][0] elements < player[orig(::new_input)].basePosition.row
player[].impulse[0][0] elements <= player[orig(::new_input)].stepCounter
player[].impulse[0][0] elements <= orig(player[::new_input].basePosition.row)
player[].impulse[1] - player[].impulse[2] + 4 == 0
player[].impulse[1] - player[].impulse[3] + 8 == 0
player[].impulse[1] - player[].impulse[4] + 12 == 0
player[].impulse[1] - player[].impulse[5] + 16 == 0
player[].impulse[1] - player[].impulse[6] + 20 == 0
player[].impulse[1] - player[].impulse[7] + 24 == 0
player[].impulse[1] - player[].impulse[8] + 28 == 0
player[].impulse[1][0] >= player[].impulse[7][0] (lexically)
player[].impulse[1][0] < orig(::players[].basePosition.col) (lexically)
player[].impulse[1][0] <= orig(::players[].basePosition.col) (lexically)
player[].impulse[1][0] < orig(::players[].basePosition.row) (lexically)
player[].impulse[1][0] <= orig(::players[].basePosition.row) (lexically)
orig(::new_input) in player[].impulse[1][0]
player[].impulse[1][0] < orig(player[].basePosition.col) (lexically)
player[].impulse[1][0] <= orig(player[].basePosition.col) (lexically)
player[].impulse[1][0] < orig(player[].basePosition.row) (lexically)
player[].impulse[1][0] <= orig(player[].basePosition.row) (elementwise)
player[].impulse[1][0] elements < size(::players[])-1
player[].impulse[1][0] elements < size(player[])-1
player[].impulse[1][0] elements < ::players[::input_n].body.bodyPoints->aspect
player[].impulse[1][0] elements < ::players[::new_input].body.bodyPoints->aspect
player[].impulse[1][0] elements < ::players[orig(::new_input)].body.bodyPoints->aspect
player[].impulse[1][0] elements < ::players[::new_input].body.bodySize
player[].impulse[1][0] elements < ::players[::new_input].body.bodyWidth
player[].impulse[1][0] elements < ::players[::new_input].basePosition.col
player[].impulse[1][0] elements < ::players[::input_n].basePosition.row
player[].impulse[1][0] elements < ::players[orig(::new_input)].basePosition.row
player[].impulse[1][0] elements < ::players[::input_n].stepCounter
player[::input_n].body.type in player[].impulse[1][0]
player[::input_n].body.visible in player[].impulse[1][0]
player[].impulse[1][0] elements <= player[::input_n].body.bodyPoints->aspect
player[::input_n].impulse[0][0] in player[].impulse[1][0]
player[::input_n].impulse[3][0] in player[].impulse[1][0]
player[::input_n].impulse[5][0] in player[].impulse[1][0]
player[::input_n].impulse[7][0] in player[].impulse[1][0]
player[::new_input].body.type in player[].impulse[1][0]
player[].impulse[1][0] elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].impulse[3][0] in player[].impulse[1][0]
player[].impulse[1][0] elements < player[orig(::new_input)].body.bodyPoints->aspect
player[].impulse[2] - player[].impulse[3] + 4 == 0
player[].impulse[2] - player[].impulse[4] + 8 == 0
player[].impulse[2] - player[].impulse[5] + 12 == 0
player[].impulse[2] - player[].impulse[6] + 16 == 0
player[].impulse[2] - player[].impulse[7] + 20 == 0
player[].impulse[2] - player[].impulse[8] + 24 == 0
player[].impulse[3] - player[].impulse[4] + 4 == 0
player[].impulse[3] - player[].impulse[5] + 8 == 0
player[].impulse[3] - player[].impulse[6] + 12 == 0
player[].impulse[3] - player[].impulse[7] + 16 == 0
player[].impulse[3] - player[].impulse[8] + 20 == 0
player[].impulse[3][0] >= player[].impulse[7][0] (lexically)
player[].impulse[3][0] < player[].direction (lexically)
player[].impulse[3][0] <= player[].direction (lexically)
player[].impulse[3][0] < player[].stepCounter (lexically)
player[].impulse[3][0] <= player[].stepCounter (elementwise)
player[].impulse[3][0] < orig(::players[].basePosition.col) (lexically)
player[].impulse[3][0] <= orig(::players[].basePosition.col) (lexically)
player[].impulse[3][0] < orig(::players[].basePosition.row) (lexically)
player[].impulse[3][0] <= orig(::players[].basePosition.row) (lexically)
orig(::new_input) in player[].impulse[3][0]
player[].impulse[3][0] < orig(player[].basePosition.col) (lexically)
player[].impulse[3][0] <= orig(player[].basePosition.col) (elementwise)
player[].impulse[3][0] < orig(player[].basePosition.row) (lexically)
player[].impulse[3][0] <= orig(player[].basePosition.row) (lexically)
player[].impulse[3][0] elements < size(::players[])-1
player[].impulse[3][0] elements < size(player[])-1
player[].impulse[3][0] elements < ::players[::input_n].body.bodyPoints->aspect
player[].impulse[3][0] elements < ::players[::new_input].body.bodyPoints->aspect
player[].impulse[3][0] elements < ::players[orig(::new_input)].body.bodyPoints->aspect
player[].impulse[3][0] elements < ::players[::new_input].body.bodyMapsSize
player[].impulse[3][0] elements <= ::players[orig(::new_input)].body.bodyMapsSize
player[].impulse[3][0] elements < ::players[::new_input].body.bodySize
player[].impulse[3][0] elements <= ::players[orig(::new_input)].body.bodySize
player[].impulse[3][0] elements < ::players[::new_input].body.bodyWidth
player[].impulse[3][0] elements < ::players[::new_input].body.color
player[].impulse[3][0] elements < ::players[::new_input].basePosition.col
player[].impulse[3][0] elements < ::players[::input_n].basePosition.row
player[].impulse[3][0] elements < ::players[orig(::new_input)].basePosition.row
player[].impulse[3][0] elements < ::players[::input_n].stepCounter
player[::input_n].body.type in player[].impulse[3][0]
player[::input_n].body.visible in player[].impulse[3][0]
player[].impulse[3][0] elements <= player[::input_n].body.visible
player[].impulse[3][0] elements <= player[::input_n].body.bodyPoints->aspect
player[].impulse[3][0] elements <= player[::input_n].body.bodySize
player[::input_n].impulse[0][0] in player[].impulse[3][0]
player[::input_n].impulse[1][0] in player[].impulse[3][0]
player[::input_n].impulse[5][0] in player[].impulse[3][0]
player[::input_n].impulse[7][0] in player[].impulse[3][0]
player[].impulse[3][0] elements <= player[::input_n].stepCounter
player[::new_input].body.type in player[].impulse[3][0]
player[].impulse[3][0] elements < player[::new_input].body.bodyPoints->aspect
player[].impulse[3][0] elements <= player[::new_input].body.bodyMapsSize
player[].impulse[3][0] elements <= player[::new_input].body.bodySize
player[].impulse[3][0] elements <= player[::new_input].body.color
player[].impulse[3][0] elements < player[::new_input].basePosition.col
player[].impulse[3][0] elements < player[::new_input].basePosition.row
player[::new_input].impulse[1][0] in player[].impulse[3][0]
player[].impulse[3][0] elements <= player[::new_input].direction
player[].impulse[3][0] elements < orig(player[post(::new_input)].basePosition.col)
player[].impulse[3][0] elements < player[orig(::new_input)].body.bodyPoints->aspect
player[].impulse[3][0] elements <= player[orig(::new_input)].body.bodySize
player[].impulse[3][0] elements < player[orig(::new_input)].basePosition.row
player[orig(::new_input)].impulse[1][0] in player[].impulse[3][0]
player[].impulse[3][0] elements <= player[orig(::new_input)].stepCounter
player[].impulse[3][0] elements <= orig(player[::new_input].basePosition.row)
player[].impulse[4] - player[].impulse[5] + 4 == 0
player[].impulse[4] - player[].impulse[6] + 8 == 0
player[].impulse[4] - player[].impulse[7] + 12 == 0
player[].impulse[4] - player[].impulse[8] + 16 == 0
player[].impulse[5] - player[].impulse[6] + 4 == 0
player[].impulse[5] - player[].impulse[7] + 8 == 0
player[].impulse[5] - player[].impulse[8] + 12 == 0
player[].impulse[5][0] < player[].direction (lexically)
player[].impulse[5][0] <= player[].direction (lexically)
player[].impulse[5][0] <= player[].stepCounter (elementwise)
player[].impulse[5][0] < orig(::players[].basePosition.col) (lexically)
player[].impulse[5][0] <= orig(::players[].basePosition.col) (lexically)
player[].impulse[5][0] < orig(::players[].basePosition.row) (lexically)
player[].impulse[5][0] <= orig(::players[].basePosition.row) (lexically)
orig(::new_input) in player[].impulse[5][0]
player[].impulse[5][0] < orig(player[].basePosition.col) (lexically)
player[].impulse[5][0] <= orig(player[].basePosition.col) (elementwise)
player[].impulse[5][0] < orig(player[].basePosition.row) (lexically)
player[].impulse[5][0] <= orig(player[].basePosition.row) (elementwise)
player[].impulse[5][0] elements < size(::players[])-1
player[].impulse[5][0] elements < size(player[])-1
player[].impulse[5][0] elements < ::players[::input_n].body.bodyPoints->aspect
player[].impulse[5][0] elements < ::players[::new_input].body.bodyPoints->aspect
player[].impulse[5][0] elements < ::players[orig(::new_input)].body.bodyPoints->aspect
player[].impulse[5][0] elements < ::players[::new_input].body.bodyMapsSize
player[].impulse[5][0] elements <= ::players[orig(::new_input)].body.bodyMapsSize
player[].impulse[5][0] elements < ::players[::new_input].body.bodySize
player[].impulse[5][0] elements <= ::players[orig(::new_input)].body.bodySize
player[].impulse[5][0] elements < ::players[::new_input].body.bodyWidth
player[].impulse[5][0] elements < ::players[::new_input].body.color
player[].impulse[5][0] elements < ::players[::new_input].basePosition.col
player[].impulse[5][0] elements < ::players[::input_n].basePosition.row
player[].impulse[5][0] elements < ::players[orig(::new_input)].basePosition.row
::players[orig(::new_input)].direction in player[].impulse[5][0]
player[].impulse[5][0] elements < ::players[::input_n].stepCounter
player[::input_n].body.type in player[].impulse[5][0]
player[::input_n].body.visible in player[].impulse[5][0]
player[::input_n].impulse[0][0] in player[].impulse[5][0]
player[::input_n].impulse[1][0] in player[].impulse[5][0]
player[::input_n].impulse[3][0] in player[].impulse[5][0]
player[::input_n].impulse[7][0] in player[].impulse[5][0]
player[::new_input].body.type in player[].impulse[5][0]
player[].impulse[5][0] elements < player[::new_input].body.bodyPoints->aspect
player[].impulse[5][0] elements <= player[::new_input].body.bodyMapsSize
player[].impulse[5][0] elements <= player[::new_input].body.bodySize
player[].impulse[5][0] elements <= player[::new_input].body.color
player[].impulse[5][0] elements < player[::new_input].basePosition.col
player[].impulse[5][0] elements < player[::new_input].basePosition.row
player[::new_input].impulse[1][0] in player[].impulse[5][0]
player[::new_input].impulse[3][0] in player[].impulse[5][0]
player[].impulse[5][0] elements <= player[::new_input].direction
player[].impulse[5][0] elements < orig(player[post(::new_input)].basePosition.col)
player[].impulse[5][0] elements < player[orig(::new_input)].body.bodyPoints->aspect
player[].impulse[5][0] elements <= player[orig(::new_input)].body.bodySize
player[].impulse[5][0] elements < player[orig(::new_input)].basePosition.row
player[orig(::new_input)].impulse[1][0] in player[].impulse[5][0]
player[].impulse[5][0] elements <= player[orig(::new_input)].stepCounter
player[].impulse[5][0] elements <= orig(player[::new_input].basePosition.row)
player[].impulse[6] - player[].impulse[7] + 4 == 0
player[].impulse[6] - player[].impulse[8] + 8 == 0
player[].impulse[7] - player[].impulse[8] + 4 == 0
player[].impulse[7][0] < player[].direction (lexically)
player[].impulse[7][0] <= player[].direction (lexically)
player[].impulse[7][0] < player[].stepCounter (lexically)
player[].impulse[7][0] <= player[].stepCounter (elementwise)
player[].impulse[7][0] < orig(::players[].basePosition.col) (lexically)
player[].impulse[7][0] <= orig(::players[].basePosition.col) (lexically)
player[].impulse[7][0] < orig(::players[].basePosition.row) (lexically)
player[].impulse[7][0] <= orig(::players[].basePosition.row) (lexically)
orig(::new_input) in player[].impulse[7][0]
player[].impulse[7][0] < orig(player[].basePosition.col) (lexically)
player[].impulse[7][0] <= orig(player[].basePosition.col) (elementwise)
player[].impulse[7][0] < orig(player[].basePosition.row) (lexically)
player[].impulse[7][0] <= orig(player[].basePosition.row) (lexically)
player[].impulse[7][0] elements < size(::players[])-1
player[].impulse[7][0] elements < size(player[])-1
player[].impulse[7][0] elements < ::players[::input_n].body.bodyPoints->aspect
player[].impulse[7][0] elements < ::players[::new_input].body.bodyPoints->aspect
player[].impulse[7][0] elements < ::players[orig(::new_input)].body.bodyPoints->aspect
player[].impulse[7][0] elements < ::players[::new_input].body.bodyMapsSize
player[].impulse[7][0] elements <= ::players[orig(::new_input)].body.bodyMapsSize
player[].impulse[7][0] elements < ::players[::new_input].body.bodySize
player[].impulse[7][0] elements <= ::players[orig(::new_input)].body.bodySize
player[].impulse[7][0] elements < ::players[::new_input].body.bodyWidth
player[].impulse[7][0] elements < ::players[::new_input].body.color
player[].impulse[7][0] elements < ::players[::new_input].basePosition.col
player[].impulse[7][0] elements < ::players[::input_n].basePosition.row
player[].impulse[7][0] elements < ::players[orig(::new_input)].basePosition.row
player[].impulse[7][0] elements < ::players[::input_n].stepCounter
player[::input_n].body.type in player[].impulse[7][0]
player[::input_n].body.visible in player[].impulse[7][0]
player[].impulse[7][0] elements <= player[::input_n].body.visible
player[].impulse[7][0] elements <= player[::input_n].body.bodyPoints->aspect
player[].impulse[7][0] elements <= player[::input_n].body.bodySize
player[::input_n].impulse[0][0] in player[].impulse[7][0]
player[::input_n].impulse[1][0] in player[].impulse[7][0]
player[::input_n].impulse[3][0] in player[].impulse[7][0]
player[::input_n].impulse[5][0] in player[].impulse[7][0]
player[].impulse[7][0] elements <= player[::input_n].stepCounter
player[::new_input].body.type in player[].impulse[7][0]
player[].impulse[7][0] elements < player[::new_input].body.bodyPoints->aspect
player[].impulse[7][0] elements <= player[::new_input].body.bodyMapsSize
player[].impulse[7][0] elements <= player[::new_input].body.bodySize
player[].impulse[7][0] elements <= player[::new_input].body.color
player[].impulse[7][0] elements < player[::new_input].basePosition.col
player[].impulse[7][0] elements < player[::new_input].basePosition.row
player[::new_input].impulse[1][0] in player[].impulse[7][0]
player[::new_input].impulse[3][0] in player[].impulse[7][0]
player[].impulse[7][0] elements <= player[::new_input].direction
player[].impulse[7][0] elements < orig(player[post(::new_input)].basePosition.col)
player[].impulse[7][0] elements < player[orig(::new_input)].body.bodyPoints->aspect
player[].impulse[7][0] elements <= player[orig(::new_input)].body.bodySize
player[].impulse[7][0] elements < player[orig(::new_input)].basePosition.row
player[orig(::new_input)].impulse[1][0] in player[].impulse[7][0]
player[].impulse[7][0] elements <= player[orig(::new_input)].stepCounter
player[].impulse[7][0] elements <= orig(player[::new_input].basePosition.row)
player[].direction < orig(::players[].basePosition.col) (lexically)
player[].direction <= orig(::players[].basePosition.col) (lexically)
player[].direction < orig(::players[].basePosition.row) (lexically)
player[].direction <= orig(::players[].basePosition.row) (lexically)
orig(::new_input) in player[].direction
player[].direction elements < size(::players[])-1
player[].direction elements < size(player[])-1
player[].direction elements < ::players[::input_n].body.bodyPoints->aspect
player[].direction elements < ::players[::new_input].body.bodyPoints->aspect
player[].direction elements < ::players[orig(::new_input)].body.bodyPoints->aspect
player[].direction elements < ::players[::new_input].body.bodySize
player[].direction elements <= ::players[orig(::new_input)].body.bodySize
player[].direction elements < ::players[::new_input].body.bodyWidth
player[].direction elements < ::players[::new_input].basePosition.col
player[].direction elements < ::players[::input_n].basePosition.row
player[].direction elements < ::players[orig(::new_input)].basePosition.row
player[].direction elements < ::players[::input_n].stepCounter
player[::input_n].impulse[0][0] in player[].direction
player[::input_n].impulse[7][0] in player[].direction
player[].direction elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].impulse[1][0] in player[].direction
player[].direction elements <= player[::new_input].direction
player[].direction elements < player[orig(::new_input)].body.bodyPoints->aspect
player[orig(::new_input)].impulse[1][0] in player[].direction
player[].stepCounter < orig(::players[].basePosition.col) (lexically)
player[].stepCounter <= orig(::players[].basePosition.col) (lexically)
player[].stepCounter < orig(::players[].basePosition.row) (lexically)
player[].stepCounter <= orig(::players[].basePosition.row) (lexically)
orig(::new_input) in player[].stepCounter
player[].stepCounter elements < size(::players[])-1
player[].stepCounter elements < size(player[])-1
player[].stepCounter elements < ::players[::input_n].body.bodyPoints->aspect
player[].stepCounter elements < ::players[::new_input].body.bodyPoints->aspect
player[].stepCounter elements < ::players[orig(::new_input)].body.bodyPoints->aspect
player[].stepCounter elements < ::players[::new_input].body.bodySize
player[].stepCounter elements < ::players[::new_input].basePosition.col
player[].stepCounter elements <= ::players[::input_n].basePosition.row
::players[orig(::new_input)].direction in player[].stepCounter
::players[orig(::new_input)].stepCounter in player[].stepCounter
player[::input_n].body.type in player[].stepCounter
player[::input_n].body.visible in player[].stepCounter
player[::input_n].body.bodyWidth in player[].stepCounter
player[::input_n].body.bodyHeight in player[].stepCounter
player[::input_n].impulse[0][0] in player[].stepCounter
player[::input_n].impulse[1][0] in player[].stepCounter
player[::input_n].impulse[3][0] in player[].stepCounter
player[::input_n].impulse[5][0] in player[].stepCounter
player[::input_n].impulse[7][0] in player[].stepCounter
player[::new_input].body.type in player[].stepCounter
player[].stepCounter elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].body.bodyMapsSize in player[].stepCounter
player[::new_input].impulse[1][0] in player[].stepCounter
player[::new_input].impulse[3][0] in player[].stepCounter
player[::new_input].impulse[5][0] in player[].stepCounter
player[].stepCounter elements < player[orig(::new_input)].body.bodyPoints->aspect
player[orig(::new_input)].impulse[1][0] in player[].stepCounter
::players[::input_n].pilot in player[].pilot
::players[::input_n].onCrash in player[].pilot
::players[::input_n].onCrash in player[].onCrash
::players[::new_input].onCrash in player[].onCrash
::players[orig(::new_input)].onCrash in player[].onCrash
::players[::input_n].onCrash in player[].onPushed
orig(::players[].basePosition.col) elements < size(::players[])-1
orig(::players[].basePosition.col) elements < size(player[])-1
::players[::new_input].body.bodyMapsSize in orig(::players[].basePosition.col)
::players[::new_input].body.bodyWidth in orig(::players[].basePosition.col)
::players[orig(::new_input)].body.bodyWidth in orig(::players[].basePosition.col)
::players[orig(::new_input)].body.bodyHeight in orig(::players[].basePosition.col)
::players[::input_n].basePosition.row in orig(::players[].basePosition.col)
player[::input_n].body.bodyWidth in orig(::players[].basePosition.col)
player[::input_n].body.bodyHeight in orig(::players[].basePosition.col)
player[::input_n].basePosition.col in orig(::players[].basePosition.col)
orig(player[post(::new_input)].basePosition.col) in orig(::players[].basePosition.col)
orig(::players[].basePosition.row) elements < size(::players[])-1
orig(::players[].basePosition.row) elements < size(player[])-1
orig(::players[].basePosition.row) elements < ::players[::input_n].body.bodyPoints->aspect
orig(::players[].basePosition.row) elements < ::players[::new_input].body.bodyPoints->aspect
orig(::players[].basePosition.row) elements < ::players[orig(::new_input)].body.bodyPoints->aspect
::players[::new_input].body.bodyMapsSize in orig(::players[].basePosition.row)
::players[orig(::new_input)].body.bodyMapsSize in orig(::players[].basePosition.row)
orig(::players[].basePosition.row) elements < ::players[::new_input].body.bodySize
::players[orig(::new_input)].body.bodyHeight in orig(::players[].basePosition.row)
::players[::new_input].body.color in orig(::players[].basePosition.row)
::players[orig(::new_input)].body.color in orig(::players[].basePosition.row)
orig(::players[].basePosition.row) elements < ::players[::new_input].basePosition.col
::players[orig(::new_input)].direction in orig(::players[].basePosition.row)
player[::input_n].body.type in orig(::players[].basePosition.row)
player[::input_n].body.visible in orig(::players[].basePosition.row)
player[::input_n].body.bodyHeight in orig(::players[].basePosition.row)
player[::input_n].body.color in orig(::players[].basePosition.row)
player[::input_n].basePosition.row in orig(::players[].basePosition.row)
player[::input_n].impulse[0][0] in orig(::players[].basePosition.row)
player[::input_n].impulse[1][0] in orig(::players[].basePosition.row)
player[::input_n].impulse[3][0] in orig(::players[].basePosition.row)
player[::input_n].impulse[5][0] in orig(::players[].basePosition.row)
player[::input_n].impulse[7][0] in orig(::players[].basePosition.row)
player[::new_input].body.type in orig(::players[].basePosition.row)
orig(::players[].basePosition.row) elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].body.bodyMapsSize in orig(::players[].basePosition.row)
player[::new_input].body.bodyHeight in orig(::players[].basePosition.row)
player[::new_input].body.color in orig(::players[].basePosition.row)
player[::new_input].impulse[1][0] in orig(::players[].basePosition.row)
player[::new_input].impulse[3][0] in orig(::players[].basePosition.row)
player[::new_input].impulse[5][0] in orig(::players[].basePosition.row)
player[::new_input].direction in orig(::players[].basePosition.row)
orig(::players[].basePosition.row) elements < player[orig(::new_input)].body.bodyPoints->aspect
player[orig(::new_input)].body.bodyHeight in orig(::players[].basePosition.row)
player[orig(::new_input)].body.color in orig(::players[].basePosition.row)
player[orig(::new_input)].impulse[1][0] in orig(::players[].basePosition.row)
player[orig(::new_input)].direction in orig(::players[].basePosition.row)
orig(::new_input) < size(::players[])-1
orig(::new_input) < size(player[])-1
orig(::new_input) < ::players[::input_n].body.bodyPoints->aspect
orig(::new_input) < ::players[::new_input].body.bodyPoints->aspect
orig(::new_input) < ::players[orig(::new_input)].body.bodyPoints->aspect
orig(::new_input) < ::players[::new_input].body.bodyMapsSize
orig(::new_input) < ::players[::new_input].body.bodySize
orig(::new_input) < ::players[::new_input].body.bodyWidth
orig(::new_input) != ::players[orig(::new_input)].body.bodyWidth
orig(::new_input) != ::players[orig(::new_input)].body.bodyHeight
orig(::new_input) < ::players[::new_input].body.color
orig(::new_input) != ::players[orig(::new_input)].body.color
orig(::new_input) < ::players[::new_input].basePosition.col
orig(::new_input) != ::players[orig(::new_input)].basePosition.col
orig(::new_input) < ::players[::input_n].basePosition.row
orig(::new_input) < ::players[orig(::new_input)].basePosition.row
orig(::new_input) != ::players[orig(::new_input)].direction
orig(::new_input) < ::players[::input_n].stepCounter
orig(::new_input) <= player[::input_n].body.visible
orig(::new_input) <= player[::input_n].body.bodyPoints->aspect
orig(::new_input) <= player[::input_n].body.bodySize
orig(::new_input) <= player[::input_n].basePosition.row
orig(::new_input) <= player[::input_n].impulse[0][0]
orig(::new_input) <= player[::input_n].stepCounter
orig(::new_input) < player[::new_input].body.bodyPoints->aspect
orig(::new_input) < player[::new_input].body.bodyMapsSize
orig(::new_input) < player[::new_input].body.bodySize
orig(::new_input) <= player[::new_input].body.bodyWidth
orig(::new_input) <= player[::new_input].body.bodyHeight
orig(::new_input) < player[::new_input].body.color
orig(::new_input) < player[::new_input].basePosition.col
orig(::new_input) < player[::new_input].basePosition.row
orig(::new_input) <= player[::new_input].impulse[1][0]
orig(::new_input) % player[::new_input].direction == 0
orig(::new_input) <= player[::new_input].direction
orig(::new_input) != player[::new_input].stepCounter
orig(::new_input) < orig(player[post(::new_input)].basePosition.col)
orig(::new_input) < player[orig(::new_input)].body.bodyPoints->aspect
orig(::new_input) % player[orig(::new_input)].body.bodySize == 0
orig(::new_input) != player[orig(::new_input)].body.color
orig(::new_input) != player[orig(::new_input)].basePosition.col
orig(::new_input) < player[orig(::new_input)].basePosition.row
orig(::new_input) != player[orig(::new_input)].direction
orig(::new_input) < player[orig(::new_input)].stepCounter
orig(player[].basePosition.col) elements < size(::players[])-1
orig(player[].basePosition.col) elements < size(player[])-1
player[::input_n].body.bodyHeight in orig(player[].basePosition.col)
orig(player[].basePosition.row) elements < size(::players[])-1
orig(player[].basePosition.row) elements < size(player[])-1
orig(player[].basePosition.row) elements < ::players[::input_n].body.bodyPoints->aspect
orig(player[].basePosition.row) elements < ::players[::new_input].body.bodyPoints->aspect
orig(player[].basePosition.row) elements < ::players[orig(::new_input)].body.bodyPoints->aspect
orig(player[].basePosition.row) elements < ::players[::new_input].body.bodySize
orig(player[].basePosition.row) elements < ::players[::new_input].basePosition.col
player[::input_n].body.type in orig(player[].basePosition.row)
player[::input_n].body.visible in orig(player[].basePosition.row)
player[::input_n].body.bodyHeight in orig(player[].basePosition.row)
player[::input_n].body.color in orig(player[].basePosition.row)
player[::input_n].impulse[0][0] in orig(player[].basePosition.row)
player[::input_n].impulse[1][0] in orig(player[].basePosition.row)
player[::input_n].impulse[3][0] in orig(player[].basePosition.row)
player[::input_n].impulse[5][0] in orig(player[].basePosition.row)
player[::input_n].impulse[7][0] in orig(player[].basePosition.row)
player[::new_input].body.type in orig(player[].basePosition.row)
orig(player[].basePosition.row) elements < player[::new_input].body.bodyPoints->aspect
player[::new_input].body.color in orig(player[].basePosition.row)
player[::new_input].impulse[1][0] in orig(player[].basePosition.row)
player[::new_input].impulse[3][0] in orig(player[].basePosition.row)
orig(player[].basePosition.row) elements < player[orig(::new_input)].body.bodyPoints->aspect
player[orig(::new_input)].body.color in orig(player[].basePosition.row)
player[orig(::new_input)].impulse[1][0] in orig(player[].basePosition.row)
size(::players[]) >= orig(size(player[]))
size(::players[])-1 >= size(player[])-1
size(::players[])-1 != orig(size(player[]))
size(::players[])-1 > ::players[orig(::new_input)].body.bodyPoints->aspect
size(::players[])-1 > ::players[orig(::new_input)].body.bodyMapsSize
size(::players[])-1 > ::players[orig(::new_input)].body.bodySize
size(::players[])-1 > ::players[orig(::new_input)].body.bodyWidth
size(::players[])-1 > ::players[orig(::new_input)].body.bodyHeight
size(::players[])-1 > ::players[orig(::new_input)].body.color
size(::players[])-1 > ::players[orig(::new_input)].basePosition.col
size(::players[])-1 > ::players[orig(::new_input)].basePosition.row
size(::players[])-1 > ::players[orig(::new_input)].direction
size(::players[])-1 > ::players[orig(::new_input)].stepCounter
size(::players[])-1 > player[::input_n].body.type
size(::players[])-1 > player[::input_n].body.visible
size(::players[])-1 > player[::input_n].body.bodyPoints->aspect
size(::players[])-1 > player[::input_n].body.bodySize
size(::players[])-1 > player[::input_n].body.bodyWidth
size(::players[])-1 > player[::input_n].body.bodyHeight
size(::players[])-1 > player[::input_n].body.color
size(::players[])-1 > player[::input_n].basePosition.col
size(::players[])-1 > player[::input_n].basePosition.row
size(::players[])-1 > player[::input_n].impulse[0][0]
size(::players[])-1 > player[::input_n].impulse[1][0]
size(::players[])-1 > player[::input_n].impulse[3][0]
size(::players[])-1 > player[::input_n].impulse[5][0]
size(::players[])-1 > player[::input_n].impulse[7][0]
size(::players[])-1 > player[::input_n].stepCounter
size(::players[])-1 > player[::new_input].body.type
size(::players[])-1 > player[::new_input].body.bodyPoints->aspect
size(::players[])-1 > player[::new_input].body.bodyMapsSize
size(::players[])-1 > player[::new_input].body.bodySize
size(::players[])-1 > player[::new_input].body.bodyWidth
size(::players[])-1 > player[::new_input].body.bodyHeight
size(::players[])-1 > player[::new_input].body.color
size(::players[])-1 > player[::new_input].basePosition.col
size(::players[])-1 > player[::new_input].basePosition.row
size(::players[])-1 > player[::new_input].impulse[1][0]
size(::players[])-1 > player[::new_input].impulse[3][0]
size(::players[])-1 > player[::new_input].impulse[5][0]
size(::players[])-1 > player[::new_input].direction
size(::players[])-1 > player[::new_input].stepCounter
size(::players[])-1 > orig(player[post(::new_input)].basePosition.col)
size(::players[])-1 > player[orig(::new_input)].body.bodyPoints->aspect
size(::players[])-1 > player[orig(::new_input)].body.bodySize
size(::players[])-1 > player[orig(::new_input)].body.bodyWidth
size(::players[])-1 > player[orig(::new_input)].body.bodyHeight
size(::players[])-1 > player[orig(::new_input)].body.color
size(::players[])-1 > player[orig(::new_input)].basePosition.col
size(::players[])-1 > player[orig(::new_input)].basePosition.row
size(::players[])-1 > player[orig(::new_input)].impulse[1][0]
size(::players[])-1 > player[orig(::new_input)].direction
size(::players[])-1 > player[orig(::new_input)].stepCounter
size(::players[])-1 > orig(player[::new_input].basePosition.col)
size(::players[])-1 > orig(player[::new_input].basePosition.row)
size(player[])-1 > ::players[::input_n].body.bodyPoints->aspect
size(player[])-1 > ::players[::new_input].body.bodyPoints->aspect
size(player[])-1 > ::players[orig(::new_input)].body.bodyPoints->aspect
size(player[])-1 > ::players[::new_input].body.bodyMapsSize
size(player[])-1 > ::players[orig(::new_input)].body.bodyMapsSize
size(player[])-1 > ::players[::new_input].body.bodySize
size(player[])-1 > ::players[orig(::new_input)].body.bodySize
size(player[])-1 > ::players[::new_input].body.bodyWidth
size(player[])-1 > ::players[orig(::new_input)].body.bodyWidth
size(player[])-1 > ::players[orig(::new_input)].body.bodyHeight
size(player[])-1 > ::players[::new_input].body.color
size(player[])-1 > ::players[orig(::new_input)].body.color
size(player[])-1 > ::players[::new_input].basePosition.col
size(player[])-1 > ::players[orig(::new_input)].basePosition.col
size(player[])-1 > ::players[::input_n].basePosition.row
size(player[])-1 > ::players[orig(::new_input)].basePosition.row
size(player[])-1 > ::players[orig(::new_input)].direction
size(player[])-1 > ::players[::input_n].stepCounter
size(player[])-1 > ::players[orig(::new_input)].stepCounter
size(player[])-1 > player[::input_n].body.type
size(player[])-1 > player[::input_n].body.visible
size(player[])-1 != player[::input_n].body.bodyPoints->aspect
size(player[])-1 > player[::input_n].body.bodySize
size(player[])-1 > player[::input_n].body.bodyWidth
size(player[])-1 > player[::input_n].body.bodyHeight
size(player[])-1 > player[::input_n].body.color
size(player[])-1 > player[::input_n].basePosition.col
size(player[])-1 > player[::input_n].basePosition.row
size(player[])-1 > player[::input_n].impulse[0][0]
size(player[])-1 > player[::input_n].impulse[1][0]
size(player[])-1 > player[::input_n].impulse[3][0]
size(player[])-1 > player[::input_n].impulse[5][0]
size(player[])-1 > player[::input_n].impulse[7][0]
size(player[])-1 > player[::input_n].stepCounter
size(player[])-1 > player[::new_input].body.type
size(player[])-1 > player[::new_input].body.bodyMapsSize
size(player[])-1 > player[::new_input].body.bodySize
size(player[])-1 > player[::new_input].body.bodyWidth
size(player[])-1 > player[::new_input].body.bodyHeight
size(player[])-1 > player[::new_input].body.color
size(player[])-1 > player[::new_input].basePosition.col
size(player[])-1 > player[::new_input].basePosition.row
size(player[])-1 > player[::new_input].impulse[1][0]
size(player[])-1 > player[::new_input].impulse[3][0]
size(player[])-1 > player[::new_input].impulse[5][0]
size(player[])-1 > player[::new_input].direction
size(player[])-1 > player[::new_input].stepCounter
size(player[])-1 > orig(player[post(::new_input)].basePosition.col)
size(player[])-1 > player[orig(::new_input)].body.bodySize
size(player[])-1 > player[orig(::new_input)].body.bodyWidth
size(player[])-1 > player[orig(::new_input)].body.bodyHeight
size(player[])-1 > player[orig(::new_input)].body.color
size(player[])-1 > player[orig(::new_input)].basePosition.col
size(player[])-1 > player[orig(::new_input)].basePosition.row
size(player[])-1 > player[orig(::new_input)].impulse[1][0]
size(player[])-1 > player[orig(::new_input)].direction
size(player[])-1 > player[orig(::new_input)].stepCounter
size(player[])-1 > orig(player[::new_input].basePosition.col)
size(player[])-1 > orig(player[::new_input].basePosition.row)
orig(size(player[])) != player[::input_n].body.bodyPoints->aspect
orig(size(player[])) != player[::new_input].body.bodyPoints->aspect
orig(size(player[])) % player[::new_input].body.bodyMapsSize == 0
orig(size(player[])) != player[orig(::new_input)].body.bodyPoints->aspect
::players[::input_n].body.bodyPoints->aspect <= ::players[orig(::new_input)].body.bodyPoints->aspect
::players[::input_n].body.bodyPoints->aspect > ::players[orig(::new_input)].body.bodyMapsSize
::players[::input_n].body.bodyPoints->aspect > ::players[orig(::new_input)].body.bodySize
::players[::input_n].body.bodyPoints->aspect > ::players[orig(::new_input)].body.bodyWidth
::players[::input_n].body.bodyPoints->aspect > ::players[orig(::new_input)].body.bodyHeight
::players[::input_n].body.bodyPoints->aspect > ::players[orig(::new_input)].body.color
::players[::input_n].body.bodyPoints->aspect != ::players[orig(::new_input)].basePosition.col
::players[::input_n].body.bodyPoints->aspect > ::players[orig(::new_input)].basePosition.row
::players[::input_n].body.bodyPoints->aspect > ::players[orig(::new_input)].direction
::players[::input_n].body.bodyPoints->aspect > ::players[orig(::new_input)].stepCounter
::players[::input_n].body.bodyPoints->aspect > player[::input_n].body.type
::players[::input_n].body.bodyPoints->aspect > player[::input_n].body.visible
::players[::input_n].body.bodyPoints->aspect > player[::input_n].body.bodySize
::players[::input_n].body.bodyPoints->aspect > player[::input_n].body.bodyWidth
::players[::input_n].body.bodyPoints->aspect > player[::input_n].body.bodyHeight
::players[::input_n].body.bodyPoints->aspect > player[::input_n].body.color
::players[::input_n].body.bodyPoints->aspect > player[::input_n].basePosition.col
::players[::input_n].body.bodyPoints->aspect > player[::input_n].basePosition.row
::players[::input_n].body.bodyPoints->aspect > player[::input_n].impulse[0][0]
::players[::input_n].body.bodyPoints->aspect > player[::input_n].impulse[1][0]
::players[::input_n].body.bodyPoints->aspect > player[::input_n].impulse[3][0]
::players[::input_n].body.bodyPoints->aspect > player[::input_n].impulse[5][0]
::players[::input_n].body.bodyPoints->aspect > player[::input_n].impulse[7][0]
::players[::input_n].body.bodyPoints->aspect > player[::input_n].stepCounter
::players[::input_n].body.bodyPoints->aspect > player[::new_input].body.type
::players[::input_n].body.bodyPoints->aspect <= player[::new_input].body.bodyPoints->aspect
::players[::input_n].body.bodyPoints->aspect > player[::new_input].body.bodyMapsSize
::players[::input_n].body.bodyPoints->aspect != player[::new_input].body.bodySize
::players[::input_n].body.bodyPoints->aspect > player[::new_input].body.bodyWidth
::players[::input_n].body.bodyPoints->aspect > player[::new_input].body.bodyHeight
::players[::input_n].body.bodyPoints->aspect > player[::new_input].body.color
::players[::input_n].body.bodyPoints->aspect != player[::new_input].basePosition.col
::players[::input_n].body.bodyPoints->aspect > player[::new_input].basePosition.row
::players[::input_n].body.bodyPoints->aspect > player[::new_input].impulse[1][0]
::players[::input_n].body.bodyPoints->aspect > player[::new_input].impulse[3][0]
::players[::input_n].body.bodyPoints->aspect > player[::new_input].impulse[5][0]
::players[::input_n].body.bodyPoints->aspect > player[::new_input].direction
::players[::input_n].body.bodyPoints->aspect > player[::new_input].stepCounter
::players[::input_n].body.bodyPoints->aspect != orig(player[post(::new_input)].basePosition.col)
::players[::input_n].body.bodyPoints->aspect <= player[orig(::new_input)].body.bodyPoints->aspect
::players[::input_n].body.bodyPoints->aspect != player[orig(::new_input)].body.bodySize
::players[::input_n].body.bodyPoints->aspect > player[orig(::new_input)].body.bodyWidth
::players[::input_n].body.bodyPoints->aspect > player[orig(::new_input)].body.bodyHeight
::players[::input_n].body.bodyPoints->aspect > player[orig(::new_input)].body.color
::players[::input_n].body.bodyPoints->aspect != player[orig(::new_input)].basePosition.col
::players[::input_n].body.bodyPoints->aspect > player[orig(::new_input)].basePosition.row
::players[::input_n].body.bodyPoints->aspect > player[orig(::new_input)].impulse[1][0]
::players[::input_n].body.bodyPoints->aspect > player[orig(::new_input)].direction
::players[::input_n].body.bodyPoints->aspect > player[orig(::new_input)].stepCounter
::players[::input_n].body.bodyPoints->aspect != orig(player[::new_input].basePosition.col)
::players[::input_n].body.bodyPoints->aspect > orig(player[::new_input].basePosition.row)
::players[::new_input].body.bodyPoints->aspect >= ::players[orig(::new_input)].body.bodyPoints->aspect
::players[::new_input].body.bodyPoints->aspect > ::players[orig(::new_input)].body.bodyMapsSize
::players[::new_input].body.bodyPoints->aspect > ::players[orig(::new_input)].body.bodySize
::players[::new_input].body.bodyPoints->aspect > ::players[orig(::new_input)].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > ::players[orig(::new_input)].body.bodyHeight
::players[::new_input].body.bodyPoints->aspect > ::players[orig(::new_input)].body.color
::players[::new_input].body.bodyPoints->aspect > ::players[orig(::new_input)].basePosition.col
::players[::new_input].body.bodyPoints->aspect > ::players[orig(::new_input)].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[orig(::new_input)].direction
::players[::new_input].body.bodyPoints->aspect > ::players[orig(::new_input)].stepCounter
::players[::new_input].body.bodyPoints->aspect > player[::input_n].body.type
::players[::new_input].body.bodyPoints->aspect > player[::input_n].body.visible
::players[::new_input].body.bodyPoints->aspect != player[::input_n].body.bodyPoints->aspect
::players[::new_input].body.bodyPoints->aspect > player[::input_n].body.bodySize
::players[::new_input].body.bodyPoints->aspect > player[::input_n].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > player[::input_n].body.bodyHeight
::players[::new_input].body.bodyPoints->aspect > player[::input_n].body.color
::players[::new_input].body.bodyPoints->aspect > player[::input_n].basePosition.col
::players[::new_input].body.bodyPoints->aspect > player[::input_n].basePosition.row
::players[::new_input].body.bodyPoints->aspect > player[::input_n].impulse[0][0]
::players[::new_input].body.bodyPoints->aspect > player[::input_n].impulse[1][0]
::players[::new_input].body.bodyPoints->aspect > player[::input_n].impulse[3][0]
::players[::new_input].body.bodyPoints->aspect > player[::input_n].impulse[5][0]
::players[::new_input].body.bodyPoints->aspect > player[::input_n].impulse[7][0]
::players[::new_input].body.bodyPoints->aspect > player[::input_n].stepCounter
::players[::new_input].body.bodyPoints->aspect > player[::new_input].body.type
::players[::new_input].body.bodyPoints->aspect > player[::new_input].body.bodyMapsSize
::players[::new_input].body.bodyPoints->aspect > player[::new_input].body.bodySize
::players[::new_input].body.bodyPoints->aspect > player[::new_input].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > player[::new_input].body.bodyHeight
::players[::new_input].body.bodyPoints->aspect > player[::new_input].body.color
::players[::new_input].body.bodyPoints->aspect != player[::new_input].basePosition.col
::players[::new_input].body.bodyPoints->aspect > player[::new_input].basePosition.row
::players[::new_input].body.bodyPoints->aspect > player[::new_input].impulse[1][0]
::players[::new_input].body.bodyPoints->aspect > player[::new_input].impulse[3][0]
::players[::new_input].body.bodyPoints->aspect > player[::new_input].impulse[5][0]
::players[::new_input].body.bodyPoints->aspect > player[::new_input].direction
::players[::new_input].body.bodyPoints->aspect > player[::new_input].stepCounter
::players[::new_input].body.bodyPoints->aspect != orig(player[post(::new_input)].basePosition.col)
::players[::new_input].body.bodyPoints->aspect != player[orig(::new_input)].body.bodyPoints->aspect
::players[::new_input].body.bodyPoints->aspect > player[orig(::new_input)].body.bodySize
::players[::new_input].body.bodyPoints->aspect > player[orig(::new_input)].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > player[orig(::new_input)].body.bodyHeight
::players[::new_input].body.bodyPoints->aspect > player[orig(::new_input)].body.color
::players[::new_input].body.bodyPoints->aspect != player[orig(::new_input)].basePosition.col
::players[::new_input].body.bodyPoints->aspect > player[orig(::new_input)].basePosition.row
::players[::new_input].body.bodyPoints->aspect > player[orig(::new_input)].impulse[1][0]
::players[::new_input].body.bodyPoints->aspect > player[orig(::new_input)].direction
::players[::new_input].body.bodyPoints->aspect > player[orig(::new_input)].stepCounter
::players[::new_input].body.bodyPoints->aspect != orig(player[::new_input].basePosition.col)
::players[::new_input].body.bodyPoints->aspect > orig(player[::new_input].basePosition.row)
::players[orig(::new_input)].body.bodyPoints->aspect > ::players[::new_input].body.bodyMapsSize
::players[orig(::new_input)].body.bodyPoints->aspect > ::players[orig(::new_input)].body.bodyMapsSize
::players[orig(::new_input)].body.bodyPoints->aspect > ::players[::new_input].body.bodySize
::players[orig(::new_input)].body.bodyPoints->aspect > ::players[orig(::new_input)].body.bodySize
::players[orig(::new_input)].body.bodyPoints->aspect > ::players[::new_input].body.bodyWidth
::players[orig(::new_input)].body.bodyPoints->aspect > ::players[orig(::new_input)].body.bodyWidth
::players[orig(::new_input)].body.bodyPoints->aspect > ::players[orig(::new_input)].body.bodyHeight
::players[orig(::new_input)].body.bodyPoints->aspect > ::players[::new_input].body.color
::players[orig(::new_input)].body.bodyPoints->aspect > ::players[orig(::new_input)].body.color
::players[orig(::new_input)].body.bodyPoints->aspect != ::players[::new_input].basePosition.col
::players[orig(::new_input)].body.bodyPoints->aspect > ::players[orig(::new_input)].basePosition.col
::players[orig(::new_input)].body.bodyPoints->aspect > ::players[::input_n].basePosition.row
::players[orig(::new_input)].body.bodyPoints->aspect > ::players[orig(::new_input)].basePosition.row
::players[orig(::new_input)].body.bodyPoints->aspect > ::players[orig(::new_input)].direction
::players[orig(::new_input)].body.bodyPoints->aspect > ::players[::input_n].stepCounter
::players[orig(::new_input)].body.bodyPoints->aspect > ::players[orig(::new_input)].stepCounter
::players[orig(::new_input)].body.bodyPoints->aspect > player[::input_n].body.type
::players[orig(::new_input)].body.bodyPoints->aspect > player[::input_n].body.visible
::players[orig(::new_input)].body.bodyPoints->aspect > player[::input_n].body.bodySize
::players[orig(::new_input)].body.bodyPoints->aspect > player[::input_n].body.bodyWidth
::players[orig(::new_input)].body.bodyPoints->aspect > player[::input_n].body.bodyHeight
::players[orig(::new_input)].body.bodyPoints->aspect > player[::input_n].body.color
::players[orig(::new_input)].body.bodyPoints->aspect > player[::input_n].basePosition.col
::players[orig(::new_input)].body.bodyPoints->aspect > player[::input_n].basePosition.row
::players[orig(::new_input)].body.bodyPoints->aspect > player[::input_n].impulse[0][0]
::players[orig(::new_input)].body.bodyPoints->aspect > player[::input_n].impulse[1][0]
::players[orig(::new_input)].body.bodyPoints->aspect > player[::input_n].impulse[3][0]
::players[orig(::new_input)].body.bodyPoints->aspect > player[::input_n].impulse[5][0]
::players[orig(::new_input)].body.bodyPoints->aspect > player[::input_n].impulse[7][0]
::players[orig(::new_input)].body.bodyPoints->aspect > player[::input_n].stepCounter
::players[orig(::new_input)].body.bodyPoints->aspect > player[::new_input].body.type
::players[orig(::new_input)].body.bodyPoints->aspect != player[::new_input].body.bodyPoints->aspect
::players[orig(::new_input)].body.bodyPoints->aspect > player[::new_input].body.bodyMapsSize
::players[orig(::new_input)].body.bodyPoints->aspect > player[::new_input].body.bodySize
::players[orig(::new_input)].body.bodyPoints->aspect > player[::new_input].body.bodyWidth
::players[orig(::new_input)].body.bodyPoints->aspect > player[::new_input].body.bodyHeight
::players[orig(::new_input)].body.bodyPoints->aspect > player[::new_input].body.color
::players[orig(::new_input)].body.bodyPoints->aspect != player[::new_input].basePosition.col
::players[orig(::new_input)].body.bodyPoints->aspect > player[::new_input].basePosition.row
::players[orig(::new_input)].body.bodyPoints->aspect > player[::new_input].impulse[1][0]
::players[orig(::new_input)].body.bodyPoints->aspect > player[::new_input].impulse[3][0]
::players[orig(::new_input)].body.bodyPoints->aspect > player[::new_input].impulse[5][0]
::players[orig(::new_input)].body.bodyPoints->aspect > player[::new_input].direction
::players[orig(::new_input)].body.bodyPoints->aspect > player[::new_input].stepCounter
::players[orig(::new_input)].body.bodyPoints->aspect != orig(player[post(::new_input)].basePosition.col)
::players[orig(::new_input)].body.bodyPoints->aspect > player[orig(::new_input)].body.bodySize
::players[orig(::new_input)].body.bodyPoints->aspect > player[orig(::new_input)].body.bodyWidth
::players[orig(::new_input)].body.bodyPoints->aspect > player[orig(::new_input)].body.bodyHeight
::players[orig(::new_input)].body.bodyPoints->aspect > player[orig(::new_input)].body.color
::players[orig(::new_input)].body.bodyPoints->aspect != player[orig(::new_input)].basePosition.col
::players[orig(::new_input)].body.bodyPoints->aspect > player[orig(::new_input)].basePosition.row
::players[orig(::new_input)].body.bodyPoints->aspect > player[orig(::new_input)].impulse[1][0]
::players[orig(::new_input)].body.bodyPoints->aspect > player[orig(::new_input)].direction
::players[orig(::new_input)].body.bodyPoints->aspect > player[orig(::new_input)].stepCounter
::players[orig(::new_input)].body.bodyPoints->aspect != orig(player[::new_input].basePosition.col)
::players[orig(::new_input)].body.bodyPoints->aspect > orig(player[::new_input].basePosition.row)
::players[::new_input].body.bodyMapsSize >= ::players[orig(::new_input)].body.bodyMapsSize
::players[::new_input].body.bodyMapsSize != ::players[orig(::new_input)].body.bodySize
::players[::new_input].body.bodyMapsSize != ::players[orig(::new_input)].body.bodyWidth
::players[::new_input].body.bodyMapsSize >= ::players[orig(::new_input)].body.bodyHeight
::players[::new_input].body.bodyMapsSize > ::players[orig(::new_input)].body.color
::players[::new_input].body.bodyMapsSize != ::players[orig(::new_input)].basePosition.col
::players[::new_input].body.bodyMapsSize < ::players[orig(::new_input)].basePosition.row
::players[::new_input].body.bodyMapsSize > ::players[orig(::new_input)].direction
::players[::new_input].body.bodyMapsSize != ::players[orig(::new_input)].stepCounter
::players[::new_input].body.bodyMapsSize > player[::input_n].body.type
::players[::new_input].body.bodyMapsSize > player[::input_n].body.visible
::players[::new_input].body.bodyMapsSize != player[::input_n].body.bodyPoints->aspect
::players[::new_input].body.bodyMapsSize != player[::input_n].body.bodySize
::players[::new_input].body.bodyMapsSize != player[::input_n].body.bodyWidth
::players[::new_input].body.bodyMapsSize >= player[::input_n].body.bodyHeight
::players[::new_input].body.bodyMapsSize != player[::input_n].basePosition.row
::players[::new_input].body.bodyMapsSize > player[::input_n].impulse[0][0]
::players[::new_input].body.bodyMapsSize > player[::input_n].impulse[1][0]
::players[::new_input].body.bodyMapsSize > player[::input_n].impulse[3][0]
::players[::new_input].body.bodyMapsSize > player[::input_n].impulse[5][0]
::players[::new_input].body.bodyMapsSize > player[::input_n].impulse[7][0]
::players[::new_input].body.bodyMapsSize > player[::new_input].body.type
::players[::new_input].body.bodyMapsSize < player[::new_input].body.bodyPoints->aspect
::players[::new_input].body.bodyMapsSize >= player[::new_input].body.bodyMapsSize
::players[::new_input].body.bodyMapsSize != player[::new_input].body.bodySize
::players[::new_input].body.bodyMapsSize != player[::new_input].body.bodyWidth
::players[::new_input].body.bodyMapsSize > player[::new_input].impulse[1][0]
::players[::new_input].body.bodyMapsSize > player[::new_input].impulse[3][0]
::players[::new_input].body.bodyMapsSize > player[::new_input].impulse[5][0]
::players[::new_input].body.bodyMapsSize != player[::new_input].direction
::players[::new_input].body.bodyMapsSize < player[orig(::new_input)].body.bodyPoints->aspect
::players[::new_input].body.bodyMapsSize != player[orig(::new_input)].body.bodySize
::players[::new_input].body.bodyMapsSize != player[orig(::new_input)].body.bodyWidth
::players[::new_input].body.bodyMapsSize > player[orig(::new_input)].impulse[1][0]
::players[::new_input].body.bodyMapsSize != player[orig(::new_input)].direction
::players[::new_input].body.bodyMapsSize != orig(player[::new_input].basePosition.row)
::players[orig(::new_input)].body.bodyMapsSize < ::players[::new_input].body.bodySize
::players[orig(::new_input)].body.bodyMapsSize < ::players[::new_input].body.bodyWidth
::players[orig(::new_input)].body.bodyMapsSize != ::players[orig(::new_input)].body.bodyWidth
::players[orig(::new_input)].body.bodyMapsSize >= ::players[orig(::new_input)].body.bodyHeight
::players[orig(::new_input)].body.bodyMapsSize != ::players[::new_input].body.color
::players[orig(::new_input)].body.bodyMapsSize > ::players[orig(::new_input)].body.color
::players[orig(::new_input)].body.bodyMapsSize < ::players[::new_input].basePosition.col
::players[orig(::new_input)].body.bodyMapsSize != ::players[orig(::new_input)].basePosition.col
::players[orig(::new_input)].body.bodyMapsSize < ::players[::input_n].basePosition.row
::players[orig(::new_input)].body.bodyMapsSize < ::players[orig(::new_input)].basePosition.row
::players[orig(::new_input)].body.bodyMapsSize > ::players[orig(::new_input)].direction
::players[orig(::new_input)].body.bodyMapsSize < ::players[::input_n].stepCounter
::players[orig(::new_input)].body.bodyMapsSize != ::players[orig(::new_input)].stepCounter
::players[orig(::new_input)].body.bodyMapsSize >= player[::input_n].body.type
::players[orig(::new_input)].body.bodyMapsSize >= player[::input_n].body.visible
::players[orig(::new_input)].body.bodyMapsSize != player[::input_n].body.bodyPoints->aspect
::players[orig(::new_input)].body.bodyMapsSize != player[::input_n].body.bodyWidth
::players[orig(::new_input)].body.bodyMapsSize >= player[::input_n].body.bodyHeight
::players[orig(::new_input)].body.bodyMapsSize != player[::input_n].basePosition.row
::players[orig(::new_input)].body.bodyMapsSize >= player[::input_n].impulse[0][0]
::players[orig(::new_input)].body.bodyMapsSize > player[::input_n].impulse[1][0]
::players[orig(::new_input)].body.bodyMapsSize > player[::input_n].impulse[3][0]
::players[orig(::new_input)].body.bodyMapsSize > player[::input_n].impulse[5][0]
::players[orig(::new_input)].body.bodyMapsSize > player[::input_n].impulse[7][0]
::players[orig(::new_input)].body.bodyMapsSize > player[::new_input].body.type
::players[orig(::new_input)].body.bodyMapsSize < player[::new_input].body.bodyPoints->aspect
::players[orig(::new_input)].body.bodyMapsSize != player[::new_input].body.bodyMapsSize
::players[orig(::new_input)].body.bodyMapsSize != player[::new_input].body.bodySize
::players[orig(::new_input)].body.bodyMapsSize != player[::new_input].body.bodyWidth
::players[orig(::new_input)].body.bodyMapsSize >= player[::new_input].impulse[1][0]
::players[orig(::new_input)].body.bodyMapsSize > player[::new_input].impulse[3][0]
::players[orig(::new_input)].body.bodyMapsSize > player[::new_input].impulse[5][0]
::players[orig(::new_input)].body.bodyMapsSize < player[orig(::new_input)].body.bodyPoints->aspect
::players[orig(::new_input)].body.bodyMapsSize != player[orig(::new_input)].body.bodyWidth
::players[orig(::new_input)].body.bodyMapsSize > player[orig(::new_input)].impulse[1][0]
::players[orig(::new_input)].body.bodyMapsSize != player[orig(::new_input)].direction
::players[orig(::new_input)].body.bodyMapsSize != orig(player[::new_input].basePosition.row)
::players[::new_input].body.bodySize >= ::players[orig(::new_input)].body.bodySize
::players[::new_input].body.bodySize > ::players[orig(::new_input)].body.bodyWidth
::players[::new_input].body.bodySize > ::players[orig(::new_input)].body.bodyHeight
::players[::new_input].body.bodySize > ::players[orig(::new_input)].body.color
::players[::new_input].body.bodySize != ::players[orig(::new_input)].basePosition.col
::players[::new_input].body.bodySize > ::players[orig(::new_input)].basePosition.row
::players[::new_input].body.bodySize > ::players[orig(::new_input)].direction
::players[::new_input].body.bodySize > ::players[orig(::new_input)].stepCounter
::players[::new_input].body.bodySize > player[::input_n].body.type
::players[::new_input].body.bodySize > player[::input_n].body.visible
::players[::new_input].body.bodySize != player[::input_n].body.bodyPoints->aspect
::players[::new_input].body.bodySize > player[::input_n].body.bodySize
::players[::new_input].body.bodySize > player[::input_n].body.bodyWidth
::players[::new_input].body.bodySize > player[::input_n].body.bodyHeight
::players[::new_input].body.bodySize > player[::input_n].body.color
::players[::new_input].body.bodySize > player[::input_n].basePosition.col
::players[::new_input].body.bodySize > player[::input_n].basePosition.row
::players[::new_input].body.bodySize > player[::input_n].impulse[0][0]
::players[::new_input].body.bodySize > player[::input_n].impulse[1][0]
::players[::new_input].body.bodySize > player[::input_n].impulse[3][0]
::players[::new_input].body.bodySize > player[::input_n].impulse[5][0]
::players[::new_input].body.bodySize > player[::input_n].impulse[7][0]
::players[::new_input].body.bodySize > player[::input_n].stepCounter
::players[::new_input].body.bodySize > player[::new_input].body.type
::players[::new_input].body.bodySize < player[::new_input].body.bodyPoints->aspect
::players[::new_input].body.bodySize > player[::new_input].body.bodyMapsSize
::players[::new_input].body.bodySize > player[::new_input].body.bodyWidth
::players[::new_input].body.bodySize > player[::new_input].body.bodyHeight
::players[::new_input].body.bodySize > player[::new_input].body.color
::players[::new_input].body.bodySize != player[::new_input].basePosition.col
::players[::new_input].body.bodySize > player[::new_input].basePosition.row
::players[::new_input].body.bodySize > player[::new_input].impulse[1][0]
::players[::new_input].body.bodySize > player[::new_input].impulse[3][0]
::players[::new_input].body.bodySize > player[::new_input].impulse[5][0]
::players[::new_input].body.bodySize > player[::new_input].direction
::players[::new_input].body.bodySize > player[::new_input].stepCounter
::players[::new_input].body.bodySize != orig(player[post(::new_input)].basePosition.col)
::players[::new_input].body.bodySize < player[orig(::new_input)].body.bodyPoints->aspect
::players[::new_input].body.bodySize != player[orig(::new_input)].body.bodySize
::players[::new_input].body.bodySize > player[orig(::new_input)].body.bodyWidth
::players[::new_input].body.bodySize > player[orig(::new_input)].body.bodyHeight
::players[::new_input].body.bodySize > player[orig(::new_input)].body.color
::players[::new_input].body.bodySize != player[orig(::new_input)].basePosition.col
::players[::new_input].body.bodySize > player[orig(::new_input)].basePosition.row
::players[::new_input].body.bodySize > player[orig(::new_input)].impulse[1][0]
::players[::new_input].body.bodySize > player[orig(::new_input)].direction
::players[::new_input].body.bodySize > player[orig(::new_input)].stepCounter
::players[::new_input].body.bodySize != orig(player[::new_input].basePosition.col)
::players[::new_input].body.bodySize > orig(player[::new_input].basePosition.row)
::players[orig(::new_input)].body.bodySize != ::players[::new_input].body.bodyWidth
::players[orig(::new_input)].body.bodySize > ::players[orig(::new_input)].body.bodyWidth
::players[orig(::new_input)].body.bodySize > ::players[orig(::new_input)].body.bodyHeight
::players[orig(::new_input)].body.bodySize != ::players[::new_input].body.color
::players[orig(::new_input)].body.bodySize > ::players[orig(::new_input)].body.color
::players[orig(::new_input)].body.bodySize < ::players[::new_input].basePosition.col
::players[orig(::new_input)].body.bodySize != ::players[orig(::new_input)].basePosition.col
::players[orig(::new_input)].body.bodySize != ::players[::input_n].basePosition.row
::players[orig(::new_input)].body.bodySize != ::players[orig(::new_input)].basePosition.row
::players[orig(::new_input)].body.bodySize > ::players[orig(::new_input)].direction
::players[orig(::new_input)].body.bodySize != ::players[::input_n].stepCounter
::players[orig(::new_input)].body.bodySize != ::players[orig(::new_input)].stepCounter
::players[orig(::new_input)].body.bodySize >= player[::input_n].body.type
::players[orig(::new_input)].body.bodySize >= player[::input_n].body.visible
::players[orig(::new_input)].body.bodySize != player[::input_n].body.bodyPoints->aspect
::players[orig(::new_input)].body.bodySize >= player[::input_n].body.bodySize
::players[orig(::new_input)].body.bodySize > player[::input_n].body.bodyWidth
::players[orig(::new_input)].body.bodySize > player[::input_n].body.bodyHeight
::players[orig(::new_input)].body.bodySize > player[::input_n].body.color
::players[orig(::new_input)].body.bodySize > player[::input_n].basePosition.col
::players[orig(::new_input)].body.bodySize != player[::input_n].basePosition.row
::players[orig(::new_input)].body.bodySize >= player[::input_n].impulse[0][0]
::players[orig(::new_input)].body.bodySize > player[::input_n].impulse[1][0]
::players[orig(::new_input)].body.bodySize > player[::input_n].impulse[3][0]
::players[orig(::new_input)].body.bodySize > player[::input_n].impulse[5][0]
::players[orig(::new_input)].body.bodySize > player[::input_n].impulse[7][0]
::players[orig(::new_input)].body.bodySize != player[::input_n].stepCounter
::players[orig(::new_input)].body.bodySize > player[::new_input].body.type
::players[orig(::new_input)].body.bodySize < player[::new_input].body.bodyPoints->aspect
::players[orig(::new_input)].body.bodySize != player[::new_input].body.bodyMapsSize
::players[orig(::new_input)].body.bodySize != player[::new_input].body.bodySize
::players[orig(::new_input)].body.bodySize != player[::new_input].body.bodyWidth
::players[orig(::new_input)].body.bodySize != player[::new_input].body.bodyHeight
::players[orig(::new_input)].body.bodySize != player[::new_input].body.color
::players[orig(::new_input)].body.bodySize != player[::new_input].basePosition.col
::players[orig(::new_input)].body.bodySize != player[::new_input].basePosition.row
::players[orig(::new_input)].body.bodySize >= player[::new_input].impulse[1][0]
::players[orig(::new_input)].body.bodySize > player[::new_input].impulse[3][0]
::players[orig(::new_input)].body.bodySize > player[::new_input].impulse[5][0]
::players[orig(::new_input)].body.bodySize >= player[::new_input].direction
::players[orig(::new_input)].body.bodySize > player[::new_input].stepCounter
::players[orig(::new_input)].body.bodySize != orig(player[post(::new_input)].basePosition.col)
::players[orig(::new_input)].body.bodySize < player[orig(::new_input)].body.bodyPoints->aspect
::players[orig(::new_input)].body.bodySize > player[orig(::new_input)].body.bodyWidth
::players[orig(::new_input)].body.bodySize > player[orig(::new_input)].body.bodyHeight
::players[orig(::new_input)].body.bodySize > player[orig(::new_input)].body.color
::players[orig(::new_input)].body.bodySize != player[orig(::new_input)].basePosition.col
::players[orig(::new_input)].body.bodySize != player[orig(::new_input)].basePosition.row
::players[orig(::new_input)].body.bodySize > player[orig(::new_input)].impulse[1][0]
::players[orig(::new_input)].body.bodySize > player[orig(::new_input)].direction
::players[orig(::new_input)].body.bodySize != player[orig(::new_input)].stepCounter
::players[orig(::new_input)].body.bodySize != orig(player[::new_input].basePosition.col)
::players[orig(::new_input)].body.bodySize != orig(player[::new_input].basePosition.row)
::players[::new_input].body.bodyWidth >= ::players[orig(::new_input)].body.bodyWidth
::players[::new_input].body.bodyWidth > ::players[orig(::new_input)].body.bodyHeight
::players[::new_input].body.bodyWidth > ::players[orig(::new_input)].body.color
::players[::new_input].body.bodyWidth != ::players[orig(::new_input)].basePosition.col
::players[::new_input].body.bodyWidth < ::players[orig(::new_input)].basePosition.row
::players[::new_input].body.bodyWidth > ::players[orig(::new_input)].direction
::players[::new_input].body.bodyWidth != ::players[orig(::new_input)].stepCounter
::players[::new_input].body.bodyWidth > player[::input_n].body.type
::players[::new_input].body.bodyWidth > player[::input_n].body.visible
::players[::new_input].body.bodyWidth != player[::input_n].body.bodyPoints->aspect
::players[::new_input].body.bodyWidth != player[::input_n].body.bodySize
::players[::new_input].body.bodyWidth >= player[::input_n].body.bodyWidth
::players[::new_input].body.bodyWidth > player[::input_n].body.bodyHeight
::players[::new_input].body.bodyWidth > player[::input_n].body.color
::players[::new_input].body.bodyWidth != player[::input_n].basePosition.row
::players[::new_input].body.bodyWidth > player[::input_n].impulse[0][0]
::players[::new_input].body.bodyWidth > player[::input_n].impulse[1][0]
::players[::new_input].body.bodyWidth > player[::input_n].impulse[3][0]
::players[::new_input].body.bodyWidth > player[::input_n].impulse[5][0]
::players[::new_input].body.bodyWidth > player[::input_n].impulse[7][0]
::players[::new_input].body.bodyWidth > player[::new_input].body.type
::players[::new_input].body.bodyWidth < player[::new_input].body.bodyPoints->aspect
::players[::new_input].body.bodyWidth > player[::new_input].body.bodyMapsSize
::players[::new_input].body.bodyWidth != player[::new_input].body.bodySize
::players[::new_input].body.bodyWidth > player[::new_input].body.bodyHeight
::players[::new_input].body.bodyWidth > player[::new_input].body.color
::players[::new_input].body.bodyWidth > player[::new_input].impulse[1][0]
::players[::new_input].body.bodyWidth > player[::new_input].impulse[3][0]
::players[::new_input].body.bodyWidth > player[::new_input].impulse[5][0]
::players[::new_input].body.bodyWidth > player[::new_input].direction
::players[::new_input].body.bodyWidth >= player[::new_input].stepCounter
::players[::new_input].body.bodyWidth < player[orig(::new_input)].body.bodyPoints->aspect
::players[::new_input].body.bodyWidth != player[orig(::new_input)].body.bodySize
::players[::new_input].body.bodyWidth > player[orig(::new_input)].body.bodyHeight
::players[::new_input].body.bodyWidth > player[orig(::new_input)].body.color
::players[::new_input].body.bodyWidth > player[orig(::new_input)].impulse[1][0]
::players[::new_input].body.bodyWidth > player[orig(::new_input)].direction
::players[::new_input].body.bodyWidth != orig(player[::new_input].basePosition.row)
::players[orig(::new_input)].body.bodyWidth != ::players[::new_input].body.color
::players[orig(::new_input)].body.bodyWidth >= ::players[orig(::new_input)].body.color
::players[orig(::new_input)].body.bodyWidth < ::players[::new_input].basePosition.col
::players[orig(::new_input)].body.bodyWidth <= ::players[orig(::new_input)].basePosition.col
::players[orig(::new_input)].body.bodyWidth < ::players[::input_n].basePosition.row
::players[orig(::new_input)].body.bodyWidth < ::players[orig(::new_input)].basePosition.row
::players[orig(::new_input)].body.bodyWidth >= ::players[orig(::new_input)].direction
::players[orig(::new_input)].body.bodyWidth < ::players[::input_n].stepCounter
::players[orig(::new_input)].body.bodyWidth != ::players[orig(::new_input)].stepCounter
::players[orig(::new_input)].body.bodyWidth != player[::input_n].body.type
::players[orig(::new_input)].body.bodyWidth != player[::input_n].body.visible
::players[orig(::new_input)].body.bodyWidth != player[::input_n].body.bodyPoints->aspect
::players[orig(::new_input)].body.bodyWidth != player[::input_n].body.bodySize
::players[orig(::new_input)].body.bodyWidth >= player[::input_n].body.bodyWidth
::players[orig(::new_input)].body.bodyWidth >= player[::input_n].body.bodyHeight
::players[orig(::new_input)].body.bodyWidth >= player[::input_n].body.color
::players[orig(::new_input)].body.bodyWidth != player[::input_n].basePosition.row
::players[orig(::new_input)].body.bodyWidth != player[::input_n].impulse[0][0]
::players[orig(::new_input)].body.bodyWidth >= player[::input_n].impulse[1][0]
::players[orig(::new_input)].body.bodyWidth >= player[::input_n].impulse[3][0]
::players[orig(::new_input)].body.bodyWidth >= player[::input_n].impulse[5][0]
::players[orig(::new_input)].body.bodyWidth >= player[::input_n].impulse[7][0]
::players[orig(::new_input)].body.bodyWidth >= player[::new_input].body.type
::players[orig(::new_input)].body.bodyWidth < player[::new_input].body.bodyPoints->aspect
::players[orig(::new_input)].body.bodyWidth != player[::new_input].body.bodyMapsSize
::players[orig(::new_input)].body.bodyWidth != player[::new_input].body.bodySize
::players[orig(::new_input)].body.bodyWidth != player[::new_input].body.bodyHeight
::players[orig(::new_input)].body.bodyWidth != player[::new_input].body.color
::players[orig(::new_input)].body.bodyWidth != player[::new_input].impulse[1][0]
::players[orig(::new_input)].body.bodyWidth >= player[::new_input].impulse[3][0]
::players[orig(::new_input)].body.bodyWidth >= player[::new_input].impulse[5][0]
::players[orig(::new_input)].body.bodyWidth != player[::new_input].direction
::players[orig(::new_input)].body.bodyWidth >= player[::new_input].stepCounter
::players[orig(::new_input)].body.bodyWidth < player[orig(::new_input)].body.bodyPoints->aspect
::players[orig(::new_input)].body.bodyWidth != player[orig(::new_input)].body.bodySize
::players[orig(::new_input)].body.bodyWidth >= player[orig(::new_input)].body.bodyHeight
::players[orig(::new_input)].body.bodyWidth >= player[orig(::new_input)].body.color
::players[orig(::new_input)].body.bodyWidth >= player[orig(::new_input)].impulse[1][0]
::players[orig(::new_input)].body.bodyWidth >= player[orig(::new_input)].direction
::players[orig(::new_input)].body.bodyWidth != orig(player[::new_input].basePosition.row)
::players[orig(::new_input)].body.bodyHeight != ::players[::new_input].body.color
::players[orig(::new_input)].body.bodyHeight >= ::players[orig(::new_input)].body.color
::players[orig(::new_input)].body.bodyHeight < ::players[::new_input].basePosition.col
::players[orig(::new_input)].body.bodyHeight <= ::players[orig(::new_input)].basePosition.col
::players[orig(::new_input)].body.bodyHeight < ::players[::input_n].basePosition.row
::players[orig(::new_input)].body.bodyHeight < ::players[orig(::new_input)].basePosition.row
::players[orig(::new_input)].body.bodyHeight >= ::players[orig(::new_input)].direction
::players[orig(::new_input)].body.bodyHeight < ::players[::input_n].stepCounter
::players[orig(::new_input)].body.bodyHeight != ::players[orig(::new_input)].stepCounter
::players[orig(::new_input)].body.bodyHeight != player[::input_n].body.type
::players[orig(::new_input)].body.bodyHeight != player[::input_n].body.visible
::players[orig(::new_input)].body.bodyHeight != player[::input_n].body.bodyPoints->aspect
::players[orig(::new_input)].body.bodyHeight != player[::input_n].body.bodySize
::players[orig(::new_input)].body.bodyHeight >= player[::input_n].body.bodyHeight
::players[orig(::new_input)].body.bodyHeight != player[::input_n].basePosition.row
::players[orig(::new_input)].body.bodyHeight != player[::input_n].impulse[0][0]
::players[orig(::new_input)].body.bodyHeight >= player[::input_n].impulse[1][0]
::players[orig(::new_input)].body.bodyHeight >= player[::input_n].impulse[3][0]
::players[orig(::new_input)].body.bodyHeight >= player[::input_n].impulse[5][0]
::players[orig(::new_input)].body.bodyHeight >= player[::input_n].impulse[7][0]
::players[orig(::new_input)].body.bodyHeight >= player[::new_input].body.type
::players[orig(::new_input)].body.bodyHeight < player[::new_input].body.bodyPoints->aspect
::players[orig(::new_input)].body.bodyHeight != player[::new_input].body.bodyMapsSize
::players[orig(::new_input)].body.bodyHeight != player[::new_input].body.bodySize
::players[orig(::new_input)].body.bodyHeight != player[::new_input].body.bodyWidth
::players[orig(::new_input)].body.bodyHeight != player[::new_input].impulse[1][0]
::players[orig(::new_input)].body.bodyHeight >= player[::new_input].impulse[3][0]
::players[orig(::new_input)].body.bodyHeight >= player[::new_input].impulse[5][0]
::players[orig(::new_input)].body.bodyHeight != player[::new_input].direction
::players[orig(::new_input)].body.bodyHeight < player[orig(::new_input)].body.bodyPoints->aspect
::players[orig(::new_input)].body.bodyHeight != player[orig(::new_input)].body.bodySize
::players[orig(::new_input)].body.bodyHeight >= player[orig(::new_input)].impulse[1][0]
::players[orig(::new_input)].body.bodyHeight != orig(player[::new_input].basePosition.row)
::players[::new_input].body.color >= ::players[orig(::new_input)].body.color
::players[::new_input].body.color != ::players[orig(::new_input)].basePosition.col
::players[::new_input].body.color < ::players[orig(::new_input)].basePosition.row
::players[::new_input].body.color > ::players[orig(::new_input)].direction
::players[::new_input].body.color != ::players[orig(::new_input)].stepCounter
::players[::new_input].body.color > player[::input_n].body.type
::players[::new_input].body.color > player[::input_n].body.visible
::players[::new_input].body.color != player[::input_n].body.bodyPoints->aspect
::players[::new_input].body.color != player[::input_n].body.bodySize
::players[::new_input].body.color != player[::input_n].body.bodyWidth
::players[::new_input].body.color != player[::input_n].body.bodyHeight
::players[::new_input].body.color != player[::input_n].basePosition.col
::players[::new_input].body.color > player[::input_n].impulse[0][0]
::players[::new_input].body.color > player[::input_n].impulse[1][0]
::players[::new_input].body.color > player[::input_n].impulse[3][0]
::players[::new_input].body.color > player[::input_n].impulse[5][0]
::players[::new_input].body.color > player[::input_n].impulse[7][0]
::players[::new_input].body.color != player[::input_n].stepCounter
::players[::new_input].body.color > player[::new_input].body.type
::players[::new_input].body.color < player[::new_input].body.bodyPoints->aspect
::players[::new_input].body.color != player[::new_input].body.bodyMapsSize
::players[::new_input].body.color != player[::new_input].body.bodySize
::players[::new_input].body.color != player[::new_input].body.bodyWidth
::players[::new_input].body.color != player[::new_input].body.bodyHeight
::players[::new_input].body.color <= player[::new_input].basePosition.col
::players[::new_input].body.color > player[::new_input].impulse[1][0]
::players[::new_input].body.color > player[::new_input].impulse[3][0]
::players[::new_input].body.color > player[::new_input].impulse[5][0]
::players[::new_input].body.color != player[::new_input].stepCounter
::players[::new_input].body.color != orig(player[post(::new_input)].basePosition.col)
::players[::new_input].body.color < player[orig(::new_input)].body.bodyPoints->aspect
::players[::new_input].body.color != player[orig(::new_input)].body.bodySize
::players[::new_input].body.color != player[orig(::new_input)].body.bodyWidth
::players[::new_input].body.color != player[orig(::new_input)].body.bodyHeight
::players[::new_input].body.color > player[orig(::new_input)].impulse[1][0]
::players[::new_input].body.color != player[orig(::new_input)].stepCounter
::players[::new_input].body.color != orig(player[::new_input].basePosition.col)
::players[::new_input].body.color != orig(player[::new_input].basePosition.row)
::players[orig(::new_input)].body.color < ::players[::new_input].basePosition.col
::players[orig(::new_input)].body.color < ::players[::input_n].basePosition.row
::players[orig(::new_input)].body.color < ::players[orig(::new_input)].basePosition.row
::players[orig(::new_input)].body.color >= ::players[orig(::new_input)].direction
::players[orig(::new_input)].body.color < ::players[::input_n].stepCounter
::players[orig(::new_input)].body.color != ::players[orig(::new_input)].stepCounter
::players[orig(::new_input)].body.color != player[::input_n].body.type
::players[orig(::new_input)].body.color != player[::input_n].body.visible
::players[orig(::new_input)].body.color != player[::input_n].body.bodyPoints->aspect
::players[orig(::new_input)].body.color != player[::input_n].body.bodySize
::players[orig(::new_input)].body.color != player[::input_n].impulse[0][0]
::players[orig(::new_input)].body.color >= player[::input_n].impulse[1][0]
::players[orig(::new_input)].body.color >= player[::input_n].impulse[3][0]
::players[orig(::new_input)].body.color >= player[::input_n].impulse[5][0]
::players[orig(::new_input)].body.color >= player[::input_n].impulse[7][0]
::players[orig(::new_input)].body.color != player[::input_n].stepCounter
::players[orig(::new_input)].body.color >= player[::new_input].body.type
::players[orig(::new_input)].body.color < player[::new_input].body.bodyPoints->aspect
::players[orig(::new_input)].body.color != player[::new_input].body.bodyMapsSize
::players[orig(::new_input)].body.color != player[::new_input].body.bodySize
::players[orig(::new_input)].body.color != player[::new_input].body.bodyWidth
::players[orig(::new_input)].body.color != player[::new_input].body.bodyHeight
::players[orig(::new_input)].body.color <= player[::new_input].basePosition.col
::players[orig(::new_input)].body.color != player[::new_input].impulse[1][0]
::players[orig(::new_input)].body.color >= player[::new_input].impulse[3][0]
::players[orig(::new_input)].body.color >= player[::new_input].impulse[5][0]
::players[orig(::new_input)].body.color != orig(player[post(::new_input)].basePosition.col)
::players[orig(::new_input)].body.color < player[orig(::new_input)].body.bodyPoints->aspect
::players[orig(::new_input)].body.color != player[orig(::new_input)].body.bodySize
::players[orig(::new_input)].body.color <= player[orig(::new_input)].basePosition.col
::players[orig(::new_input)].body.color >= player[orig(::new_input)].impulse[1][0]
::players[orig(::new_input)].body.color != player[orig(::new_input)].stepCounter
::players[orig(::new_input)].body.color != orig(player[::new_input].basePosition.row)
::players[::new_input].basePosition.col >= ::players[orig(::new_input)].basePosition.col
::players[::new_input].basePosition.col > ::players[orig(::new_input)].basePosition.row
::players[::new_input].basePosition.col > ::players[orig(::new_input)].direction
::players[::new_input].basePosition.col > ::players[orig(::new_input)].stepCounter
::players[::new_input].basePosition.col > player[::input_n].body.type
::players[::new_input].basePosition.col > player[::input_n].body.visible
::players[::new_input].basePosition.col != player[::input_n].body.bodyPoints->aspect
::players[::new_input].basePosition.col > player[::input_n].body.bodySize
::players[::new_input].basePosition.col > player[::input_n].body.bodyWidth
::players[::new_input].basePosition.col > player[::input_n].body.bodyHeight
::players[::new_input].basePosition.col > player[::input_n].body.color
::players[::new_input].basePosition.col > player[::input_n].basePosition.col
::players[::new_input].basePosition.col > player[::input_n].basePosition.row
::players[::new_input].basePosition.col > player[::input_n].impulse[0][0]
::players[::new_input].basePosition.col > player[::input_n].impulse[1][0]
::players[::new_input].basePosition.col > player[::input_n].impulse[3][0]
::players[::new_input].basePosition.col > player[::input_n].impulse[5][0]
::players[::new_input].basePosition.col > player[::input_n].impulse[7][0]
::players[::new_input].basePosition.col > player[::input_n].stepCounter
::players[::new_input].basePosition.col > player[::new_input].body.type
::players[::new_input].basePosition.col != player[::new_input].body.bodyPoints->aspect
::players[::new_input].basePosition.col > player[::new_input].body.bodyMapsSize
::players[::new_input].basePosition.col != player[::new_input].body.bodySize
::players[::new_input].basePosition.col > player[::new_input].body.bodyWidth
::players[::new_input].basePosition.col > player[::new_input].body.bodyHeight
::players[::new_input].basePosition.col > player[::new_input].body.color
::players[::new_input].basePosition.col > player[::new_input].basePosition.row
::players[::new_input].basePosition.col > player[::new_input].impulse[1][0]
::players[::new_input].basePosition.col > player[::new_input].impulse[3][0]
::players[::new_input].basePosition.col > player[::new_input].impulse[5][0]
::players[::new_input].basePosition.col > player[::new_input].direction
::players[::new_input].basePosition.col > player[::new_input].stepCounter
::players[::new_input].basePosition.col != player[orig(::new_input)].body.bodyPoints->aspect
::players[::new_input].basePosition.col != player[orig(::new_input)].body.bodySize
::players[::new_input].basePosition.col > player[orig(::new_input)].body.bodyWidth
::players[::new_input].basePosition.col > player[orig(::new_input)].body.bodyHeight
::players[::new_input].basePosition.col > player[orig(::new_input)].body.color
::players[::new_input].basePosition.col != player[orig(::new_input)].basePosition.col
::players[::new_input].basePosition.col > player[orig(::new_input)].basePosition.row
::players[::new_input].basePosition.col > player[orig(::new_input)].impulse[1][0]
::players[::new_input].basePosition.col > player[orig(::new_input)].direction
::players[::new_input].basePosition.col > player[orig(::new_input)].stepCounter
::players[::new_input].basePosition.col != orig(player[::new_input].basePosition.col)
::players[::new_input].basePosition.col > orig(player[::new_input].basePosition.row)
::players[orig(::new_input)].basePosition.col != ::players[::input_n].basePosition.row
::players[orig(::new_input)].basePosition.col != ::players[orig(::new_input)].basePosition.row
::players[orig(::new_input)].basePosition.col >= ::players[orig(::new_input)].direction
::players[orig(::new_input)].basePosition.col != ::players[::input_n].stepCounter
::players[orig(::new_input)].basePosition.col != ::players[orig(::new_input)].stepCounter
::players[orig(::new_input)].basePosition.col != player[::input_n].body.type
::players[orig(::new_input)].basePosition.col != player[::input_n].body.visible
::players[orig(::new_input)].basePosition.col != player[::input_n].body.bodyPoints->aspect
::players[orig(::new_input)].basePosition.col != player[::input_n].body.bodySize
::players[orig(::new_input)].basePosition.col >= player[::input_n].body.bodyWidth
::players[orig(::new_input)].basePosition.col >= player[::input_n].body.bodyHeight
::players[orig(::new_input)].basePosition.col >= player[::input_n].body.color
::players[orig(::new_input)].basePosition.col >= player[::input_n].basePosition.col
::players[orig(::new_input)].basePosition.col != player[::input_n].basePosition.row
::players[orig(::new_input)].basePosition.col != player[::input_n].impulse[0][0]
::players[orig(::new_input)].basePosition.col >= player[::input_n].impulse[1][0]
::players[orig(::new_input)].basePosition.col >= player[::input_n].impulse[3][0]
::players[orig(::new_input)].basePosition.col >= player[::input_n].impulse[5][0]
::players[orig(::new_input)].basePosition.col >= player[::input_n].impulse[7][0]
::players[orig(::new_input)].basePosition.col != player[::input_n].stepCounter
::players[orig(::new_input)].basePosition.col >= player[::new_input].body.type
::players[orig(::new_input)].basePosition.col != player[::new_input].body.bodyPoints->aspect
::players[orig(::new_input)].basePosition.col != player[::new_input].body.bodyMapsSize
::players[orig(::new_input)].basePosition.col != player[::new_input].body.bodySize
::players[orig(::new_input)].basePosition.col != player[::new_input].body.bodyWidth
::players[orig(::new_input)].basePosition.col != player[::new_input].body.bodyHeight
::players[orig(::new_input)].basePosition.col != player[::new_input].body.color
::players[orig(::new_input)].basePosition.col != player[::new_input].basePosition.col
::players[orig(::new_input)].basePosition.col != player[::new_input].basePosition.row
::players[orig(::new_input)].basePosition.col != player[::new_input].impulse[1][0]
::players[orig(::new_input)].basePosition.col >= player[::new_input].impulse[3][0]
::players[orig(::new_input)].basePosition.col >= player[::new_input].impulse[5][0]
::players[orig(::new_input)].basePosition.col != player[::new_input].direction
::players[orig(::new_input)].basePosition.col >= player[::new_input].stepCounter
::players[orig(::new_input)].basePosition.col != orig(player[post(::new_input)].basePosition.col)
::players[orig(::new_input)].basePosition.col != player[orig(::new_input)].body.bodyPoints->aspect
::players[orig(::new_input)].basePosition.col != player[orig(::new_input)].body.bodySize
::players[orig(::new_input)].basePosition.col >= player[orig(::new_input)].body.bodyWidth
::players[orig(::new_input)].basePosition.col >= player[orig(::new_input)].body.bodyHeight
::players[orig(::new_input)].basePosition.col >= player[orig(::new_input)].body.color
::players[orig(::new_input)].basePosition.col != player[orig(::new_input)].basePosition.row
::players[orig(::new_input)].basePosition.col >= player[orig(::new_input)].impulse[1][0]
::players[orig(::new_input)].basePosition.col >= player[orig(::new_input)].direction
::players[orig(::new_input)].basePosition.col != player[orig(::new_input)].stepCounter
::players[orig(::new_input)].basePosition.col != orig(player[::new_input].basePosition.row)
::players[::input_n].basePosition.row >= ::players[orig(::new_input)].basePosition.row
::players[::input_n].basePosition.row > ::players[orig(::new_input)].direction
::players[::input_n].basePosition.row > ::players[orig(::new_input)].stepCounter
::players[::input_n].basePosition.row > player[::input_n].body.type
::players[::input_n].basePosition.row > player[::input_n].body.visible
::players[::input_n].basePosition.row != player[::input_n].body.bodyPoints->aspect
::players[::input_n].basePosition.row != player[::input_n].body.bodySize
::players[::input_n].basePosition.row > player[::input_n].body.bodyWidth
::players[::input_n].basePosition.row > player[::input_n].body.bodyHeight
::players[::input_n].basePosition.row > player[::input_n].body.color
::players[::input_n].basePosition.row > player[::input_n].impulse[0][0]
::players[::input_n].basePosition.row > player[::input_n].impulse[1][0]
::players[::input_n].basePosition.row > player[::input_n].impulse[3][0]
::players[::input_n].basePosition.row > player[::input_n].impulse[5][0]
::players[::input_n].basePosition.row > player[::input_n].impulse[7][0]
::players[::input_n].basePosition.row > player[::input_n].stepCounter
::players[::input_n].basePosition.row > player[::new_input].body.type
::players[::input_n].basePosition.row < player[::new_input].body.bodyPoints->aspect
::players[::input_n].basePosition.row > player[::new_input].body.bodyMapsSize
::players[::input_n].basePosition.row != player[::new_input].body.bodySize
::players[::input_n].basePosition.row != player[::new_input].body.bodyWidth
::players[::input_n].basePosition.row > player[::new_input].body.bodyHeight
::players[::input_n].basePosition.row > player[::new_input].body.color
::players[::input_n].basePosition.row != player[::new_input].basePosition.col
::players[::input_n].basePosition.row != player[::new_input].basePosition.row
::players[::input_n].basePosition.row > player[::new_input].impulse[1][0]
::players[::input_n].basePosition.row > player[::new_input].impulse[3][0]
::players[::input_n].basePosition.row > player[::new_input].impulse[5][0]
::players[::input_n].basePosition.row > player[::new_input].direction
::players[::input_n].basePosition.row > player[::new_input].stepCounter
::players[::input_n].basePosition.row != orig(player[post(::new_input)].basePosition.col)
::players[::input_n].basePosition.row < player[orig(::new_input)].body.bodyPoints->aspect
::players[::input_n].basePosition.row != player[orig(::new_input)].body.bodySize
::players[::input_n].basePosition.row != player[orig(::new_input)].body.bodyWidth
::players[::input_n].basePosition.row > player[orig(::new_input)].body.bodyHeight
::players[::input_n].basePosition.row > player[orig(::new_input)].body.color
::players[::input_n].basePosition.row != player[orig(::new_input)].basePosition.col
::players[::input_n].basePosition.row > player[orig(::new_input)].impulse[1][0]
::players[::input_n].basePosition.row > player[orig(::new_input)].direction
::players[::input_n].basePosition.row > player[orig(::new_input)].stepCounter
::players[::input_n].basePosition.row != orig(player[::new_input].basePosition.col)
::players[orig(::new_input)].basePosition.row > ::players[orig(::new_input)].direction
::players[orig(::new_input)].basePosition.row >= ::players[::input_n].stepCounter
::players[orig(::new_input)].basePosition.row > ::players[orig(::new_input)].stepCounter
::players[orig(::new_input)].basePosition.row > player[::input_n].body.type
::players[orig(::new_input)].basePosition.row > player[::input_n].body.visible
::players[orig(::new_input)].basePosition.row != player[::input_n].body.bodyPoints->aspect
::players[orig(::new_input)].basePosition.row != player[::input_n].body.bodySize
::players[orig(::new_input)].basePosition.row > player[::input_n].body.bodyWidth
::players[orig(::new_input)].basePosition.row > player[::input_n].body.bodyHeight
::players[orig(::new_input)].basePosition.row > player[::input_n].body.color
::players[orig(::new_input)].basePosition.row != player[::input_n].basePosition.col
::players[orig(::new_input)].basePosition.row > player[::input_n].impulse[0][0]
::players[orig(::new_input)].basePosition.row > player[::input_n].impulse[1][0]
::players[orig(::new_input)].basePosition.row > player[::input_n].impulse[3][0]
::players[orig(::new_input)].basePosition.row > player[::input_n].impulse[5][0]
::players[orig(::new_input)].basePosition.row > player[::input_n].impulse[7][0]
::players[orig(::new_input)].basePosition.row >= player[::input_n].stepCounter
::players[orig(::new_input)].basePosition.row > player[::new_input].body.type
::players[orig(::new_input)].basePosition.row < player[::new_input].body.bodyPoints->aspect
::players[orig(::new_input)].basePosition.row > player[::new_input].body.bodyMapsSize
::players[orig(::new_input)].basePosition.row != player[::new_input].body.bodySize
::players[orig(::new_input)].basePosition.row != player[::new_input].body.bodyWidth
::players[orig(::new_input)].basePosition.row > player[::new_input].body.bodyHeight
::players[orig(::new_input)].basePosition.row > player[::new_input].body.color
::players[orig(::new_input)].basePosition.row != player[::new_input].basePosition.col
::players[orig(::new_input)].basePosition.row != player[::new_input].basePosition.row
::players[orig(::new_input)].basePosition.row > player[::new_input].impulse[1][0]
::players[orig(::new_input)].basePosition.row > player[::new_input].impulse[3][0]
::players[orig(::new_input)].basePosition.row > player[::new_input].impulse[5][0]
::players[orig(::new_input)].basePosition.row > player[::new_input].direction
::players[orig(::new_input)].basePosition.row > player[::new_input].stepCounter
::players[orig(::new_input)].basePosition.row != orig(player[post(::new_input)].basePosition.col)
::players[orig(::new_input)].basePosition.row < player[orig(::new_input)].body.bodyPoints->aspect
::players[orig(::new_input)].basePosition.row != player[orig(::new_input)].body.bodySize
::players[orig(::new_input)].basePosition.row != player[orig(::new_input)].body.bodyWidth
::players[orig(::new_input)].basePosition.row > player[orig(::new_input)].body.bodyHeight
::players[orig(::new_input)].basePosition.row > player[orig(::new_input)].body.color
::players[orig(::new_input)].basePosition.row != player[orig(::new_input)].basePosition.col
::players[orig(::new_input)].basePosition.row > player[orig(::new_input)].impulse[1][0]
::players[orig(::new_input)].basePosition.row > player[orig(::new_input)].direction
::players[orig(::new_input)].basePosition.row > player[orig(::new_input)].stepCounter
::players[orig(::new_input)].basePosition.row != orig(player[::new_input].basePosition.col)
::players[orig(::new_input)].direction < ::players[::input_n].stepCounter
::players[orig(::new_input)].direction != ::players[orig(::new_input)].stepCounter
::players[orig(::new_input)].direction != player[::input_n].body.bodyPoints->aspect
::players[orig(::new_input)].direction != player[::input_n].basePosition.row
::players[orig(::new_input)].direction >= player[::input_n].impulse[1][0]
::players[orig(::new_input)].direction >= player[::input_n].impulse[3][0]
::players[orig(::new_input)].direction >= player[::input_n].impulse[5][0]
::players[orig(::new_input)].direction >= player[::input_n].impulse[7][0]
::players[orig(::new_input)].direction != player[::input_n].stepCounter
::players[orig(::new_input)].direction >= player[::new_input].body.type
::players[orig(::new_input)].direction < player[::new_input].body.bodyPoints->aspect
::players[orig(::new_input)].direction <= player[::new_input].body.bodyMapsSize
::players[orig(::new_input)].direction <= player[::new_input].body.bodySize
::players[orig(::new_input)].direction != player[::new_input].body.bodyWidth
::players[orig(::new_input)].direction != player[::new_input].body.bodyHeight
::players[orig(::new_input)].direction <= player[::new_input].body.color
::players[orig(::new_input)].direction < player[::new_input].basePosition.col
::players[orig(::new_input)].direction < player[::new_input].basePosition.row
::players[orig(::new_input)].direction >= player[::new_input].impulse[3][0]
::players[orig(::new_input)].direction >= player[::new_input].impulse[5][0]
::players[orig(::new_input)].direction <= player[::new_input].direction
::players[orig(::new_input)].direction <= player[::new_input].stepCounter
::players[orig(::new_input)].direction < orig(player[post(::new_input)].basePosition.col)
::players[orig(::new_input)].direction < player[orig(::new_input)].body.bodyPoints->aspect
::players[orig(::new_input)].direction <= player[orig(::new_input)].body.bodySize
::players[orig(::new_input)].direction <= player[orig(::new_input)].body.color
::players[orig(::new_input)].direction <= player[orig(::new_input)].basePosition.col
::players[orig(::new_input)].direction < player[orig(::new_input)].basePosition.row
::players[orig(::new_input)].direction >= player[orig(::new_input)].impulse[1][0]
::players[orig(::new_input)].direction <= player[orig(::new_input)].direction
::players[orig(::new_input)].direction <= player[orig(::new_input)].stepCounter
::players[orig(::new_input)].direction <= orig(player[::new_input].basePosition.col)
::players[orig(::new_input)].direction <= orig(player[::new_input].basePosition.row)
::players[::input_n].stepCounter >= ::players[orig(::new_input)].stepCounter
::players[::input_n].stepCounter > player[::input_n].body.type
::players[::input_n].stepCounter > player[::input_n].body.visible
::players[::input_n].stepCounter != player[::input_n].body.bodyPoints->aspect
::players[::input_n].stepCounter != player[::input_n].body.bodySize
::players[::input_n].stepCounter > player[::input_n].body.bodyWidth
::players[::input_n].stepCounter > player[::input_n].body.bodyHeight
::players[::input_n].stepCounter > player[::input_n].body.color
::players[::input_n].stepCounter != player[::input_n].basePosition.col
::players[::input_n].stepCounter != player[::input_n].basePosition.row
::players[::input_n].stepCounter > player[::input_n].impulse[0][0]
::players[::input_n].stepCounter > player[::input_n].impulse[1][0]
::players[::input_n].stepCounter > player[::input_n].impulse[3][0]
::players[::input_n].stepCounter > player[::input_n].impulse[5][0]
::players[::input_n].stepCounter > player[::input_n].impulse[7][0]
::players[::input_n].stepCounter >= player[::input_n].stepCounter
::players[::input_n].stepCounter > player[::new_input].body.type
::players[::input_n].stepCounter < player[::new_input].body.bodyPoints->aspect
::players[::input_n].stepCounter > player[::new_input].body.bodyMapsSize
::players[::input_n].stepCounter != player[::new_input].body.bodySize
::players[::input_n].stepCounter != player[::new_input].body.bodyWidth
::players[::input_n].stepCounter > player[::new_input].body.bodyHeight
::players[::input_n].stepCounter > player[::new_input].body.color
::players[::input_n].stepCounter != player[::new_input].basePosition.col
::players[::input_n].stepCounter > player[::new_input].impulse[1][0]
::players[::input_n].stepCounter > player[::new_input].impulse[3][0]
::players[::input_n].stepCounter > player[::new_input].impulse[5][0]
::players[::input_n].stepCounter > player[::new_input].direction
::players[::input_n].stepCounter > player[::new_input].stepCounter
::players[::input_n].stepCounter != orig(player[post(::new_input)].basePosition.col)
::players[::input_n].stepCounter < player[orig(::new_input)].body.bodyPoints->aspect
::players[::input_n].stepCounter != player[orig(::new_input)].body.bodySize
::players[::input_n].stepCounter != player[orig(::new_input)].body.bodyWidth
::players[::input_n].stepCounter > player[orig(::new_input)].body.bodyHeight
::players[::input_n].stepCounter > player[orig(::new_input)].body.color
::players[::input_n].stepCounter != player[orig(::new_input)].basePosition.col
::players[::input_n].stepCounter != player[orig(::new_input)].basePosition.row
::players[::input_n].stepCounter > player[orig(::new_input)].impulse[1][0]
::players[::input_n].stepCounter > player[orig(::new_input)].direction
::players[::input_n].stepCounter >= player[orig(::new_input)].stepCounter
::players[::input_n].stepCounter != orig(player[::new_input].basePosition.col)
::players[::input_n].stepCounter != orig(player[::new_input].basePosition.row)
::players[orig(::new_input)].stepCounter <= player[::input_n].body.bodyPoints->aspect
::players[orig(::new_input)].stepCounter <= player[::input_n].basePosition.row
::players[orig(::new_input)].stepCounter <= player[::input_n].stepCounter
::players[orig(::new_input)].stepCounter < player[::new_input].body.bodyPoints->aspect
::players[orig(::new_input)].stepCounter != player[::new_input].body.bodyMapsSize
::players[orig(::new_input)].stepCounter < player[::new_input].body.bodySize
::players[orig(::new_input)].stepCounter != player[::new_input].body.color
::players[orig(::new_input)].stepCounter % player[::new_input].body.color == 0
::players[orig(::new_input)].stepCounter < player[::new_input].basePosition.col
::players[orig(::new_input)].stepCounter % player[::new_input].basePosition.row == 0
::players[orig(::new_input)].stepCounter <= player[::new_input].basePosition.row
::players[orig(::new_input)].stepCounter != player[::new_input].direction
::players[orig(::new_input)].stepCounter % player[::new_input].direction == 0
::players[orig(::new_input)].stepCounter != player[::new_input].stepCounter
::players[orig(::new_input)].stepCounter < orig(player[post(::new_input)].basePosition.col)
::players[orig(::new_input)].stepCounter < player[orig(::new_input)].body.bodyPoints->aspect
::players[orig(::new_input)].stepCounter != player[orig(::new_input)].body.bodySize
::players[orig(::new_input)].stepCounter % player[orig(::new_input)].body.bodySize == 0
::players[orig(::new_input)].stepCounter != player[orig(::new_input)].body.color
::players[orig(::new_input)].stepCounter != player[orig(::new_input)].basePosition.col
::players[orig(::new_input)].stepCounter < player[orig(::new_input)].basePosition.row
::players[orig(::new_input)].stepCounter != player[orig(::new_input)].direction
::players[orig(::new_input)].stepCounter % player[orig(::new_input)].stepCounter == 0
::players[orig(::new_input)].stepCounter <= player[orig(::new_input)].stepCounter
::players[orig(::new_input)].stepCounter != orig(player[::new_input].basePosition.col)
::players[orig(::new_input)].stepCounter < orig(player[::new_input].basePosition.row)
player[::input_n].body.type >= player[::input_n].impulse[1][0]
player[::input_n].body.type >= player[::input_n].impulse[5][0]
player[::input_n].body.type >= player[::new_input].body.type
player[::input_n].body.type < player[::new_input].body.bodyPoints->aspect
player[::input_n].body.type <= player[::new_input].body.bodyMapsSize
player[::input_n].body.type <= player[::new_input].body.bodySize
player[::input_n].body.type != player[::new_input].body.bodyWidth
player[::input_n].body.type != player[::new_input].body.bodyHeight
player[::input_n].body.type <= player[::new_input].body.color
player[::input_n].body.type < player[::new_input].basePosition.col
player[::input_n].body.type < player[::new_input].basePosition.row
player[::input_n].body.type >= player[::new_input].impulse[3][0]
player[::input_n].body.type <= player[::new_input].direction
player[::input_n].body.type < orig(player[post(::new_input)].basePosition.col)
player[::input_n].body.type < player[orig(::new_input)].body.bodyPoints->aspect
player[::input_n].body.type % player[orig(::new_input)].body.bodySize == 0
player[::input_n].body.type != player[orig(::new_input)].body.bodyWidth
player[::input_n].body.type != player[orig(::new_input)].body.bodyHeight
player[::input_n].body.type != player[orig(::new_input)].basePosition.col
player[::input_n].body.type < player[orig(::new_input)].basePosition.row
player[::input_n].body.type != orig(player[::new_input].basePosition.col)
player[::input_n].body.type <= orig(player[::new_input].basePosition.row)
player[::input_n].body.visible >= player[::input_n].impulse[1][0]
player[::input_n].body.visible <= player[::input_n].stepCounter
player[::input_n].body.visible >= player[::new_input].body.type
player[::input_n].body.visible < player[::new_input].body.bodyPoints->aspect
player[::input_n].body.visible <= player[::new_input].body.bodyMapsSize
player[::input_n].body.visible <= player[::new_input].body.bodySize
player[::input_n].body.visible != player[::new_input].body.bodyWidth
player[::input_n].body.visible != player[::new_input].body.bodyHeight
player[::input_n].body.visible <= player[::new_input].body.color
player[::input_n].body.visible < player[::new_input].basePosition.col
player[::input_n].body.visible < player[::new_input].basePosition.row
player[::input_n].body.visible >= player[::new_input].impulse[1][0]
player[::input_n].body.visible >= player[::new_input].impulse[3][0]
player[::input_n].body.visible <= player[::new_input].direction
player[::input_n].body.visible < orig(player[post(::new_input)].basePosition.col)
player[::input_n].body.visible < player[orig(::new_input)].body.bodyPoints->aspect
player[::input_n].body.visible <= player[orig(::new_input)].body.bodySize
player[::input_n].body.visible != player[orig(::new_input)].body.bodyWidth
player[::input_n].body.visible != player[orig(::new_input)].body.bodyHeight
player[::input_n].body.visible != player[orig(::new_input)].basePosition.col
player[::input_n].body.visible < player[orig(::new_input)].basePosition.row
player[::input_n].body.visible >= player[orig(::new_input)].impulse[1][0]
player[::input_n].body.visible <= player[orig(::new_input)].stepCounter
player[::input_n].body.visible != orig(player[::new_input].basePosition.col)
player[::input_n].body.visible <= orig(player[::new_input].basePosition.row)
player[::input_n].body.bodyPoints->aspect >= player[::new_input].body.type
player[::input_n].body.bodyPoints->aspect != player[::new_input].body.bodyMapsSize
player[::input_n].body.bodyPoints->aspect != player[::new_input].body.bodySize
player[::input_n].body.bodyPoints->aspect != player[::new_input].body.bodyWidth
player[::input_n].body.bodyPoints->aspect != player[::new_input].body.bodyHeight
player[::input_n].body.bodyPoints->aspect != player[::new_input].body.color
player[::input_n].body.bodyPoints->aspect != player[::new_input].basePosition.col
player[::input_n].body.bodyPoints->aspect != player[::new_input].basePosition.row
player[::input_n].body.bodyPoints->aspect >= player[::new_input].impulse[1][0]
player[::input_n].body.bodyPoints->aspect >= player[::new_input].impulse[3][0]
player[::input_n].body.bodyPoints->aspect != player[::new_input].impulse[5][0]
player[::input_n].body.bodyPoints->aspect != player[::new_input].direction
player[::input_n].body.bodyPoints->aspect != player[::new_input].stepCounter
player[::input_n].body.bodyPoints->aspect != orig(player[post(::new_input)].basePosition.col)
player[::input_n].body.bodyPoints->aspect != player[orig(::new_input)].body.bodySize
player[::input_n].body.bodyPoints->aspect != player[orig(::new_input)].body.bodyWidth
player[::input_n].body.bodyPoints->aspect != player[orig(::new_input)].body.bodyHeight
player[::input_n].body.bodyPoints->aspect != player[orig(::new_input)].body.color
player[::input_n].body.bodyPoints->aspect != player[orig(::new_input)].basePosition.col
player[::input_n].body.bodyPoints->aspect != player[orig(::new_input)].basePosition.row
player[::input_n].body.bodyPoints->aspect >= player[orig(::new_input)].impulse[1][0]
player[::input_n].body.bodyPoints->aspect != player[orig(::new_input)].direction
player[::input_n].body.bodyPoints->aspect != player[orig(::new_input)].stepCounter
player[::input_n].body.bodyPoints->aspect != orig(player[::new_input].basePosition.col)
player[::input_n].body.bodyPoints->aspect != orig(player[::new_input].basePosition.row)
player[::input_n].body.bodySize >= player[::new_input].body.type
player[::input_n].body.bodySize < player[::new_input].body.bodyPoints->aspect
player[::input_n].body.bodySize <= player[::new_input].body.bodySize
player[::input_n].body.bodySize != player[::new_input].body.bodyWidth
player[::input_n].body.bodySize != player[::new_input].body.bodyHeight
player[::input_n].body.bodySize != player[::new_input].basePosition.col
player[::input_n].body.bodySize != player[::new_input].basePosition.row
player[::input_n].body.bodySize >= player[::new_input].impulse[1][0]
player[::input_n].body.bodySize >= player[::new_input].impulse[3][0]
player[::input_n].body.bodySize != orig(player[post(::new_input)].basePosition.col)
player[::input_n].body.bodySize < player[orig(::new_input)].body.bodyPoints->aspect
player[::input_n].body.bodySize <= player[orig(::new_input)].body.bodySize
player[::input_n].body.bodySize != player[orig(::new_input)].body.bodyWidth
player[::input_n].body.bodySize != player[orig(::new_input)].body.bodyHeight
player[::input_n].body.bodySize != player[orig(::new_input)].basePosition.col
player[::input_n].body.bodySize != player[orig(::new_input)].basePosition.row
player[::input_n].body.bodySize >= player[orig(::new_input)].impulse[1][0]
player[::input_n].body.bodySize != orig(player[::new_input].basePosition.col)
player[::input_n].body.bodyWidth <= player[::input_n].basePosition.col
player[::input_n].body.bodyWidth <= player[::input_n].stepCounter
player[::input_n].body.bodyWidth < player[::new_input].body.bodyPoints->aspect
player[::input_n].body.bodyWidth != player[::new_input].body.bodyMapsSize
player[::input_n].body.bodyWidth < player[::new_input].body.bodySize
player[::input_n].body.bodyWidth <= player[::new_input].body.bodyWidth
player[::input_n].body.bodyWidth != player[::new_input].body.color
player[::input_n].body.bodyWidth % player[::new_input].body.color == 0
player[::input_n].body.bodyWidth != player[::new_input].basePosition.col
player[::input_n].body.bodyWidth % player[::new_input].basePosition.col == 0
player[::input_n].body.bodyWidth != player[::new_input].basePosition.row
player[::input_n].body.bodyWidth % player[::new_input].basePosition.row == 0
player[::input_n].body.bodyWidth != player[::new_input].direction
player[::input_n].body.bodyWidth % player[::new_input].direction == 0
player[::input_n].body.bodyWidth != orig(player[post(::new_input)].basePosition.col)
player[::input_n].body.bodyWidth % orig(player[post(::new_input)].basePosition.col) == 0
player[::input_n].body.bodyWidth < player[orig(::new_input)].body.bodyPoints->aspect
player[::input_n].body.bodyWidth < player[orig(::new_input)].body.bodySize
player[::input_n].body.bodyWidth <= player[orig(::new_input)].body.bodyWidth
player[::input_n].body.bodyWidth != player[orig(::new_input)].basePosition.row
player[::input_n].body.bodyWidth % player[orig(::new_input)].basePosition.row == 0
player[::input_n].body.bodyWidth != player[orig(::new_input)].stepCounter
player[::input_n].body.bodyWidth % player[orig(::new_input)].stepCounter == 0
player[::input_n].body.bodyWidth != orig(player[::new_input].basePosition.row)
player[::input_n].body.bodyHeight <= player[::input_n].basePosition.col
player[::input_n].body.bodyHeight <= player[::input_n].stepCounter
player[::input_n].body.bodyHeight < player[::new_input].body.bodyPoints->aspect
player[::input_n].body.bodyHeight != player[::new_input].body.bodyMapsSize
player[::input_n].body.bodyHeight < player[::new_input].body.bodySize
player[::input_n].body.bodyHeight <= player[::new_input].body.bodyWidth
player[::input_n].body.bodyHeight <= player[::new_input].body.bodyHeight
player[::input_n].body.bodyHeight != player[::new_input].body.color
player[::input_n].body.bodyHeight % player[::new_input].body.color == 0
player[::input_n].body.bodyHeight % player[::new_input].basePosition.col == 0
player[::input_n].body.bodyHeight <= player[::new_input].basePosition.col
player[::input_n].body.bodyHeight % player[::new_input].basePosition.row == 0
player[::input_n].body.bodyHeight <= player[::new_input].basePosition.row
player[::input_n].body.bodyHeight != player[::new_input].direction
player[::input_n].body.bodyHeight % player[::new_input].direction == 0
player[::input_n].body.bodyHeight <= player[::new_input].stepCounter
player[::input_n].body.bodyHeight % orig(player[post(::new_input)].basePosition.col) == 0
player[::input_n].body.bodyHeight <= orig(player[post(::new_input)].basePosition.col)
player[::input_n].body.bodyHeight < player[orig(::new_input)].body.bodyPoints->aspect
player[::input_n].body.bodyHeight < player[orig(::new_input)].body.bodySize
player[::input_n].body.bodyHeight <= player[orig(::new_input)].body.bodyWidth
player[::input_n].body.bodyHeight <= player[orig(::new_input)].body.bodyHeight
player[::input_n].body.bodyHeight <= player[orig(::new_input)].basePosition.col
player[::input_n].body.bodyHeight % player[orig(::new_input)].basePosition.row == 0
player[::input_n].body.bodyHeight <= player[orig(::new_input)].basePosition.row
player[::input_n].body.bodyHeight % player[orig(::new_input)].stepCounter == 0
player[::input_n].body.bodyHeight <= player[orig(::new_input)].stepCounter
player[::input_n].body.bodyHeight <= orig(player[::new_input].basePosition.col)
player[::input_n].body.bodyHeight < orig(player[::new_input].basePosition.row)
player[::input_n].body.color >= player[::input_n].impulse[1][0]
player[::input_n].body.color <= player[::input_n].stepCounter
player[::input_n].body.color < player[::new_input].body.bodyPoints->aspect
player[::input_n].body.color != player[::new_input].body.bodyMapsSize
player[::input_n].body.color % player[::new_input].body.bodyMapsSize == 0
player[::input_n].body.color != player[::new_input].body.bodySize
player[::input_n].body.color % player[::new_input].body.bodySize == 0
player[::input_n].body.color != player[::new_input].body.color
player[::input_n].body.color <= player[::new_input].basePosition.col
player[::input_n].body.color != player[::new_input].basePosition.row
player[::input_n].body.color >= player[::new_input].impulse[3][0]
player[::input_n].body.color <= orig(player[post(::new_input)].basePosition.col)
player[::input_n].body.color < player[orig(::new_input)].body.bodyPoints->aspect
player[::input_n].body.color != player[orig(::new_input)].body.bodySize
player[::input_n].body.color % player[orig(::new_input)].body.bodySize == 0
player[::input_n].body.color <= player[orig(::new_input)].basePosition.col
player[::input_n].body.color != player[orig(::new_input)].basePosition.row
player[::input_n].body.color <= orig(player[::new_input].basePosition.col)
player[::input_n].body.color != orig(player[::new_input].basePosition.row)
player[::input_n].basePosition.col >= player[::input_n].impulse[1][0]
player[::input_n].basePosition.col < player[::new_input].body.bodyPoints->aspect
player[::input_n].basePosition.col != player[::new_input].body.bodyMapsSize
player[::input_n].basePosition.col % player[::new_input].body.bodyMapsSize == 0
player[::input_n].basePosition.col != player[::new_input].body.bodySize
player[::input_n].basePosition.col != player[::new_input].body.color
player[::input_n].basePosition.col != player[::new_input].basePosition.col
player[::input_n].basePosition.col != player[::new_input].basePosition.row
player[::input_n].basePosition.col >= player[::new_input].impulse[3][0]
player[::input_n].basePosition.col != player[::new_input].direction
player[::input_n].basePosition.col != orig(player[post(::new_input)].basePosition.col)
player[::input_n].basePosition.col < player[orig(::new_input)].body.bodyPoints->aspect
player[::input_n].basePosition.col != player[orig(::new_input)].body.bodySize
player[::input_n].basePosition.col != player[orig(::new_input)].basePosition.row
player[::input_n].basePosition.col != player[orig(::new_input)].stepCounter
player[::input_n].basePosition.col != orig(player[::new_input].basePosition.row)
player[::input_n].basePosition.row < player[::new_input].body.bodyPoints->aspect
player[::input_n].basePosition.row != player[::new_input].body.bodyMapsSize
player[::input_n].basePosition.row != player[::new_input].body.bodySize
player[::input_n].basePosition.row != player[::new_input].basePosition.col
player[::input_n].basePosition.row >= player[::new_input].impulse[3][0]
player[::input_n].basePosition.row != player[::new_input].direction
player[::input_n].basePosition.row != player[::new_input].stepCounter
player[::input_n].basePosition.row != orig(player[post(::new_input)].basePosition.col)
player[::input_n].basePosition.row < player[orig(::new_input)].body.bodyPoints->aspect
player[::input_n].basePosition.row != player[orig(::new_input)].body.bodySize
player[::input_n].basePosition.row % player[orig(::new_input)].body.bodySize == 0
player[::input_n].basePosition.row != player[orig(::new_input)].basePosition.col
player[::input_n].basePosition.row != player[orig(::new_input)].direction
player[::input_n].basePosition.row != player[orig(::new_input)].stepCounter
player[::input_n].basePosition.row != orig(player[::new_input].basePosition.col)
player[::input_n].impulse[0][0] < player[::new_input].body.bodyPoints->aspect
player[::input_n].impulse[0][0] <= player[::new_input].body.bodyMapsSize
player[::input_n].impulse[0][0] <= player[::new_input].body.bodySize
player[::input_n].impulse[0][0] < player[::new_input].body.color
player[::input_n].impulse[0][0] < player[::new_input].basePosition.col
player[::input_n].impulse[0][0] < player[::new_input].basePosition.row
player[::input_n].impulse[0][0] <= player[::new_input].impulse[1][0]
player[::input_n].impulse[0][0] % player[::new_input].direction == 0
player[::input_n].impulse[0][0] <= player[::new_input].direction
player[::input_n].impulse[0][0] != player[::new_input].stepCounter
player[::input_n].impulse[0][0] < orig(player[post(::new_input)].basePosition.col)
player[::input_n].impulse[0][0] < player[orig(::new_input)].body.bodyPoints->aspect
player[::input_n].impulse[0][0] % player[orig(::new_input)].body.bodySize == 0
player[::input_n].impulse[0][0] <= player[orig(::new_input)].body.bodySize
player[::input_n].impulse[0][0] != player[orig(::new_input)].body.color
player[::input_n].impulse[0][0] != player[orig(::new_input)].basePosition.col
player[::input_n].impulse[0][0] < player[orig(::new_input)].basePosition.row
player[::input_n].impulse[0][0] < player[orig(::new_input)].stepCounter
player[::input_n].impulse[0][0] != orig(player[::new_input].basePosition.col)
player[::input_n].impulse[0][0] < orig(player[::new_input].basePosition.row)
player[::input_n].impulse[1][0] <= player[::input_n].stepCounter
player[::input_n].impulse[1][0] <= player[::new_input].body.type
player[::input_n].impulse[1][0] < player[::new_input].body.bodyPoints->aspect
player[::input_n].impulse[1][0] <= player[::new_input].body.bodyMapsSize
player[::input_n].impulse[1][0] % player[::new_input].body.bodySize == 0
player[::input_n].impulse[1][0] <= player[::new_input].body.bodySize
player[::input_n].impulse[1][0] < player[::new_input].body.color
player[::input_n].impulse[1][0] < player[::new_input].basePosition.col
player[::input_n].impulse[1][0] < player[::new_input].basePosition.row
player[::input_n].impulse[1][0] <= player[::new_input].impulse[3][0]
player[::input_n].impulse[1][0] < player[::new_input].direction
player[::input_n].impulse[1][0] <= player[::new_input].stepCounter
player[::input_n].impulse[1][0] < orig(player[post(::new_input)].basePosition.col)
player[::input_n].impulse[1][0] < player[orig(::new_input)].body.bodyPoints->aspect
player[::input_n].impulse[1][0] % player[orig(::new_input)].body.bodySize == 0
player[::input_n].impulse[1][0] <= player[orig(::new_input)].body.bodySize
player[::input_n].impulse[1][0] <= player[orig(::new_input)].body.color
player[::input_n].impulse[1][0] <= player[orig(::new_input)].basePosition.col
player[::input_n].impulse[1][0] < player[orig(::new_input)].basePosition.row
player[::input_n].impulse[1][0] <= player[orig(::new_input)].direction
player[::input_n].impulse[1][0] < player[orig(::new_input)].stepCounter
player[::input_n].impulse[1][0] <= orig(player[::new_input].basePosition.col)
player[::input_n].impulse[1][0] < orig(player[::new_input].basePosition.row)
player[::input_n].impulse[3][0] >= player[::input_n].impulse[7][0]
player[::input_n].impulse[3][0] < player[::new_input].body.bodyPoints->aspect
player[::input_n].impulse[3][0] <= player[::new_input].body.bodyMapsSize
player[::input_n].impulse[3][0] <= player[::new_input].body.bodySize
player[::input_n].impulse[3][0] <= player[::new_input].body.color
player[::input_n].impulse[3][0] < player[::new_input].basePosition.col
player[::input_n].impulse[3][0] < player[::new_input].basePosition.row
player[::input_n].impulse[3][0] <= player[::new_input].direction
player[::input_n].impulse[3][0] <= player[::new_input].stepCounter
player[::input_n].impulse[3][0] < orig(player[post(::new_input)].basePosition.col)
player[::input_n].impulse[3][0] < player[orig(::new_input)].body.bodyPoints->aspect
player[::input_n].impulse[3][0] <= player[orig(::new_input)].body.bodySize
player[::input_n].impulse[3][0] <= player[orig(::new_input)].body.color
player[::input_n].impulse[3][0] <= player[orig(::new_input)].basePosition.col
player[::input_n].impulse[3][0] < player[orig(::new_input)].basePosition.row
player[::input_n].impulse[3][0] <= player[orig(::new_input)].direction
player[::input_n].impulse[3][0] < player[orig(::new_input)].stepCounter
player[::input_n].impulse[3][0] <= orig(player[::new_input].basePosition.col)
player[::input_n].impulse[3][0] < orig(player[::new_input].basePosition.row)
player[::input_n].impulse[5][0] <= player[::new_input].body.type
player[::input_n].impulse[5][0] < player[::new_input].body.bodyPoints->aspect
player[::input_n].impulse[5][0] <= player[::new_input].body.bodyMapsSize
player[::input_n].impulse[5][0] % player[::new_input].body.bodySize == 0
player[::input_n].impulse[5][0] <= player[::new_input].body.bodySize
player[::input_n].impulse[5][0] < player[::new_input].body.color
player[::input_n].impulse[5][0] < player[::new_input].basePosition.col
player[::input_n].impulse[5][0] < player[::new_input].basePosition.row
player[::input_n].impulse[5][0] <= player[::new_input].impulse[5][0]
player[::input_n].impulse[5][0] < player[::new_input].direction
player[::input_n].impulse[5][0] <= player[::new_input].stepCounter
player[::input_n].impulse[5][0] < orig(player[post(::new_input)].basePosition.col)
player[::input_n].impulse[5][0] < player[orig(::new_input)].body.bodyPoints->aspect
player[::input_n].impulse[5][0] % player[orig(::new_input)].body.bodySize == 0
player[::input_n].impulse[5][0] <= player[orig(::new_input)].body.bodySize
player[::input_n].impulse[5][0] <= player[orig(::new_input)].body.color
player[::input_n].impulse[5][0] <= player[orig(::new_input)].basePosition.col
player[::input_n].impulse[5][0] < player[orig(::new_input)].basePosition.row
player[::input_n].impulse[5][0] <= player[orig(::new_input)].direction
player[::input_n].impulse[5][0] % player[orig(::new_input)].stepCounter == 0
player[::input_n].impulse[5][0] <= player[orig(::new_input)].stepCounter
player[::input_n].impulse[5][0] <= orig(player[::new_input].basePosition.col)
player[::input_n].impulse[5][0] % orig(player[::new_input].basePosition.row) == 0
player[::input_n].impulse[5][0] <= orig(player[::new_input].basePosition.row)
player[::input_n].impulse[7][0] < player[::new_input].body.bodyPoints->aspect
player[::input_n].impulse[7][0] <= player[::new_input].body.bodyMapsSize
player[::input_n].impulse[7][0] < player[::new_input].body.bodySize
player[::input_n].impulse[7][0] <= player[::new_input].body.bodyWidth
player[::input_n].impulse[7][0] <= player[::new_input].body.bodyHeight
player[::input_n].impulse[7][0] < player[::new_input].body.color
player[::input_n].impulse[7][0] < player[::new_input].basePosition.col
player[::input_n].impulse[7][0] < player[::new_input].basePosition.row
player[::input_n].impulse[7][0] <= player[::new_input].impulse[1][0]
player[::input_n].impulse[7][0] % player[::new_input].direction == 0
player[::input_n].impulse[7][0] <= player[::new_input].direction
player[::input_n].impulse[7][0] <= player[::new_input].stepCounter
player[::input_n].impulse[7][0] < orig(player[post(::new_input)].basePosition.col)
player[::input_n].impulse[7][0] < player[orig(::new_input)].body.bodyPoints->aspect
player[::input_n].impulse[7][0] < player[orig(::new_input)].body.bodySize
player[::input_n].impulse[7][0] <= player[orig(::new_input)].body.bodyWidth
player[::input_n].impulse[7][0] <= player[orig(::new_input)].body.bodyHeight
player[::input_n].impulse[7][0] <= player[orig(::new_input)].body.color
player[::input_n].impulse[7][0] <= player[orig(::new_input)].basePosition.col
player[::input_n].impulse[7][0] < player[orig(::new_input)].basePosition.row
player[::input_n].impulse[7][0] <= player[orig(::new_input)].impulse[1][0]
player[::input_n].impulse[7][0] <= player[orig(::new_input)].direction
player[::input_n].impulse[7][0] < player[orig(::new_input)].stepCounter
player[::input_n].impulse[7][0] <= orig(player[::new_input].basePosition.col)
player[::input_n].impulse[7][0] < orig(player[::new_input].basePosition.row)
player[::input_n].stepCounter >= player[::new_input].body.type
player[::input_n].stepCounter < player[::new_input].body.bodyPoints->aspect
player[::input_n].stepCounter != player[::new_input].body.bodyMapsSize
player[::input_n].stepCounter != player[::new_input].body.bodySize
player[::input_n].stepCounter != player[::new_input].body.bodyWidth
player[::input_n].stepCounter != player[::new_input].body.bodyHeight
player[::input_n].stepCounter != player[::new_input].body.color
player[::input_n].stepCounter != player[::new_input].basePosition.col
player[::input_n].stepCounter >= player[::new_input].impulse[1][0]
player[::input_n].stepCounter >= player[::new_input].impulse[3][0]
player[::input_n].stepCounter != player[::new_input].impulse[5][0]
player[::input_n].stepCounter != player[::new_input].direction
player[::input_n].stepCounter < player[orig(::new_input)].body.bodyPoints->aspect
player[::input_n].stepCounter != player[orig(::new_input)].body.bodySize
player[::input_n].stepCounter != player[orig(::new_input)].body.bodyWidth
player[::input_n].stepCounter != player[orig(::new_input)].body.bodyHeight
player[::input_n].stepCounter != player[orig(::new_input)].body.color
player[::input_n].stepCounter != player[orig(::new_input)].basePosition.col
player[::input_n].stepCounter != player[orig(::new_input)].basePosition.row
player[::input_n].stepCounter >= player[orig(::new_input)].impulse[1][0]
player[::input_n].stepCounter != player[orig(::new_input)].direction
player[::input_n].stepCounter != orig(player[::new_input].basePosition.row)
player[::new_input].body.type < player[::new_input].body.bodyPoints->aspect
player[::new_input].body.type % player[::new_input].body.bodySize == 0
player[::new_input].body.type != player[::new_input].body.bodyWidth
player[::new_input].body.type != player[::new_input].body.bodyHeight
player[::new_input].body.type <= player[::new_input].body.color
player[::new_input].body.type < player[::new_input].basePosition.col
player[::new_input].body.type < player[::new_input].basePosition.row
player[::new_input].body.type >= player[::new_input].impulse[3][0]
player[::new_input].body.type <= player[::new_input].direction
player[::new_input].body.type < orig(player[post(::new_input)].basePosition.col)
player[::new_input].body.type < player[orig(::new_input)].body.bodyPoints->aspect
player[::new_input].body.type % player[orig(::new_input)].body.bodySize == 0
player[::new_input].body.type <= player[orig(::new_input)].body.bodySize
player[::new_input].body.type <= player[orig(::new_input)].body.color
player[::new_input].body.type <= player[orig(::new_input)].basePosition.col
player[::new_input].body.type < player[orig(::new_input)].basePosition.row
player[::new_input].body.type <= player[orig(::new_input)].direction
player[::new_input].body.type <= player[orig(::new_input)].stepCounter
player[::new_input].body.type <= orig(player[::new_input].basePosition.col)
player[::new_input].body.type <= orig(player[::new_input].basePosition.row)
player[::new_input].body.bodyPoints->aspect > player[::new_input].body.bodyMapsSize
player[::new_input].body.bodyPoints->aspect > player[::new_input].body.bodySize
player[::new_input].body.bodyPoints->aspect > player[::new_input].body.bodyWidth
player[::new_input].body.bodyPoints->aspect > player[::new_input].body.bodyHeight
player[::new_input].body.bodyPoints->aspect > player[::new_input].body.color
player[::new_input].body.bodyPoints->aspect > player[::new_input].basePosition.col
player[::new_input].body.bodyPoints->aspect > player[::new_input].basePosition.row
player[::new_input].body.bodyPoints->aspect > player[::new_input].impulse[1][0]
player[::new_input].body.bodyPoints->aspect > player[::new_input].impulse[3][0]
player[::new_input].body.bodyPoints->aspect > player[::new_input].impulse[5][0]
player[::new_input].body.bodyPoints->aspect > player[::new_input].direction
player[::new_input].body.bodyPoints->aspect > player[::new_input].stepCounter
player[::new_input].body.bodyPoints->aspect > orig(player[post(::new_input)].basePosition.col)
player[::new_input].body.bodyPoints->aspect >= player[orig(::new_input)].body.bodyPoints->aspect
player[::new_input].body.bodyPoints->aspect > player[orig(::new_input)].body.bodySize
player[::new_input].body.bodyPoints->aspect > player[orig(::new_input)].body.bodyWidth
player[::new_input].body.bodyPoints->aspect > player[orig(::new_input)].body.bodyHeight
player[::new_input].body.bodyPoints->aspect > player[orig(::new_input)].body.color
player[::new_input].body.bodyPoints->aspect > player[orig(::new_input)].basePosition.col
player[::new_input].body.bodyPoints->aspect > player[orig(::new_input)].basePosition.row
player[::new_input].body.bodyPoints->aspect > player[orig(::new_input)].impulse[1][0]
player[::new_input].body.bodyPoints->aspect > player[orig(::new_input)].direction
player[::new_input].body.bodyPoints->aspect > player[orig(::new_input)].stepCounter
player[::new_input].body.bodyPoints->aspect > orig(player[::new_input].basePosition.col)
player[::new_input].body.bodyPoints->aspect > orig(player[::new_input].basePosition.row)
player[::new_input].body.bodySize % player[::new_input].body.bodyMapsSize == 0
player[::new_input].body.bodyMapsSize != player[::new_input].body.bodyWidth
player[::new_input].body.bodyWidth % player[::new_input].body.bodyMapsSize == 0
player[::new_input].body.bodyHeight % player[::new_input].body.bodyMapsSize == 0
player[::new_input].basePosition.col % player[::new_input].body.bodyMapsSize == 0
player[::new_input].body.bodyMapsSize < player[::new_input].basePosition.col
player[::new_input].body.bodyMapsSize < player[::new_input].basePosition.row
player[::new_input].body.bodyMapsSize >= player[::new_input].impulse[1][0]
player[::new_input].stepCounter % player[::new_input].body.bodyMapsSize == 0
orig(player[post(::new_input)].basePosition.col) % player[::new_input].body.bodyMapsSize == 0
player[::new_input].body.bodyMapsSize < orig(player[post(::new_input)].basePosition.col)
player[::new_input].body.bodyMapsSize < player[orig(::new_input)].body.bodyPoints->aspect
player[::new_input].body.bodyMapsSize != player[orig(::new_input)].body.bodyWidth
player[orig(::new_input)].body.bodyWidth % player[::new_input].body.bodyMapsSize == 0
player[::new_input].body.bodyMapsSize != player[orig(::new_input)].body.bodyHeight
player[orig(::new_input)].body.bodyHeight % player[::new_input].body.bodyMapsSize == 0
player[orig(::new_input)].body.color % player[::new_input].body.bodyMapsSize == 0
player[::new_input].body.bodyMapsSize != player[orig(::new_input)].basePosition.col
player[orig(::new_input)].basePosition.col % player[::new_input].body.bodyMapsSize == 0
player[::new_input].body.bodyMapsSize < player[orig(::new_input)].basePosition.row
player[::new_input].body.bodyMapsSize >= player[orig(::new_input)].impulse[1][0]
player[orig(::new_input)].direction % player[::new_input].body.bodyMapsSize == 0
player[::new_input].body.bodyMapsSize <= player[orig(::new_input)].stepCounter
orig(player[::new_input].basePosition.col) % player[::new_input].body.bodyMapsSize == 0
player[::new_input].body.bodyMapsSize != orig(player[::new_input].basePosition.col)
player[::new_input].body.bodyMapsSize <= orig(player[::new_input].basePosition.row)
player[::new_input].body.bodySize > player[::new_input].body.bodyWidth
player[::new_input].body.bodySize > player[::new_input].body.bodyHeight
player[::new_input].body.bodySize != player[::new_input].basePosition.col
player[::new_input].body.bodySize != player[::new_input].basePosition.row
player[::new_input].impulse[3][0] % player[::new_input].body.bodySize == 0
player[::new_input].body.bodySize != orig(player[post(::new_input)].basePosition.col)
player[::new_input].body.bodySize < player[orig(::new_input)].body.bodyPoints->aspect
player[::new_input].body.bodySize % player[orig(::new_input)].body.bodySize == 0
player[::new_input].body.bodySize >= player[orig(::new_input)].body.bodySize
player[::new_input].body.bodySize > player[orig(::new_input)].body.bodyWidth
player[::new_input].body.bodySize > player[orig(::new_input)].body.bodyHeight
player[::new_input].body.bodySize != player[orig(::new_input)].basePosition.col
player[::new_input].body.bodySize != player[orig(::new_input)].basePosition.row
player[::new_input].body.bodySize >= player[orig(::new_input)].impulse[1][0]
player[::new_input].body.bodySize != orig(player[::new_input].basePosition.col)
player[::new_input].body.bodyWidth != player[::new_input].body.color
player[::new_input].body.bodyWidth != player[::new_input].basePosition.col
player[::new_input].body.bodyWidth != player[::new_input].direction
player[::new_input].body.bodyWidth != player[::new_input].stepCounter
player[::new_input].body.bodyWidth != orig(player[post(::new_input)].basePosition.col)
player[::new_input].body.bodyWidth < player[orig(::new_input)].body.bodyPoints->aspect
player[::new_input].body.bodyWidth != player[orig(::new_input)].body.bodySize
player[::new_input].body.bodyWidth >= player[orig(::new_input)].body.bodyWidth
player[::new_input].body.bodyWidth >= player[orig(::new_input)].body.bodyHeight
player[::new_input].body.bodyWidth != player[orig(::new_input)].body.color
player[::new_input].body.bodyWidth != player[orig(::new_input)].basePosition.col
player[::new_input].body.bodyWidth != player[orig(::new_input)].direction
player[::new_input].body.bodyWidth != player[orig(::new_input)].stepCounter
player[::new_input].body.bodyWidth != orig(player[::new_input].basePosition.col)
player[::new_input].body.bodyWidth != orig(player[::new_input].basePosition.row)
player[::new_input].body.bodyHeight != player[::new_input].body.color
player[::new_input].body.bodyHeight != player[::new_input].basePosition.col
player[::new_input].body.bodyHeight != player[::new_input].basePosition.row
player[::new_input].body.bodyHeight != player[::new_input].direction
player[::new_input].body.bodyHeight != player[::new_input].stepCounter
player[::new_input].body.bodyHeight != orig(player[post(::new_input)].basePosition.col)
player[::new_input].body.bodyHeight < player[orig(::new_input)].body.bodyPoints->aspect
player[::new_input].body.bodyHeight != player[orig(::new_input)].body.bodySize
player[::new_input].body.bodyHeight >= player[orig(::new_input)].body.bodyHeight
player[::new_input].body.bodyHeight != player[orig(::new_input)].body.color
player[::new_input].body.bodyHeight != player[orig(::new_input)].basePosition.col
player[::new_input].body.bodyHeight != player[orig(::new_input)].basePosition.row
player[::new_input].body.bodyHeight != player[orig(::new_input)].direction
player[::new_input].body.bodyHeight != player[orig(::new_input)].stepCounter
player[::new_input].body.bodyHeight != orig(player[::new_input].basePosition.col)
player[::new_input].body.bodyHeight != orig(player[::new_input].basePosition.row)
player[::new_input].body.color < player[::new_input].basePosition.col
player[::new_input].body.color > player[::new_input].impulse[1][0]
player[::new_input].body.color >= player[::new_input].impulse[3][0]
player[::new_input].body.color > player[::new_input].impulse[5][0]
player[::new_input].body.color != player[::new_input].stepCounter
player[::new_input].body.color < orig(player[post(::new_input)].basePosition.col)
player[::new_input].body.color < player[orig(::new_input)].body.bodyPoints->aspect
player[::new_input].body.color != player[orig(::new_input)].body.bodyWidth
player[::new_input].body.color != player[orig(::new_input)].body.bodyHeight
player[::new_input].body.color >= player[orig(::new_input)].body.color
player[orig(::new_input)].body.color % player[::new_input].body.color == 0
player[::new_input].body.color != player[orig(::new_input)].basePosition.col
player[::new_input].body.color > player[orig(::new_input)].impulse[1][0]
player[::new_input].body.color != player[orig(::new_input)].stepCounter
player[::new_input].body.color != orig(player[::new_input].basePosition.col)
player[::new_input].basePosition.col > player[::new_input].impulse[1][0]
player[::new_input].basePosition.col > player[::new_input].impulse[3][0]
player[::new_input].basePosition.col > player[::new_input].impulse[5][0]
player[::new_input].basePosition.col != player[orig(::new_input)].body.bodyPoints->aspect
player[::new_input].basePosition.col != player[orig(::new_input)].body.bodySize
player[::new_input].basePosition.col != player[orig(::new_input)].body.bodyWidth
player[::new_input].basePosition.col != player[orig(::new_input)].body.bodyHeight
player[::new_input].basePosition.col > player[orig(::new_input)].body.color
player[::new_input].basePosition.col >= player[orig(::new_input)].basePosition.col
player[orig(::new_input)].basePosition.col % player[::new_input].basePosition.col == 0
player[::new_input].basePosition.col > player[orig(::new_input)].impulse[1][0]
player[::new_input].basePosition.col >= orig(player[::new_input].basePosition.col)
player[::new_input].basePosition.col != orig(player[::new_input].basePosition.row)
player[::new_input].basePosition.row > player[::new_input].impulse[1][0]
player[::new_input].basePosition.row > player[::new_input].impulse[3][0]
player[::new_input].basePosition.row > player[::new_input].impulse[5][0]
player[::new_input].basePosition.row != player[::new_input].direction
player[::new_input].basePosition.row < player[orig(::new_input)].body.bodyPoints->aspect
player[::new_input].basePosition.row != player[orig(::new_input)].body.bodySize
player[::new_input].basePosition.row != player[orig(::new_input)].body.bodyHeight
player[::new_input].basePosition.row <= player[orig(::new_input)].basePosition.row
player[::new_input].basePosition.row > player[orig(::new_input)].impulse[1][0]
player[::new_input].basePosition.row != player[orig(::new_input)].direction
player[::new_input].impulse[1][0] % player[::new_input].direction == 0
player[::new_input].impulse[1][0] <= player[::new_input].direction
player[::new_input].impulse[1][0] != player[::new_input].stepCounter
player[::new_input].impulse[1][0] < orig(player[post(::new_input)].basePosition.col)
player[::new_input].impulse[1][0] < player[orig(::new_input)].body.bodyPoints->aspect
player[::new_input].impulse[1][0] <= player[orig(::new_input)].body.bodySize
player[::new_input].impulse[1][0] != player[orig(::new_input)].body.color
player[::new_input].impulse[1][0] != player[orig(::new_input)].basePosition.col
player[::new_input].impulse[1][0] < player[orig(::new_input)].basePosition.row
player[::new_input].impulse[1][0] >= player[orig(::new_input)].impulse[1][0]
player[::new_input].impulse[1][0] < player[orig(::new_input)].stepCounter
player[::new_input].impulse[1][0] != orig(player[::new_input].basePosition.col)
player[::new_input].impulse[1][0] < orig(player[::new_input].basePosition.row)
player[::new_input].impulse[3][0] < player[::new_input].direction
player[::new_input].impulse[3][0] < orig(player[post(::new_input)].basePosition.col)
player[::new_input].impulse[3][0] < player[orig(::new_input)].body.bodyPoints->aspect
player[::new_input].impulse[3][0] % player[orig(::new_input)].body.bodySize == 0
player[::new_input].impulse[3][0] <= player[orig(::new_input)].body.color
player[::new_input].impulse[3][0] < player[orig(::new_input)].basePosition.row
player[::new_input].impulse[3][0] <= player[orig(::new_input)].direction
player[::new_input].impulse[3][0] < player[orig(::new_input)].stepCounter
player[::new_input].impulse[3][0] < orig(player[::new_input].basePosition.row)
player[::new_input].impulse[5][0] < player[::new_input].direction
player[::new_input].impulse[5][0] < orig(player[post(::new_input)].basePosition.col)
player[::new_input].impulse[5][0] < player[orig(::new_input)].body.bodyPoints->aspect
player[::new_input].impulse[5][0] < player[orig(::new_input)].basePosition.row
player[::new_input].impulse[5][0] <= player[orig(::new_input)].direction
player[::new_input].direction != player[::new_input].stepCounter
player[::new_input].direction != orig(player[post(::new_input)].basePosition.col)
player[::new_input].direction < player[orig(::new_input)].body.bodyPoints->aspect
player[::new_input].direction != player[orig(::new_input)].body.bodyWidth
player[::new_input].direction != player[orig(::new_input)].body.bodyHeight
player[::new_input].direction != player[orig(::new_input)].basePosition.row
player[::new_input].direction >= player[orig(::new_input)].impulse[1][0]
player[orig(::new_input)].impulse[1][0] % player[::new_input].direction == 0
player[::new_input].direction >= player[orig(::new_input)].direction
player[orig(::new_input)].direction % player[::new_input].direction == 0
player[::new_input].direction != player[orig(::new_input)].stepCounter
player[::new_input].direction != orig(player[::new_input].basePosition.col)
player[::new_input].direction != orig(player[::new_input].basePosition.row)
player[::new_input].stepCounter < player[orig(::new_input)].body.bodyPoints->aspect
player[::new_input].stepCounter >= player[orig(::new_input)].impulse[1][0]
player[::new_input].stepCounter % player[orig(::new_input)].stepCounter == 0
player[::new_input].stepCounter <= player[orig(::new_input)].stepCounter
orig(player[post(::new_input)].basePosition.col) != player[orig(::new_input)].body.bodyPoints->aspect
orig(player[post(::new_input)].basePosition.col) != player[orig(::new_input)].body.bodySize
orig(player[post(::new_input)].basePosition.col) != player[orig(::new_input)].body.bodyWidth
orig(player[post(::new_input)].basePosition.col) != player[orig(::new_input)].body.bodyHeight
orig(player[post(::new_input)].basePosition.col) > player[orig(::new_input)].body.color
orig(player[post(::new_input)].basePosition.col) > player[orig(::new_input)].impulse[1][0]
orig(player[post(::new_input)].basePosition.col) != player[orig(::new_input)].direction
orig(player[::new_input].basePosition.col) % orig(player[post(::new_input)].basePosition.col) == 0
orig(player[post(::new_input)].basePosition.col) >= orig(player[::new_input].basePosition.col)
orig(player[post(::new_input)].basePosition.col) != orig(player[::new_input].basePosition.row)
player[orig(::new_input)].body.bodyPoints->aspect > player[orig(::new_input)].body.bodySize
player[orig(::new_input)].body.bodyPoints->aspect > player[orig(::new_input)].body.bodyWidth
player[orig(::new_input)].body.bodyPoints->aspect > player[orig(::new_input)].body.bodyHeight
player[orig(::new_input)].body.bodyPoints->aspect > player[orig(::new_input)].body.color
player[orig(::new_input)].body.bodyPoints->aspect > player[orig(::new_input)].basePosition.col
player[orig(::new_input)].body.bodyPoints->aspect > player[orig(::new_input)].basePosition.row
player[orig(::new_input)].body.bodyPoints->aspect > player[orig(::new_input)].impulse[1][0]
player[orig(::new_input)].body.bodyPoints->aspect > player[orig(::new_input)].direction
player[orig(::new_input)].body.bodyPoints->aspect > player[orig(::new_input)].stepCounter
player[orig(::new_input)].body.bodyPoints->aspect > orig(player[::new_input].basePosition.col)
player[orig(::new_input)].body.bodyPoints->aspect > orig(player[::new_input].basePosition.row)
player[orig(::new_input)].body.bodySize > player[orig(::new_input)].body.bodyWidth
player[orig(::new_input)].body.bodySize > player[orig(::new_input)].body.bodyHeight
player[orig(::new_input)].body.bodySize != player[orig(::new_input)].basePosition.col
player[orig(::new_input)].body.bodySize != player[orig(::new_input)].basePosition.row
player[orig(::new_input)].body.bodySize != orig(player[::new_input].basePosition.col)
player[orig(::new_input)].body.bodyWidth != player[orig(::new_input)].stepCounter
player[orig(::new_input)].body.bodyWidth != orig(player[::new_input].basePosition.row)
player[orig(::new_input)].body.bodyHeight != player[orig(::new_input)].basePosition.row
player[orig(::new_input)].body.bodyHeight != player[orig(::new_input)].stepCounter
player[orig(::new_input)].body.bodyHeight != orig(player[::new_input].basePosition.row)
player[orig(::new_input)].body.color >= player[orig(::new_input)].impulse[1][0]
player[orig(::new_input)].body.color != player[orig(::new_input)].stepCounter
player[orig(::new_input)].basePosition.col >= player[orig(::new_input)].impulse[1][0]
player[orig(::new_input)].basePosition.col != orig(player[::new_input].basePosition.row)
player[orig(::new_input)].basePosition.row > player[orig(::new_input)].impulse[1][0]
player[orig(::new_input)].basePosition.row != player[orig(::new_input)].direction
player[orig(::new_input)].impulse[1][0] <= player[orig(::new_input)].direction
player[orig(::new_input)].impulse[1][0] < player[orig(::new_input)].stepCounter
player[orig(::new_input)].impulse[1][0] <= orig(player[::new_input].basePosition.col)
player[orig(::new_input)].impulse[1][0] < orig(player[::new_input].basePosition.row)
player[orig(::new_input)].direction != player[orig(::new_input)].stepCounter
player[orig(::new_input)].direction != orig(player[::new_input].basePosition.row)
11 * orig(::new_input) - player[::new_input].body.bodyPoints->aspect + player[orig(::new_input)].body.bodyPoints->aspect == 0
3 * orig(::new_input) - player[::new_input].body.color + player[orig(::new_input)].body.color == 0
40 * orig(::new_input) - player[::new_input].basePosition.col + player[orig(::new_input)].basePosition.col == 0
orig(::new_input) + player[::new_input].basePosition.row - player[orig(::new_input)].basePosition.row == 0
9 * orig(::new_input) + player[::new_input].stepCounter - player[orig(::new_input)].stepCounter == 0
40 * orig(::new_input) - orig(player[post(::new_input)].basePosition.col) + orig(player[::new_input].basePosition.col) == 0
::players[orig(::new_input)].body.bodyPoints->aspect + player[::new_input].body.bodyPoints->aspect - player[orig(::new_input)].body.bodyPoints->aspect - 46 == 0
3 * ::players[orig(::new_input)].body.bodyPoints->aspect + 11 * player[::new_input].body.color - 11 * player[orig(::new_input)].body.color - 138 == 0
40 * ::players[orig(::new_input)].body.bodyPoints->aspect + 11 * player[::new_input].basePosition.col - 11 * player[orig(::new_input)].basePosition.col - 1840 == 0
::players[orig(::new_input)].body.bodyPoints->aspect - 11 * player[::new_input].basePosition.row + 11 * player[orig(::new_input)].basePosition.row - 46 == 0
9 * ::players[orig(::new_input)].body.bodyPoints->aspect - 11 * player[::new_input].stepCounter + 11 * player[orig(::new_input)].stepCounter - 414 == 0
40 * ::players[orig(::new_input)].body.bodyPoints->aspect + 11 * orig(player[post(::new_input)].basePosition.col) - 11 * orig(player[::new_input].basePosition.col) - 1840 == 0
11 * ::players[orig(::new_input)].body.bodyMapsSize + 3 * player[::new_input].body.bodyPoints->aspect - 3 * player[orig(::new_input)].body.bodyPoints->aspect - 44 == 0
::players[orig(::new_input)].body.bodyMapsSize + player[::new_input].body.color - player[orig(::new_input)].body.color - 4 == 0
40 * ::players[orig(::new_input)].body.bodyMapsSize + 3 * player[::new_input].basePosition.col - 3 * player[orig(::new_input)].basePosition.col - 160 == 0
::players[orig(::new_input)].body.bodyMapsSize - 3 * player[::new_input].basePosition.row + 3 * player[orig(::new_input)].basePosition.row - 4 == 0
3 * ::players[orig(::new_input)].body.bodyMapsSize - player[::new_input].stepCounter + player[orig(::new_input)].stepCounter - 12 == 0
40 * ::players[orig(::new_input)].body.bodyMapsSize + 3 * orig(player[post(::new_input)].basePosition.col) - 3 * orig(player[::new_input].basePosition.col) - 160 == 0
11 * ::players[orig(::new_input)].body.bodySize + 27 * player[::new_input].body.bodyPoints->aspect - 27 * player[orig(::new_input)].body.bodyPoints->aspect - 308 == 0
::players[orig(::new_input)].body.bodySize + 9 * player[::new_input].body.color - 9 * player[orig(::new_input)].body.color - 28 == 0
40 * ::players[orig(::new_input)].body.bodySize + 27 * player[::new_input].basePosition.col - 27 * player[orig(::new_input)].basePosition.col - 1120 == 0
::players[orig(::new_input)].body.bodySize - 27 * player[::new_input].basePosition.row + 27 * player[orig(::new_input)].basePosition.row - 28 == 0
::players[orig(::new_input)].body.bodySize - 3 * player[::new_input].stepCounter + 3 * player[orig(::new_input)].stepCounter - 28 == 0
40 * ::players[orig(::new_input)].body.bodySize + 27 * orig(player[post(::new_input)].basePosition.col) - 27 * orig(player[::new_input].basePosition.col) - 1120 == 0
11 * ::players[orig(::new_input)].body.bodyWidth + 8 * player[::new_input].body.bodyPoints->aspect - 8 * player[orig(::new_input)].body.bodyPoints->aspect - 88 == 0
3 * ::players[orig(::new_input)].body.bodyWidth + 8 * player[::new_input].body.color - 8 * player[orig(::new_input)].body.color - 24 == 0
5 * ::players[orig(::new_input)].body.bodyWidth + player[::new_input].basePosition.col - player[orig(::new_input)].basePosition.col - 40 == 0
::players[orig(::new_input)].body.bodyWidth - 8 * player[::new_input].basePosition.row + 8 * player[orig(::new_input)].basePosition.row - 8 == 0
9 * ::players[orig(::new_input)].body.bodyWidth - 8 * player[::new_input].stepCounter + 8 * player[orig(::new_input)].stepCounter - 72 == 0
5 * ::players[orig(::new_input)].body.bodyWidth + orig(player[post(::new_input)].basePosition.col) - orig(player[::new_input].basePosition.col) - 40 == 0
11 * ::players[orig(::new_input)].body.bodyHeight + 4 * player[::new_input].body.bodyPoints->aspect - 4 * player[orig(::new_input)].body.bodyPoints->aspect - 44 == 0
3 * ::players[orig(::new_input)].body.bodyHeight + 4 * player[::new_input].body.color - 4 * player[orig(::new_input)].body.color - 12 == 0
10 * ::players[orig(::new_input)].body.bodyHeight + player[::new_input].basePosition.col - player[orig(::new_input)].basePosition.col - 40 == 0
::players[orig(::new_input)].body.bodyHeight - 4 * player[::new_input].basePosition.row + 4 * player[orig(::new_input)].basePosition.row - 4 == 0
9 * ::players[orig(::new_input)].body.bodyHeight - 4 * player[::new_input].stepCounter + 4 * player[orig(::new_input)].stepCounter - 36 == 0
10 * ::players[orig(::new_input)].body.bodyHeight + orig(player[post(::new_input)].basePosition.col) - orig(player[::new_input].basePosition.col) - 40 == 0
11 * ::players[orig(::new_input)].body.color + 3 * player[::new_input].body.bodyPoints->aspect - 3 * player[orig(::new_input)].body.bodyPoints->aspect - 33 == 0
::players[orig(::new_input)].body.color + player[::new_input].body.color - player[orig(::new_input)].body.color - 3 == 0
40 * ::players[orig(::new_input)].body.color + 3 * player[::new_input].basePosition.col - 3 * player[orig(::new_input)].basePosition.col - 120 == 0
::players[orig(::new_input)].body.color - 3 * player[::new_input].basePosition.row + 3 * player[orig(::new_input)].basePosition.row - 3 == 0
3 * ::players[orig(::new_input)].body.color - player[::new_input].stepCounter + player[orig(::new_input)].stepCounter - 9 == 0
40 * ::players[orig(::new_input)].body.color + 3 * orig(player[post(::new_input)].basePosition.col) - 3 * orig(player[::new_input].basePosition.col) - 120 == 0
11 * ::players[orig(::new_input)].basePosition.col + 40 * player[::new_input].body.bodyPoints->aspect - 40 * player[orig(::new_input)].body.bodyPoints->aspect - 440 == 0
3 * ::players[orig(::new_input)].basePosition.col + 40 * player[::new_input].body.color - 40 * player[orig(::new_input)].body.color - 120 == 0
::players[orig(::new_input)].basePosition.col + player[::new_input].basePosition.col - player[orig(::new_input)].basePosition.col - 40 == 0
::players[orig(::new_input)].basePosition.col - 40 * player[::new_input].basePosition.row + 40 * player[orig(::new_input)].basePosition.row - 40 == 0
9 * ::players[orig(::new_input)].basePosition.col - 40 * player[::new_input].stepCounter + 40 * player[orig(::new_input)].stepCounter - 360 == 0
::players[orig(::new_input)].basePosition.col + orig(player[post(::new_input)].basePosition.col) - orig(player[::new_input].basePosition.col) - 40 == 0
11 * ::players[orig(::new_input)].basePosition.row - player[::new_input].body.bodyPoints->aspect + player[orig(::new_input)].body.bodyPoints->aspect - 99 == 0
3 * ::players[orig(::new_input)].basePosition.row - player[::new_input].body.color + player[orig(::new_input)].body.color - 27 == 0
40 * ::players[orig(::new_input)].basePosition.row - player[::new_input].basePosition.col + player[orig(::new_input)].basePosition.col - 360 == 0
::players[orig(::new_input)].basePosition.row + player[::new_input].basePosition.row - player[orig(::new_input)].basePosition.row - 9 == 0
9 * ::players[orig(::new_input)].basePosition.row + player[::new_input].stepCounter - player[orig(::new_input)].stepCounter - 81 == 0
40 * ::players[orig(::new_input)].basePosition.row - orig(player[post(::new_input)].basePosition.col) + orig(player[::new_input].basePosition.col) - 360 == 0
11 * ::players[orig(::new_input)].direction + player[::new_input].body.bodyPoints->aspect - player[orig(::new_input)].body.bodyPoints->aspect - 11 == 0
3 * ::players[orig(::new_input)].direction + player[::new_input].body.color - player[orig(::new_input)].body.color - 3 == 0
40 * ::players[orig(::new_input)].direction + player[::new_input].basePosition.col - player[orig(::new_input)].basePosition.col - 40 == 0
::players[orig(::new_input)].direction - player[::new_input].basePosition.row + player[orig(::new_input)].basePosition.row - 1 == 0
9 * ::players[orig(::new_input)].direction - player[::new_input].stepCounter + player[orig(::new_input)].stepCounter - 9 == 0
40 * ::players[orig(::new_input)].direction + orig(player[post(::new_input)].basePosition.col) - orig(player[::new_input].basePosition.col) - 40 == 0
11 * ::players[orig(::new_input)].stepCounter - 9 * player[::new_input].body.bodyPoints->aspect + 9 * player[orig(::new_input)].body.bodyPoints->aspect == 0
::players[orig(::new_input)].stepCounter - 3 * player[::new_input].body.color + 3 * player[orig(::new_input)].body.color == 0
40 * ::players[orig(::new_input)].stepCounter - 9 * player[::new_input].basePosition.col + 9 * player[orig(::new_input)].basePosition.col == 0
::players[orig(::new_input)].stepCounter + 9 * player[::new_input].basePosition.row - 9 * player[orig(::new_input)].basePosition.row == 0
::players[orig(::new_input)].stepCounter + player[::new_input].stepCounter - player[orig(::new_input)].stepCounter == 0
40 * ::players[orig(::new_input)].stepCounter - 9 * orig(player[post(::new_input)].basePosition.col) + 9 * orig(player[::new_input].basePosition.col) == 0
52 * player[::input_n].body.visible - 2 * player[orig(::new_input)].body.color + orig(player[::new_input].basePosition.col) - 52 == 0
5 * player[::input_n].body.bodyWidth + 8 * player[::input_n].body.color - 4 * player[::input_n].basePosition.col == 0
5 * player[::input_n].body.bodyHeight + 4 * player[::input_n].body.color - 2 * player[::input_n].basePosition.col == 0
2 * player[::input_n].body.color - player[::input_n].basePosition.col + 10 * player[::input_n].impulse[7][0] == 0
3 * player[::new_input].body.bodyPoints->aspect - 11 * player[::new_input].body.bodyMapsSize - 3 * player[orig(::new_input)].body.bodyPoints->aspect + 11 == 0
player[::new_input].body.bodyMapsSize - player[::new_input].body.color + player[orig(::new_input)].body.color - 1 == 0
40 * player[::new_input].body.bodyMapsSize - 3 * player[::new_input].basePosition.col + 3 * player[orig(::new_input)].basePosition.col - 40 == 0
player[::new_input].body.bodyMapsSize + 3 * player[::new_input].basePosition.row - 3 * player[orig(::new_input)].basePosition.row - 1 == 0
3 * player[::new_input].body.bodyMapsSize + player[::new_input].stepCounter - player[orig(::new_input)].stepCounter - 3 == 0
40 * player[::new_input].body.bodyMapsSize - 3 * orig(player[post(::new_input)].basePosition.col) + 3 * orig(player[::new_input].basePosition.col) - 40 == 0
player[::new_input].basePosition.col - player[::new_input].impulse[3][0] - orig(player[post(::new_input)].basePosition.col) == 0
2 * player[::new_input].basePosition.row - player[::new_input].direction - 2 * orig(player[::new_input].basePosition.row) + 3 == 0
player[::new_input].impulse[3][0] - player[orig(::new_input)].basePosition.col + orig(player[::new_input].basePosition.col) == 0
===========================================================================
..movePoint():::ENTER
::crashedPlayers[].start == ::crashedPlayers[].end
::crashedPlayers[].start[0] == ::crashedPlayers[].end[0]
::crashedPlayers[].start->next == ::crashedPlayers[].start->prev
::playerSpace[].playerNodes->start->prev == ::playerSpace[].guideNodes->start
::playerSpace[].playerNodes->end->next == ::playerSpace[].guideNodes->start
::playerSpace[].guideNodes->start == ::playerSpace[].guideNodes->end
::players == ::players[::input_n-1].body.bodyPoints->player
::players[].id == ::players[].type
::players[].id == ::players[].retired
::players[].id == ::players[].impulse[6][0]
::players[].id == ::players[].impulse[8][0]
::players[].body.visible == ::players[].body.tangible
::input_n == ::input_i
::input_n == size(::crashedPlayers[])
::input_n == size(::crashedPlayers[].start[0])
::input_n == size(::playerSpace[])
::input_n == size(::playerSpace[].playerNodes[0])
::input_n == size(::playerSpace[].playerNodes->start[0])
::input_n == size(::playerSpace[].playerNodes->start->next[0])
::input_n == size(::playerSpace[].playerNodes->end[0])
::input_n == size(::playerSpace[].playerNodes->end->prev[0])
::input_n == size(::playerSpace[].guideNodes[0])
::input_n == size(::playerSpace[].actionGroup[0])
::input_n == ::players[::input_n].body.type
::input_n == ::players[::input_i].body.type
::input_n == ::players[direction].body.type
::input_n == ::players[::input_n].body.visible
::input_n == ::players[::input_n-1].body.visible
::input_n == ::players[::input_i].body.visible
::input_n == ::players[::input_i-1].body.visible
::input_n == ::players[::new_input].body.visible
::input_n == ::players[direction].body.visible
::input_n == ::players[direction-1].body.visible
::input_n == ::players[::input_n].body.tangible
::input_n == ::players[::input_n-1].body.tangible
::input_n == ::players[::input_i].body.tangible
::input_n == ::players[::input_i-1].body.tangible
::input_n == ::players[::new_input].body.tangible
::input_n == ::players[direction].body.tangible
::input_n == ::players[direction-1].body.tangible
::input_n == ::players[::input_n].body.bodyMapsSize
::input_n == ::players[::input_i].body.bodyMapsSize
::input_n == ::players[direction].body.bodyMapsSize
::input_n == ::players[::input_n].body.bodySize
::input_n == ::players[::input_i].body.bodySize
::input_n == ::players[direction].body.bodySize
::input_n == ::players[::input_n-1].direction
::input_n == ::players[::input_i-1].direction
::new_input == size(::crashedPlayers[].start[0])-1
::new_input == ::players[::new_input].body.type
::new_input == ::players[::input_n].impulse[0][0]
::new_input == ::players[::input_i].impulse[0][0]
::new_input == ::players[::new_input].impulse[0][0]
::new_input == ::players[direction].impulse[0][0]
::new_input == ::players[::input_n-1].impulse[1][0]
::new_input == ::players[::input_i-1].impulse[1][0]
::new_input == ::players[direction-1].impulse[1][0]
size(::crashedPlayers[])-1 == ::playerSpace[::input_n-1].actionGroup->numActions
size(::crashedPlayers[])-1 == ::playerSpace[::input_i-1].actionGroup->numActions
size(::crashedPlayers[])-1 == ::players[::input_n].id
size(::crashedPlayers[])-1 == ::players[::input_n-1].id
size(::crashedPlayers[])-1 == ::players[::input_i].id
size(::crashedPlayers[])-1 == ::players[::input_i-1].id
size(::crashedPlayers[])-1 == ::players[::new_input].id
size(::crashedPlayers[])-1 == ::players[direction].id
size(::crashedPlayers[])-1 == ::players[direction-1].id
size(::crashedPlayers[])-1 == ::players[::input_n].type
size(::crashedPlayers[])-1 == ::players[::input_n-1].type
size(::crashedPlayers[])-1 == ::players[::input_i].type
size(::crashedPlayers[])-1 == ::players[::input_i-1].type
size(::crashedPlayers[])-1 == ::players[::new_input].type
size(::crashedPlayers[])-1 == ::players[direction].type
size(::crashedPlayers[])-1 == ::players[direction-1].type
size(::crashedPlayers[])-1 == ::players[::input_n].retired
size(::crashedPlayers[])-1 == ::players[::input_n-1].retired
size(::crashedPlayers[])-1 == ::players[::input_i].retired
size(::crashedPlayers[])-1 == ::players[::input_i-1].retired
size(::crashedPlayers[])-1 == ::players[::new_input].retired
size(::crashedPlayers[])-1 == ::players[direction].retired
size(::crashedPlayers[])-1 == ::players[direction-1].retired
size(::crashedPlayers[])-1 == ::players[::input_n-1].body.type
size(::crashedPlayers[])-1 == ::players[::input_i-1].body.type
size(::crashedPlayers[])-1 == ::players[::input_n].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[::input_i].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[direction].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[::input_n].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[::input_i].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[direction].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[::input_n].body.color
size(::crashedPlayers[])-1 == ::players[::input_i].body.color
size(::crashedPlayers[])-1 == ::players[::input_n].basePosition.col
size(::crashedPlayers[])-1 == ::players[::input_i].basePosition.col
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[direction-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[direction].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[direction].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[direction-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[direction].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[direction-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[direction].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[direction-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[direction].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[direction-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[direction].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[direction-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[direction].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[direction-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_n].direction
size(::crashedPlayers[])-1 == ::players[::input_i].direction
size(::crashedPlayers[])-1 == ::players[::input_n-1].stepCounter
size(::crashedPlayers[])-1 == ::players[::input_i-1].stepCounter
size(::crashedPlayers[].start[0]) == size(point[])
size(::crashedPlayers[].start[0]) == ::players[direction-1].body.type
size(::crashedPlayers[].start[0]) == ::players[direction-1].body.bodyMapsSize
size(::crashedPlayers[].start[0]) == ::players[direction-1].body.bodySize
size(::crashedPlayers[].start[0]) == ::players[::new_input].direction
size(::crashedPlayers[].start[0])-1 == ::players[direction-1].body.bodyWidth
size(::crashedPlayers[].start[0])-1 == ::players[direction-1].body.bodyHeight
size(::crashedPlayers[].start[0])-1 == ::players[direction].impulse[3][0]
size(::crashedPlayers[].start[0])-1 == ::players[direction-1].impulse[3][0]
size(::crashedPlayers[].start[0])-1 == ::players[::new_input].stepCounter
size(::players[]) == size(::players[].body.bodyPoints[0])
size(::players[]) == size(::players[].body.bodyPoints->player[0])
size(::players[]) == size(::players[].impulse[0])
size(::players[]) == size(::players[].impulse[0][0])
size(::players[]) == size(::players[].impulse[1])
size(::players[]) == size(::players[].impulse[1][0])
size(::players[]) == size(::players[].impulse[2])
size(::players[]) == size(::players[].impulse[2][0])
size(::players[]) == size(::players[].impulse[3])
size(::players[]) == size(::players[].impulse[3][0])
size(::players[]) == size(::players[].impulse[4])
size(::players[]) == size(::players[].impulse[4][0])
size(::players[]) == size(::players[].impulse[5])
size(::players[]) == size(::players[].impulse[5][0])
size(::players[]) == size(::players[].impulse[6])
size(::players[]) == size(::players[].impulse[6][0])
size(::players[]) == size(::players[].impulse[7])
size(::players[]) == size(::players[].impulse[7][0])
size(::players[]) == size(::players[].impulse[8])
size(::players[]) == size(::players[].impulse[8][0])
size(::players[]) == size(::players[].magnetos[0])
::crashedPlayers[::input_n-1].start[0] == ::crashedPlayers[::new_input].start[0]
::crashedPlayers[::input_i-1].start[0] == ::crashedPlayers[::new_input].start[0]
::crashedPlayers[::new_input].start[0] == ::crashedPlayers[::input_n-1].end[0]
::crashedPlayers[::new_input].start[0] == ::crashedPlayers[::input_i-1].end[0]
::crashedPlayers[::input_n-1].start->next == ::crashedPlayers[::new_input].start->next
::crashedPlayers[::input_i-1].start->next == ::crashedPlayers[::new_input].start->next
::crashedPlayers[::new_input].start->next == ::crashedPlayers[::input_n-1].start->prev
::crashedPlayers[::new_input].start->next == ::crashedPlayers[::input_i-1].start->prev
::crashedPlayers[::input_n-1].start->data == ::crashedPlayers[::new_input].start->data
::crashedPlayers[::input_i-1].start->data == ::crashedPlayers[::new_input].start->data
::players[::input_n] == ::players[::input_n].body.bodyPoints->player[0]
::players[::input_n] == ::players[::input_i].body.bodyPoints->player[0]
::players[::input_n-1] == ::players[::input_n-1].body.bodyPoints->player[0]
::players[::input_n-1] == ::players[::input_i-1].body.bodyPoints->player[0]
::players[::new_input] == ::players[::new_input].body.bodyPoints->player[0]
::players[direction] == ::players[direction].body.bodyPoints->player[0]
::players[direction-1] == ::players[direction-1].body.bodyPoints->player[0]
::players[::input_n].body.bodyPoints->aspect == ::players[direction].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize == ::players[::input_n-1].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize == ::players[::input_i-1].body.bodyHeight
::players[::input_n].pilot == ::players[direction].pilot
::players[::input_n].onCrash == ::players[direction].onCrash
::players[::input_n].onPushed == ::players[::input_n-1].onPushed
::players[::input_n].onPushed == ::players[::input_i-1].onPushed
::players[::input_n].onPushed == ::players[::new_input].onPushed
::players[::input_n].onPushed == ::players[direction].onPushed
::players[::input_n].onPushed == ::players[direction-1].onPushed
::crashedPlayers has only one value
::crashedPlayers != null
::crashedPlayers[] contains no nulls and has only one value, of length 1
::crashedPlayers[] elements has only one value
::crashedPlayers[] elements != null
::crashedPlayers[].start[0] elements != null
::crashedPlayers[].start->next == [null]
::crashedPlayers[].start->next elements == null
::crashedPlayers[].start->data elements != null
::playerSpace has only one value
::playerSpace != null
::playerSpace[] contains no nulls and has only one value, of length 1
::playerSpace[] elements has only one value
::playerSpace[] elements != null
::playerSpace[].playerNodes contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes elements has only one value
::playerSpace[].playerNodes elements != null
::playerSpace[].playerNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes[0] elements has only one value
::playerSpace[].playerNodes[0] elements != null
::playerSpace[].playerNodes->start contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start elements has only one value
::playerSpace[].playerNodes->start elements != null
::playerSpace[].playerNodes->start[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start[0] elements has only one value
::playerSpace[].playerNodes->start[0] elements != null
::playerSpace[].playerNodes->start->next contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next elements has only one value
::playerSpace[].playerNodes->start->next elements != null
::playerSpace[].playerNodes->start->next[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next[0] elements has only one value
::playerSpace[].playerNodes->start->next[0] elements != null
::playerSpace[].playerNodes->start->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->data elements has only one value
::playerSpace[].playerNodes->start->data elements != null
::playerSpace[].playerNodes->end contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end elements has only one value
::playerSpace[].playerNodes->end elements != null
::playerSpace[].playerNodes->end[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end[0] elements has only one value
::playerSpace[].playerNodes->end[0] elements != null
::playerSpace[].playerNodes->end->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->data elements has only one value
::playerSpace[].playerNodes->end->data elements != null
::playerSpace[].playerNodes->end->prev contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->prev elements has only one value
::playerSpace[].playerNodes->end->prev elements != null
::playerSpace[].playerNodes->end->prev[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->prev[0] elements has only one value
::playerSpace[].playerNodes->end->prev[0] elements != null
::playerSpace[].playerMap contains no nulls and has only one value, of length 1
::playerSpace[].playerMap elements has only one value
::playerSpace[].playerMap elements != null
::playerSpace[].guideNodes contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes elements has only one value
::playerSpace[].guideNodes elements != null
::playerSpace[].guideNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes[0] elements has only one value
::playerSpace[].guideNodes[0] elements != null
::playerSpace[].guideNodes->start == [null]
::playerSpace[].guideNodes->start elements == null
::playerSpace[].groundMap contains no nulls and has only one value, of length 1
::playerSpace[].groundMap elements has only one value
::playerSpace[].groundMap elements != null
::playerSpace[].actionGroup contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup elements has only one value
::playerSpace[].actionGroup elements != null
::playerSpace[].actionGroup[0] contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup[0] elements has only one value
::playerSpace[].actionGroup[0] elements != null
::playerSpace[].actionGroup->numActions == [0]
::playerSpace[].actionGroup->numActions elements == 0
::players has only one value
::players[] contains no nulls and has only one value, of length 100
::players[] elements != null
::players[].id == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].id elements == 0
::players[].body contains no nulls and has only one value, of length 100
::players[].body elements != null
::players[].body.type == [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.type elements one of { 0, 1 }
::players[].body.visible == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.visible elements one of { 0, 1 }
::players[].body.visible sorted by >=
::players[].body.bodyPoints contains no nulls and has only one value, of length 100
::players[].body.bodyPoints elements != null
::players[].body.bodyPoints[0] contains no nulls and has only one value, of length 100
::players[].body.bodyPoints[0] elements != null
::players[].body.bodyPoints->position contains no nulls and has only one value, of length 100
::players[].body.bodyPoints->position elements != null
::players[].body.bodyPoints->player has only one value, of length 100
::players[].body.bodyPoints->player[0] has only one value, of length 100
::players[].body.bodyPoints->aspect == [46, 35, 35, 35, 35, 35, 86, 86, 86, 86, 86, 88, 91, 91, 91, 91, 91, 91, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyPoints->aspect elements >= 0
::players[].body.bodyMaps contains no nulls and has only one value, of length 100
::players[].body.bodyMaps elements != null
::players[].body.bodyMapsSize == [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyMapsSize elements one of { 0, 1, 4 }
::players[].body.bodyMapsSize sorted by >=
::players[].body.bodySize == [28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodySize elements >= 0
::players[].body.bodyWidth == [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyWidth elements one of { 0, 8, 14 }
::players[].body.bodyHeight == [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyHeight elements one of { 0, 4, 6 }
::players[].body.color == [3, 0, 1, 2, 3, 4, 0, 2, 4, 6, 8, 2, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.color elements >= 0
::players[].basePosition contains no nulls and has only one value, of length 100
::players[].basePosition elements != null
::players[].basePosition.col elements >= 0
::players[].basePosition.row elements >= 0
::players[].impulse[0] contains no nulls and has only one value, of length 100
::players[].impulse[0] elements != null
::players[].impulse[0][0] elements one of { 0, 1 }
::players[].impulse[1] contains no nulls and has only one value, of length 100
::players[].impulse[1] elements != null
::players[].impulse[1][0] elements one of { 0, 1, 5 }
::players[].impulse[2] contains no nulls and has only one value, of length 100
::players[].impulse[2] elements != null
::players[].impulse[2][0] elements one of { 0, 1 }
::players[].impulse[3] contains no nulls and has only one value, of length 100
::players[].impulse[3] elements != null
::players[].impulse[3][0] elements one of { 0, 1 }
::players[].impulse[4] contains no nulls and has only one value, of length 100
::players[].impulse[4] elements != null
::players[].impulse[4][0] elements one of { 0, 1 }
::players[].impulse[4][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[5] contains no nulls and has only one value, of length 100
::players[].impulse[5] elements != null
::players[].impulse[5][0] elements one of { 0, 1 }
::players[].impulse[6] contains no nulls and has only one value, of length 100
::players[].impulse[6] elements != null
::players[].impulse[7] contains no nulls and has only one value, of length 100
::players[].impulse[7] elements != null
::players[].impulse[7][0] elements one of { 0, 1 }
::players[].impulse[7][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[8] contains no nulls and has only one value, of length 100
::players[].impulse[8] elements != null
::players[].direction elements >= 0
::players[].magnetos has only one value, of length 100
::players[].magnetos[0] has only one value, of length 100
::players[].stepCounter elements >= 0
::players[].pilot has only one value, of length 100
::players[].onCrash has only one value, of length 100
::players[].onPushed has only one value, of length 100
::snakeBodyMap has only one value
::trainBodyMap has only one value
::giantBodyMap has only one value
::squareBodyMap has only one value
::circleBodyMap has only one value
::input_n == 1
::new_input one of { 0, 1 }
::input_key == "k"
::trace_pos one of { "", "(40, 10) -> ", "(40, 10) -> (40, 9)\n" }
point != null
point[] elements != null
point[].col elements >= 0
point[].row elements >= 0
direction >= 1
size(::crashedPlayers[].start[0]) == 1
size(::players[]) == 100
size(point[]) >= 1
::players[::input_n] has only one value
::players[::input_n-1] has only one value
::players[::input_n].body has only one value
::players[::input_n-1].body has only one value
::players[::input_n].body.bodyPoints has only one value
::players[::input_n-1].body.bodyPoints has only one value
::players[::input_n].body.bodyPoints[0] has only one value
::players[::input_n-1].body.bodyPoints[0] has only one value
::players[::input_n].body.bodyPoints->position has only one value
::players[::input_n-1].body.bodyPoints->position has only one value
::players[::input_n].body.bodyPoints->player has only one value
::players[::input_n].body.bodyPoints->player != null
::players[::input_n-1].body.bodyPoints->player has only one value
::players[::input_n-1].body.bodyPoints->player != null
::players[::new_input].body.bodyPoints->player != null
::players[direction].body.bodyPoints->player != null
::players[direction-1].body.bodyPoints->player != null
::players[::input_n].body.bodyPoints->aspect == 35
::players[::input_n-1].body.bodyPoints->aspect == 46
::players[::new_input].body.bodyPoints->aspect one of { 35, 46 }
::players[direction-1].body.bodyPoints->aspect one of { 35, 46 }
::players[::input_n].body.bodyMaps has only one value
::players[::input_n-1].body.bodyMaps has only one value
::players[::input_n-1].body.bodyMapsSize == 4
::players[::new_input].body.bodyMapsSize one of { 1, 4 }
::players[direction-1].body.bodyMapsSize one of { 1, 4 }
::players[::input_n-1].body.bodySize == 28
::players[::new_input].body.bodySize one of { 1, 28 }
::players[direction-1].body.bodySize one of { 1, 28 }
::players[::input_n-1].body.bodyWidth == 8
::players[::new_input].body.bodyWidth one of { 0, 8 }
::players[direction-1].body.bodyWidth one of { 0, 8 }
::players[::new_input].body.bodyHeight one of { 0, 4 }
::players[direction-1].body.bodyHeight one of { 0, 4 }
::players[::input_n-1].body.color == 3
::players[::new_input].body.color one of { 0, 3 }
::players[::input_n].basePosition has only one value
::players[::input_n-1].basePosition has only one value
::players[::input_n-1].basePosition.col == 40
::players[::new_input].basePosition.col one of { 0, 40 }
::players[::input_n].basePosition.row == 10
::players[::input_n-1].basePosition.row one of { 9, 10 }
::players[::new_input].basePosition.row one of { 9, 10 }
::players[::input_n].impulse[0] has only one value
::players[::input_n-1].impulse[0] has only one value
::players[::input_n].impulse[1] has only one value
::players[::input_n-1].impulse[1] has only one value
::players[::input_n].impulse[2] has only one value
::players[::input_n-1].impulse[2] has only one value
::players[::input_n].impulse[3] has only one value
::players[::input_n-1].impulse[3] has only one value
::players[::input_n].impulse[4] has only one value
::players[::input_n-1].impulse[4] has only one value
::players[::input_n].impulse[5] has only one value
::players[::input_n-1].impulse[5] has only one value
::players[::input_n].impulse[6] has only one value
::players[::input_n-1].impulse[6] has only one value
::players[::input_n].impulse[7] has only one value
::players[::input_n-1].impulse[7] has only one value
::players[::input_n].impulse[8] has only one value
::players[::input_n-1].impulse[8] has only one value
::players[::new_input].direction one of { 0, 1 }
::players[direction].direction one of { 0, 1, 3 }
::players[direction-1].direction one of { 0, 1, 3 }
::players[::input_n].magnetos has only one value
::players[::input_n].magnetos != null
::players[::input_n-1].magnetos has only one value
::players[::input_n-1].magnetos != null
::players[::new_input].magnetos != null
::players[direction].magnetos != null
::players[direction-1].magnetos != null
::players[::input_n].magnetos[0] has only one value
::players[::input_n].magnetos[0] != null
::players[::input_n-1].magnetos[0] has only one value
::players[::input_n-1].magnetos[0] != null
::players[::new_input].magnetos[0] != null
::players[direction].magnetos[0] != null
::players[direction-1].magnetos[0] != null
::players[::input_n].stepCounter == 9
::players[::new_input].stepCounter one of { 0, 9 }
::players[::input_n].pilot has only one value
::players[::input_n].pilot != null
::players[::input_n-1].pilot has only one value
::players[::input_n-1].pilot != null
::players[::new_input].pilot != null
::players[direction-1].pilot != null
::players[::input_n].onCrash == null
::players[::input_n-1].onCrash has only one value
::players[::input_n-1].onCrash != null
::players[::input_n].onPushed has only one value
::players[::input_n].onPushed != null
::crashedPlayers[] elements == ::crashedPlayers[::input_n-1]
::crashedPlayers[].start elements == ::crashedPlayers[::input_n-1].start
::crashedPlayers[].start[0] elements == ::crashedPlayers[::new_input].start[0]
::crashedPlayers[].start->next == ::playerSpace[].guideNodes->start (elementwise)
::crashedPlayers[].start->next is the reverse of ::playerSpace[].guideNodes->start
::crashedPlayers[].start->next elements == ::crashedPlayers[::new_input].start->next
::crashedPlayers[].start->next elements == ::playerSpace[::input_n-1].guideNodes->start
::playerSpace[::input_n-1].guideNodes->start in ::crashedPlayers[].start->next
::crashedPlayers[].start->data elements == ::crashedPlayers[::new_input].start->data
::playerSpace[] elements == ::playerSpace[::input_n-1]
::playerSpace[].playerNodes elements == ::playerSpace[::input_n-1].playerNodes
::playerSpace[].playerNodes[0] elements == ::playerSpace[::input_n-1].playerNodes[0]
::playerSpace[].playerNodes->start elements == ::playerSpace[::input_n-1].playerNodes->start
::playerSpace[].playerNodes->start[0] elements == ::playerSpace[::input_n-1].playerNodes->start[0]
::playerSpace[].playerNodes->start->next elements == ::playerSpace[::input_n-1].playerNodes->start->next
::playerSpace[].playerNodes->start->next[0] elements == ::playerSpace[::input_n-1].playerNodes->start->next[0]
::playerSpace[].playerNodes->start->data elements == ::playerSpace[::input_n-1].playerNodes->start->data
::playerSpace[].playerNodes->end elements == ::playerSpace[::input_n-1].playerNodes->end
::playerSpace[].playerNodes->end[0] elements == ::playerSpace[::input_n-1].playerNodes->end[0]
::playerSpace[].playerNodes->end->data elements == ::playerSpace[::input_n-1].playerNodes->end->data
::playerSpace[].playerNodes->end->prev elements == ::playerSpace[::input_n-1].playerNodes->end->prev
::playerSpace[].playerNodes->end->prev[0] elements == ::playerSpace[::input_n-1].playerNodes->end->prev[0]
::playerSpace[].playerMap elements == ::playerSpace[::input_n-1].playerMap
::playerSpace[].guideNodes elements == ::playerSpace[::input_n-1].guideNodes
::playerSpace[].guideNodes[0] elements == ::playerSpace[::input_n-1].guideNodes[0]
::crashedPlayers[::new_input].start->next in ::playerSpace[].guideNodes->start
::playerSpace[].guideNodes->start elements == ::crashedPlayers[::new_input].start->next
::playerSpace[].guideNodes->start elements == ::playerSpace[::input_n-1].guideNodes->start
::playerSpace[].groundMap elements == ::playerSpace[::input_n-1].groundMap
::playerSpace[].actionGroup elements == ::playerSpace[::input_n-1].actionGroup
::playerSpace[].actionGroup[0] elements == ::playerSpace[::input_n-1].actionGroup[0]
::playerSpace[].actionGroup->numActions < ::players[].basePosition.row (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].basePosition.row (lexically)
::playerSpace[].actionGroup->numActions < ::players[].impulse[1][0] (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].impulse[1][0] (lexically)
::playerSpace[].actionGroup->numActions < ::players[].impulse[3][0] (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].impulse[3][0] (lexically)
::playerSpace[].actionGroup->numActions < ::players[].direction (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].direction (lexically)
::playerSpace[].actionGroup->numActions < point[].col (lexically)
::playerSpace[].actionGroup->numActions <= point[].col (lexically)
::playerSpace[].actionGroup->numActions < point[].row (lexically)
::playerSpace[].actionGroup->numActions <= point[].row (lexically)
::playerSpace[].actionGroup->numActions elements == size(::crashedPlayers[])-1
::playerSpace[].actionGroup->numActions elements == size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::playerSpace[].actionGroup->numActions
::players in ::players[].body.bodyPoints->player
::players[].id <= ::players[].body.type (elementwise)
::players[].id <= ::players[].body.visible (elementwise)
::players[].id <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].id <= ::players[].body.bodyMapsSize (elementwise)
::players[].id <= ::players[].body.bodySize (elementwise)
::players[].id <= ::players[].body.bodyWidth (elementwise)
::players[].id <= ::players[].body.bodyHeight (elementwise)
::players[].id <= ::players[].body.color (elementwise)
::players[].id <= ::players[].basePosition.col (elementwise)
::players[].id < ::players[].basePosition.row (lexically)
::players[].id <= ::players[].basePosition.row (elementwise)
::players[].id <= ::players[].impulse[0][0] (elementwise)
::players[].id <= ::players[].impulse[1][0] (elementwise)
::players[].id <= ::players[].impulse[2][0] (elementwise)
::players[].id <= ::players[].impulse[3][0] (elementwise)
::players[].id <= ::players[].impulse[4][0] (elementwise)
::players[].id <= ::players[].impulse[5][0] (elementwise)
::players[].id <= ::players[].impulse[7][0] (elementwise)
::players[].id < ::players[].direction (lexically)
::players[].id <= ::players[].direction (elementwise)
::players[].id <= ::players[].stepCounter (elementwise)
::players[].id < point[].col (lexically)
::players[].id <= point[].col (lexically)
::players[].id < point[].row (lexically)
::players[].id <= point[].row (lexically)
::players[].id elements == size(::crashedPlayers[])-1
::players[].id elements == size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].id
::players[].body.type <= ::players[].body.visible (elementwise)
::players[].body.type <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].body.type <= ::players[].body.bodyMapsSize (elementwise)
::players[].body.type <= ::players[].body.bodySize (elementwise)
::players[].body.type < ::players[].basePosition.row (lexically)
::players[].body.type <= ::players[].basePosition.row (lexically)
::players[].body.type >= ::players[].impulse[0][0] (elementwise)
::players[].body.type > ::players[].impulse[3][0] (lexically)
::players[].body.type >= ::players[].impulse[3][0] (lexically)
::players[].body.type < ::players[].direction (lexically)
::players[].body.type <= ::players[].direction (lexically)
::players[].body.type <= ::players[].stepCounter (elementwise)
::players[].body.type elements <= ::input_n
::players[].body.type < point[].col (lexically)
::players[].body.type <= point[].col (lexically)
::players[].body.type < point[].row (lexically)
::players[].body.type <= point[].row (lexically)
::players[].body.type elements <= direction
::players[].body.type elements >= size(::crashedPlayers[])-1
::players[].body.type elements <= size(::crashedPlayers[].start[0])
size(::crashedPlayers[].start[0]) in ::players[].body.type
::players[].body.type elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].body.type
::players[].body.type elements < size(::players[])-1
::players[].body.type elements <= size(point[])
::players[].body.type elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.type elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.type elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.type elements < ::players[direction-1].body.bodyPoints->aspect
::players[].body.type elements < ::players[::input_n-1].body.bodyMapsSize
::players[].body.type elements <= ::players[::new_input].body.bodyMapsSize
::players[].body.type elements <= ::players[direction-1].body.bodyMapsSize
::players[].body.type elements < ::players[::input_n-1].body.bodySize
::players[].body.type elements <= ::players[::new_input].body.bodySize
::players[].body.type elements <= ::players[direction-1].body.bodySize
::players[].body.type elements < ::players[::input_n-1].body.bodyWidth
::players[].body.type elements < ::players[::input_n-1].body.color
::players[].body.type elements < ::players[::input_n-1].basePosition.col
::players[].body.type elements < ::players[::input_n].basePosition.row
::players[].body.type elements < ::players[::input_n-1].basePosition.row
::players[].body.type elements < ::players[::new_input].basePosition.row
::players[].body.type elements < ::players[direction].basePosition.row
::players[].body.type elements < ::players[direction-1].basePosition.row
::players[direction].impulse[3][0] in ::players[].body.type
::players[direction-1].impulse[3][0] in ::players[].body.type
::players[::new_input].direction in ::players[].body.type
::players[].body.type elements < ::players[::input_n].stepCounter
::players[].body.type elements < ::players[direction].stepCounter
::players[].body.type elements < point[::input_n-1].col
::players[].body.type elements <= point[::input_n-1].row
::players[].body.visible <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].body.visible <= ::players[].body.bodyMapsSize (elementwise)
::players[].body.visible <= ::players[].body.bodySize (elementwise)
::players[].body.visible < ::players[].basePosition.row (lexically)
::players[].body.visible <= ::players[].basePosition.row (lexically)
::players[].body.visible >= ::players[].impulse[0][0] (elementwise)
::players[].body.visible > ::players[].impulse[1][0] (lexically)
::players[].body.visible >= ::players[].impulse[1][0] (lexically)
::players[].body.visible >= ::players[].impulse[2][0] (elementwise)
::players[].body.visible > ::players[].impulse[3][0] (lexically)
::players[].body.visible >= ::players[].impulse[3][0] (elementwise)
::players[].body.visible >= ::players[].impulse[4][0] (elementwise)
::players[].body.visible >= ::players[].impulse[5][0] (elementwise)
::players[].body.visible >= ::players[].impulse[7][0] (elementwise)
::players[].body.visible > ::players[].direction (lexically)
::players[].body.visible >= ::players[].direction (lexically)
::players[].body.visible elements <= ::input_n
::new_input in ::players[].body.visible
::players[].body.visible < point[].col (lexically)
::players[].body.visible <= point[].col (lexically)
::players[].body.visible elements <= direction
::players[].body.visible elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].body.visible
::players[].body.visible elements <= size(::crashedPlayers[].start[0])
size(::crashedPlayers[].start[0]) in ::players[].body.visible
::players[].body.visible elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].body.visible
::players[].body.visible elements < size(::players[])-1
::players[].body.visible elements <= size(point[])
::players[direction-1].body.type in ::players[].body.visible
::players[].body.visible elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.visible elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.visible elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.visible elements < ::players[direction-1].body.bodyPoints->aspect
::players[].body.visible elements < ::players[::input_n-1].body.bodyMapsSize
::players[].body.visible elements <= ::players[::new_input].body.bodyMapsSize
::players[].body.visible elements <= ::players[direction-1].body.bodyMapsSize
::players[].body.visible elements < ::players[::input_n-1].body.bodySize
::players[].body.visible elements <= ::players[::new_input].body.bodySize
::players[].body.visible elements <= ::players[direction-1].body.bodySize
::players[].body.visible elements < ::players[::input_n-1].body.bodyWidth
::players[].body.visible elements < ::players[::input_n-1].body.color
::players[].body.visible elements < ::players[::input_n-1].basePosition.col
::players[].body.visible elements < ::players[::input_n].basePosition.row
::players[].body.visible elements < ::players[::input_n-1].basePosition.row
::players[].body.visible elements < ::players[::new_input].basePosition.row
::players[].body.visible elements < ::players[direction].basePosition.row
::players[].body.visible elements < ::players[direction-1].basePosition.row
::players[direction].impulse[3][0] in ::players[].body.visible
::players[direction-1].impulse[3][0] in ::players[].body.visible
::players[::new_input].direction in ::players[].body.visible
::players[].body.visible elements < ::players[::input_n].stepCounter
::players[].body.visible elements < ::players[direction].stepCounter
::players[].body.visible elements < point[::input_n-1].col
::players[].body.visible elements <= point[::input_n-1].row
::players[].body.bodyPoints->position - ::players[].basePosition + 7304 == 0
::players[].body.bodyPoints->aspect >= ::players[].body.bodyMapsSize (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodySize (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodyWidth (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.color (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].basePosition.col (elementwise)
::players[].body.bodyPoints->aspect > ::players[].basePosition.row (lexically)
::players[].body.bodyPoints->aspect >= ::players[].basePosition.row (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[0][0] (elementwise)
::players[].body.bodyPoints->aspect > ::players[].impulse[1][0] (lexically)
::players[].body.bodyPoints->aspect >= ::players[].impulse[1][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[2][0] (elementwise)
::players[].body.bodyPoints->aspect > ::players[].impulse[3][0] (lexically)
::players[].body.bodyPoints->aspect >= ::players[].impulse[3][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[4][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[5][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyPoints->aspect > ::players[].direction (lexically)
::players[].body.bodyPoints->aspect >= ::players[].direction (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].stepCounter (elementwise)
::players[].body.bodyPoints->aspect > point[].row (lexically)
::players[].body.bodyPoints->aspect >= point[].row (lexically)
::players[].body.bodyPoints->aspect elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].body.bodyPoints->aspect
::players[].body.bodyPoints->aspect elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].body.bodyPoints->aspect
::players[].body.bodyPoints->aspect elements < size(::players[])-1
::players[].body.bodyMapsSize <= ::players[].body.bodySize (elementwise)
::players[].body.bodyMapsSize < ::players[].basePosition.row (lexically)
::players[].body.bodyMapsSize <= ::players[].basePosition.row (lexically)
::players[].body.bodyMapsSize >= ::players[].impulse[0][0] (elementwise)
::players[].body.bodyMapsSize > ::players[].impulse[1][0] (lexically)
::players[].body.bodyMapsSize >= ::players[].impulse[1][0] (lexically)
::players[].body.bodyMapsSize >= ::players[].impulse[2][0] (elementwise)
::players[].body.bodyMapsSize > ::players[].impulse[3][0] (lexically)
::players[].body.bodyMapsSize >= ::players[].impulse[3][0] (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[4][0] (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[5][0] (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyMapsSize > ::players[].direction (lexically)
::players[].body.bodyMapsSize >= ::players[].direction (lexically)
::new_input in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].body.bodyMapsSize
size(::crashedPlayers[].start[0]) in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < size(::players[])-1
::players[direction-1].body.type in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements < ::players[direction-1].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements <= ::players[::input_n-1].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::input_n-1].body.bodySize
::players[].body.bodyMapsSize elements < ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyHeight in ::players[].body.bodyMapsSize
::players[direction-1].body.bodyHeight in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::input_n-1].basePosition.col
::players[].body.bodyMapsSize elements < ::players[::input_n].basePosition.row
::players[].body.bodyMapsSize elements < ::players[::input_n-1].basePosition.row
::players[].body.bodyMapsSize elements < ::players[::new_input].basePosition.row
::players[].body.bodyMapsSize elements < ::players[direction].basePosition.row
::players[].body.bodyMapsSize elements < ::players[direction-1].basePosition.row
::players[direction].impulse[3][0] in ::players[].body.bodyMapsSize
::players[direction-1].impulse[3][0] in ::players[].body.bodyMapsSize
::players[::new_input].direction in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::input_n].stepCounter
::players[].body.bodyMapsSize elements <= ::players[direction].stepCounter
::players[].body.bodySize >= ::players[].body.bodyWidth (elementwise)
::players[].body.bodySize >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodySize > ::players[].basePosition.row (lexically)
::players[].body.bodySize >= ::players[].basePosition.row (lexically)
::players[].body.bodySize >= ::players[].impulse[0][0] (elementwise)
::players[].body.bodySize > ::players[].impulse[1][0] (lexically)
::players[].body.bodySize >= ::players[].impulse[1][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[2][0] (elementwise)
::players[].body.bodySize > ::players[].impulse[3][0] (lexically)
::players[].body.bodySize >= ::players[].impulse[3][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[4][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[5][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodySize > ::players[].direction (lexically)
::players[].body.bodySize >= ::players[].direction (lexically)
::new_input in ::players[].body.bodySize
::players[].body.bodySize > point[].row (lexically)
::players[].body.bodySize >= point[].row (lexically)
::players[].body.bodySize elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].body.bodySize
size(::crashedPlayers[].start[0]) in ::players[].body.bodySize
::players[].body.bodySize elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].body.bodySize
::players[].body.bodySize elements < size(::players[])-1
::players[direction-1].body.type in ::players[].body.bodySize
::players[].body.bodySize elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[direction].impulse[3][0] in ::players[].body.bodySize
::players[direction-1].impulse[3][0] in ::players[].body.bodySize
::players[::new_input].direction in ::players[].body.bodySize
::players[].body.bodyWidth >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodyWidth < ::players[].basePosition.row (lexically)
::players[].body.bodyWidth <= ::players[].basePosition.row (lexically)
::players[].body.bodyWidth > ::players[].impulse[1][0] (lexically)
::players[].body.bodyWidth >= ::players[].impulse[1][0] (lexically)
::players[].body.bodyWidth >= ::players[].impulse[2][0] (elementwise)
::players[].body.bodyWidth > ::players[].impulse[3][0] (lexically)
::players[].body.bodyWidth >= ::players[].impulse[3][0] (lexically)
::players[].body.bodyWidth >= ::players[].impulse[4][0] (elementwise)
::players[].body.bodyWidth >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyWidth > ::players[].direction (lexically)
::players[].body.bodyWidth >= ::players[].direction (lexically)
::players[].body.bodyWidth elements >= size(::crashedPlayers[])-1
::players[].body.bodyWidth elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].body.bodyWidth
::players[].body.bodyWidth elements < size(::players[])-1
::players[].body.bodyWidth elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[direction-1].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[::input_n-1].body.bodySize
::players[].body.bodyWidth elements < ::players[::input_n-1].basePosition.col
::players[].body.bodyHeight < ::players[].basePosition.row (lexically)
::players[].body.bodyHeight <= ::players[].basePosition.row (lexically)
::players[].body.bodyHeight > ::players[].impulse[1][0] (lexically)
::players[].body.bodyHeight >= ::players[].impulse[1][0] (lexically)
::players[].body.bodyHeight >= ::players[].impulse[2][0] (elementwise)
::players[].body.bodyHeight > ::players[].impulse[3][0] (lexically)
::players[].body.bodyHeight >= ::players[].impulse[3][0] (lexically)
::players[].body.bodyHeight >= ::players[].impulse[4][0] (elementwise)
::players[].body.bodyHeight >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyHeight > ::players[].direction (lexically)
::players[].body.bodyHeight >= ::players[].direction (lexically)
::players[].body.bodyHeight elements >= size(::crashedPlayers[])-1
::players[].body.bodyHeight elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].body.bodyHeight
::players[].body.bodyHeight elements < size(::players[])-1
::players[].body.bodyHeight elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[direction-1].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[::input_n-1].body.bodySize
::players[].body.bodyHeight elements < ::players[::input_n-1].body.bodyWidth
::players[].body.bodyHeight elements < ::players[::input_n-1].basePosition.col
::players[].body.bodyHeight elements < ::players[::input_n].basePosition.row
::players[].body.bodyHeight elements < ::players[::input_n-1].basePosition.row
::players[].body.bodyHeight elements < ::players[::new_input].basePosition.row
::players[].body.bodyHeight elements < ::players[direction].basePosition.row
::players[].body.bodyHeight elements < ::players[direction-1].basePosition.row
::players[].body.bodyHeight elements < ::players[::input_n].stepCounter
::players[].body.color <= ::players[].basePosition.col (elementwise)
::players[].body.color < ::players[].basePosition.row (lexically)
::players[].body.color <= ::players[].basePosition.row (lexically)
::players[].body.color > ::players[].impulse[1][0] (lexically)
::players[].body.color >= ::players[].impulse[1][0] (lexically)
::players[].body.color >= ::players[].impulse[2][0] (elementwise)
::players[].body.color > ::players[].impulse[3][0] (lexically)
::players[].body.color >= ::players[].impulse[3][0] (lexically)
::players[].body.color >= ::players[].impulse[4][0] (elementwise)
::players[].body.color >= ::players[].impulse[5][0] (elementwise)
::players[].body.color > ::players[].direction (lexically)
::players[].body.color >= ::players[].direction (lexically)
::input_n in ::players[].body.color
::new_input in ::players[].body.color
direction in ::players[].body.color
::players[].body.color elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[].start[0]) in ::players[].body.color
::players[].body.color elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].body.color
::players[].body.color elements < size(::players[])-1
::players[direction-1].body.type in ::players[].body.color
::players[].body.color elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.color elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.color elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.color elements < ::players[direction-1].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize in ::players[].body.color
::players[::new_input].body.bodyMapsSize in ::players[].body.color
::players[direction-1].body.bodyMapsSize in ::players[].body.color
::players[].body.color elements < ::players[::input_n-1].body.bodySize
::players[::input_n-1].body.bodyWidth in ::players[].body.color
::players[].body.color elements <= ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyWidth in ::players[].body.color
::players[direction-1].body.bodyWidth in ::players[].body.color
::players[::new_input].body.bodyHeight in ::players[].body.color
::players[direction-1].body.bodyHeight in ::players[].body.color
::players[].body.color elements < ::players[::input_n-1].basePosition.col
::players[direction].basePosition.col in ::players[].body.color
::players[].body.color elements < ::players[::input_n].basePosition.row
::players[].body.color elements < ::players[::input_n-1].basePosition.row
::players[].body.color elements < ::players[::new_input].basePosition.row
::players[].body.color elements < ::players[direction].basePosition.row
::players[].body.color elements < ::players[direction-1].basePosition.row
::players[direction].impulse[3][0] in ::players[].body.color
::players[direction-1].impulse[3][0] in ::players[].body.color
::players[::new_input].direction in ::players[].body.color
::players[direction].direction in ::players[].body.color
::players[direction-1].direction in ::players[].body.color
::players[].body.color elements < ::players[::input_n].stepCounter
::players[].basePosition.col > ::players[].basePosition.row (lexically)
::players[].basePosition.col >= ::players[].basePosition.row (lexically)
::players[].basePosition.col > ::players[].impulse[0][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[0][0] (lexically)
::players[].basePosition.col > ::players[].impulse[1][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[1][0] (lexically)
::players[].basePosition.col > ::players[].impulse[2][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[2][0] (elementwise)
::players[].basePosition.col > ::players[].impulse[3][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[3][0] (elementwise)
::players[].basePosition.col > ::players[].impulse[4][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[4][0] (elementwise)
::players[].basePosition.col > ::players[].impulse[5][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[5][0] (elementwise)
::players[].basePosition.col > ::players[].impulse[7][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[7][0] (elementwise)
::players[].basePosition.col > ::players[].direction (lexically)
::players[].basePosition.col >= ::players[].direction (lexically)
::players[].basePosition.col > ::players[].stepCounter (lexically)
::players[].basePosition.col >= ::players[].stepCounter (lexically)
::players[].basePosition.col > point[].row (lexically)
::players[].basePosition.col >= point[].row (lexically)
::players[].basePosition.col elements >= size(::crashedPlayers[])-1
::players[].basePosition.col elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].basePosition.col
::players[].basePosition.col elements < size(::players[])-1
::players[::input_n-1].body.bodyMapsSize in ::players[].basePosition.col
::players[::input_n-1].body.bodyWidth in ::players[].basePosition.col
::players[::new_input].body.bodyWidth in ::players[].basePosition.col
::players[direction-1].body.bodyWidth in ::players[].basePosition.col
::players[::new_input].body.bodyHeight in ::players[].basePosition.col
::players[direction-1].body.bodyHeight in ::players[].basePosition.col
::players[::input_n].basePosition.row in ::players[].basePosition.col
::players[].basePosition.row > ::players[].impulse[0][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[0][0] (lexically)
::players[].basePosition.row > ::players[].impulse[1][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[1][0] (elementwise)
::players[].basePosition.row > ::players[].impulse[2][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[2][0] (elementwise)
::players[].basePosition.row > ::players[].impulse[3][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[3][0] (lexically)
::players[].basePosition.row > ::players[].impulse[4][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[4][0] (elementwise)
::players[].basePosition.row > ::players[].impulse[5][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[5][0] (elementwise)
::players[].basePosition.row > ::players[].impulse[7][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[7][0] (lexically)
::players[].basePosition.row > ::players[].direction (lexically)
::players[].basePosition.row >= ::players[].direction (lexically)
::players[].basePosition.row > ::players[].stepCounter (lexically)
::players[].basePosition.row >= ::players[].stepCounter (lexically)
::input_n in ::players[].basePosition.row
::new_input in ::players[].basePosition.row
direction in ::players[].basePosition.row
::players[].basePosition.row elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].basePosition.row
size(::crashedPlayers[].start[0]) in ::players[].basePosition.row
::players[].basePosition.row elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].basePosition.row
::players[].basePosition.row elements < size(::players[])-1
::players[direction-1].body.type in ::players[].basePosition.row
::players[].basePosition.row elements < ::players[::input_n].body.bodyPoints->aspect
::players[].basePosition.row elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].basePosition.row elements < ::players[::new_input].body.bodyPoints->aspect
::players[].basePosition.row elements < ::players[direction-1].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize in ::players[].basePosition.row
::players[::new_input].body.bodyMapsSize in ::players[].basePosition.row
::players[direction-1].body.bodyMapsSize in ::players[].basePosition.row
::players[].basePosition.row elements < ::players[::input_n-1].body.bodySize
::players[::new_input].body.bodyHeight in ::players[].basePosition.row
::players[direction-1].body.bodyHeight in ::players[].basePosition.row
::players[::input_n-1].body.color in ::players[].basePosition.row
::players[::new_input].body.color in ::players[].basePosition.row
::players[direction].body.color in ::players[].basePosition.row
::players[direction-1].body.color in ::players[].basePosition.row
::players[].basePosition.row elements < ::players[::input_n-1].basePosition.col
::players[direction].impulse[3][0] in ::players[].basePosition.row
::players[direction-1].impulse[3][0] in ::players[].basePosition.row
::players[::new_input].direction in ::players[].basePosition.row
::players[direction].direction in ::players[].basePosition.row
::players[direction-1].direction in ::players[].basePosition.row
::players[direction-1].stepCounter in ::players[].basePosition.row
::players[].impulse[0] - ::players[].impulse[1] + 4 == 0
::players[].impulse[0] - ::players[].impulse[2] + 8 == 0
::players[].impulse[0] - ::players[].impulse[3] + 12 == 0
::players[].impulse[0] - ::players[].impulse[4] + 16 == 0
::players[].impulse[0] - ::players[].impulse[5] + 20 == 0
::players[].impulse[0] - ::players[].impulse[6] + 24 == 0
::players[].impulse[0] - ::players[].impulse[7] + 28 == 0
::players[].impulse[0] - ::players[].impulse[8] + 32 == 0
::players[].impulse[0][0] < ::players[].direction (lexically)
::players[].impulse[0][0] <= ::players[].direction (lexically)
::players[].impulse[0][0] < ::players[].stepCounter (lexically)
::players[].impulse[0][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[0][0] elements <= ::input_n
::players[].impulse[0][0] < point[].col (lexically)
::players[].impulse[0][0] <= point[].col (lexically)
::players[].impulse[0][0] < point[].row (lexically)
::players[].impulse[0][0] <= point[].row (lexically)
::players[].impulse[0][0] elements <= direction
::players[].impulse[0][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[0][0] elements == size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].impulse[0][0]
::players[].impulse[0][0] elements < size(::players[])-1
::players[].impulse[0][0] elements <= size(point[])
::players[].impulse[0][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[direction-1].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[0][0] elements <= ::players[::new_input].body.bodyMapsSize
::players[].impulse[0][0] elements <= ::players[direction-1].body.bodyMapsSize
::players[].impulse[0][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[0][0] elements <= ::players[::new_input].body.bodySize
::players[].impulse[0][0] elements <= ::players[direction-1].body.bodySize
::players[].impulse[0][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[0][0] elements < ::players[::input_n-1].body.color
::players[].impulse[0][0] elements <= ::players[direction-1].body.color
::players[].impulse[0][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[0][0] elements <= ::players[direction-1].basePosition.col
::players[].impulse[0][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[0][0] elements < ::players[::input_n-1].basePosition.row
::players[].impulse[0][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[0][0] elements < ::players[direction].basePosition.row
::players[].impulse[0][0] elements < ::players[direction-1].basePosition.row
::players[direction].impulse[3][0] in ::players[].impulse[0][0]
::players[direction-1].impulse[3][0] in ::players[].impulse[0][0]
::players[].impulse[0][0] elements <= ::players[direction-1].direction
::players[].impulse[0][0] elements < ::players[::input_n].stepCounter
::players[].impulse[0][0] elements < ::players[direction].stepCounter
::players[].impulse[0][0] elements < point[::input_n-1].col
::players[].impulse[0][0] elements <= point[::input_n-1].row
::players[].impulse[1] - ::players[].impulse[2] + 4 == 0
::players[].impulse[1] - ::players[].impulse[3] + 8 == 0
::players[].impulse[1] - ::players[].impulse[4] + 12 == 0
::players[].impulse[1] - ::players[].impulse[5] + 16 == 0
::players[].impulse[1] - ::players[].impulse[6] + 20 == 0
::players[].impulse[1] - ::players[].impulse[7] + 24 == 0
::players[].impulse[1] - ::players[].impulse[8] + 28 == 0
::players[].impulse[1][0] < point[].col (lexically)
::players[].impulse[1][0] <= point[].col (lexically)
::players[].impulse[1][0] < point[].row (lexically)
::players[].impulse[1][0] <= point[].row (lexically)
::players[].impulse[1][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[1][0] elements <= size(::crashedPlayers[].start[0])
::players[].impulse[1][0] elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].impulse[1][0]
::players[].impulse[1][0] elements < size(::players[])-1
::players[].impulse[1][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[direction-1].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[1][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[1][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[1][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[1][0] elements < ::players[::input_n-1].basePosition.row
::players[].impulse[1][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[1][0] elements < ::players[direction].basePosition.row
::players[].impulse[1][0] elements < ::players[direction-1].basePosition.row
::players[direction].impulse[3][0] in ::players[].impulse[1][0]
::players[direction-1].impulse[3][0] in ::players[].impulse[1][0]
::players[].impulse[1][0] elements < ::players[::input_n].stepCounter
::players[].impulse[1][0] elements < ::players[direction].stepCounter
::players[].impulse[2] - ::players[].impulse[3] + 4 == 0
::players[].impulse[2] - ::players[].impulse[4] + 8 == 0
::players[].impulse[2] - ::players[].impulse[5] + 12 == 0
::players[].impulse[2] - ::players[].impulse[6] + 16 == 0
::players[].impulse[2] - ::players[].impulse[7] + 20 == 0
::players[].impulse[2] - ::players[].impulse[8] + 24 == 0
::players[].impulse[2][0] < ::players[].direction (lexically)
::players[].impulse[2][0] <= ::players[].direction (elementwise)
::players[].impulse[2][0] < ::players[].stepCounter (lexically)
::players[].impulse[2][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[2][0] elements <= ::input_n
::players[].impulse[2][0] < point[].col (lexically)
::players[].impulse[2][0] <= point[].col (lexically)
::players[].impulse[2][0] < point[].row (lexically)
::players[].impulse[2][0] <= point[].row (lexically)
::players[].impulse[2][0] elements < direction
::players[].impulse[2][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[2][0] elements <= size(::crashedPlayers[].start[0])
::players[].impulse[2][0] elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].impulse[2][0]
::players[].impulse[2][0] elements < size(::players[])-1
::players[].impulse[2][0] elements <= size(point[])
::players[].impulse[2][0] elements <= ::players[direction-1].body.type
::players[].impulse[2][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[2][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[2][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[2][0] elements < ::players[direction-1].body.bodyPoints->aspect
::players[].impulse[2][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[2][0] elements < ::players[::new_input].body.bodyMapsSize
::players[].impulse[2][0] elements <= ::players[direction-1].body.bodyMapsSize
::players[].impulse[2][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[2][0] elements < ::players[::new_input].body.bodySize
::players[].impulse[2][0] elements <= ::players[direction-1].body.bodySize
::players[].impulse[2][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[2][0] elements <= ::players[::new_input].body.bodyWidth
::players[].impulse[2][0] elements <= ::players[::new_input].body.bodyHeight
::players[].impulse[2][0] elements < ::players[::input_n-1].body.color
::players[].impulse[2][0] elements <= ::players[::new_input].body.color
::players[].impulse[2][0] elements <= ::players[direction].body.color
::players[].impulse[2][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[2][0] elements <= ::players[::new_input].basePosition.col
::players[].impulse[2][0] elements <= ::players[direction].basePosition.col
::players[].impulse[2][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[2][0] elements < ::players[::input_n-1].basePosition.row
::players[].impulse[2][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[2][0] elements < ::players[direction].basePosition.row
::players[].impulse[2][0] elements < ::players[direction-1].basePosition.row
::players[].impulse[2][0] elements <= ::players[::new_input].direction
::players[].impulse[2][0] elements <= ::players[direction].direction
::players[].impulse[2][0] elements < ::players[::input_n].stepCounter
::players[].impulse[2][0] elements < ::players[direction].stepCounter
::players[].impulse[2][0] elements <= ::players[direction-1].stepCounter
::players[].impulse[2][0] elements < point[::input_n-1].col
::players[].impulse[2][0] elements < point[::input_n-1].row
::players[].impulse[3] - ::players[].impulse[4] + 4 == 0
::players[].impulse[3] - ::players[].impulse[5] + 8 == 0
::players[].impulse[3] - ::players[].impulse[6] + 12 == 0
::players[].impulse[3] - ::players[].impulse[7] + 16 == 0
::players[].impulse[3] - ::players[].impulse[8] + 20 == 0
::players[].impulse[3][0] < ::players[].direction (lexically)
::players[].impulse[3][0] <= ::players[].direction (lexically)
::players[].impulse[3][0] < ::players[].stepCounter (lexically)
::players[].impulse[3][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[3][0] elements <= ::input_n
::new_input in ::players[].impulse[3][0]
::players[].impulse[3][0] < point[].col (lexically)
::players[].impulse[3][0] <= point[].col (lexically)
::players[].impulse[3][0] < point[].row (lexically)
::players[].impulse[3][0] <= point[].row (lexically)
::players[].impulse[3][0] elements <= direction
::players[].impulse[3][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[3][0] elements <= size(::crashedPlayers[].start[0])
::players[].impulse[3][0] elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].impulse[3][0]
::players[].impulse[3][0] elements < size(::players[])-1
::players[].impulse[3][0] elements <= size(point[])
::players[].impulse[3][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[direction-1].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[3][0] elements <= ::players[::new_input].body.bodyMapsSize
::players[].impulse[3][0] elements <= ::players[direction-1].body.bodyMapsSize
::players[].impulse[3][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[3][0] elements <= ::players[::new_input].body.bodySize
::players[].impulse[3][0] elements <= ::players[direction-1].body.bodySize
::players[].impulse[3][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[3][0] elements < ::players[::input_n-1].body.color
::players[].impulse[3][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[3][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[3][0] elements < ::players[::input_n-1].basePosition.row
::players[].impulse[3][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[3][0] elements < ::players[direction].basePosition.row
::players[].impulse[3][0] elements < ::players[direction-1].basePosition.row
::players[].impulse[3][0] elements < ::players[::input_n].stepCounter
::players[].impulse[3][0] elements < ::players[direction].stepCounter
::players[].impulse[3][0] elements < point[::input_n-1].col
::players[].impulse[3][0] elements <= point[::input_n-1].row
::players[].impulse[4] - ::players[].impulse[5] + 4 == 0
::players[].impulse[4] - ::players[].impulse[6] + 8 == 0
::players[].impulse[4] - ::players[].impulse[7] + 12 == 0
::players[].impulse[4] - ::players[].impulse[8] + 16 == 0
::players[].impulse[4][0] < ::players[].direction (lexically)
::players[].impulse[4][0] <= ::players[].direction (elementwise)
::players[].impulse[4][0] < ::players[].stepCounter (lexically)
::players[].impulse[4][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[4][0] elements <= ::input_n
::players[].impulse[4][0] < point[].col (lexically)
::players[].impulse[4][0] <= point[].col (lexically)
::players[].impulse[4][0] < point[].row (lexically)
::players[].impulse[4][0] <= point[].row (lexically)
::players[].impulse[4][0] elements < direction
::players[].impulse[4][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[4][0] elements <= size(::crashedPlayers[].start[0])
::players[].impulse[4][0] elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].impulse[4][0]
::players[].impulse[4][0] elements < size(::players[])-1
::players[].impulse[4][0] elements <= size(point[])
::players[].impulse[4][0] elements <= ::players[direction-1].body.type
::players[].impulse[4][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[4][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[4][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[4][0] elements < ::players[direction-1].body.bodyPoints->aspect
::players[].impulse[4][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[4][0] elements < ::players[::new_input].body.bodyMapsSize
::players[].impulse[4][0] elements <= ::players[direction-1].body.bodyMapsSize
::players[].impulse[4][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[4][0] elements < ::players[::new_input].body.bodySize
::players[].impulse[4][0] elements <= ::players[direction-1].body.bodySize
::players[].impulse[4][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[4][0] elements <= ::players[::new_input].body.bodyWidth
::players[].impulse[4][0] elements <= ::players[::new_input].body.bodyHeight
::players[].impulse[4][0] elements < ::players[::input_n-1].body.color
::players[].impulse[4][0] elements <= ::players[::new_input].body.color
::players[].impulse[4][0] elements <= ::players[direction].body.color
::players[].impulse[4][0] elements <= ::players[direction-1].body.color
::players[].impulse[4][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[4][0] elements <= ::players[::new_input].basePosition.col
::players[].impulse[4][0] elements <= ::players[direction].basePosition.col
::players[].impulse[4][0] elements <= ::players[direction-1].basePosition.col
::players[].impulse[4][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[4][0] elements < ::players[::input_n-1].basePosition.row
::players[].impulse[4][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[4][0] elements < ::players[direction].basePosition.row
::players[].impulse[4][0] elements < ::players[direction-1].basePosition.row
::players[].impulse[4][0] elements <= ::players[::new_input].direction
::players[].impulse[4][0] elements <= ::players[direction].direction
::players[].impulse[4][0] elements <= ::players[direction-1].direction
::players[].impulse[4][0] elements < ::players[::input_n].stepCounter
::players[].impulse[4][0] elements < ::players[direction].stepCounter
::players[].impulse[4][0] elements <= ::players[direction-1].stepCounter
::players[].impulse[4][0] elements < point[::input_n-1].col
::players[].impulse[4][0] elements < point[::input_n-1].row
::players[].impulse[5] - ::players[].impulse[6] + 4 == 0
::players[].impulse[5] - ::players[].impulse[7] + 8 == 0
::players[].impulse[5] - ::players[].impulse[8] + 12 == 0
::players[].impulse[5][0] < ::players[].direction (lexically)
::players[].impulse[5][0] <= ::players[].direction (lexically)
::players[].impulse[5][0] < ::players[].stepCounter (lexically)
::players[].impulse[5][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[5][0] elements <= ::input_n
::new_input in ::players[].impulse[5][0]
::players[].impulse[5][0] < point[].col (lexically)
::players[].impulse[5][0] <= point[].col (lexically)
::players[].impulse[5][0] < point[].row (lexically)
::players[].impulse[5][0] <= point[].row (lexically)
::players[].impulse[5][0] elements <= direction
::players[].impulse[5][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[5][0] elements <= size(::crashedPlayers[].start[0])
::players[].impulse[5][0] elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].impulse[5][0]
::players[].impulse[5][0] elements < size(::players[])-1
::players[].impulse[5][0] elements <= size(point[])
::players[].impulse[5][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[direction-1].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[5][0] elements <= ::players[::new_input].body.bodyMapsSize
::players[].impulse[5][0] elements <= ::players[direction-1].body.bodyMapsSize
::players[].impulse[5][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[5][0] elements <= ::players[::new_input].body.bodySize
::players[].impulse[5][0] elements <= ::players[direction-1].body.bodySize
::players[].impulse[5][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[5][0] elements < ::players[::input_n-1].body.color
::players[].impulse[5][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[5][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[5][0] elements < ::players[::input_n-1].basePosition.row
::players[].impulse[5][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[5][0] elements < ::players[direction].basePosition.row
::players[].impulse[5][0] elements < ::players[direction-1].basePosition.row
::players[direction].impulse[3][0] in ::players[].impulse[5][0]
::players[direction-1].impulse[3][0] in ::players[].impulse[5][0]
::players[].impulse[5][0] elements < ::players[::input_n].stepCounter
::players[].impulse[5][0] elements < ::players[direction].stepCounter
::players[].impulse[5][0] elements < point[::input_n-1].col
::players[].impulse[5][0] elements <= point[::input_n-1].row
::players[].impulse[6] - ::players[].impulse[7] + 4 == 0
::players[].impulse[6] - ::players[].impulse[8] + 8 == 0
::players[].impulse[7] - ::players[].impulse[8] + 4 == 0
::players[].impulse[7][0] < ::players[].direction (lexically)
::players[].impulse[7][0] <= ::players[].direction (lexically)
::players[].impulse[7][0] < ::players[].stepCounter (lexically)
::players[].impulse[7][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[7][0] elements <= ::input_n
::new_input in ::players[].impulse[7][0]
::players[].impulse[7][0] < point[].col (lexically)
::players[].impulse[7][0] <= point[].col (lexically)
::players[].impulse[7][0] < point[].row (lexically)
::players[].impulse[7][0] <= point[].row (lexically)
::players[].impulse[7][0] elements <= direction
::players[].impulse[7][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[7][0] elements <= size(::crashedPlayers[].start[0])
size(::crashedPlayers[].start[0]) in ::players[].impulse[7][0]
::players[].impulse[7][0] elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].impulse[7][0]
::players[].impulse[7][0] elements < size(::players[])-1
::players[].impulse[7][0] elements <= size(point[])
::players[].impulse[7][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[direction-1].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[7][0] elements <= ::players[::new_input].body.bodyMapsSize
::players[].impulse[7][0] elements <= ::players[direction-1].body.bodyMapsSize
::players[].impulse[7][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[7][0] elements <= ::players[::new_input].body.bodySize
::players[].impulse[7][0] elements <= ::players[direction-1].body.bodySize
::players[].impulse[7][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[7][0] elements < ::players[::input_n-1].body.color
::players[].impulse[7][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[7][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[7][0] elements < ::players[::input_n-1].basePosition.row
::players[].impulse[7][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[7][0] elements < ::players[direction].basePosition.row
::players[].impulse[7][0] elements < ::players[direction-1].basePosition.row
::players[direction].impulse[3][0] in ::players[].impulse[7][0]
::players[direction-1].impulse[3][0] in ::players[].impulse[7][0]
::players[].impulse[7][0] elements < ::players[::input_n].stepCounter
::players[].impulse[7][0] elements < ::players[direction].stepCounter
::players[].impulse[7][0] elements < point[::input_n-1].col
::players[].impulse[7][0] elements <= point[::input_n-1].row
::players[].direction > ::players[].stepCounter (lexically)
::players[].direction >= ::players[].stepCounter (lexically)
::new_input in ::players[].direction
::players[].direction < point[].col (lexically)
::players[].direction <= point[].col (lexically)
direction in ::players[].direction
::players[].direction elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[].start[0]) in ::players[].direction
::players[].direction elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].direction
::players[].direction elements < size(::players[])-1
::players[direction-1].body.type in ::players[].direction
::players[].direction elements < ::players[::input_n].body.bodyPoints->aspect
::players[].direction elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].direction elements < ::players[::new_input].body.bodyPoints->aspect
::players[].direction elements < ::players[direction-1].body.bodyPoints->aspect
::players[].direction elements < ::players[::input_n-1].body.bodySize
::players[].direction elements <= ::players[::new_input].body.bodySize
::players[].direction elements < ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.color in ::players[].direction
::players[].direction elements < ::players[::input_n-1].basePosition.col
::players[].direction elements < ::players[::input_n].basePosition.row
::players[].direction elements < ::players[::input_n-1].basePosition.row
::players[].direction elements < ::players[::new_input].basePosition.row
::players[].direction elements < ::players[direction].basePosition.row
::players[].direction elements < ::players[direction-1].basePosition.row
::players[direction].impulse[3][0] in ::players[].direction
::players[direction-1].impulse[3][0] in ::players[].direction
::players[].direction elements < ::players[::input_n].stepCounter
::input_n in ::players[].stepCounter
::new_input in ::players[].stepCounter
::players[].stepCounter < point[].col (lexically)
::players[].stepCounter <= point[].col (lexically)
::players[].stepCounter < point[].row (lexically)
::players[].stepCounter <= point[].row (lexically)
::players[].stepCounter elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[].start[0]) in ::players[].stepCounter
::players[].stepCounter elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].stepCounter
::players[].stepCounter elements < size(::players[])-1
::players[direction-1].body.type in ::players[].stepCounter
::players[].stepCounter elements < ::players[::input_n].body.bodyPoints->aspect
::players[].stepCounter elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].stepCounter elements < ::players[::new_input].body.bodyPoints->aspect
::players[].stepCounter elements < ::players[direction-1].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize in ::players[].stepCounter
::players[::new_input].body.bodyMapsSize in ::players[].stepCounter
::players[direction-1].body.bodyMapsSize in ::players[].stepCounter
::players[].stepCounter elements < ::players[::input_n-1].body.bodySize
::players[::input_n-1].body.bodyWidth in ::players[].stepCounter
::players[::new_input].body.bodyWidth in ::players[].stepCounter
::players[direction-1].body.bodyWidth in ::players[].stepCounter
::players[::new_input].body.bodyHeight in ::players[].stepCounter
::players[direction-1].body.bodyHeight in ::players[].stepCounter
::players[].stepCounter elements < ::players[::input_n-1].basePosition.col
::players[].stepCounter elements <= ::players[::input_n].basePosition.row
::players[::input_n-1].basePosition.row in ::players[].stepCounter
::players[::new_input].basePosition.row in ::players[].stepCounter
::players[].stepCounter elements <= ::players[direction].basePosition.row
::players[direction].impulse[3][0] in ::players[].stepCounter
::players[direction-1].impulse[3][0] in ::players[].stepCounter
::players[::new_input].direction in ::players[].stepCounter
::players[::input_n].onCrash in ::players[].pilot
::players[::input_n].onCrash in ::players[].onPushed
::input_n <= direction
::input_n <= size(point[])
::input_n != size(point[])-1
::input_n < ::players[::new_input].body.bodyPoints->aspect
::input_n < ::players[direction-1].body.bodyPoints->aspect
::input_n != ::players[::new_input].body.bodyWidth
::input_n != ::players[direction-1].body.bodyWidth
::input_n != ::players[::new_input].body.bodyHeight
::input_n != ::players[direction-1].body.bodyHeight
::input_n != ::players[::new_input].body.color
::input_n != ::players[::new_input].basePosition.col
::input_n != ::players[direction].basePosition.col
::input_n != ::players[direction-1].basePosition.col
::input_n < ::players[::input_n-1].basePosition.row
::input_n < ::players[::new_input].basePosition.row
::input_n < ::players[direction].basePosition.row
::input_n < ::players[direction-1].basePosition.row
::input_n >= ::players[::new_input].direction
::input_n != ::players[::new_input].stepCounter
::input_n < ::players[direction].stepCounter
::input_n != ::players[direction-1].stepCounter
::input_n < point[::input_n-1].col
::input_n <= point[::input_n-1].row
::new_input % direction == 0
::new_input <= direction
::new_input < size(::players[])-1
::new_input <= size(point[])
::new_input < ::players[::input_n].body.bodyPoints->aspect
::new_input < ::players[::input_n-1].body.bodyPoints->aspect
::new_input < ::players[::new_input].body.bodyPoints->aspect
::new_input < ::players[direction-1].body.bodyPoints->aspect
::new_input < ::players[::input_n-1].body.bodyMapsSize
::new_input < ::players[direction-1].body.bodyMapsSize
::new_input < ::players[::input_n-1].body.bodySize
::new_input < ::players[direction-1].body.bodySize
::new_input < ::players[::input_n-1].body.bodyWidth
::new_input != ::players[::new_input].body.bodyWidth
::new_input <= ::players[direction-1].body.bodyWidth
::new_input != ::players[::new_input].body.bodyHeight
::new_input <= ::players[direction-1].body.bodyHeight
::new_input < ::players[::input_n-1].body.color
::new_input != ::players[::new_input].body.color
::new_input <= ::players[direction-1].body.color
::new_input < ::players[::input_n-1].basePosition.col
::new_input != ::players[::new_input].basePosition.col
::new_input <= ::players[direction-1].basePosition.col
::new_input < ::players[::input_n].basePosition.row
::new_input < ::players[::input_n-1].basePosition.row
::new_input < ::players[::new_input].basePosition.row
::new_input < ::players[direction].basePosition.row
::new_input < ::players[direction-1].basePosition.row
::new_input != ::players[::new_input].direction
::new_input <= ::players[direction-1].direction
::new_input < ::players[::input_n].stepCounter
::new_input < ::players[direction].stepCounter
::new_input < point[::input_n-1].col
::new_input < point[::input_n-1].row
::input_key > ::trace_pos
point[].col elements >= size(::crashedPlayers[])-1
point[].col elements > size(::crashedPlayers[].start[0])
point[].row elements >= size(::crashedPlayers[])-1
point[].row elements > size(::crashedPlayers[].start[0])
point[].row elements < size(::players[])-1
point[].row elements < ::players[::input_n-1].body.bodyPoints->aspect
direction > size(::crashedPlayers[].start[0])
direction < size(::players[])-1
direction != size(point[])-1
direction > ::players[direction-1].body.type
direction < ::players[::input_n].body.bodyPoints->aspect
direction < ::players[::input_n-1].body.bodyPoints->aspect
direction < ::players[::new_input].body.bodyPoints->aspect
direction < ::players[direction-1].body.bodyPoints->aspect
direction != ::players[direction-1].body.bodyMapsSize
direction < ::players[::input_n-1].body.bodySize
direction <= ::players[::new_input].body.bodySize
direction != ::players[direction-1].body.bodySize
direction < ::players[::input_n-1].body.bodyWidth
direction != ::players[::new_input].body.bodyWidth
::players[direction-1].body.bodyWidth % direction == 0
direction != ::players[direction-1].body.bodyWidth
::players[direction-1].body.bodyHeight % direction == 0
direction != ::players[direction-1].body.bodyHeight
direction - ::players[direction].body.color - 1 == 0
direction != ::players[direction-1].body.color
direction < ::players[::input_n-1].basePosition.col
direction != ::players[::new_input].basePosition.col
direction != ::players[direction].basePosition.col
direction < ::players[::input_n].basePosition.row
direction < ::players[::input_n-1].basePosition.row
direction < ::players[::new_input].basePosition.row
direction < ::players[direction].basePosition.row
direction < ::players[direction-1].basePosition.row
direction > ::players[direction].impulse[3][0]
direction > ::players[direction-1].impulse[3][0]
direction >= ::players[::new_input].direction
direction >= ::players[direction-1].direction
direction < ::players[::input_n].stepCounter
::players[::new_input].stepCounter % direction == 0
direction != ::players[::new_input].stepCounter
direction <= ::players[direction].stepCounter
direction != ::players[direction-1].stepCounter
direction != point[::input_n-1].col
size(::crashedPlayers[])-1 <= size(point[])-1
size(::crashedPlayers[].start[0]) == size(point[])**2
size(point[]) == size(::crashedPlayers[].start[0])**2
size(::crashedPlayers[].start[0]) < ::players[::new_input].body.bodyPoints->aspect
size(::crashedPlayers[].start[0]) < ::players[direction-1].body.bodyPoints->aspect
size(::crashedPlayers[].start[0]) < ::players[::new_input].body.bodyMapsSize
size(::crashedPlayers[].start[0]) < ::players[::new_input].body.bodySize
size(::crashedPlayers[].start[0]) < ::players[::new_input].body.bodyWidth
size(::crashedPlayers[].start[0]) < ::players[::new_input].body.bodyHeight
size(::crashedPlayers[].start[0]) < ::players[::new_input].body.color
size(::crashedPlayers[].start[0]) <= ::players[direction].body.color
size(::crashedPlayers[].start[0]) < ::players[::new_input].basePosition.col
size(::crashedPlayers[].start[0]) < ::players[direction].basePosition.col
size(::crashedPlayers[].start[0]) != ::players[direction-1].basePosition.col
size(::crashedPlayers[].start[0]) < ::players[::input_n-1].basePosition.row
size(::crashedPlayers[].start[0]) < ::players[::new_input].basePosition.row
size(::crashedPlayers[].start[0]) < ::players[direction].basePosition.row
size(::crashedPlayers[].start[0]) < ::players[direction-1].basePosition.row
size(::crashedPlayers[].start[0]) < ::players[direction].direction
size(::crashedPlayers[].start[0]) != ::players[direction-1].direction
size(::crashedPlayers[].start[0]) < ::players[direction].stepCounter
size(::crashedPlayers[].start[0]) < ::players[direction-1].stepCounter
size(::crashedPlayers[].start[0]) < point[::input_n-1].col
size(::crashedPlayers[].start[0]) < point[::input_n-1].row
size(::crashedPlayers[].start[0])-1 == size(point[])-1**2
size(point[])-1 == size(::crashedPlayers[].start[0])-1**2
size(::crashedPlayers[].start[0])-1 % ::players[direction].body.color == 0
size(::crashedPlayers[].start[0])-1 <= ::players[direction-1].body.color
size(::crashedPlayers[].start[0])-1 % ::players[direction].basePosition.col == 0
size(::crashedPlayers[].start[0])-1 <= ::players[direction-1].basePosition.col
size(::crashedPlayers[].start[0])-1 <= ::players[direction-1].direction
size(::players[]) != size(point[])
size(::players[]) != size(point[])-1
size(::players[])-1 != size(point[])
size(::players[])-1 != size(point[])-1
size(::players[])-1 > ::players[direction-1].body.type
size(::players[])-1 > ::players[::new_input].body.bodyPoints->aspect
size(::players[])-1 > ::players[direction-1].body.bodyPoints->aspect
size(::players[])-1 > ::players[::new_input].body.bodyMapsSize
size(::players[])-1 > ::players[direction-1].body.bodyMapsSize
size(::players[])-1 > ::players[::new_input].body.bodySize
size(::players[])-1 > ::players[direction-1].body.bodySize
size(::players[])-1 > ::players[::new_input].body.bodyWidth
size(::players[])-1 > ::players[direction-1].body.bodyWidth
size(::players[])-1 > ::players[::new_input].body.bodyHeight
size(::players[])-1 > ::players[direction-1].body.bodyHeight
size(::players[])-1 > ::players[::new_input].body.color
size(::players[])-1 > ::players[direction].body.color
size(::players[])-1 > ::players[direction-1].body.color
size(::players[])-1 > ::players[::new_input].basePosition.col
size(::players[])-1 > ::players[direction].basePosition.col
size(::players[])-1 > ::players[direction-1].basePosition.col
size(::players[])-1 > ::players[::input_n-1].basePosition.row
size(::players[])-1 > ::players[::new_input].basePosition.row
size(::players[])-1 > ::players[direction].basePosition.row
size(::players[])-1 > ::players[direction-1].basePosition.row
size(::players[])-1 > ::players[direction].impulse[3][0]
size(::players[])-1 > ::players[direction-1].impulse[3][0]
size(::players[])-1 > ::players[::new_input].direction
size(::players[])-1 > ::players[direction].direction
size(::players[])-1 > ::players[direction-1].direction
size(::players[])-1 > ::players[::new_input].stepCounter
size(::players[])-1 > ::players[direction].stepCounter
size(::players[])-1 > ::players[direction-1].stepCounter
size(::players[])-1 > point[::input_n-1].col
size(::players[])-1 > point[::input_n-1].row
size(point[]) >= ::players[direction-1].body.type
size(point[]) != ::players[::input_n].body.bodyPoints->aspect
size(point[]) != ::players[::input_n-1].body.bodyPoints->aspect
size(point[]) != ::players[::new_input].body.bodyPoints->aspect
size(point[]) != ::players[direction-1].body.bodyPoints->aspect
size(point[]) != ::players[::input_n-1].body.bodyMapsSize
size(point[]) != ::players[::input_n-1].body.bodySize
size(point[]) != ::players[::input_n-1].body.bodyWidth
size(point[]) != ::players[::new_input].body.bodyWidth
size(point[]) != ::players[direction-1].body.bodyWidth
size(point[]) != ::players[::new_input].body.bodyHeight
size(point[]) != ::players[direction-1].body.bodyHeight
size(point[]) != ::players[::input_n-1].body.color
size(point[]) != ::players[::new_input].body.color
size(point[]) != ::players[::input_n-1].basePosition.col
size(point[]) != ::players[::new_input].basePosition.col
size(point[]) != ::players[direction].basePosition.col
size(point[]) != ::players[direction-1].basePosition.col
size(point[]) != ::players[::input_n].basePosition.row
size(point[]) != ::players[::input_n-1].basePosition.row
size(point[]) != ::players[::new_input].basePosition.row
size(point[]) != ::players[direction].basePosition.row
size(point[]) != ::players[direction-1].basePosition.row
size(point[]) >= ::players[direction].impulse[3][0]
size(point[]) >= ::players[direction-1].impulse[3][0]
size(point[]) >= ::players[::new_input].direction
size(point[]) != ::players[::input_n].stepCounter
size(point[]) != ::players[::new_input].stepCounter
size(point[]) != ::players[direction].stepCounter
size(point[]) != ::players[direction-1].stepCounter
size(point[]) != point[::input_n-1].col
size(point[])-1 != ::players[::input_n].body.bodyPoints->aspect
size(point[])-1 != ::players[::input_n-1].body.bodyPoints->aspect
size(point[])-1 != ::players[::new_input].body.bodyPoints->aspect
size(point[])-1 != ::players[direction-1].body.bodyPoints->aspect
size(point[])-1 != ::players[::input_n-1].body.bodyMapsSize
size(point[])-1 % ::players[::input_n-1].body.bodyMapsSize == 0
size(point[])-1 != ::players[::new_input].body.bodyMapsSize
size(point[])-1 % ::players[::new_input].body.bodyMapsSize == 0
size(point[])-1 != ::players[direction-1].body.bodyMapsSize
size(point[])-1 % ::players[direction-1].body.bodyMapsSize == 0
size(point[])-1 != ::players[::input_n-1].body.bodySize
size(point[])-1 != ::players[::new_input].body.bodySize
size(point[])-1 != ::players[direction-1].body.bodySize
size(point[])-1 != ::players[::input_n-1].body.bodyWidth
size(point[])-1 % ::players[::input_n-1].body.bodyWidth == 0
size(point[])-1 != ::players[::input_n-1].body.color
size(point[])-1 != ::players[::input_n-1].basePosition.col
size(point[])-1 != ::players[::input_n].basePosition.row
size(point[])-1 != ::players[::input_n-1].basePosition.row
size(point[])-1 != ::players[::new_input].basePosition.row
size(point[])-1 != ::players[direction].basePosition.row
size(point[])-1 != ::players[direction-1].basePosition.row
size(point[])-1 != ::players[::input_n].stepCounter
size(point[])-1 != ::players[direction].stepCounter
size(point[])-1 != point[::input_n-1].col
size(point[])-1 != point[::input_n-1].row
::players[direction-1].body.type < ::players[::input_n].body.bodyPoints->aspect
::players[direction-1].body.type < ::players[::input_n-1].body.bodyPoints->aspect
::players[direction-1].body.type < ::players[::new_input].body.bodyPoints->aspect
::players[direction-1].body.type < ::players[direction-1].body.bodyPoints->aspect
::players[direction-1].body.type < ::players[::input_n-1].body.bodyMapsSize
::players[direction-1].body.type < ::players[::new_input].body.bodyMapsSize
::players[direction-1].body.type < ::players[::input_n-1].body.bodySize
::players[direction-1].body.type < ::players[::new_input].body.bodySize
::players[direction-1].body.type < ::players[::input_n-1].body.bodyWidth
::players[direction-1].body.type <= ::players[::new_input].body.bodyWidth
::players[direction-1].body.type != ::players[direction-1].body.bodyWidth
::players[direction-1].body.type <= ::players[::new_input].body.bodyHeight
::players[direction-1].body.type != ::players[direction-1].body.bodyHeight
::players[direction-1].body.type < ::players[::input_n-1].body.color
::players[direction-1].body.type <= ::players[::new_input].body.color
::players[direction-1].body.type <= ::players[direction].body.color
::players[direction-1].body.type < ::players[::input_n-1].basePosition.col
::players[direction-1].body.type <= ::players[::new_input].basePosition.col
::players[direction-1].body.type <= ::players[direction].basePosition.col
::players[direction-1].body.type != ::players[direction-1].basePosition.col
::players[direction-1].body.type < ::players[::input_n].basePosition.row
::players[direction-1].body.type < ::players[::input_n-1].basePosition.row
::players[direction-1].body.type < ::players[::new_input].basePosition.row
::players[direction-1].body.type < ::players[direction].basePosition.row
::players[direction-1].body.type < ::players[direction-1].basePosition.row
::players[direction-1].body.type >= ::players[direction].impulse[3][0]
::players[direction-1].body.type >= ::players[direction-1].impulse[3][0]
::players[direction-1].body.type <= ::players[::new_input].direction
::players[direction-1].body.type != ::players[direction-1].direction
::players[direction-1].body.type < ::players[::input_n].stepCounter
::players[direction-1].body.type < ::players[direction].stepCounter
::players[direction-1].body.type < point[::input_n-1].col
::players[direction-1].body.type <= point[::input_n-1].row
::players[::input_n].body.bodyPoints->aspect <= ::players[::new_input].body.bodyPoints->aspect
::players[::input_n].body.bodyPoints->aspect <= ::players[direction-1].body.bodyPoints->aspect
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.bodyMapsSize
::players[::input_n].body.bodyPoints->aspect > ::players[direction-1].body.bodyMapsSize
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.bodySize
::players[::input_n].body.bodyPoints->aspect > ::players[direction-1].body.bodySize
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.bodyWidth
::players[::input_n].body.bodyPoints->aspect > ::players[direction-1].body.bodyWidth
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.bodyHeight
::players[::input_n].body.bodyPoints->aspect > ::players[direction-1].body.bodyHeight
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.color
::players[::input_n].body.bodyPoints->aspect > ::players[direction].body.color
::players[::input_n].body.bodyPoints->aspect > ::players[direction-1].body.color
::players[::input_n].body.bodyPoints->aspect != ::players[::new_input].basePosition.col
::players[::input_n].body.bodyPoints->aspect > ::players[direction].basePosition.col
::players[::input_n].body.bodyPoints->aspect != ::players[direction-1].basePosition.col
::players[::input_n].body.bodyPoints->aspect > ::players[::input_n-1].basePosition.row
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].basePosition.row
::players[::input_n].body.bodyPoints->aspect > ::players[direction].basePosition.row
::players[::input_n].body.bodyPoints->aspect > ::players[direction-1].basePosition.row
::players[::input_n].body.bodyPoints->aspect > ::players[direction].impulse[3][0]
::players[::input_n].body.bodyPoints->aspect > ::players[direction-1].impulse[3][0]
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].direction
::players[::input_n].body.bodyPoints->aspect > ::players[direction].direction
::players[::input_n].body.bodyPoints->aspect > ::players[direction-1].direction
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].stepCounter
::players[::input_n].body.bodyPoints->aspect > ::players[direction].stepCounter
::players[::input_n].body.bodyPoints->aspect > ::players[direction-1].stepCounter
::players[::input_n].body.bodyPoints->aspect > point[::input_n-1].row
::players[::input_n-1].body.bodyPoints->aspect >= ::players[::new_input].body.bodyPoints->aspect
::players[::input_n-1].body.bodyPoints->aspect >= ::players[direction-1].body.bodyPoints->aspect
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyMapsSize
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction-1].body.bodyMapsSize
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.bodySize
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction-1].body.bodySize
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction-1].body.bodyWidth
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction-1].body.bodyHeight
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.color
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction].body.color
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction-1].body.color
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].basePosition.col
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction].basePosition.col
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction-1].basePosition.col
::players[::input_n-1].body.bodyPoints->aspect > ::players[::input_n-1].basePosition.row
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].basePosition.row
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction].basePosition.row
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction-1].basePosition.row
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction].impulse[3][0]
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction-1].impulse[3][0]
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].direction
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction].direction
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction-1].direction
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].stepCounter
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction].stepCounter
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction-1].stepCounter
::players[::input_n-1].body.bodyPoints->aspect > point[::input_n-1].row
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].body.bodyMapsSize
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.bodyMapsSize
::players[::new_input].body.bodyPoints->aspect > ::players[direction-1].body.bodyMapsSize
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].body.bodySize
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.bodySize
::players[::new_input].body.bodyPoints->aspect > ::players[direction-1].body.bodySize
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > ::players[direction-1].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.bodyHeight
::players[::new_input].body.bodyPoints->aspect > ::players[direction-1].body.bodyHeight
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].body.color
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.color
::players[::new_input].body.bodyPoints->aspect > ::players[direction].body.color
::players[::new_input].body.bodyPoints->aspect > ::players[direction-1].body.color
::players[::new_input].body.bodyPoints->aspect != ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].basePosition.col
::players[::new_input].body.bodyPoints->aspect > ::players[direction].basePosition.col
::players[::new_input].body.bodyPoints->aspect != ::players[direction-1].basePosition.col
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[direction].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[direction-1].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[direction].impulse[3][0]
::players[::new_input].body.bodyPoints->aspect > ::players[direction-1].impulse[3][0]
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].direction
::players[::new_input].body.bodyPoints->aspect > ::players[direction].direction
::players[::new_input].body.bodyPoints->aspect > ::players[direction-1].direction
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n].stepCounter
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].stepCounter
::players[::new_input].body.bodyPoints->aspect > ::players[direction].stepCounter
::players[::new_input].body.bodyPoints->aspect > ::players[direction-1].stepCounter
::players[::new_input].body.bodyPoints->aspect > point[::input_n-1].row
::players[direction-1].body.bodyPoints->aspect > ::players[::input_n-1].body.bodyMapsSize
::players[direction-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyMapsSize
::players[direction-1].body.bodyPoints->aspect > ::players[direction-1].body.bodyMapsSize
::players[direction-1].body.bodyPoints->aspect > ::players[::input_n-1].body.bodySize
::players[direction-1].body.bodyPoints->aspect > ::players[::new_input].body.bodySize
::players[direction-1].body.bodyPoints->aspect > ::players[direction-1].body.bodySize
::players[direction-1].body.bodyPoints->aspect > ::players[::input_n-1].body.bodyWidth
::players[direction-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyWidth
::players[direction-1].body.bodyPoints->aspect > ::players[direction-1].body.bodyWidth
::players[direction-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyHeight
::players[direction-1].body.bodyPoints->aspect > ::players[direction-1].body.bodyHeight
::players[direction-1].body.bodyPoints->aspect > ::players[::input_n-1].body.color
::players[direction-1].body.bodyPoints->aspect > ::players[::new_input].body.color
::players[direction-1].body.bodyPoints->aspect > ::players[direction].body.color
::players[direction-1].body.bodyPoints->aspect > ::players[direction-1].body.color
::players[direction-1].body.bodyPoints->aspect != ::players[::input_n-1].basePosition.col
::players[direction-1].body.bodyPoints->aspect != ::players[::new_input].basePosition.col
::players[direction-1].body.bodyPoints->aspect > ::players[direction].basePosition.col
::players[direction-1].body.bodyPoints->aspect > ::players[direction-1].basePosition.col
::players[direction-1].body.bodyPoints->aspect > ::players[::input_n].basePosition.row
::players[direction-1].body.bodyPoints->aspect > ::players[::input_n-1].basePosition.row
::players[direction-1].body.bodyPoints->aspect > ::players[::new_input].basePosition.row
::players[direction-1].body.bodyPoints->aspect > ::players[direction].basePosition.row
::players[direction-1].body.bodyPoints->aspect > ::players[direction-1].basePosition.row
::players[direction-1].body.bodyPoints->aspect > ::players[direction].impulse[3][0]
::players[direction-1].body.bodyPoints->aspect > ::players[direction-1].impulse[3][0]
::players[direction-1].body.bodyPoints->aspect > ::players[::new_input].direction
::players[direction-1].body.bodyPoints->aspect > ::players[direction].direction
::players[direction-1].body.bodyPoints->aspect > ::players[direction-1].direction
::players[direction-1].body.bodyPoints->aspect > ::players[::input_n].stepCounter
::players[direction-1].body.bodyPoints->aspect > ::players[::new_input].stepCounter
::players[direction-1].body.bodyPoints->aspect > ::players[direction].stepCounter
::players[direction-1].body.bodyPoints->aspect > ::players[direction-1].stepCounter
::players[direction-1].body.bodyPoints->aspect > point[::input_n-1].row
::players[::input_n-1].body.bodyMapsSize >= ::players[::new_input].body.bodyMapsSize
::players[::input_n-1].body.bodyMapsSize >= ::players[direction-1].body.bodyMapsSize
::players[::input_n-1].body.bodyMapsSize != ::players[::new_input].body.bodySize
::players[::input_n-1].body.bodyMapsSize != ::players[direction-1].body.bodySize
::players[::input_n-1].body.bodyMapsSize != ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.bodyMapsSize != ::players[direction-1].body.bodyWidth
::players[::input_n-1].body.bodyMapsSize >= ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize >= ::players[direction-1].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize > ::players[::new_input].body.color
::players[::input_n-1].body.bodyMapsSize >= ::players[direction].body.color
::players[::input_n-1].body.bodyMapsSize > ::players[direction-1].body.color
::players[::input_n-1].body.bodyMapsSize != ::players[::new_input].basePosition.col
::players[::input_n-1].body.bodyMapsSize != ::players[direction-1].basePosition.col
::players[::input_n-1].body.bodyMapsSize < ::players[::input_n-1].basePosition.row
::players[::input_n-1].body.bodyMapsSize < ::players[::new_input].basePosition.row
::players[::input_n-1].body.bodyMapsSize < ::players[direction].basePosition.row
::players[::input_n-1].body.bodyMapsSize < ::players[direction-1].basePosition.row
::players[::input_n-1].body.bodyMapsSize > ::players[direction].impulse[3][0]
::players[::input_n-1].body.bodyMapsSize > ::players[direction-1].impulse[3][0]
::players[::input_n-1].body.bodyMapsSize > ::players[::new_input].direction
::players[::input_n-1].body.bodyMapsSize > ::players[direction].direction
::players[::input_n-1].body.bodyMapsSize > ::players[direction-1].direction
::players[::input_n-1].body.bodyMapsSize != ::players[::new_input].stepCounter
::players[::input_n-1].body.bodyMapsSize <= ::players[direction].stepCounter
::players[::new_input].body.bodyMapsSize < ::players[::input_n-1].body.bodySize
::players[::new_input].body.bodyMapsSize != ::players[direction-1].body.bodySize
::players[::new_input].body.bodyMapsSize < ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyMapsSize != ::players[::new_input].body.bodyWidth
::players[::new_input].body.bodyMapsSize != ::players[direction-1].body.bodyWidth
::players[::new_input].body.bodyMapsSize >= ::players[::new_input].body.bodyHeight
::players[::new_input].body.bodyMapsSize != ::players[::input_n-1].body.color
::players[::new_input].body.bodyMapsSize > ::players[::new_input].body.color
::players[::new_input].body.bodyMapsSize >= ::players[direction].body.color
::players[::new_input].body.bodyMapsSize != ::players[direction-1].body.color
::players[::new_input].body.bodyMapsSize < ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodyMapsSize != ::players[::new_input].basePosition.col
::players[::new_input].body.bodyMapsSize != ::players[direction-1].basePosition.col
::players[::new_input].body.bodyMapsSize < ::players[::input_n].basePosition.row
::players[::new_input].body.bodyMapsSize < ::players[::input_n-1].basePosition.row
::players[::new_input].body.bodyMapsSize < ::players[::new_input].basePosition.row
::players[::new_input].body.bodyMapsSize < ::players[direction].basePosition.row
::players[::new_input].body.bodyMapsSize < ::players[direction-1].basePosition.row
::players[::new_input].body.bodyMapsSize > ::players[direction].impulse[3][0]
::players[::new_input].body.bodyMapsSize > ::players[direction-1].impulse[3][0]
::players[::new_input].body.bodyMapsSize > ::players[::new_input].direction
::players[::new_input].body.bodyMapsSize > ::players[direction].direction
::players[::new_input].body.bodyMapsSize >= ::players[direction-1].direction
::players[::new_input].body.bodyMapsSize < ::players[::input_n].stepCounter
::players[::new_input].body.bodyMapsSize != ::players[::new_input].stepCounter
::players[::new_input].body.bodyMapsSize <= ::players[direction].stepCounter
::players[direction-1].body.bodyMapsSize < ::players[::input_n-1].body.bodySize
::players[direction-1].body.bodyMapsSize != ::players[::new_input].body.bodySize
::players[direction-1].body.bodyMapsSize < ::players[::input_n-1].body.bodyWidth
::players[direction-1].body.bodyMapsSize != ::players[::new_input].body.bodyWidth
::players[direction-1].body.bodyMapsSize != ::players[direction-1].body.bodyWidth
::players[direction-1].body.bodyMapsSize >= ::players[direction-1].body.bodyHeight
::players[direction-1].body.bodyMapsSize != ::players[::input_n-1].body.color
::players[direction-1].body.bodyMapsSize != ::players[::new_input].body.color
::players[direction].body.color % ::players[direction-1].body.bodyMapsSize == 0
::players[direction-1].body.bodyMapsSize < ::players[::input_n-1].basePosition.col
::players[direction-1].body.bodyMapsSize != ::players[::new_input].basePosition.col
::players[direction-1].body.bodyMapsSize != ::players[direction].basePosition.col
::players[direction].basePosition.col % ::players[direction-1].body.bodyMapsSize == 0
::players[direction-1].basePosition.col % ::players[direction-1].body.bodyMapsSize == 0
::players[direction-1].body.bodyMapsSize != ::players[direction-1].basePosition.col
::players[direction-1].body.bodyMapsSize < ::players[::input_n].basePosition.row
::players[direction-1].body.bodyMapsSize < ::players[::input_n-1].basePosition.row
::players[direction-1].body.bodyMapsSize < ::players[::new_input].basePosition.row
::players[direction-1].body.bodyMapsSize < ::players[direction].basePosition.row
::players[direction-1].body.bodyMapsSize < ::players[direction-1].basePosition.row
::players[direction-1].body.bodyMapsSize >= ::players[direction].impulse[3][0]
::players[direction-1].body.bodyMapsSize >= ::players[::new_input].direction
::players[direction].direction % ::players[direction-1].body.bodyMapsSize == 0
::players[direction-1].body.bodyMapsSize != ::players[direction-1].direction
::players[direction-1].body.bodyMapsSize < ::players[::input_n].stepCounter
::players[direction-1].body.bodyMapsSize != ::players[::new_input].stepCounter
::players[direction-1].body.bodyMapsSize < ::players[direction].stepCounter
::players[direction-1].body.bodyMapsSize != ::players[direction-1].stepCounter
::players[direction-1].stepCounter % ::players[direction-1].body.bodyMapsSize == 0
::players[direction-1].body.bodyMapsSize <= point[::input_n-1].col
::players[direction-1].body.bodyMapsSize <= point[::input_n-1].row
::players[::input_n-1].body.bodySize >= ::players[::new_input].body.bodySize
::players[::input_n-1].body.bodySize >= ::players[direction-1].body.bodySize
::players[::input_n-1].body.bodySize > ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.bodySize > ::players[direction-1].body.bodyWidth
::players[::input_n-1].body.bodySize > ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodySize > ::players[direction-1].body.bodyHeight
::players[::input_n-1].body.bodySize > ::players[::new_input].body.color
::players[::input_n-1].body.bodySize > ::players[direction].body.color
::players[::input_n-1].body.bodySize > ::players[direction-1].body.color
::players[::input_n-1].body.bodySize != ::players[::new_input].basePosition.col
::players[::input_n-1].body.bodySize > ::players[direction].basePosition.col
::players[::input_n-1].body.bodySize != ::players[direction-1].basePosition.col
::players[::input_n-1].body.bodySize > ::players[::input_n-1].basePosition.row
::players[::input_n-1].body.bodySize > ::players[::new_input].basePosition.row
::players[::input_n-1].body.bodySize > ::players[direction].basePosition.row
::players[::input_n-1].body.bodySize > ::players[direction-1].basePosition.row
::players[::input_n-1].body.bodySize > ::players[direction].impulse[3][0]
::players[::input_n-1].body.bodySize > ::players[direction-1].impulse[3][0]
::players[::input_n-1].body.bodySize > ::players[::new_input].direction
::players[::input_n-1].body.bodySize > ::players[direction].direction
::players[::input_n-1].body.bodySize > ::players[direction-1].direction
::players[::input_n-1].body.bodySize > ::players[::new_input].stepCounter
::players[::input_n-1].body.bodySize > ::players[direction].stepCounter
::players[::input_n-1].body.bodySize > ::players[direction-1].stepCounter
::players[::input_n-1].body.bodySize > point[::input_n-1].row
::players[::new_input].body.bodySize != ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodySize > ::players[::new_input].body.bodyWidth
::players[::new_input].body.bodySize != ::players[direction-1].body.bodyWidth
::players[::new_input].body.bodySize > ::players[::new_input].body.bodyHeight
::players[::new_input].body.bodySize != ::players[direction-1].body.bodyHeight
::players[::new_input].body.bodySize != ::players[::input_n-1].body.color
::players[::new_input].body.bodySize > ::players[::new_input].body.color
::players[::new_input].body.bodySize > ::players[direction].body.color
::players[::new_input].body.bodySize != ::players[direction-1].body.color
::players[::new_input].body.bodySize < ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodySize != ::players[::new_input].basePosition.col
::players[::new_input].body.bodySize > ::players[direction].basePosition.col
::players[::new_input].body.bodySize != ::players[direction-1].basePosition.col
::players[::new_input].body.bodySize != ::players[::input_n].basePosition.row
::players[::new_input].body.bodySize != ::players[::input_n-1].basePosition.row
::players[::new_input].body.bodySize != ::players[::new_input].basePosition.row
::players[::new_input].body.bodySize != ::players[direction].basePosition.row
::players[::new_input].body.bodySize != ::players[direction-1].basePosition.row
::players[::new_input].body.bodySize > ::players[direction].impulse[3][0]
::players[::new_input].body.bodySize > ::players[direction-1].impulse[3][0]
::players[::new_input].body.bodySize > ::players[::new_input].direction
::players[::new_input].body.bodySize > ::players[direction].direction
::players[::new_input].body.bodySize >= ::players[direction-1].direction
::players[::new_input].body.bodySize != ::players[::input_n].stepCounter
::players[::new_input].body.bodySize != ::players[::new_input].stepCounter
::players[::new_input].body.bodySize != ::players[direction].stepCounter
::players[::new_input].body.bodySize > ::players[direction-1].stepCounter
::players[::new_input].body.bodySize != point[::input_n-1].row
::players[direction-1].body.bodySize != ::players[::input_n-1].body.bodyWidth
::players[direction-1].body.bodySize != ::players[::new_input].body.bodyWidth
::players[direction-1].body.bodySize > ::players[direction-1].body.bodyWidth
::players[direction-1].body.bodySize != ::players[::new_input].body.bodyHeight
::players[direction-1].body.bodySize > ::players[direction-1].body.bodyHeight
::players[direction-1].body.bodySize != ::players[::input_n-1].body.color
::players[direction-1].body.bodySize != ::players[::new_input].body.color
::players[direction].body.color % ::players[direction-1].body.bodySize == 0
::players[direction-1].body.bodySize < ::players[::input_n-1].basePosition.col
::players[direction-1].body.bodySize != ::players[::new_input].basePosition.col
::players[direction-1].body.bodySize != ::players[direction].basePosition.col
::players[direction].basePosition.col % ::players[direction-1].body.bodySize == 0
::players[direction-1].body.bodySize != ::players[direction-1].basePosition.col
::players[direction-1].body.bodySize != ::players[::input_n].basePosition.row
::players[direction-1].body.bodySize != ::players[::input_n-1].basePosition.row
::players[direction-1].body.bodySize != ::players[::new_input].basePosition.row
::players[direction-1].body.bodySize != ::players[direction].basePosition.row
::players[direction-1].body.bodySize != ::players[direction-1].basePosition.row
::players[direction-1].body.bodySize >= ::players[direction].impulse[3][0]
::players[direction-1].body.bodySize >= ::players[::new_input].direction
::players[direction].direction % ::players[direction-1].body.bodySize == 0
::players[direction-1].body.bodySize != ::players[direction-1].direction
::players[direction-1].body.bodySize != ::players[::input_n].stepCounter
::players[direction-1].body.bodySize > ::players[::new_input].stepCounter
::players[direction-1].body.bodySize != ::players[direction].stepCounter
::players[direction-1].body.bodySize != ::players[direction-1].stepCounter
::players[direction-1].stepCounter % ::players[direction-1].body.bodySize == 0
::players[direction-1].body.bodySize != point[::input_n-1].col
::players[::input_n-1].body.bodyWidth >= ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.bodyWidth >= ::players[direction-1].body.bodyWidth
::players[::input_n-1].body.bodyWidth > ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodyWidth > ::players[direction-1].body.bodyHeight
::players[::input_n-1].body.bodyWidth > ::players[::new_input].body.color
::players[::input_n-1].body.bodyWidth > ::players[direction].body.color
::players[::input_n-1].body.bodyWidth > ::players[direction-1].body.color
::players[::input_n-1].body.bodyWidth != ::players[::new_input].basePosition.col
::players[::input_n-1].body.bodyWidth >= ::players[direction].basePosition.col
::players[::input_n-1].body.bodyWidth != ::players[direction-1].basePosition.col
::players[::input_n-1].body.bodyWidth < ::players[::input_n-1].basePosition.row
::players[::input_n-1].body.bodyWidth < ::players[::new_input].basePosition.row
::players[::input_n-1].body.bodyWidth < ::players[direction].basePosition.row
::players[::input_n-1].body.bodyWidth < ::players[direction-1].basePosition.row
::players[::input_n-1].body.bodyWidth > ::players[direction].impulse[3][0]
::players[::input_n-1].body.bodyWidth > ::players[direction-1].impulse[3][0]
::players[::input_n-1].body.bodyWidth > ::players[::new_input].direction
::players[::input_n-1].body.bodyWidth > ::players[direction].direction
::players[::input_n-1].body.bodyWidth > ::players[direction-1].direction
::players[::input_n-1].body.bodyWidth != ::players[::new_input].stepCounter
::players[::input_n-1].body.bodyWidth != ::players[direction-1].stepCounter
::players[::new_input].body.bodyWidth != ::players[direction-1].body.bodyHeight
::players[::new_input].body.bodyWidth != ::players[::input_n-1].body.color
::players[::new_input].body.bodyWidth >= ::players[::new_input].body.color
::players[::new_input].body.bodyWidth >= ::players[direction].body.color
::players[::new_input].body.bodyWidth != ::players[direction-1].body.color
::players[::new_input].body.bodyWidth < ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodyWidth <= ::players[::new_input].basePosition.col
::players[::new_input].body.bodyWidth >= ::players[direction].basePosition.col
::players[::new_input].body.bodyWidth != ::players[direction-1].basePosition.col
::players[::new_input].body.bodyWidth < ::players[::input_n].basePosition.row
::players[::new_input].body.bodyWidth < ::players[::input_n-1].basePosition.row
::players[::new_input].body.bodyWidth < ::players[::new_input].basePosition.row
::players[::new_input].body.bodyWidth < ::players[direction].basePosition.row
::players[::new_input].body.bodyWidth < ::players[direction-1].basePosition.row
::players[::new_input].body.bodyWidth >= ::players[direction].impulse[3][0]
::players[::new_input].body.bodyWidth >= ::players[direction-1].impulse[3][0]
::players[::new_input].body.bodyWidth >= ::players[::new_input].direction
::players[::new_input].body.bodyWidth >= ::players[direction].direction
::players[::new_input].body.bodyWidth != ::players[direction-1].direction
::players[::new_input].body.bodyWidth < ::players[::input_n].stepCounter
::players[::new_input].body.bodyWidth != ::players[::new_input].stepCounter
::players[direction-1].body.bodyWidth != ::players[::new_input].body.bodyHeight
::players[direction-1].body.bodyWidth != ::players[::input_n-1].body.color
::players[direction-1].body.bodyWidth != ::players[::new_input].body.color
::players[direction-1].body.bodyWidth != ::players[direction].body.color
::players[direction-1].body.bodyWidth < ::players[::input_n-1].basePosition.col
::players[direction-1].body.bodyWidth != ::players[::new_input].basePosition.col
::players[direction-1].body.bodyWidth != ::players[direction].basePosition.col
::players[direction-1].body.bodyWidth <= ::players[direction-1].basePosition.col
::players[direction-1].body.bodyWidth < ::players[::input_n].basePosition.row
::players[direction-1].body.bodyWidth < ::players[::input_n-1].basePosition.row
::players[direction-1].body.bodyWidth < ::players[::new_input].basePosition.row
::players[direction-1].body.bodyWidth < ::players[direction].basePosition.row
::players[direction-1].body.bodyWidth < ::players[direction-1].basePosition.row
::players[direction-1].body.bodyWidth != ::players[::new_input].direction
::players[direction-1].body.bodyWidth < ::players[::input_n].stepCounter
::players[direction-1].body.bodyWidth < ::players[direction].stepCounter
::players[direction-1].body.bodyWidth != ::players[direction-1].stepCounter
::players[::new_input].body.bodyHeight != ::players[::input_n-1].body.color
::players[::new_input].body.bodyHeight >= ::players[::new_input].body.color
::players[::new_input].body.bodyHeight >= ::players[direction].body.color
::players[::new_input].body.bodyHeight != ::players[direction-1].body.color
::players[::new_input].body.bodyHeight < ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodyHeight <= ::players[::new_input].basePosition.col
::players[::new_input].body.bodyHeight != ::players[direction-1].basePosition.col
::players[::new_input].body.bodyHeight < ::players[::input_n].basePosition.row
::players[::new_input].body.bodyHeight < ::players[::input_n-1].basePosition.row
::players[::new_input].body.bodyHeight < ::players[::new_input].basePosition.row
::players[::new_input].body.bodyHeight < ::players[direction].basePosition.row
::players[::new_input].body.bodyHeight < ::players[direction-1].basePosition.row
::players[::new_input].body.bodyHeight >= ::players[direction].impulse[3][0]
::players[::new_input].body.bodyHeight >= ::players[direction-1].impulse[3][0]
::players[::new_input].body.bodyHeight >= ::players[::new_input].direction
::players[::new_input].body.bodyHeight >= ::players[direction].direction
::players[::new_input].body.bodyHeight != ::players[direction-1].direction
::players[::new_input].body.bodyHeight < ::players[::input_n].stepCounter
::players[::new_input].body.bodyHeight != ::players[::new_input].stepCounter
::players[::new_input].body.bodyHeight <= ::players[direction].stepCounter
::players[direction-1].body.bodyHeight != ::players[::input_n-1].body.color
::players[direction-1].body.bodyHeight != ::players[::new_input].body.color
::players[direction-1].body.bodyHeight != ::players[direction].body.color
::players[direction-1].body.bodyHeight < ::players[::input_n-1].basePosition.col
::players[direction-1].body.bodyHeight != ::players[::new_input].basePosition.col
::players[direction-1].body.bodyHeight != ::players[direction].basePosition.col
::players[direction-1].body.bodyHeight <= ::players[direction-1].basePosition.col
::players[direction-1].body.bodyHeight < ::players[::input_n].basePosition.row
::players[direction-1].body.bodyHeight < ::players[::input_n-1].basePosition.row
::players[direction-1].body.bodyHeight < ::players[::new_input].basePosition.row
::players[direction-1].body.bodyHeight < ::players[direction].basePosition.row
::players[direction-1].body.bodyHeight < ::players[direction-1].basePosition.row
::players[direction-1].body.bodyHeight != ::players[::new_input].direction
::players[direction-1].body.bodyHeight < ::players[::input_n].stepCounter
::players[direction-1].body.bodyHeight < ::players[direction].stepCounter
::players[direction-1].body.bodyHeight != ::players[direction-1].stepCounter
::players[direction-1].body.bodyHeight <= point[::input_n-1].col
::players[direction-1].body.bodyHeight < point[::input_n-1].row
::players[::input_n-1].body.color >= ::players[::new_input].body.color
::players[::input_n-1].body.color >= ::players[direction-1].body.color
::players[::input_n-1].body.color != ::players[::new_input].basePosition.col
::players[::input_n-1].body.color < ::players[::input_n-1].basePosition.row
::players[::input_n-1].body.color < ::players[::new_input].basePosition.row
::players[::input_n-1].body.color < ::players[direction].basePosition.row
::players[::input_n-1].body.color < ::players[direction-1].basePosition.row
::players[::input_n-1].body.color > ::players[direction].impulse[3][0]
::players[::input_n-1].body.color > ::players[direction-1].impulse[3][0]
::players[::input_n-1].body.color > ::players[::new_input].direction
::players[::input_n-1].body.color >= ::players[direction].direction
::players[::input_n-1].body.color >= ::players[direction-1].direction
::players[::input_n-1].body.color != ::players[::new_input].stepCounter
::players[::input_n-1].body.color < ::players[direction].stepCounter
::players[::input_n-1].body.color != ::players[direction-1].stepCounter
::players[::input_n-1].body.color != point[::input_n-1].col
::players[::new_input].body.color < ::players[::input_n-1].basePosition.col
::players[::new_input].body.color < ::players[::input_n].basePosition.row
::players[::new_input].body.color < ::players[::input_n-1].basePosition.row
::players[::new_input].body.color < ::players[::new_input].basePosition.row
::players[::new_input].body.color < ::players[direction].basePosition.row
::players[::new_input].body.color < ::players[direction-1].basePosition.row
::players[::new_input].body.color >= ::players[direction].impulse[3][0]
::players[::new_input].body.color >= ::players[direction-1].impulse[3][0]
::players[::new_input].body.color >= ::players[::new_input].direction
::players[::new_input].body.color >= ::players[direction].direction
::players[::new_input].body.color < ::players[::input_n].stepCounter
::players[::new_input].body.color != ::players[::new_input].stepCounter
::players[::new_input].body.color < ::players[direction].stepCounter
::players[::new_input].body.color != point[::input_n-1].col
::players[direction].body.color != ::players[direction-1].body.color
::players[direction].body.color < ::players[::input_n-1].basePosition.col
::players[direction].body.color <= ::players[::new_input].basePosition.col
::players[direction].body.color < ::players[::input_n].basePosition.row
::players[direction].body.color < ::players[::input_n-1].basePosition.row
::players[direction].body.color < ::players[::new_input].basePosition.row
::players[direction].body.color < ::players[direction].basePosition.row
::players[direction].body.color < ::players[direction-1].basePosition.row
::players[direction].body.color >= ::players[direction].impulse[3][0]
::players[direction].body.color >= ::players[direction-1].impulse[3][0]
::players[direction].body.color < ::players[::input_n].stepCounter
::players[direction].body.color < ::players[direction].stepCounter
::players[direction].body.color <= ::players[direction-1].stepCounter
::players[direction].body.color <= point[::input_n-1].col
::players[direction-1].body.color < ::players[::input_n-1].basePosition.col
::players[direction-1].body.color != ::players[::new_input].basePosition.col
::players[direction-1].body.color != ::players[direction].basePosition.col
::players[direction-1].body.color < ::players[::input_n].basePosition.row
::players[direction-1].body.color < ::players[::input_n-1].basePosition.row
::players[direction-1].body.color < ::players[::new_input].basePosition.row
::players[direction-1].body.color < ::players[direction].basePosition.row
::players[direction-1].body.color < ::players[direction-1].basePosition.row
::players[direction-1].body.color >= ::players[direction].impulse[3][0]
::players[direction-1].body.color >= ::players[direction-1].impulse[3][0]
::players[direction-1].body.color != ::players[direction].direction
::players[direction-1].body.color < ::players[::input_n].stepCounter
::players[direction-1].body.color < ::players[direction].stepCounter
::players[direction-1].body.color != ::players[direction-1].stepCounter
::players[direction-1].body.color < point[::input_n-1].col
::players[::input_n-1].basePosition.col >= ::players[::new_input].basePosition.col
::players[::input_n-1].basePosition.col > ::players[direction].basePosition.col
::players[::input_n-1].basePosition.col >= ::players[direction-1].basePosition.col
::players[::input_n-1].basePosition.col > ::players[::input_n-1].basePosition.row
::players[::input_n-1].basePosition.col > ::players[::new_input].basePosition.row
::players[::input_n-1].basePosition.col > ::players[direction].basePosition.row
::players[::input_n-1].basePosition.col > ::players[direction-1].basePosition.row
::players[::input_n-1].basePosition.col > ::players[direction].impulse[3][0]
::players[::input_n-1].basePosition.col > ::players[direction-1].impulse[3][0]
::players[::input_n-1].basePosition.col > ::players[::new_input].direction
::players[::input_n-1].basePosition.col > ::players[direction].direction
::players[::input_n-1].basePosition.col > ::players[direction-1].direction
::players[::input_n-1].basePosition.col > ::players[::new_input].stepCounter
::players[::input_n-1].basePosition.col > ::players[direction].stepCounter
::players[::input_n-1].basePosition.col > ::players[direction-1].stepCounter
::players[::input_n-1].basePosition.col > point[::input_n-1].row
::players[::new_input].basePosition.col >= ::players[direction].basePosition.col
::players[::new_input].basePosition.col != ::players[::input_n].basePosition.row
::players[::new_input].basePosition.col != ::players[::input_n-1].basePosition.row
::players[::new_input].basePosition.col != ::players[::new_input].basePosition.row
::players[::new_input].basePosition.col != ::players[direction].basePosition.row
::players[::new_input].basePosition.col != ::players[direction-1].basePosition.row
::players[::new_input].basePosition.col >= ::players[direction].impulse[3][0]
::players[::new_input].basePosition.col >= ::players[direction-1].impulse[3][0]
::players[::new_input].basePosition.col >= ::players[::new_input].direction
::players[::new_input].basePosition.col >= ::players[direction].direction
::players[::new_input].basePosition.col != ::players[direction-1].direction
::players[::new_input].basePosition.col != ::players[::input_n].stepCounter
::players[::new_input].basePosition.col != ::players[::new_input].stepCounter
::players[::new_input].basePosition.col != ::players[direction].stepCounter
::players[::new_input].basePosition.col >= ::players[direction-1].stepCounter
::players[::new_input].basePosition.col != point[::input_n-1].row
::players[direction].basePosition.col != ::players[direction-1].basePosition.col
::players[direction].basePosition.col < ::players[::input_n].basePosition.row
::players[direction].basePosition.col < ::players[::input_n-1].basePosition.row
::players[direction].basePosition.col < ::players[::new_input].basePosition.row
::players[direction].basePosition.col < ::players[direction].basePosition.row
::players[direction].basePosition.col < ::players[direction-1].basePosition.row
::players[direction].basePosition.col >= ::players[direction-1].impulse[3][0]
::players[direction].basePosition.col >= ::players[direction].direction
::players[direction].basePosition.col != ::players[direction-1].direction
::players[direction].basePosition.col < ::players[::input_n].stepCounter
::players[direction-1].basePosition.col != ::players[::input_n].basePosition.row
::players[direction-1].basePosition.col != ::players[::input_n-1].basePosition.row
::players[direction-1].basePosition.col != ::players[::new_input].basePosition.row
::players[direction-1].basePosition.col != ::players[direction].basePosition.row
::players[direction-1].basePosition.col != ::players[direction-1].basePosition.row
::players[direction-1].basePosition.col >= ::players[direction].impulse[3][0]
::players[direction-1].basePosition.col != ::players[::new_input].direction
::players[direction-1].basePosition.col != ::players[::input_n].stepCounter
::players[direction-1].basePosition.col >= ::players[::new_input].stepCounter
::players[direction-1].basePosition.col != ::players[direction].stepCounter
::players[direction-1].basePosition.col != ::players[direction-1].stepCounter
::players[::input_n].basePosition.row >= ::players[::input_n-1].basePosition.row
::players[::input_n].basePosition.row >= ::players[::new_input].basePosition.row
::players[::input_n].basePosition.row <= ::players[direction].basePosition.row
::players[::input_n].basePosition.row > ::players[direction].impulse[3][0]
::players[::input_n].basePosition.row > ::players[direction-1].impulse[3][0]
::players[::input_n].basePosition.row > ::players[::new_input].direction
::players[::input_n].basePosition.row > ::players[direction].direction
::players[::input_n].basePosition.row > ::players[direction-1].direction
::players[::input_n].basePosition.row > ::players[::new_input].stepCounter
::players[::input_n].basePosition.row > ::players[direction].stepCounter
::players[::input_n].basePosition.row > ::players[direction-1].stepCounter
::players[::input_n-1].basePosition.row <= ::players[::new_input].basePosition.row
::players[::input_n-1].basePosition.row <= ::players[direction].basePosition.row
::players[::input_n-1].basePosition.row <= ::players[direction-1].basePosition.row
::players[::input_n-1].basePosition.row > ::players[direction].impulse[3][0]
::players[::input_n-1].basePosition.row > ::players[direction-1].impulse[3][0]
::players[::input_n-1].basePosition.row > ::players[::new_input].direction
::players[::input_n-1].basePosition.row > ::players[direction].direction
::players[::input_n-1].basePosition.row > ::players[direction-1].direction
::players[::input_n-1].basePosition.row >= ::players[::input_n].stepCounter
::players[::input_n-1].basePosition.row >= ::players[::new_input].stepCounter
::players[::input_n-1].basePosition.row >= ::players[direction].stepCounter
::players[::input_n-1].basePosition.row >= ::players[direction-1].stepCounter
::players[::new_input].basePosition.row <= ::players[direction].basePosition.row
::players[::new_input].basePosition.row > ::players[direction].impulse[3][0]
::players[::new_input].basePosition.row > ::players[direction-1].impulse[3][0]
::players[::new_input].basePosition.row > ::players[::new_input].direction
::players[::new_input].basePosition.row > ::players[direction].direction
::players[::new_input].basePosition.row > ::players[direction-1].direction
::players[::new_input].basePosition.row >= ::players[::input_n].stepCounter
::players[::new_input].basePosition.row > ::players[::new_input].stepCounter
::players[::new_input].basePosition.row >= ::players[direction].stepCounter
::players[::new_input].basePosition.row >= ::players[direction-1].stepCounter
::players[direction].basePosition.row >= ::players[direction-1].basePosition.row
::players[direction].basePosition.row > ::players[direction].impulse[3][0]
::players[direction].basePosition.row > ::players[direction-1].impulse[3][0]
::players[direction].basePosition.row > ::players[::new_input].direction
::players[direction].basePosition.row > ::players[direction].direction
::players[direction].basePosition.row > ::players[direction-1].direction
::players[direction].basePosition.row > ::players[::input_n].stepCounter
::players[direction].basePosition.row > ::players[::new_input].stepCounter
::players[direction].basePosition.row > ::players[direction].stepCounter
::players[direction].basePosition.row > ::players[direction-1].stepCounter
::players[direction-1].basePosition.row > ::players[direction].impulse[3][0]
::players[direction-1].basePosition.row > ::players[direction-1].impulse[3][0]
::players[direction-1].basePosition.row > ::players[::new_input].direction
::players[direction-1].basePosition.row > ::players[direction].direction
::players[direction-1].basePosition.row > ::players[direction-1].direction
::players[direction-1].basePosition.row >= ::players[::input_n].stepCounter
::players[direction-1].basePosition.row >= ::players[::new_input].stepCounter
::players[direction-1].basePosition.row >= ::players[direction].stepCounter
::players[direction-1].basePosition.row > ::players[direction-1].stepCounter
::players[direction].impulse[3][0] >= ::players[direction-1].impulse[3][0]
::players[direction].impulse[3][0] <= ::players[::new_input].direction
::players[direction].impulse[3][0] <= ::players[direction-1].direction
::players[direction].impulse[3][0] < ::players[::input_n].stepCounter
::players[direction].impulse[3][0] < ::players[direction].stepCounter
::players[direction].impulse[3][0] <= ::players[direction-1].stepCounter
::players[direction].impulse[3][0] < point[::input_n-1].col
::players[direction].impulse[3][0] < point[::input_n-1].row
::players[direction-1].impulse[3][0] <= ::players[::new_input].direction
::players[direction-1].impulse[3][0] <= ::players[direction-1].direction
::players[direction-1].impulse[3][0] < ::players[::input_n].stepCounter
::players[direction-1].impulse[3][0] < ::players[direction].stepCounter
::players[direction-1].impulse[3][0] < point[::input_n-1].col
::players[direction-1].impulse[3][0] < point[::input_n-1].row
::players[::new_input].direction < ::players[::input_n].stepCounter
::players[::new_input].direction != ::players[::new_input].stepCounter
::players[::new_input].direction < ::players[direction].stepCounter
::players[::new_input].direction < point[::input_n-1].col
::players[::new_input].direction <= point[::input_n-1].row
::players[direction].direction < ::players[::input_n].stepCounter
::players[direction].direction < ::players[direction].stepCounter
::players[direction].direction <= ::players[direction-1].stepCounter
::players[direction].direction < point[::input_n-1].col
::players[direction-1].direction < ::players[::input_n].stepCounter
::players[direction-1].direction < ::players[direction].stepCounter
::players[direction-1].direction != ::players[direction-1].stepCounter
::players[direction-1].direction != point[::input_n-1].col
::players[::input_n].stepCounter >= ::players[::new_input].stepCounter
::players[::input_n].stepCounter >= ::players[direction].stepCounter
::players[::input_n].stepCounter >= ::players[direction-1].stepCounter
::players[::new_input].stepCounter % ::players[direction].stepCounter == 0
::players[::new_input].stepCounter <= ::players[direction].stepCounter
::players[::new_input].stepCounter < point[::input_n-1].col
::players[::new_input].stepCounter < point[::input_n-1].row
direction - 4 * ::players[direction-1].body.type - ::players[direction-1].body.color + 2 == 0
11 * direction + 4 * ::players[direction-1].body.bodyPoints->aspect - 11 * ::players[direction-1].body.color - 162 == 0
3 * direction + 4 * ::players[direction-1].body.bodyMapsSize - 3 * ::players[direction-1].body.color - 10 == 0
27 * direction + 4 * ::players[direction-1].body.bodySize - 27 * ::players[direction-1].body.color - 58 == 0
2 * direction + ::players[direction-1].body.bodyWidth - 2 * ::players[direction-1].body.color - 4 == 0
direction + ::players[direction-1].body.bodyHeight - ::players[direction-1].body.color - 2 == 0
direction + ::players[::input_n-1].basePosition.row - ::players[direction-1].basePosition.row - 1 == 0
4 * ::players[direction-1].body.type - ::players[direction].body.color + ::players[direction-1].body.color - 3 == 0
4 * ::players[direction-1].body.bodyPoints->aspect + 11 * ::players[direction].body.color - 11 * ::players[direction-1].body.color - 151 == 0
4 * ::players[direction-1].body.bodyMapsSize + 3 * ::players[direction].body.color - 3 * ::players[direction-1].body.color - 7 == 0
4 * ::players[direction-1].body.bodySize + 27 * ::players[direction].body.color - 27 * ::players[direction-1].body.color - 31 == 0
::players[direction-1].body.bodyWidth + 2 * ::players[direction].body.color - 2 * ::players[direction-1].body.color - 2 == 0
::players[direction-1].body.bodyHeight + ::players[direction].body.color - ::players[direction-1].body.color - 1 == 0
::players[direction].body.color + ::players[::input_n-1].basePosition.row - ::players[direction-1].basePosition.row == 0
===========================================================================
..movePoint():::EXIT
::crashedPlayers == orig(::crashedPlayers)
::crashedPlayers[] == orig(::crashedPlayers[])
::crashedPlayers[].start == ::crashedPlayers[].end
::crashedPlayers[].start == orig(::crashedPlayers[].start)
::crashedPlayers[].start == orig(::crashedPlayers[].end)
::crashedPlayers[].start[0] == ::crashedPlayers[].end[0]
::crashedPlayers[].start[0] == orig(::crashedPlayers[].start[0])
::crashedPlayers[].start[0] == orig(::crashedPlayers[].end[0])
::crashedPlayers[].start->next == ::crashedPlayers[].start->prev
::crashedPlayers[].start->next == orig(::crashedPlayers[].start->next)
::crashedPlayers[].start->next == orig(::crashedPlayers[].start->prev)
::crashedPlayers[].start->data == orig(::crashedPlayers[].start->data)
::playerSpace == orig(::playerSpace)
::playerSpace[] == orig(::playerSpace[])
::playerSpace[].playerNodes == orig(::playerSpace[].playerNodes)
::playerSpace[].playerNodes[0] == orig(::playerSpace[].playerNodes[0])
::playerSpace[].playerNodes->start == orig(::playerSpace[].playerNodes->start)
::playerSpace[].playerNodes->start[0] == orig(::playerSpace[].playerNodes->start[0])
::playerSpace[].playerNodes->start->next == orig(::playerSpace[].playerNodes->start->next)
::playerSpace[].playerNodes->start->next[0] == orig(::playerSpace[].playerNodes->start->next[0])
::playerSpace[].playerNodes->start->data == orig(::playerSpace[].playerNodes->start->data)
::playerSpace[].playerNodes->start->prev == ::playerSpace[].guideNodes->start
::playerSpace[].playerNodes->end == orig(::playerSpace[].playerNodes->end)
::playerSpace[].playerNodes->end[0] == orig(::playerSpace[].playerNodes->end[0])
::playerSpace[].playerNodes->end->next == ::playerSpace[].guideNodes->start
::playerSpace[].playerNodes->end->data == orig(::playerSpace[].playerNodes->end->data)
::playerSpace[].playerNodes->end->prev == orig(::playerSpace[].playerNodes->end->prev)
::playerSpace[].playerNodes->end->prev[0] == orig(::playerSpace[].playerNodes->end->prev[0])
::playerSpace[].playerMap == orig(::playerSpace[].playerMap)
::playerSpace[].guideNodes == orig(::playerSpace[].guideNodes)
::playerSpace[].guideNodes[0] == orig(::playerSpace[].guideNodes[0])
::playerSpace[].guideNodes->start == ::playerSpace[].guideNodes->end
::playerSpace[].guideNodes->start == orig(::playerSpace[].playerNodes->start->prev)
::playerSpace[].guideNodes->start == orig(::playerSpace[].playerNodes->end->next)
::playerSpace[].guideNodes->start == orig(::playerSpace[].guideNodes->start)
::playerSpace[].guideNodes->start == orig(::playerSpace[].guideNodes->end)
::playerSpace[].groundMap == orig(::playerSpace[].groundMap)
::playerSpace[].actionGroup == orig(::playerSpace[].actionGroup)
::playerSpace[].actionGroup[0] == orig(::playerSpace[].actionGroup[0])
::playerSpace[].actionGroup->numActions == orig(::playerSpace[].actionGroup->numActions)
::players == orig(::players)
::players == ::players[::input_n-1].body.bodyPoints->player
::players[] == orig(::players[])
::players[].id == ::players[].type
::players[].id == ::players[].retired
::players[].id == ::players[].impulse[6][0]
::players[].id == ::players[].impulse[8][0]
::players[].id == orig(::players[].id)
::players[].id == orig(::players[].type)
::players[].id == orig(::players[].retired)
::players[].id == orig(::players[].impulse[6][0])
::players[].id == orig(::players[].impulse[8][0])
::players[].body == orig(::players[].body)
::players[].body.type == orig(::players[].body.type)
::players[].body.visible == ::players[].body.tangible
::players[].body.visible == orig(::players[].body.visible)
::players[].body.visible == orig(::players[].body.tangible)
::players[].body.bodyPoints == orig(::players[].body.bodyPoints)
::players[].body.bodyPoints[0] == orig(::players[].body.bodyPoints[0])
::players[].body.bodyPoints->position == orig(::players[].body.bodyPoints->position)
::players[].body.bodyPoints->player == orig(::players[].body.bodyPoints->player)
::players[].body.bodyPoints->player[0] == orig(::players[].body.bodyPoints->player[0])
::players[].body.bodyPoints->aspect == orig(::players[].body.bodyPoints->aspect)
::players[].body.bodyMaps == orig(::players[].body.bodyMaps)
::players[].body.bodyMapsSize == orig(::players[].body.bodyMapsSize)
::players[].body.bodySize == orig(::players[].body.bodySize)
::players[].body.bodyWidth == orig(::players[].body.bodyWidth)
::players[].body.bodyHeight == orig(::players[].body.bodyHeight)
::players[].body.color == orig(::players[].body.color)
::players[].basePosition == orig(::players[].basePosition)
::players[].basePosition.col == orig(::players[].basePosition.col)
::players[].impulse[0] == orig(::players[].impulse[0])
::players[].impulse[0][0] == orig(::players[].impulse[0][0])
::players[].impulse[1] == orig(::players[].impulse[1])
::players[].impulse[1][0] == orig(::players[].impulse[1][0])
::players[].impulse[2] == orig(::players[].impulse[2])
::players[].impulse[2][0] == orig(::players[].impulse[2][0])
::players[].impulse[3] == orig(::players[].impulse[3])
::players[].impulse[3][0] == orig(::players[].impulse[3][0])
::players[].impulse[4] == orig(::players[].impulse[4])
::players[].impulse[4][0] == orig(::players[].impulse[4][0])
::players[].impulse[5] == orig(::players[].impulse[5])
::players[].impulse[5][0] == orig(::players[].impulse[5][0])
::players[].impulse[6] == orig(::players[].impulse[6])
::players[].impulse[7] == orig(::players[].impulse[7])
::players[].impulse[7][0] == orig(::players[].impulse[7][0])
::players[].impulse[8] == orig(::players[].impulse[8])
::players[].direction == orig(::players[].direction)
::players[].magnetos == orig(::players[].magnetos)
::players[].magnetos[0] == orig(::players[].magnetos[0])
::players[].stepCounter == orig(::players[].stepCounter)
::players[].pilot == orig(::players[].pilot)
::players[].onCrash == orig(::players[].onCrash)
::players[].onPushed == orig(::players[].onPushed)
::snakeBodyMap == orig(::snakeBodyMap)
::trainBodyMap == orig(::trainBodyMap)
::giantBodyMap == orig(::giantBodyMap)
::squareBodyMap == orig(::squareBodyMap)
::circleBodyMap == orig(::circleBodyMap)
::input_n == ::input_i
::input_n == orig(::input_n)
::input_n == orig(::input_i)
::input_n == size(::crashedPlayers[])
::input_n == size(::crashedPlayers[].start[0])
::input_n == size(::playerSpace[])
::input_n == size(::playerSpace[].playerNodes[0])
::input_n == size(::playerSpace[].playerNodes->start[0])
::input_n == size(::playerSpace[].playerNodes->start->next[0])
::input_n == size(::playerSpace[].playerNodes->end[0])
::input_n == size(::playerSpace[].playerNodes->end->prev[0])
::input_n == size(::playerSpace[].guideNodes[0])
::input_n == size(::playerSpace[].actionGroup[0])
::input_n == orig(size(::crashedPlayers[]))
::input_n == orig(size(::playerSpace[]))
::input_n == orig(size(::playerSpace[].playerNodes[0]))
::input_n == orig(size(::playerSpace[].playerNodes->start[0]))
::input_n == orig(size(::playerSpace[].playerNodes->start->next[0]))
::input_n == orig(size(::playerSpace[].playerNodes->end[0]))
::input_n == orig(size(::playerSpace[].playerNodes->end->prev[0]))
::input_n == orig(size(::playerSpace[].guideNodes[0]))
::input_n == orig(size(::playerSpace[].actionGroup[0]))
::input_n == ::players[::input_n].body.type
::input_n == ::players[::input_i].body.type
::input_n == ::players[orig(::input_n)].body.type
::input_n == ::players[orig(::input_i)].body.type
::input_n == ::players[orig(direction)].body.type
::input_n == ::players[::input_n].body.visible
::input_n == ::players[::input_n-1].body.visible
::input_n == ::players[::input_i].body.visible
::input_n == ::players[::input_i-1].body.visible
::input_n == ::players[::new_input].body.visible
::input_n == ::players[orig(::input_n)].body.visible
::input_n == ::players[orig(::input_n)-1].body.visible
::input_n == ::players[orig(::input_i)].body.visible
::input_n == ::players[orig(::input_i)-1].body.visible
::input_n == ::players[orig(::new_input)].body.visible
::input_n == ::players[orig(direction)].body.visible
::input_n == ::players[orig(direction)-1].body.visible
::input_n == ::players[::input_n].body.tangible
::input_n == ::players[::input_n-1].body.tangible
::input_n == ::players[::input_i].body.tangible
::input_n == ::players[::input_i-1].body.tangible
::input_n == ::players[::new_input].body.tangible
::input_n == ::players[orig(::input_n)].body.tangible
::input_n == ::players[orig(::input_n)-1].body.tangible
::input_n == ::players[orig(::input_i)].body.tangible
::input_n == ::players[orig(::input_i)-1].body.tangible
::input_n == ::players[orig(::new_input)].body.tangible
::input_n == ::players[orig(direction)].body.tangible
::input_n == ::players[orig(direction)-1].body.tangible
::input_n == ::players[::input_n].body.bodyMapsSize
::input_n == ::players[::input_i].body.bodyMapsSize
::input_n == ::players[orig(::input_n)].body.bodyMapsSize
::input_n == ::players[orig(::input_i)].body.bodyMapsSize
::input_n == ::players[orig(direction)].body.bodyMapsSize
::input_n == ::players[::input_n].body.bodySize
::input_n == ::players[::input_i].body.bodySize
::input_n == ::players[orig(::input_n)].body.bodySize
::input_n == ::players[orig(::input_i)].body.bodySize
::input_n == ::players[orig(direction)].body.bodySize
::input_n == ::players[::input_n-1].direction
::input_n == ::players[::input_i-1].direction
::input_n == ::players[orig(::input_n)-1].direction
::input_n == ::players[orig(::input_i)-1].direction
::input_n == orig(::players[post(::input_n)].body.type)
::input_n == orig(::players[post(::input_n)].body.visible)
::input_n == orig(::players[post(::input_n)-1].body.visible)
::input_n == orig(::players[post(::input_n)].body.tangible)
::input_n == orig(::players[post(::input_n)-1].body.tangible)
::input_n == orig(::players[post(::input_n)].body.bodyMapsSize)
::input_n == orig(::players[post(::input_n)].body.bodySize)
::input_n == orig(::players[post(::input_n)-1].direction)
::input_n == orig(::players[post(::input_i)].body.type)
::input_n == orig(::players[post(::input_i)].body.visible)
::input_n == orig(::players[post(::input_i)-1].body.visible)
::input_n == orig(::players[post(::input_i)].body.tangible)
::input_n == orig(::players[post(::input_i)-1].body.tangible)
::input_n == orig(::players[post(::input_i)].body.bodyMapsSize)
::input_n == orig(::players[post(::input_i)].body.bodySize)
::input_n == orig(::players[post(::input_i)-1].direction)
::input_n == orig(::players[post(::new_input)].body.visible)
::input_n == orig(::players[post(::new_input)].body.tangible)
::input_n == orig(::players[post(direction)].body.type)
::input_n == orig(::players[post(direction)].body.visible)
::input_n == orig(::players[post(direction)-1].body.visible)
::input_n == orig(::players[post(direction)].body.tangible)
::input_n == orig(::players[post(direction)-1].body.tangible)
::input_n == orig(::players[post(direction)].body.bodyMapsSize)
::input_n == orig(::players[post(direction)].body.bodySize)
::input_n == orig(::players[::input_n].body.type)
::input_n == orig(::players[::input_i].body.type)
::input_n == orig(::players[direction].body.type)
::input_n == orig(::players[::input_n].body.visible)
::input_n == orig(::players[::input_n-1].body.visible)
::input_n == orig(::players[::input_i].body.visible)
::input_n == orig(::players[::input_i-1].body.visible)
::input_n == orig(::players[::new_input].body.visible)
::input_n == orig(::players[direction].body.visible)
::input_n == orig(::players[direction-1].body.visible)
::input_n == orig(::players[::input_n].body.tangible)
::input_n == orig(::players[::input_n-1].body.tangible)
::input_n == orig(::players[::input_i].body.tangible)
::input_n == orig(::players[::input_i-1].body.tangible)
::input_n == orig(::players[::new_input].body.tangible)
::input_n == orig(::players[direction].body.tangible)
::input_n == orig(::players[direction-1].body.tangible)
::input_n == orig(::players[::input_n].body.bodyMapsSize)
::input_n == orig(::players[::input_i].body.bodyMapsSize)
::input_n == orig(::players[direction].body.bodyMapsSize)
::input_n == orig(::players[::input_n].body.bodySize)
::input_n == orig(::players[::input_i].body.bodySize)
::input_n == orig(::players[direction].body.bodySize)
::input_n == orig(::players[::input_n-1].direction)
::input_n == orig(::players[::input_i-1].direction)
::new_input == orig(::new_input)
::new_input == size(::crashedPlayers[].start[0])-1
::new_input == ::players[::new_input].body.type
::new_input == ::players[orig(::new_input)].body.type
::new_input == ::players[::input_n].impulse[0][0]
::new_input == ::players[::input_i].impulse[0][0]
::new_input == ::players[::new_input].impulse[0][0]
::new_input == ::players[orig(::input_n)].impulse[0][0]
::new_input == ::players[orig(::input_i)].impulse[0][0]
::new_input == ::players[orig(::new_input)].impulse[0][0]
::new_input == ::players[orig(direction)].impulse[0][0]
::new_input == ::players[::input_n-1].impulse[1][0]
::new_input == ::players[::input_i-1].impulse[1][0]
::new_input == ::players[orig(::input_n)-1].impulse[1][0]
::new_input == ::players[orig(::input_i)-1].impulse[1][0]
::new_input == ::players[orig(direction)-1].impulse[1][0]
::new_input == orig(::players[post(::input_n)].impulse[0][0])
::new_input == orig(::players[post(::input_n)-1].impulse[1][0])
::new_input == orig(::players[post(::input_i)].impulse[0][0])
::new_input == orig(::players[post(::input_i)-1].impulse[1][0])
::new_input == orig(::players[post(::new_input)].body.type)
::new_input == orig(::players[post(::new_input)].impulse[0][0])
::new_input == orig(::players[post(direction)].impulse[0][0])
::new_input == orig(::players[post(direction)-1].impulse[1][0])
::new_input == orig(::players[::new_input].body.type)
::new_input == orig(::players[::input_n].impulse[0][0])
::new_input == orig(::players[::input_i].impulse[0][0])
::new_input == orig(::players[::new_input].impulse[0][0])
::new_input == orig(::players[direction].impulse[0][0])
::new_input == orig(::players[::input_n-1].impulse[1][0])
::new_input == orig(::players[::input_i-1].impulse[1][0])
::new_input == orig(::players[direction-1].impulse[1][0])
::input_key == orig(::input_key)
::trace_pos == orig(::trace_pos)
point[] == orig(point[])
size(::crashedPlayers[])-1 == ::playerSpace[::input_n-1].actionGroup->numActions
size(::crashedPlayers[])-1 == ::playerSpace[::input_i-1].actionGroup->numActions
size(::crashedPlayers[])-1 == ::playerSpace[orig(::input_n)-1].actionGroup->numActions
size(::crashedPlayers[])-1 == ::playerSpace[orig(::input_i)-1].actionGroup->numActions
size(::crashedPlayers[])-1 == ::players[::input_n].id
size(::crashedPlayers[])-1 == ::players[::input_n-1].id
size(::crashedPlayers[])-1 == ::players[::input_i].id
size(::crashedPlayers[])-1 == ::players[::input_i-1].id
size(::crashedPlayers[])-1 == ::players[::new_input].id
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].id
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].id
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].id
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].id
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].id
size(::crashedPlayers[])-1 == ::players[orig(direction)].id
size(::crashedPlayers[])-1 == ::players[orig(direction)-1].id
size(::crashedPlayers[])-1 == ::players[::input_n].type
size(::crashedPlayers[])-1 == ::players[::input_n-1].type
size(::crashedPlayers[])-1 == ::players[::input_i].type
size(::crashedPlayers[])-1 == ::players[::input_i-1].type
size(::crashedPlayers[])-1 == ::players[::new_input].type
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].type
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].type
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].type
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].type
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].type
size(::crashedPlayers[])-1 == ::players[orig(direction)].type
size(::crashedPlayers[])-1 == ::players[orig(direction)-1].type
size(::crashedPlayers[])-1 == ::players[::input_n].retired
size(::crashedPlayers[])-1 == ::players[::input_n-1].retired
size(::crashedPlayers[])-1 == ::players[::input_i].retired
size(::crashedPlayers[])-1 == ::players[::input_i-1].retired
size(::crashedPlayers[])-1 == ::players[::new_input].retired
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].retired
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].retired
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].retired
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].retired
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].retired
size(::crashedPlayers[])-1 == ::players[orig(direction)].retired
size(::crashedPlayers[])-1 == ::players[orig(direction)-1].retired
size(::crashedPlayers[])-1 == ::players[::input_n-1].body.type
size(::crashedPlayers[])-1 == ::players[::input_i-1].body.type
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].body.type
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].body.type
size(::crashedPlayers[])-1 == ::players[::input_n].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[::input_i].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[orig(direction)].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[::input_n].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[::input_i].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[orig(direction)].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[::input_n].body.color
size(::crashedPlayers[])-1 == ::players[::input_i].body.color
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].body.color
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].body.color
size(::crashedPlayers[])-1 == ::players[::input_n].basePosition.col
size(::crashedPlayers[])-1 == ::players[::input_i].basePosition.col
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].basePosition.col
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].basePosition.col
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_n].direction
size(::crashedPlayers[])-1 == ::players[::input_i].direction
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].direction
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].direction
size(::crashedPlayers[])-1 == ::players[::input_n-1].stepCounter
size(::crashedPlayers[])-1 == ::players[::input_i-1].stepCounter
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].stepCounter
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].stepCounter
size(::crashedPlayers[])-1 == orig(::playerSpace[post(::input_n)-1].actionGroup->numActions)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].id)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].id)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].type)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].type)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].retired)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].retired)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].body.type)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].body.bodyWidth)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].body.bodyHeight)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].body.color)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].basePosition.col)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[0][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].direction)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].stepCounter)
size(::crashedPlayers[])-1 == orig(::playerSpace[post(::input_i)-1].actionGroup->numActions)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].id)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].id)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].type)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].type)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].retired)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].retired)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].body.type)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].body.bodyWidth)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].body.bodyHeight)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].body.color)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].basePosition.col)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[0][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].direction)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].stepCounter)
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].id)
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].type)
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].retired)
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)].id)
size(::crashedPlayers[])-1 == orig(::players[post(direction)-1].id)
size(::crashedPlayers[])-1 == orig(::players[post(direction)].type)
size(::crashedPlayers[])-1 == orig(::players[post(direction)-1].type)
size(::crashedPlayers[])-1 == orig(::players[post(direction)].retired)
size(::crashedPlayers[])-1 == orig(::players[post(direction)-1].retired)
size(::crashedPlayers[])-1 == orig(::players[post(direction)].body.bodyWidth)
size(::crashedPlayers[])-1 == orig(::players[post(direction)].body.bodyHeight)
size(::crashedPlayers[])-1 == orig(::players[post(direction)-1].impulse[0][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)-1].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)-1].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)-1].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)-1].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)-1].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)-1].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::playerSpace[::input_n-1].actionGroup->numActions)
size(::crashedPlayers[])-1 == orig(::playerSpace[::input_i-1].actionGroup->numActions)
size(::crashedPlayers[])-1 == orig(::players[::input_n].id)
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].id)
size(::crashedPlayers[])-1 == orig(::players[::input_i].id)
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].id)
size(::crashedPlayers[])-1 == orig(::players[::new_input].id)
size(::crashedPlayers[])-1 == orig(::players[direction].id)
size(::crashedPlayers[])-1 == orig(::players[direction-1].id)
size(::crashedPlayers[])-1 == orig(::players[::input_n].type)
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].type)
size(::crashedPlayers[])-1 == orig(::players[::input_i].type)
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].type)
size(::crashedPlayers[])-1 == orig(::players[::new_input].type)
size(::crashedPlayers[])-1 == orig(::players[direction].type)
size(::crashedPlayers[])-1 == orig(::players[direction-1].type)
size(::crashedPlayers[])-1 == orig(::players[::input_n].retired)
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].retired)
size(::crashedPlayers[])-1 == orig(::players[::input_i].retired)
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].retired)
size(::crashedPlayers[])-1 == orig(::players[::new_input].retired)
size(::crashedPlayers[])-1 == orig(::players[direction].retired)
size(::crashedPlayers[])-1 == orig(::players[direction-1].retired)
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].body.type)
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].body.type)
size(::crashedPlayers[])-1 == orig(::players[::input_n].body.bodyWidth)
size(::crashedPlayers[])-1 == orig(::players[::input_i].body.bodyWidth)
size(::crashedPlayers[])-1 == orig(::players[direction].body.bodyWidth)
size(::crashedPlayers[])-1 == orig(::players[::input_n].body.bodyHeight)
size(::crashedPlayers[])-1 == orig(::players[::input_i].body.bodyHeight)
size(::crashedPlayers[])-1 == orig(::players[direction].body.bodyHeight)
size(::crashedPlayers[])-1 == orig(::players[::input_n].body.color)
size(::crashedPlayers[])-1 == orig(::players[::input_i].body.color)
size(::crashedPlayers[])-1 == orig(::players[::input_n].basePosition.col)
size(::crashedPlayers[])-1 == orig(::players[::input_i].basePosition.col)
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[0][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[0][0])
size(::crashedPlayers[])-1 == orig(::players[direction-1].impulse[0][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[direction].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[direction].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[direction-1].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[direction].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[direction-1].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[direction].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[direction-1].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[direction].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[direction-1].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[direction].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[direction-1].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[direction].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[direction-1].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].direction)
size(::crashedPlayers[])-1 == orig(::players[::input_i].direction)
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].stepCounter)
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].stepCounter)
size(::crashedPlayers[].start[0]) == orig(size(point[]))
size(::crashedPlayers[].start[0]) == ::players[orig(direction)-1].body.type
size(::crashedPlayers[].start[0]) == ::players[orig(direction)-1].body.bodyMapsSize
size(::crashedPlayers[].start[0]) == ::players[orig(direction)-1].body.bodySize
size(::crashedPlayers[].start[0]) == ::players[::new_input].direction
size(::crashedPlayers[].start[0])-1 == ::players[orig(direction)-1].body.bodyWidth
size(::crashedPlayers[].start[0])-1 == ::players[orig(direction)-1].body.bodyHeight
size(::crashedPlayers[].start[0])-1 == ::players[orig(direction)].impulse[3][0]
size(::crashedPlayers[].start[0])-1 == ::players[orig(direction)-1].impulse[3][0]
size(::crashedPlayers[].start[0])-1 == ::players[::new_input].stepCounter
size(::players[]) == size(::players[].body.bodyPoints[0])
size(::players[]) == size(::players[].body.bodyPoints->player[0])
size(::players[]) == size(::players[].impulse[0])
size(::players[]) == size(::players[].impulse[0][0])
size(::players[]) == size(::players[].impulse[1])
size(::players[]) == size(::players[].impulse[1][0])
size(::players[]) == size(::players[].impulse[2])
size(::players[]) == size(::players[].impulse[2][0])
size(::players[]) == size(::players[].impulse[3])
size(::players[]) == size(::players[].impulse[3][0])
size(::players[]) == size(::players[].impulse[4])
size(::players[]) == size(::players[].impulse[4][0])
size(::players[]) == size(::players[].impulse[5])
size(::players[]) == size(::players[].impulse[5][0])
size(::players[]) == size(::players[].impulse[6])
size(::players[]) == size(::players[].impulse[6][0])
size(::players[]) == size(::players[].impulse[7])
size(::players[]) == size(::players[].impulse[7][0])
size(::players[]) == size(::players[].impulse[8])
size(::players[]) == size(::players[].impulse[8][0])
size(::players[]) == size(::players[].magnetos[0])
size(::players[]) == orig(size(::players[].body.bodyPoints[0]))
size(::players[]) == orig(size(::players[].body.bodyPoints->player[0]))
size(::players[]) == orig(size(::players[].impulse[0]))
size(::players[]) == orig(size(::players[].impulse[0][0]))
size(::players[]) == orig(size(::players[].impulse[1]))
size(::players[]) == orig(size(::players[].impulse[1][0]))
size(::players[]) == orig(size(::players[].impulse[2]))
size(::players[]) == orig(size(::players[].impulse[2][0]))
size(::players[]) == orig(size(::players[].impulse[3]))
size(::players[]) == orig(size(::players[].impulse[3][0]))
size(::players[]) == orig(size(::players[].impulse[4]))
size(::players[]) == orig(size(::players[].impulse[4][0]))
size(::players[]) == orig(size(::players[].impulse[5]))
size(::players[]) == orig(size(::players[].impulse[5][0]))
size(::players[]) == orig(size(::players[].impulse[6]))
size(::players[]) == orig(size(::players[].impulse[6][0]))
size(::players[]) == orig(size(::players[].impulse[7]))
size(::players[]) == orig(size(::players[].impulse[7][0]))
size(::players[]) == orig(size(::players[].impulse[8]))
size(::players[]) == orig(size(::players[].impulse[8][0]))
size(::players[]) == orig(size(::players[].magnetos[0]))
::crashedPlayers[::input_n-1].start[0] == ::crashedPlayers[::new_input].start[0]
::crashedPlayers[::input_i-1].start[0] == ::crashedPlayers[::new_input].start[0]
::crashedPlayers[::new_input].start[0] == ::crashedPlayers[orig(::input_n)-1].start[0]
::crashedPlayers[::new_input].start[0] == ::crashedPlayers[orig(::input_i)-1].start[0]
::crashedPlayers[::new_input].start[0] == ::crashedPlayers[::input_n-1].end[0]
::crashedPlayers[::new_input].start[0] == ::crashedPlayers[::input_i-1].end[0]
::crashedPlayers[::new_input].start[0] == ::crashedPlayers[orig(::input_n)-1].end[0]
::crashedPlayers[::new_input].start[0] == ::crashedPlayers[orig(::input_i)-1].end[0]
::crashedPlayers[::new_input].start[0] == orig(::crashedPlayers[post(::input_n)-1].start[0])
::crashedPlayers[::new_input].start[0] == orig(::crashedPlayers[post(::input_n)-1].end[0])
::crashedPlayers[::new_input].start[0] == orig(::crashedPlayers[post(::input_i)-1].start[0])
::crashedPlayers[::new_input].start[0] == orig(::crashedPlayers[post(::input_i)-1].end[0])
::crashedPlayers[::new_input].start[0] == orig(::crashedPlayers[::input_n-1].start[0])
::crashedPlayers[::new_input].start[0] == orig(::crashedPlayers[::input_i-1].start[0])
::crashedPlayers[::new_input].start[0] == orig(::crashedPlayers[::input_n-1].end[0])
::crashedPlayers[::new_input].start[0] == orig(::crashedPlayers[::input_i-1].end[0])
::crashedPlayers[::input_n-1].start->next == ::crashedPlayers[::new_input].start->next
::crashedPlayers[::input_i-1].start->next == ::crashedPlayers[::new_input].start->next
::crashedPlayers[::new_input].start->next == ::crashedPlayers[orig(::input_n)-1].start->next
::crashedPlayers[::new_input].start->next == ::crashedPlayers[orig(::input_i)-1].start->next
::crashedPlayers[::new_input].start->next == ::crashedPlayers[::input_n-1].start->prev
::crashedPlayers[::new_input].start->next == ::crashedPlayers[::input_i-1].start->prev
::crashedPlayers[::new_input].start->next == ::crashedPlayers[orig(::input_n)-1].start->prev
::crashedPlayers[::new_input].start->next == ::crashedPlayers[orig(::input_i)-1].start->prev
::crashedPlayers[::new_input].start->next == orig(::crashedPlayers[post(::input_n)-1].start->next)
::crashedPlayers[::new_input].start->next == orig(::crashedPlayers[post(::input_n)-1].start->prev)
::crashedPlayers[::new_input].start->next == orig(::crashedPlayers[post(::input_i)-1].start->next)
::crashedPlayers[::new_input].start->next == orig(::crashedPlayers[post(::input_i)-1].start->prev)
::crashedPlayers[::new_input].start->next == orig(::crashedPlayers[::input_n-1].start->next)
::crashedPlayers[::new_input].start->next == orig(::crashedPlayers[::input_i-1].start->next)
::crashedPlayers[::new_input].start->next == orig(::crashedPlayers[::input_n-1].start->prev)
::crashedPlayers[::new_input].start->next == orig(::crashedPlayers[::input_i-1].start->prev)
::crashedPlayers[::input_n-1].start->data == ::crashedPlayers[::new_input].start->data
::crashedPlayers[::input_i-1].start->data == ::crashedPlayers[::new_input].start->data
::crashedPlayers[::new_input].start->data == ::crashedPlayers[orig(::input_n)-1].start->data
::crashedPlayers[::new_input].start->data == ::crashedPlayers[orig(::input_i)-1].start->data
::crashedPlayers[::new_input].start->data == orig(::crashedPlayers[post(::input_n)-1].start->data)
::crashedPlayers[::new_input].start->data == orig(::crashedPlayers[post(::input_i)-1].start->data)
::crashedPlayers[::new_input].start->data == orig(::crashedPlayers[::input_n-1].start->data)
::crashedPlayers[::new_input].start->data == orig(::crashedPlayers[::input_i-1].start->data)
::players[::input_n] == ::players[::input_n].body.bodyPoints->player[0]
::players[::input_n] == ::players[::input_i].body.bodyPoints->player[0]
::players[::input_n] == ::players[orig(::input_n)].body.bodyPoints->player[0]
::players[::input_n] == ::players[orig(::input_i)].body.bodyPoints->player[0]
::players[::input_n] == orig(::players[post(::input_n)].body.bodyPoints->player[0])
::players[::input_n] == orig(::players[post(::input_i)].body.bodyPoints->player[0])
::players[::input_n] == orig(::players[::input_n].body.bodyPoints->player[0])
::players[::input_n] == orig(::players[::input_i].body.bodyPoints->player[0])
::players[::input_n-1] == ::players[::input_n-1].body.bodyPoints->player[0]
::players[::input_n-1] == ::players[::input_i-1].body.bodyPoints->player[0]
::players[::input_n-1] == ::players[orig(::input_n)-1].body.bodyPoints->player[0]
::players[::input_n-1] == ::players[orig(::input_i)-1].body.bodyPoints->player[0]
::players[::input_n-1] == orig(::players[post(::input_n)-1].body.bodyPoints->player[0])
::players[::input_n-1] == orig(::players[post(::input_i)-1].body.bodyPoints->player[0])
::players[::input_n-1] == orig(::players[::input_n-1].body.bodyPoints->player[0])
::players[::input_n-1] == orig(::players[::input_i-1].body.bodyPoints->player[0])
::players[::new_input] == ::players[::new_input].body.bodyPoints->player[0]
::players[::new_input] == ::players[orig(::new_input)].body.bodyPoints->player[0]
::players[::new_input] == orig(::players[post(::new_input)].body.bodyPoints->player[0])
::players[::new_input] == orig(::players[::new_input].body.bodyPoints->player[0])
::players[orig(direction)] == ::players[orig(direction)].body.bodyPoints->player[0]
::players[orig(direction)] == orig(::players[post(direction)].body.bodyPoints->player[0])
::players[orig(direction)] == orig(::players[direction].body.bodyPoints->player[0])
::players[orig(direction)-1] == ::players[orig(direction)-1].body.bodyPoints->player[0]
::players[orig(direction)-1] == orig(::players[post(direction)-1].body.bodyPoints->player[0])
::players[orig(direction)-1] == orig(::players[direction-1].body.bodyPoints->player[0])
::players[::input_n].body.bodyPoints->aspect == ::players[orig(direction)].body.bodyPoints->aspect
::players[::input_n].body.bodyPoints->aspect == orig(::players[post(direction)].body.bodyPoints->aspect)
::players[::input_n].body.bodyPoints->aspect == orig(::players[direction].body.bodyPoints->aspect)
::players[::input_n-1].body.bodyMapsSize == ::players[::input_n-1].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize == ::players[::input_i-1].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize == ::players[orig(::input_n)-1].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize == ::players[orig(::input_i)-1].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize == orig(::players[post(::input_n)-1].body.bodyHeight)
::players[::input_n-1].body.bodyMapsSize == orig(::players[post(::input_i)-1].body.bodyHeight)
::players[::input_n-1].body.bodyMapsSize == orig(::players[::input_n-1].body.bodyHeight)
::players[::input_n-1].body.bodyMapsSize == orig(::players[::input_i-1].body.bodyHeight)
::players[::input_n].basePosition.row == orig(::players[post(::input_n)].basePosition.row)
::players[::input_n].basePosition.row == orig(::players[post(::input_i)].basePosition.row)
::players[::input_n].basePosition.row == orig(::players[::input_n].basePosition.row)
::players[::input_n].basePosition.row == orig(::players[::input_i].basePosition.row)
::players[::new_input].basePosition.row == orig(::players[post(::new_input)].basePosition.row)
::players[::new_input].basePosition.row == orig(::players[::new_input].basePosition.row)
::players[orig(direction)].basePosition.row == orig(::players[post(direction)].basePosition.row)
::players[orig(direction)].basePosition.row == orig(::players[direction].basePosition.row)
::players[::input_n].pilot == ::players[orig(direction)].pilot
::players[::input_n].pilot == orig(::players[post(direction)].pilot)
::players[::input_n].pilot == orig(::players[direction].pilot)
::players[::input_n].onCrash == ::players[orig(direction)].onCrash
::players[::input_n].onCrash == orig(::players[post(direction)].onCrash)
::players[::input_n].onCrash == orig(::players[direction].onCrash)
::players[::input_n].onPushed == ::players[::input_n-1].onPushed
::players[::input_n].onPushed == ::players[::input_i-1].onPushed
::players[::input_n].onPushed == ::players[::new_input].onPushed
::players[::input_n].onPushed == ::players[orig(::input_n)-1].onPushed
::players[::input_n].onPushed == ::players[orig(::input_i)-1].onPushed
::players[::input_n].onPushed == ::players[orig(::new_input)].onPushed
::players[::input_n].onPushed == ::players[orig(direction)].onPushed
::players[::input_n].onPushed == ::players[orig(direction)-1].onPushed
::players[::input_n].onPushed == orig(::players[post(::input_n)-1].onPushed)
::players[::input_n].onPushed == orig(::players[post(::input_i)-1].onPushed)
::players[::input_n].onPushed == orig(::players[post(::new_input)].onPushed)
::players[::input_n].onPushed == orig(::players[post(direction)].onPushed)
::players[::input_n].onPushed == orig(::players[post(direction)-1].onPushed)
::players[::input_n].onPushed == orig(::players[::input_n-1].onPushed)
::players[::input_n].onPushed == orig(::players[::input_i-1].onPushed)
::players[::input_n].onPushed == orig(::players[::new_input].onPushed)
::players[::input_n].onPushed == orig(::players[direction].onPushed)
::players[::input_n].onPushed == orig(::players[direction-1].onPushed)
::crashedPlayers has only one value
::crashedPlayers != null
::crashedPlayers[] contains no nulls and has only one value, of length 1
::crashedPlayers[] elements has only one value
::crashedPlayers[] elements != null
::crashedPlayers[].start[0] elements != null
::crashedPlayers[].start->next == [null]
::crashedPlayers[].start->next elements == null
::crashedPlayers[].start->data elements != null
::playerSpace has only one value
::playerSpace != null
::playerSpace[] contains no nulls and has only one value, of length 1
::playerSpace[] elements has only one value
::playerSpace[] elements != null
::playerSpace[].playerNodes contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes elements has only one value
::playerSpace[].playerNodes elements != null
::playerSpace[].playerNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes[0] elements has only one value
::playerSpace[].playerNodes[0] elements != null
::playerSpace[].playerNodes->start contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start elements has only one value
::playerSpace[].playerNodes->start elements != null
::playerSpace[].playerNodes->start[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start[0] elements has only one value
::playerSpace[].playerNodes->start[0] elements != null
::playerSpace[].playerNodes->start->next contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next elements has only one value
::playerSpace[].playerNodes->start->next elements != null
::playerSpace[].playerNodes->start->next[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next[0] elements has only one value
::playerSpace[].playerNodes->start->next[0] elements != null
::playerSpace[].playerNodes->start->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->data elements has only one value
::playerSpace[].playerNodes->start->data elements != null
::playerSpace[].playerNodes->end contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end elements has only one value
::playerSpace[].playerNodes->end elements != null
::playerSpace[].playerNodes->end[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end[0] elements has only one value
::playerSpace[].playerNodes->end[0] elements != null
::playerSpace[].playerNodes->end->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->data elements has only one value
::playerSpace[].playerNodes->end->data elements != null
::playerSpace[].playerNodes->end->prev contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->prev elements has only one value
::playerSpace[].playerNodes->end->prev elements != null
::playerSpace[].playerNodes->end->prev[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->prev[0] elements has only one value
::playerSpace[].playerNodes->end->prev[0] elements != null
::playerSpace[].playerMap contains no nulls and has only one value, of length 1
::playerSpace[].playerMap elements has only one value
::playerSpace[].playerMap elements != null
::playerSpace[].guideNodes contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes elements has only one value
::playerSpace[].guideNodes elements != null
::playerSpace[].guideNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes[0] elements has only one value
::playerSpace[].guideNodes[0] elements != null
::playerSpace[].guideNodes->start == [null]
::playerSpace[].guideNodes->start elements == null
::playerSpace[].groundMap contains no nulls and has only one value, of length 1
::playerSpace[].groundMap elements has only one value
::playerSpace[].groundMap elements != null
::playerSpace[].actionGroup contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup elements has only one value
::playerSpace[].actionGroup elements != null
::playerSpace[].actionGroup[0] contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup[0] elements has only one value
::playerSpace[].actionGroup[0] elements != null
::playerSpace[].actionGroup->numActions == [0]
::playerSpace[].actionGroup->numActions elements == 0
::players has only one value
::players[] contains no nulls and has only one value, of length 100
::players[] elements != null
::players[].id == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].id elements == 0
::players[].body contains no nulls and has only one value, of length 100
::players[].body elements != null
::players[].body.type == [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.type elements one of { 0, 1 }
::players[].body.visible == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.visible elements one of { 0, 1 }
::players[].body.visible sorted by >=
::players[].body.bodyPoints contains no nulls and has only one value, of length 100
::players[].body.bodyPoints elements != null
::players[].body.bodyPoints[0] contains no nulls and has only one value, of length 100
::players[].body.bodyPoints[0] elements != null
::players[].body.bodyPoints->position contains no nulls and has only one value, of length 100
::players[].body.bodyPoints->position elements != null
::players[].body.bodyPoints->player has only one value, of length 100
::players[].body.bodyPoints->player[0] has only one value, of length 100
::players[].body.bodyPoints->aspect == [46, 35, 35, 35, 35, 35, 86, 86, 86, 86, 86, 88, 91, 91, 91, 91, 91, 91, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyPoints->aspect elements >= 0
::players[].body.bodyMaps contains no nulls and has only one value, of length 100
::players[].body.bodyMaps elements != null
::players[].body.bodyMapsSize == [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyMapsSize elements one of { 0, 1, 4 }
::players[].body.bodyMapsSize sorted by >=
::players[].body.bodySize == [28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodySize elements >= 0
::players[].body.bodyWidth == [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyWidth elements one of { 0, 8, 14 }
::players[].body.bodyHeight == [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyHeight elements one of { 0, 4, 6 }
::players[].body.color == [3, 0, 1, 2, 3, 4, 0, 2, 4, 6, 8, 2, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.color elements >= 0
::players[].basePosition contains no nulls and has only one value, of length 100
::players[].basePosition elements != null
::players[].basePosition.col elements >= 0
::players[].basePosition.row elements >= 0
::players[].impulse[0] contains no nulls and has only one value, of length 100
::players[].impulse[0] elements != null
::players[].impulse[0][0] elements one of { 0, 1 }
::players[].impulse[1] contains no nulls and has only one value, of length 100
::players[].impulse[1] elements != null
::players[].impulse[1][0] elements one of { 0, 1, 5 }
::players[].impulse[2] contains no nulls and has only one value, of length 100
::players[].impulse[2] elements != null
::players[].impulse[2][0] elements one of { 0, 1 }
::players[].impulse[3] contains no nulls and has only one value, of length 100
::players[].impulse[3] elements != null
::players[].impulse[3][0] elements one of { 0, 1 }
::players[].impulse[4] contains no nulls and has only one value, of length 100
::players[].impulse[4] elements != null
::players[].impulse[4][0] elements one of { 0, 1 }
::players[].impulse[4][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[5] contains no nulls and has only one value, of length 100
::players[].impulse[5] elements != null
::players[].impulse[5][0] elements one of { 0, 1 }
::players[].impulse[6] contains no nulls and has only one value, of length 100
::players[].impulse[6] elements != null
::players[].impulse[7] contains no nulls and has only one value, of length 100
::players[].impulse[7] elements != null
::players[].impulse[7][0] elements one of { 0, 1 }
::players[].impulse[7][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[8] contains no nulls and has only one value, of length 100
::players[].impulse[8] elements != null
::players[].direction elements >= 0
::players[].magnetos has only one value, of length 100
::players[].magnetos[0] has only one value, of length 100
::players[].stepCounter elements >= 0
::players[].pilot has only one value, of length 100
::players[].onCrash has only one value, of length 100
::players[].onPushed has only one value, of length 100
::snakeBodyMap has only one value
::trainBodyMap has only one value
::giantBodyMap has only one value
::squareBodyMap has only one value
::circleBodyMap has only one value
::input_n == 1
::new_input one of { 0, 1 }
::input_key == "k"
::trace_pos one of { "", "(40, 10) -> ", "(40, 10) -> (40, 9)\n" }
point[] elements != null
point[].col elements >= 0
point[].row elements >= 0
size(::crashedPlayers[].start[0]) == 1
size(::players[]) == 100
::players[::input_n] has only one value
::players[::input_n-1] has only one value
::players[::input_n].body has only one value
::players[::input_n-1].body has only one value
::players[::input_n].body.bodyPoints has only one value
::players[::input_n-1].body.bodyPoints has only one value
::players[::input_n].body.bodyPoints[0] has only one value
::players[::input_n-1].body.bodyPoints[0] has only one value
::players[::input_n].body.bodyPoints->position has only one value
::players[::input_n-1].body.bodyPoints->position has only one value
::players[::input_n].body.bodyPoints->player has only one value
::players[::input_n].body.bodyPoints->player != null
::players[::input_n-1].body.bodyPoints->player has only one value
::players[::input_n-1].body.bodyPoints->player != null
::players[::new_input].body.bodyPoints->player != null
::players[orig(direction)].body.bodyPoints->player != null
::players[orig(direction)-1].body.bodyPoints->player != null
::players[::input_n].body.bodyPoints->aspect == 35
::players[::input_n-1].body.bodyPoints->aspect == 46
::players[::new_input].body.bodyPoints->aspect one of { 35, 46 }
::players[orig(direction)-1].body.bodyPoints->aspect one of { 35, 46 }
::players[::input_n].body.bodyMaps has only one value
::players[::input_n-1].body.bodyMaps has only one value
::players[::input_n-1].body.bodyMapsSize == 4
::players[::new_input].body.bodyMapsSize one of { 1, 4 }
::players[orig(direction)-1].body.bodyMapsSize one of { 1, 4 }
::players[::input_n-1].body.bodySize == 28
::players[::new_input].body.bodySize one of { 1, 28 }
::players[orig(direction)-1].body.bodySize one of { 1, 28 }
::players[::input_n-1].body.bodyWidth == 8
::players[::new_input].body.bodyWidth one of { 0, 8 }
::players[orig(direction)-1].body.bodyWidth one of { 0, 8 }
::players[::new_input].body.bodyHeight one of { 0, 4 }
::players[orig(direction)-1].body.bodyHeight one of { 0, 4 }
::players[::input_n-1].body.color == 3
::players[::new_input].body.color one of { 0, 3 }
::players[::input_n].basePosition has only one value
::players[::input_n-1].basePosition has only one value
::players[::input_n-1].basePosition.col == 40
::players[::new_input].basePosition.col one of { 0, 40 }
::players[::input_n].basePosition.row == 10
::players[::input_n-1].basePosition.row one of { 9, 10 }
::players[::new_input].basePosition.row one of { 9, 10 }
::players[::input_n].impulse[0] has only one value
::players[::input_n-1].impulse[0] has only one value
::players[::input_n].impulse[1] has only one value
::players[::input_n-1].impulse[1] has only one value
::players[::input_n].impulse[2] has only one value
::players[::input_n-1].impulse[2] has only one value
::players[::input_n].impulse[3] has only one value
::players[::input_n-1].impulse[3] has only one value
::players[::input_n].impulse[4] has only one value
::players[::input_n-1].impulse[4] has only one value
::players[::input_n].impulse[5] has only one value
::players[::input_n-1].impulse[5] has only one value
::players[::input_n].impulse[6] has only one value
::players[::input_n-1].impulse[6] has only one value
::players[::input_n].impulse[7] has only one value
::players[::input_n-1].impulse[7] has only one value
::players[::input_n].impulse[8] has only one value
::players[::input_n-1].impulse[8] has only one value
::players[::new_input].direction one of { 0, 1 }
::players[orig(direction)].direction one of { 0, 1, 3 }
::players[orig(direction)-1].direction one of { 0, 1, 3 }
::players[::input_n].magnetos has only one value
::players[::input_n].magnetos != null
::players[::input_n-1].magnetos has only one value
::players[::input_n-1].magnetos != null
::players[::new_input].magnetos != null
::players[orig(direction)].magnetos != null
::players[orig(direction)-1].magnetos != null
::players[::input_n].magnetos[0] has only one value
::players[::input_n].magnetos[0] != null
::players[::input_n-1].magnetos[0] has only one value
::players[::input_n-1].magnetos[0] != null
::players[::new_input].magnetos[0] != null
::players[orig(direction)].magnetos[0] != null
::players[orig(direction)-1].magnetos[0] != null
::players[::input_n].stepCounter == 9
::players[::new_input].stepCounter one of { 0, 9 }
::players[::input_n].pilot has only one value
::players[::input_n].pilot != null
::players[::input_n-1].pilot has only one value
::players[::input_n-1].pilot != null
::players[::new_input].pilot != null
::players[orig(direction)-1].pilot != null
::players[::input_n].onCrash == null
::players[::input_n-1].onCrash has only one value
::players[::input_n-1].onCrash != null
::players[::input_n].onPushed has only one value
::players[::input_n].onPushed != null
point[::input_n-1].row >= 1
::crashedPlayers[] elements == ::crashedPlayers[::input_n-1]
::crashedPlayers[].start elements == ::crashedPlayers[::input_n-1].start
::crashedPlayers[].start[0] elements == ::crashedPlayers[::new_input].start[0]
::crashedPlayers[].start->next == ::playerSpace[].guideNodes->start (elementwise)
::crashedPlayers[].start->next is the reverse of ::playerSpace[].guideNodes->start
::crashedPlayers[].start->next elements == ::crashedPlayers[::new_input].start->next
::crashedPlayers[].start->next elements == ::playerSpace[::input_n-1].guideNodes->start
::playerSpace[::input_n-1].guideNodes->start in ::crashedPlayers[].start->next
::crashedPlayers[].start->data elements == ::crashedPlayers[::new_input].start->data
::playerSpace[] elements == ::playerSpace[::input_n-1]
::playerSpace[].playerNodes elements == ::playerSpace[::input_n-1].playerNodes
::playerSpace[].playerNodes[0] elements == ::playerSpace[::input_n-1].playerNodes[0]
::playerSpace[].playerNodes->start elements == ::playerSpace[::input_n-1].playerNodes->start
::playerSpace[].playerNodes->start[0] elements == ::playerSpace[::input_n-1].playerNodes->start[0]
::playerSpace[].playerNodes->start->next elements == ::playerSpace[::input_n-1].playerNodes->start->next
::playerSpace[].playerNodes->start->next[0] elements == ::playerSpace[::input_n-1].playerNodes->start->next[0]
::playerSpace[].playerNodes->start->data elements == ::playerSpace[::input_n-1].playerNodes->start->data
::playerSpace[].playerNodes->end elements == ::playerSpace[::input_n-1].playerNodes->end
::playerSpace[].playerNodes->end[0] elements == ::playerSpace[::input_n-1].playerNodes->end[0]
::playerSpace[].playerNodes->end->data elements == ::playerSpace[::input_n-1].playerNodes->end->data
::playerSpace[].playerNodes->end->prev elements == ::playerSpace[::input_n-1].playerNodes->end->prev
::playerSpace[].playerNodes->end->prev[0] elements == ::playerSpace[::input_n-1].playerNodes->end->prev[0]
::playerSpace[].playerMap elements == ::playerSpace[::input_n-1].playerMap
::playerSpace[].guideNodes elements == ::playerSpace[::input_n-1].guideNodes
::playerSpace[].guideNodes[0] elements == ::playerSpace[::input_n-1].guideNodes[0]
::crashedPlayers[::new_input].start->next in ::playerSpace[].guideNodes->start
::playerSpace[].guideNodes->start elements == ::crashedPlayers[::new_input].start->next
::playerSpace[].guideNodes->start elements == ::playerSpace[::input_n-1].guideNodes->start
::playerSpace[].groundMap elements == ::playerSpace[::input_n-1].groundMap
::playerSpace[].actionGroup elements == ::playerSpace[::input_n-1].actionGroup
::playerSpace[].actionGroup[0] elements == ::playerSpace[::input_n-1].actionGroup[0]
::playerSpace[].actionGroup->numActions < ::players[].basePosition.row (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].basePosition.row (lexically)
::playerSpace[].actionGroup->numActions < ::players[].impulse[1][0] (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].impulse[1][0] (lexically)
::playerSpace[].actionGroup->numActions < ::players[].impulse[3][0] (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].impulse[3][0] (lexically)
::playerSpace[].actionGroup->numActions < ::players[].direction (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].direction (lexically)
::playerSpace[].actionGroup->numActions < point[].col (lexically)
::playerSpace[].actionGroup->numActions <= point[].col (lexically)
::playerSpace[].actionGroup->numActions < point[].row (lexically)
::playerSpace[].actionGroup->numActions <= point[].row (lexically)
::playerSpace[].actionGroup->numActions < orig(::players[].basePosition.row) (lexically)
::playerSpace[].actionGroup->numActions <= orig(::players[].basePosition.row) (lexically)
::playerSpace[].actionGroup->numActions < orig(point[].col) (lexically)
::playerSpace[].actionGroup->numActions <= orig(point[].col) (lexically)
::playerSpace[].actionGroup->numActions < orig(point[].row) (lexically)
::playerSpace[].actionGroup->numActions <= orig(point[].row) (lexically)
::playerSpace[].actionGroup->numActions elements == size(::crashedPlayers[])-1
::playerSpace[].actionGroup->numActions elements == size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::playerSpace[].actionGroup->numActions
::players in ::players[].body.bodyPoints->player
::players[].id <= ::players[].body.type (elementwise)
::players[].id <= ::players[].body.visible (elementwise)
::players[].id <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].id <= ::players[].body.bodyMapsSize (elementwise)
::players[].id <= ::players[].body.bodySize (elementwise)
::players[].id <= ::players[].body.bodyWidth (elementwise)
::players[].id <= ::players[].body.bodyHeight (elementwise)
::players[].id <= ::players[].body.color (elementwise)
::players[].id <= ::players[].basePosition.col (elementwise)
::players[].id < ::players[].basePosition.row (lexically)
::players[].id <= ::players[].basePosition.row (elementwise)
::players[].id <= ::players[].impulse[0][0] (elementwise)
::players[].id <= ::players[].impulse[1][0] (elementwise)
::players[].id <= ::players[].impulse[2][0] (elementwise)
::players[].id <= ::players[].impulse[3][0] (elementwise)
::players[].id <= ::players[].impulse[4][0] (elementwise)
::players[].id <= ::players[].impulse[5][0] (elementwise)
::players[].id <= ::players[].impulse[7][0] (elementwise)
::players[].id < ::players[].direction (lexically)
::players[].id <= ::players[].direction (elementwise)
::players[].id <= ::players[].stepCounter (elementwise)
::players[].id < point[].col (lexically)
::players[].id <= point[].col (lexically)
::players[].id < point[].row (lexically)
::players[].id <= point[].row (lexically)
::players[].id < orig(::players[].basePosition.row) (lexically)
::players[].id <= orig(::players[].basePosition.row) (elementwise)
::players[].id < orig(point[].col) (lexically)
::players[].id <= orig(point[].col) (lexically)
::players[].id < orig(point[].row) (lexically)
::players[].id <= orig(point[].row) (lexically)
::players[].id elements == size(::crashedPlayers[])-1
::players[].id elements == size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].id
::players[].body.type <= ::players[].body.visible (elementwise)
::players[].body.type <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].body.type <= ::players[].body.bodyMapsSize (elementwise)
::players[].body.type <= ::players[].body.bodySize (elementwise)
::players[].body.type < ::players[].basePosition.row (lexically)
::players[].body.type <= ::players[].basePosition.row (lexically)
::players[].body.type >= ::players[].impulse[0][0] (elementwise)
::players[].body.type > ::players[].impulse[3][0] (lexically)
::players[].body.type >= ::players[].impulse[3][0] (lexically)
::players[].body.type < ::players[].direction (lexically)
::players[].body.type <= ::players[].direction (lexically)
::players[].body.type <= ::players[].stepCounter (elementwise)
::players[].body.type elements <= ::input_n
::players[].body.type < point[].col (lexically)
::players[].body.type <= point[].col (lexically)
::players[].body.type < point[].row (lexically)
::players[].body.type <= point[].row (lexically)
::players[].body.type < orig(::players[].basePosition.row) (lexically)
::players[].body.type <= orig(::players[].basePosition.row) (lexically)
::players[].body.type < orig(point[].col) (lexically)
::players[].body.type <= orig(point[].col) (lexically)
::players[].body.type < orig(point[].row) (lexically)
::players[].body.type <= orig(point[].row) (lexically)
::players[].body.type elements <= orig(direction)
::players[].body.type elements >= size(::crashedPlayers[])-1
::players[].body.type elements <= size(::crashedPlayers[].start[0])
size(::crashedPlayers[].start[0]) in ::players[].body.type
::players[].body.type elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].body.type
::players[].body.type elements < size(::players[])-1
::players[].body.type elements <= orig(size(point[]))
::players[].body.type elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.type elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.type elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.type elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].body.type elements < ::players[::input_n-1].body.bodyMapsSize
::players[].body.type elements <= ::players[::new_input].body.bodyMapsSize
::players[].body.type elements <= ::players[orig(direction)-1].body.bodyMapsSize
::players[].body.type elements < ::players[::input_n-1].body.bodySize
::players[].body.type elements <= ::players[::new_input].body.bodySize
::players[].body.type elements <= ::players[orig(direction)-1].body.bodySize
::players[].body.type elements < ::players[::input_n-1].body.bodyWidth
::players[].body.type elements < ::players[::input_n-1].body.color
::players[].body.type elements < ::players[::input_n-1].basePosition.col
::players[].body.type elements < ::players[::input_n].basePosition.row
::players[].body.type elements < ::players[::input_n-1].basePosition.row
::players[].body.type elements < ::players[::new_input].basePosition.row
::players[].body.type elements < ::players[orig(direction)].basePosition.row
::players[].body.type elements < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].impulse[3][0] in ::players[].body.type
::players[orig(direction)-1].impulse[3][0] in ::players[].body.type
::players[::new_input].direction in ::players[].body.type
::players[].body.type elements < ::players[::input_n].stepCounter
::players[].body.type elements < ::players[orig(direction)].stepCounter
::players[].body.type elements < point[::input_n-1].col
::players[].body.type elements <= point[::input_n-1].row
::players[].body.type elements < orig(::players[::input_n-1].basePosition.row)
::players[].body.type elements < orig(::players[direction-1].basePosition.row)
::players[].body.type elements < orig(point[::input_n-1].col)
::players[].body.type elements <= orig(point[::input_n-1].row)
::players[].body.visible <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].body.visible <= ::players[].body.bodyMapsSize (elementwise)
::players[].body.visible <= ::players[].body.bodySize (elementwise)
::players[].body.visible < ::players[].basePosition.row (lexically)
::players[].body.visible <= ::players[].basePosition.row (lexically)
::players[].body.visible >= ::players[].impulse[0][0] (elementwise)
::players[].body.visible > ::players[].impulse[1][0] (lexically)
::players[].body.visible >= ::players[].impulse[1][0] (lexically)
::players[].body.visible >= ::players[].impulse[2][0] (elementwise)
::players[].body.visible > ::players[].impulse[3][0] (lexically)
::players[].body.visible >= ::players[].impulse[3][0] (elementwise)
::players[].body.visible >= ::players[].impulse[4][0] (elementwise)
::players[].body.visible >= ::players[].impulse[5][0] (elementwise)
::players[].body.visible >= ::players[].impulse[7][0] (elementwise)
::players[].body.visible > ::players[].direction (lexically)
::players[].body.visible >= ::players[].direction (lexically)
::players[].body.visible elements <= ::input_n
::new_input in ::players[].body.visible
::players[].body.visible < point[].col (lexically)
::players[].body.visible <= point[].col (lexically)
::players[].body.visible < orig(::players[].basePosition.row) (lexically)
::players[].body.visible <= orig(::players[].basePosition.row) (lexically)
::players[].body.visible < orig(point[].col) (lexically)
::players[].body.visible <= orig(point[].col) (lexically)
::players[].body.visible elements <= orig(direction)
::players[].body.visible elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].body.visible
::players[].body.visible elements <= size(::crashedPlayers[].start[0])
size(::crashedPlayers[].start[0]) in ::players[].body.visible
::players[].body.visible elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].body.visible
::players[].body.visible elements < size(::players[])-1
::players[].body.visible elements <= orig(size(point[]))
::players[orig(direction)-1].body.type in ::players[].body.visible
::players[].body.visible elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.visible elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.visible elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.visible elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].body.visible elements < ::players[::input_n-1].body.bodyMapsSize
::players[].body.visible elements <= ::players[::new_input].body.bodyMapsSize
::players[].body.visible elements <= ::players[orig(direction)-1].body.bodyMapsSize
::players[].body.visible elements < ::players[::input_n-1].body.bodySize
::players[].body.visible elements <= ::players[::new_input].body.bodySize
::players[].body.visible elements <= ::players[orig(direction)-1].body.bodySize
::players[].body.visible elements < ::players[::input_n-1].body.bodyWidth
::players[].body.visible elements < ::players[::input_n-1].body.color
::players[].body.visible elements < ::players[::input_n-1].basePosition.col
::players[].body.visible elements < ::players[::input_n].basePosition.row
::players[].body.visible elements < ::players[::input_n-1].basePosition.row
::players[].body.visible elements < ::players[::new_input].basePosition.row
::players[].body.visible elements < ::players[orig(direction)].basePosition.row
::players[].body.visible elements < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].impulse[3][0] in ::players[].body.visible
::players[orig(direction)-1].impulse[3][0] in ::players[].body.visible
::players[::new_input].direction in ::players[].body.visible
::players[].body.visible elements < ::players[::input_n].stepCounter
::players[].body.visible elements < ::players[orig(direction)].stepCounter
::players[].body.visible elements < point[::input_n-1].col
::players[].body.visible elements <= point[::input_n-1].row
::players[].body.visible elements < orig(::players[::input_n-1].basePosition.row)
::players[].body.visible elements < orig(::players[direction-1].basePosition.row)
::players[].body.visible elements < orig(point[::input_n-1].col)
::players[].body.visible elements <= orig(point[::input_n-1].row)
::players[].body.bodyPoints->position - ::players[].basePosition + 7304 == 0
::players[].body.bodyPoints->aspect >= ::players[].body.bodyMapsSize (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodySize (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodyWidth (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.color (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].basePosition.col (elementwise)
::players[].body.bodyPoints->aspect > ::players[].basePosition.row (lexically)
::players[].body.bodyPoints->aspect >= ::players[].basePosition.row (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[0][0] (elementwise)
::players[].body.bodyPoints->aspect > ::players[].impulse[1][0] (lexically)
::players[].body.bodyPoints->aspect >= ::players[].impulse[1][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[2][0] (elementwise)
::players[].body.bodyPoints->aspect > ::players[].impulse[3][0] (lexically)
::players[].body.bodyPoints->aspect >= ::players[].impulse[3][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[4][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[5][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyPoints->aspect > ::players[].direction (lexically)
::players[].body.bodyPoints->aspect >= ::players[].direction (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].stepCounter (elementwise)
::players[].body.bodyPoints->aspect > point[].row (lexically)
::players[].body.bodyPoints->aspect >= point[].row (lexically)
::players[].body.bodyPoints->aspect > orig(::players[].basePosition.row) (lexically)
::players[].body.bodyPoints->aspect >= orig(::players[].basePosition.row) (elementwise)
::players[].body.bodyPoints->aspect > orig(point[].row) (lexically)
::players[].body.bodyPoints->aspect >= orig(point[].row) (lexically)
::players[].body.bodyPoints->aspect elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].body.bodyPoints->aspect
::players[].body.bodyPoints->aspect elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].body.bodyPoints->aspect
::players[].body.bodyPoints->aspect elements < size(::players[])-1
::players[].body.bodyMapsSize <= ::players[].body.bodySize (elementwise)
::players[].body.bodyMapsSize < ::players[].basePosition.row (lexically)
::players[].body.bodyMapsSize <= ::players[].basePosition.row (lexically)
::players[].body.bodyMapsSize >= ::players[].impulse[0][0] (elementwise)
::players[].body.bodyMapsSize > ::players[].impulse[1][0] (lexically)
::players[].body.bodyMapsSize >= ::players[].impulse[1][0] (lexically)
::players[].body.bodyMapsSize >= ::players[].impulse[2][0] (elementwise)
::players[].body.bodyMapsSize > ::players[].impulse[3][0] (lexically)
::players[].body.bodyMapsSize >= ::players[].impulse[3][0] (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[4][0] (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[5][0] (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyMapsSize > ::players[].direction (lexically)
::players[].body.bodyMapsSize >= ::players[].direction (lexically)
::new_input in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize < orig(::players[].basePosition.row) (lexically)
::players[].body.bodyMapsSize <= orig(::players[].basePosition.row) (lexically)
::players[].body.bodyMapsSize elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].body.bodyMapsSize
size(::crashedPlayers[].start[0]) in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < size(::players[])-1
::players[orig(direction)-1].body.type in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements <= ::players[::input_n-1].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::input_n-1].body.bodySize
::players[].body.bodyMapsSize elements < ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyHeight in ::players[].body.bodyMapsSize
::players[orig(direction)-1].body.bodyHeight in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::input_n-1].basePosition.col
::players[].body.bodyMapsSize elements < ::players[::input_n].basePosition.row
::players[].body.bodyMapsSize elements < ::players[::input_n-1].basePosition.row
::players[].body.bodyMapsSize elements < ::players[::new_input].basePosition.row
::players[].body.bodyMapsSize elements < ::players[orig(direction)].basePosition.row
::players[].body.bodyMapsSize elements < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].impulse[3][0] in ::players[].body.bodyMapsSize
::players[orig(direction)-1].impulse[3][0] in ::players[].body.bodyMapsSize
::players[::new_input].direction in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::input_n].stepCounter
::players[].body.bodyMapsSize elements <= ::players[orig(direction)].stepCounter
::players[].body.bodyMapsSize elements < orig(::players[::input_n-1].basePosition.row)
::players[].body.bodyMapsSize elements < orig(::players[direction-1].basePosition.row)
::players[].body.bodySize >= ::players[].body.bodyWidth (elementwise)
::players[].body.bodySize >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodySize > ::players[].basePosition.row (lexically)
::players[].body.bodySize >= ::players[].basePosition.row (lexically)
::players[].body.bodySize >= ::players[].impulse[0][0] (elementwise)
::players[].body.bodySize > ::players[].impulse[1][0] (lexically)
::players[].body.bodySize >= ::players[].impulse[1][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[2][0] (elementwise)
::players[].body.bodySize > ::players[].impulse[3][0] (lexically)
::players[].body.bodySize >= ::players[].impulse[3][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[4][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[5][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodySize > ::players[].direction (lexically)
::players[].body.bodySize >= ::players[].direction (lexically)
::new_input in ::players[].body.bodySize
::players[].body.bodySize > point[].row (lexically)
::players[].body.bodySize >= point[].row (lexically)
::players[].body.bodySize > orig(::players[].basePosition.row) (lexically)
::players[].body.bodySize >= orig(::players[].basePosition.row) (lexically)
::players[].body.bodySize > orig(point[].row) (lexically)
::players[].body.bodySize >= orig(point[].row) (lexically)
::players[].body.bodySize elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].body.bodySize
size(::crashedPlayers[].start[0]) in ::players[].body.bodySize
::players[].body.bodySize elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].body.bodySize
::players[].body.bodySize elements < size(::players[])-1
::players[orig(direction)-1].body.type in ::players[].body.bodySize
::players[].body.bodySize elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[orig(direction)].impulse[3][0] in ::players[].body.bodySize
::players[orig(direction)-1].impulse[3][0] in ::players[].body.bodySize
::players[::new_input].direction in ::players[].body.bodySize
::players[].body.bodyWidth >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodyWidth < ::players[].basePosition.row (lexically)
::players[].body.bodyWidth <= ::players[].basePosition.row (lexically)
::players[].body.bodyWidth > ::players[].impulse[1][0] (lexically)
::players[].body.bodyWidth >= ::players[].impulse[1][0] (lexically)
::players[].body.bodyWidth >= ::players[].impulse[2][0] (elementwise)
::players[].body.bodyWidth > ::players[].impulse[3][0] (lexically)
::players[].body.bodyWidth >= ::players[].impulse[3][0] (lexically)
::players[].body.bodyWidth >= ::players[].impulse[4][0] (elementwise)
::players[].body.bodyWidth >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyWidth > ::players[].direction (lexically)
::players[].body.bodyWidth >= ::players[].direction (lexically)
::players[].body.bodyWidth < orig(::players[].basePosition.row) (lexically)
::players[].body.bodyWidth <= orig(::players[].basePosition.row) (lexically)
::players[].body.bodyWidth elements >= size(::crashedPlayers[])-1
::players[].body.bodyWidth elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].body.bodyWidth
::players[].body.bodyWidth elements < size(::players[])-1
::players[].body.bodyWidth elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[::input_n-1].body.bodySize
::players[].body.bodyWidth elements < ::players[::input_n-1].basePosition.col
::players[].body.bodyHeight < ::players[].basePosition.row (lexically)
::players[].body.bodyHeight <= ::players[].basePosition.row (lexically)
::players[].body.bodyHeight > ::players[].impulse[1][0] (lexically)
::players[].body.bodyHeight >= ::players[].impulse[1][0] (lexically)
::players[].body.bodyHeight >= ::players[].impulse[2][0] (elementwise)
::players[].body.bodyHeight > ::players[].impulse[3][0] (lexically)
::players[].body.bodyHeight >= ::players[].impulse[3][0] (lexically)
::players[].body.bodyHeight >= ::players[].impulse[4][0] (elementwise)
::players[].body.bodyHeight >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyHeight > ::players[].direction (lexically)
::players[].body.bodyHeight >= ::players[].direction (lexically)
::players[].body.bodyHeight < orig(::players[].basePosition.row) (lexically)
::players[].body.bodyHeight <= orig(::players[].basePosition.row) (lexically)
::players[].body.bodyHeight elements >= size(::crashedPlayers[])-1
::players[].body.bodyHeight elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].body.bodyHeight
::players[].body.bodyHeight elements < size(::players[])-1
::players[].body.bodyHeight elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[::input_n-1].body.bodySize
::players[].body.bodyHeight elements < ::players[::input_n-1].body.bodyWidth
::players[].body.bodyHeight elements < ::players[::input_n-1].basePosition.col
::players[].body.bodyHeight elements < ::players[::input_n].basePosition.row
::players[].body.bodyHeight elements < ::players[::input_n-1].basePosition.row
::players[].body.bodyHeight elements < ::players[::new_input].basePosition.row
::players[].body.bodyHeight elements < ::players[orig(direction)].basePosition.row
::players[].body.bodyHeight elements < ::players[orig(direction)-1].basePosition.row
::players[].body.bodyHeight elements < ::players[::input_n].stepCounter
::players[].body.bodyHeight elements < orig(::players[::input_n-1].basePosition.row)
::players[].body.bodyHeight elements < orig(::players[direction-1].basePosition.row)
::players[].body.color <= ::players[].basePosition.col (elementwise)
::players[].body.color < ::players[].basePosition.row (lexically)
::players[].body.color <= ::players[].basePosition.row (lexically)
::players[].body.color > ::players[].impulse[1][0] (lexically)
::players[].body.color >= ::players[].impulse[1][0] (lexically)
::players[].body.color >= ::players[].impulse[2][0] (elementwise)
::players[].body.color > ::players[].impulse[3][0] (lexically)
::players[].body.color >= ::players[].impulse[3][0] (lexically)
::players[].body.color >= ::players[].impulse[4][0] (elementwise)
::players[].body.color >= ::players[].impulse[5][0] (elementwise)
::players[].body.color > ::players[].direction (lexically)
::players[].body.color >= ::players[].direction (lexically)
::input_n in ::players[].body.color
::new_input in ::players[].body.color
::players[].body.color < orig(::players[].basePosition.row) (lexically)
::players[].body.color <= orig(::players[].basePosition.row) (lexically)
orig(direction) in ::players[].body.color
::players[].body.color elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[].start[0]) in ::players[].body.color
::players[].body.color elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].body.color
::players[].body.color elements < size(::players[])-1
::players[orig(direction)-1].body.type in ::players[].body.color
::players[].body.color elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.color elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.color elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.color elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize in ::players[].body.color
::players[::new_input].body.bodyMapsSize in ::players[].body.color
::players[orig(direction)-1].body.bodyMapsSize in ::players[].body.color
::players[].body.color elements < ::players[::input_n-1].body.bodySize
::players[::input_n-1].body.bodyWidth in ::players[].body.color
::players[].body.color elements <= ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyWidth in ::players[].body.color
::players[orig(direction)-1].body.bodyWidth in ::players[].body.color
::players[::new_input].body.bodyHeight in ::players[].body.color
::players[orig(direction)-1].body.bodyHeight in ::players[].body.color
::players[].body.color elements < ::players[::input_n-1].basePosition.col
::players[orig(direction)].basePosition.col in ::players[].body.color
::players[].body.color elements < ::players[::input_n].basePosition.row
::players[].body.color elements < ::players[::input_n-1].basePosition.row
::players[].body.color elements < ::players[::new_input].basePosition.row
::players[].body.color elements < ::players[orig(direction)].basePosition.row
::players[].body.color elements < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].impulse[3][0] in ::players[].body.color
::players[orig(direction)-1].impulse[3][0] in ::players[].body.color
::players[::new_input].direction in ::players[].body.color
::players[orig(direction)].direction in ::players[].body.color
::players[orig(direction)-1].direction in ::players[].body.color
::players[].body.color elements < ::players[::input_n].stepCounter
::players[].body.color elements < orig(::players[::input_n-1].basePosition.row)
::players[].body.color elements < orig(::players[direction-1].basePosition.row)
::players[].basePosition.col > ::players[].basePosition.row (lexically)
::players[].basePosition.col >= ::players[].basePosition.row (lexically)
::players[].basePosition.col > ::players[].impulse[0][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[0][0] (lexically)
::players[].basePosition.col > ::players[].impulse[1][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[1][0] (lexically)
::players[].basePosition.col > ::players[].impulse[2][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[2][0] (elementwise)
::players[].basePosition.col > ::players[].impulse[3][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[3][0] (elementwise)
::players[].basePosition.col > ::players[].impulse[4][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[4][0] (elementwise)
::players[].basePosition.col > ::players[].impulse[5][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[5][0] (elementwise)
::players[].basePosition.col > ::players[].impulse[7][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[7][0] (elementwise)
::players[].basePosition.col > ::players[].direction (lexically)
::players[].basePosition.col >= ::players[].direction (lexically)
::players[].basePosition.col > ::players[].stepCounter (lexically)
::players[].basePosition.col >= ::players[].stepCounter (lexically)
::players[].basePosition.col > point[].row (lexically)
::players[].basePosition.col >= point[].row (lexically)
::players[].basePosition.col > orig(::players[].basePosition.row) (lexically)
::players[].basePosition.col >= orig(::players[].basePosition.row) (lexically)
::players[].basePosition.col > orig(point[].row) (lexically)
::players[].basePosition.col >= orig(point[].row) (lexically)
::players[].basePosition.col elements >= size(::crashedPlayers[])-1
::players[].basePosition.col elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].basePosition.col
::players[].basePosition.col elements < size(::players[])-1
::players[::input_n-1].body.bodyMapsSize in ::players[].basePosition.col
::players[::input_n-1].body.bodyWidth in ::players[].basePosition.col
::players[::new_input].body.bodyWidth in ::players[].basePosition.col
::players[orig(direction)-1].body.bodyWidth in ::players[].basePosition.col
::players[::new_input].body.bodyHeight in ::players[].basePosition.col
::players[orig(direction)-1].body.bodyHeight in ::players[].basePosition.col
::players[::input_n].basePosition.row in ::players[].basePosition.col
::players[].basePosition.row > ::players[].impulse[0][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[0][0] (lexically)
::players[].basePosition.row > ::players[].impulse[1][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[1][0] (elementwise)
::players[].basePosition.row > ::players[].impulse[2][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[2][0] (elementwise)
::players[].basePosition.row > ::players[].impulse[3][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[3][0] (lexically)
::players[].basePosition.row > ::players[].impulse[4][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[4][0] (elementwise)
::players[].basePosition.row > ::players[].impulse[5][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[5][0] (elementwise)
::players[].basePosition.row > ::players[].impulse[7][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[7][0] (lexically)
::players[].basePosition.row > ::players[].direction (lexically)
::players[].basePosition.row >= ::players[].direction (lexically)
::players[].basePosition.row > ::players[].stepCounter (lexically)
::players[].basePosition.row >= ::players[].stepCounter (lexically)
::input_n in ::players[].basePosition.row
::new_input in ::players[].basePosition.row
orig(direction) in ::players[].basePosition.row
::players[].basePosition.row elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].basePosition.row
size(::crashedPlayers[].start[0]) in ::players[].basePosition.row
::players[].basePosition.row elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].basePosition.row
::players[].basePosition.row elements < size(::players[])-1
::players[orig(direction)-1].body.type in ::players[].basePosition.row
::players[].basePosition.row elements < ::players[::input_n].body.bodyPoints->aspect
::players[].basePosition.row elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].basePosition.row elements < ::players[::new_input].body.bodyPoints->aspect
::players[].basePosition.row elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize in ::players[].basePosition.row
::players[::new_input].body.bodyMapsSize in ::players[].basePosition.row
::players[orig(direction)-1].body.bodyMapsSize in ::players[].basePosition.row
::players[].basePosition.row elements < ::players[::input_n-1].body.bodySize
::players[::new_input].body.bodyHeight in ::players[].basePosition.row
::players[orig(direction)-1].body.bodyHeight in ::players[].basePosition.row
::players[::input_n-1].body.color in ::players[].basePosition.row
::players[::new_input].body.color in ::players[].basePosition.row
::players[orig(direction)].body.color in ::players[].basePosition.row
::players[orig(direction)-1].body.color in ::players[].basePosition.row
::players[].basePosition.row elements < ::players[::input_n-1].basePosition.col
::players[orig(direction)].impulse[3][0] in ::players[].basePosition.row
::players[orig(direction)-1].impulse[3][0] in ::players[].basePosition.row
::players[::new_input].direction in ::players[].basePosition.row
::players[orig(direction)].direction in ::players[].basePosition.row
::players[orig(direction)-1].direction in ::players[].basePosition.row
::players[orig(direction)-1].stepCounter in ::players[].basePosition.row
orig(::players[::input_n-1].basePosition.row) in ::players[].basePosition.row
orig(::players[direction-1].basePosition.row) in ::players[].basePosition.row
::players[].impulse[0] - ::players[].impulse[1] + 4 == 0
::players[].impulse[0] - ::players[].impulse[2] + 8 == 0
::players[].impulse[0] - ::players[].impulse[3] + 12 == 0
::players[].impulse[0] - ::players[].impulse[4] + 16 == 0
::players[].impulse[0] - ::players[].impulse[5] + 20 == 0
::players[].impulse[0] - ::players[].impulse[6] + 24 == 0
::players[].impulse[0] - ::players[].impulse[7] + 28 == 0
::players[].impulse[0] - ::players[].impulse[8] + 32 == 0
::players[].impulse[0][0] < ::players[].direction (lexically)
::players[].impulse[0][0] <= ::players[].direction (lexically)
::players[].impulse[0][0] < ::players[].stepCounter (lexically)
::players[].impulse[0][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[0][0] elements <= ::input_n
::players[].impulse[0][0] < point[].col (lexically)
::players[].impulse[0][0] <= point[].col (lexically)
::players[].impulse[0][0] < point[].row (lexically)
::players[].impulse[0][0] <= point[].row (lexically)
::players[].impulse[0][0] < orig(::players[].basePosition.row) (lexically)
::players[].impulse[0][0] <= orig(::players[].basePosition.row) (lexically)
::players[].impulse[0][0] < orig(point[].col) (lexically)
::players[].impulse[0][0] <= orig(point[].col) (lexically)
::players[].impulse[0][0] < orig(point[].row) (lexically)
::players[].impulse[0][0] <= orig(point[].row) (lexically)
::players[].impulse[0][0] elements <= orig(direction)
::players[].impulse[0][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[0][0] elements == size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].impulse[0][0]
::players[].impulse[0][0] elements < size(::players[])-1
::players[].impulse[0][0] elements <= orig(size(point[]))
::players[].impulse[0][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[0][0] elements <= ::players[::new_input].body.bodyMapsSize
::players[].impulse[0][0] elements <= ::players[orig(direction)-1].body.bodyMapsSize
::players[].impulse[0][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[0][0] elements <= ::players[::new_input].body.bodySize
::players[].impulse[0][0] elements <= ::players[orig(direction)-1].body.bodySize
::players[].impulse[0][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[0][0] elements < ::players[::input_n-1].body.color
::players[].impulse[0][0] elements <= ::players[orig(direction)-1].body.color
::players[].impulse[0][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[0][0] elements <= ::players[orig(direction)-1].basePosition.col
::players[].impulse[0][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[0][0] elements < ::players[::input_n-1].basePosition.row
::players[].impulse[0][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[0][0] elements < ::players[orig(direction)].basePosition.row
::players[].impulse[0][0] elements < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].impulse[3][0] in ::players[].impulse[0][0]
::players[orig(direction)-1].impulse[3][0] in ::players[].impulse[0][0]
::players[].impulse[0][0] elements <= ::players[orig(direction)-1].direction
::players[].impulse[0][0] elements < ::players[::input_n].stepCounter
::players[].impulse[0][0] elements < ::players[orig(direction)].stepCounter
::players[].impulse[0][0] elements < point[::input_n-1].col
::players[].impulse[0][0] elements < point[::input_n-1].row
::players[].impulse[0][0] elements < orig(::players[::input_n-1].basePosition.row)
::players[].impulse[0][0] elements < orig(::players[direction-1].basePosition.row)
::players[].impulse[0][0] elements < orig(point[::input_n-1].col)
::players[].impulse[0][0] elements <= orig(point[::input_n-1].row)
::players[].impulse[1] - ::players[].impulse[2] + 4 == 0
::players[].impulse[1] - ::players[].impulse[3] + 8 == 0
::players[].impulse[1] - ::players[].impulse[4] + 12 == 0
::players[].impulse[1] - ::players[].impulse[5] + 16 == 0
::players[].impulse[1] - ::players[].impulse[6] + 20 == 0
::players[].impulse[1] - ::players[].impulse[7] + 24 == 0
::players[].impulse[1] - ::players[].impulse[8] + 28 == 0
::players[].impulse[1][0] < point[].col (lexically)
::players[].impulse[1][0] <= point[].col (lexically)
::players[].impulse[1][0] < point[].row (lexically)
::players[].impulse[1][0] <= point[].row (lexically)
::players[].impulse[1][0] < orig(::players[].basePosition.row) (lexically)
::players[].impulse[1][0] <= orig(::players[].basePosition.row) (elementwise)
::players[].impulse[1][0] < orig(point[].col) (lexically)
::players[].impulse[1][0] <= orig(point[].col) (lexically)
::players[].impulse[1][0] < orig(point[].row) (lexically)
::players[].impulse[1][0] <= orig(point[].row) (lexically)
::players[].impulse[1][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[1][0] elements <= size(::crashedPlayers[].start[0])
::players[].impulse[1][0] elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].impulse[1][0]
::players[].impulse[1][0] elements < size(::players[])-1
::players[].impulse[1][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[1][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[1][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[1][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[1][0] elements < ::players[::input_n-1].basePosition.row
::players[].impulse[1][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[1][0] elements < ::players[orig(direction)].basePosition.row
::players[].impulse[1][0] elements < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].impulse[3][0] in ::players[].impulse[1][0]
::players[orig(direction)-1].impulse[3][0] in ::players[].impulse[1][0]
::players[].impulse[1][0] elements < ::players[::input_n].stepCounter
::players[].impulse[1][0] elements < ::players[orig(direction)].stepCounter
::players[].impulse[1][0] elements < orig(::players[::input_n-1].basePosition.row)
::players[].impulse[1][0] elements < orig(::players[direction-1].basePosition.row)
::players[].impulse[2] - ::players[].impulse[3] + 4 == 0
::players[].impulse[2] - ::players[].impulse[4] + 8 == 0
::players[].impulse[2] - ::players[].impulse[5] + 12 == 0
::players[].impulse[2] - ::players[].impulse[6] + 16 == 0
::players[].impulse[2] - ::players[].impulse[7] + 20 == 0
::players[].impulse[2] - ::players[].impulse[8] + 24 == 0
::players[].impulse[2][0] < ::players[].direction (lexically)
::players[].impulse[2][0] <= ::players[].direction (elementwise)
::players[].impulse[2][0] < ::players[].stepCounter (lexically)
::players[].impulse[2][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[2][0] elements <= ::input_n
::players[].impulse[2][0] < point[].col (lexically)
::players[].impulse[2][0] <= point[].col (lexically)
::players[].impulse[2][0] < point[].row (lexically)
::players[].impulse[2][0] <= point[].row (lexically)
::players[].impulse[2][0] < orig(::players[].basePosition.row) (lexically)
::players[].impulse[2][0] <= orig(::players[].basePosition.row) (elementwise)
::players[].impulse[2][0] < orig(point[].col) (lexically)
::players[].impulse[2][0] <= orig(point[].col) (lexically)
::players[].impulse[2][0] < orig(point[].row) (lexically)
::players[].impulse[2][0] <= orig(point[].row) (lexically)
::players[].impulse[2][0] elements < orig(direction)
::players[].impulse[2][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[2][0] elements <= size(::crashedPlayers[].start[0])
::players[].impulse[2][0] elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].impulse[2][0]
::players[].impulse[2][0] elements < size(::players[])-1
::players[].impulse[2][0] elements <= orig(size(point[]))
::players[].impulse[2][0] elements <= ::players[orig(direction)-1].body.type
::players[].impulse[2][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[2][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[2][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[2][0] elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].impulse[2][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[2][0] elements < ::players[::new_input].body.bodyMapsSize
::players[].impulse[2][0] elements <= ::players[orig(direction)-1].body.bodyMapsSize
::players[].impulse[2][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[2][0] elements < ::players[::new_input].body.bodySize
::players[].impulse[2][0] elements <= ::players[orig(direction)-1].body.bodySize
::players[].impulse[2][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[2][0] elements <= ::players[::new_input].body.bodyWidth
::players[].impulse[2][0] elements <= ::players[::new_input].body.bodyHeight
::players[].impulse[2][0] elements < ::players[::input_n-1].body.color
::players[].impulse[2][0] elements <= ::players[::new_input].body.color
::players[].impulse[2][0] elements <= ::players[orig(direction)].body.color
::players[].impulse[2][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[2][0] elements <= ::players[::new_input].basePosition.col
::players[].impulse[2][0] elements <= ::players[orig(direction)].basePosition.col
::players[].impulse[2][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[2][0] elements < ::players[::input_n-1].basePosition.row
::players[].impulse[2][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[2][0] elements < ::players[orig(direction)].basePosition.row
::players[].impulse[2][0] elements < ::players[orig(direction)-1].basePosition.row
::players[].impulse[2][0] elements <= ::players[::new_input].direction
::players[].impulse[2][0] elements <= ::players[orig(direction)].direction
::players[].impulse[2][0] elements < ::players[::input_n].stepCounter
::players[].impulse[2][0] elements < ::players[orig(direction)].stepCounter
::players[].impulse[2][0] elements <= ::players[orig(direction)-1].stepCounter
::players[].impulse[2][0] elements < point[::input_n-1].col
::players[].impulse[2][0] elements <= point[::input_n-1].row
::players[].impulse[2][0] elements < orig(::players[::input_n-1].basePosition.row)
::players[].impulse[2][0] elements < orig(::players[direction-1].basePosition.row)
::players[].impulse[2][0] elements < orig(point[::input_n-1].col)
::players[].impulse[2][0] elements < orig(point[::input_n-1].row)
::players[].impulse[3] - ::players[].impulse[4] + 4 == 0
::players[].impulse[3] - ::players[].impulse[5] + 8 == 0
::players[].impulse[3] - ::players[].impulse[6] + 12 == 0
::players[].impulse[3] - ::players[].impulse[7] + 16 == 0
::players[].impulse[3] - ::players[].impulse[8] + 20 == 0
::players[].impulse[3][0] < ::players[].direction (lexically)
::players[].impulse[3][0] <= ::players[].direction (lexically)
::players[].impulse[3][0] < ::players[].stepCounter (lexically)
::players[].impulse[3][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[3][0] elements <= ::input_n
::new_input in ::players[].impulse[3][0]
::players[].impulse[3][0] < point[].col (lexically)
::players[].impulse[3][0] <= point[].col (lexically)
::players[].impulse[3][0] < point[].row (lexically)
::players[].impulse[3][0] <= point[].row (lexically)
::players[].impulse[3][0] < orig(::players[].basePosition.row) (lexically)
::players[].impulse[3][0] <= orig(::players[].basePosition.row) (lexically)
::players[].impulse[3][0] < orig(point[].col) (lexically)
::players[].impulse[3][0] <= orig(point[].col) (lexically)
::players[].impulse[3][0] < orig(point[].row) (lexically)
::players[].impulse[3][0] <= orig(point[].row) (lexically)
::players[].impulse[3][0] elements <= orig(direction)
::players[].impulse[3][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[3][0] elements <= size(::crashedPlayers[].start[0])
::players[].impulse[3][0] elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].impulse[3][0]
::players[].impulse[3][0] elements < size(::players[])-1
::players[].impulse[3][0] elements <= orig(size(point[]))
::players[].impulse[3][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[3][0] elements <= ::players[::new_input].body.bodyMapsSize
::players[].impulse[3][0] elements <= ::players[orig(direction)-1].body.bodyMapsSize
::players[].impulse[3][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[3][0] elements <= ::players[::new_input].body.bodySize
::players[].impulse[3][0] elements <= ::players[orig(direction)-1].body.bodySize
::players[].impulse[3][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[3][0] elements < ::players[::input_n-1].body.color
::players[].impulse[3][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[3][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[3][0] elements < ::players[::input_n-1].basePosition.row
::players[].impulse[3][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[3][0] elements < ::players[orig(direction)].basePosition.row
::players[].impulse[3][0] elements < ::players[orig(direction)-1].basePosition.row
::players[].impulse[3][0] elements < ::players[::input_n].stepCounter
::players[].impulse[3][0] elements < ::players[orig(direction)].stepCounter
::players[].impulse[3][0] elements < point[::input_n-1].col
::players[].impulse[3][0] elements <= point[::input_n-1].row
::players[].impulse[3][0] elements < orig(::players[::input_n-1].basePosition.row)
::players[].impulse[3][0] elements < orig(::players[direction-1].basePosition.row)
::players[].impulse[3][0] elements < orig(point[::input_n-1].col)
::players[].impulse[3][0] elements <= orig(point[::input_n-1].row)
::players[].impulse[4] - ::players[].impulse[5] + 4 == 0
::players[].impulse[4] - ::players[].impulse[6] + 8 == 0
::players[].impulse[4] - ::players[].impulse[7] + 12 == 0
::players[].impulse[4] - ::players[].impulse[8] + 16 == 0
::players[].impulse[4][0] < ::players[].direction (lexically)
::players[].impulse[4][0] <= ::players[].direction (elementwise)
::players[].impulse[4][0] < ::players[].stepCounter (lexically)
::players[].impulse[4][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[4][0] elements <= ::input_n
::players[].impulse[4][0] < point[].col (lexically)
::players[].impulse[4][0] <= point[].col (lexically)
::players[].impulse[4][0] < point[].row (lexically)
::players[].impulse[4][0] <= point[].row (lexically)
::players[].impulse[4][0] < orig(::players[].basePosition.row) (lexically)
::players[].impulse[4][0] <= orig(::players[].basePosition.row) (elementwise)
::players[].impulse[4][0] < orig(point[].col) (lexically)
::players[].impulse[4][0] <= orig(point[].col) (lexically)
::players[].impulse[4][0] < orig(point[].row) (lexically)
::players[].impulse[4][0] <= orig(point[].row) (lexically)
::players[].impulse[4][0] elements < orig(direction)
::players[].impulse[4][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[4][0] elements <= size(::crashedPlayers[].start[0])
::players[].impulse[4][0] elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].impulse[4][0]
::players[].impulse[4][0] elements < size(::players[])-1
::players[].impulse[4][0] elements <= orig(size(point[]))
::players[].impulse[4][0] elements <= ::players[orig(direction)-1].body.type
::players[].impulse[4][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[4][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[4][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[4][0] elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].impulse[4][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[4][0] elements < ::players[::new_input].body.bodyMapsSize
::players[].impulse[4][0] elements <= ::players[orig(direction)-1].body.bodyMapsSize
::players[].impulse[4][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[4][0] elements < ::players[::new_input].body.bodySize
::players[].impulse[4][0] elements <= ::players[orig(direction)-1].body.bodySize
::players[].impulse[4][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[4][0] elements <= ::players[::new_input].body.bodyWidth
::players[].impulse[4][0] elements <= ::players[::new_input].body.bodyHeight
::players[].impulse[4][0] elements < ::players[::input_n-1].body.color
::players[].impulse[4][0] elements <= ::players[::new_input].body.color
::players[].impulse[4][0] elements <= ::players[orig(direction)].body.color
::players[].impulse[4][0] elements <= ::players[orig(direction)-1].body.color
::players[].impulse[4][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[4][0] elements <= ::players[::new_input].basePosition.col
::players[].impulse[4][0] elements <= ::players[orig(direction)].basePosition.col
::players[].impulse[4][0] elements <= ::players[orig(direction)-1].basePosition.col
::players[].impulse[4][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[4][0] elements < ::players[::input_n-1].basePosition.row
::players[].impulse[4][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[4][0] elements < ::players[orig(direction)].basePosition.row
::players[].impulse[4][0] elements < ::players[orig(direction)-1].basePosition.row
::players[].impulse[4][0] elements <= ::players[::new_input].direction
::players[].impulse[4][0] elements <= ::players[orig(direction)].direction
::players[].impulse[4][0] elements <= ::players[orig(direction)-1].direction
::players[].impulse[4][0] elements < ::players[::input_n].stepCounter
::players[].impulse[4][0] elements < ::players[orig(direction)].stepCounter
::players[].impulse[4][0] elements <= ::players[orig(direction)-1].stepCounter
::players[].impulse[4][0] elements < point[::input_n-1].col
::players[].impulse[4][0] elements < point[::input_n-1].row
::players[].impulse[4][0] elements < orig(::players[::input_n-1].basePosition.row)
::players[].impulse[4][0] elements < orig(::players[direction-1].basePosition.row)
::players[].impulse[4][0] elements < orig(point[::input_n-1].col)
::players[].impulse[4][0] elements < orig(point[::input_n-1].row)
::players[].impulse[5] - ::players[].impulse[6] + 4 == 0
::players[].impulse[5] - ::players[].impulse[7] + 8 == 0
::players[].impulse[5] - ::players[].impulse[8] + 12 == 0
::players[].impulse[5][0] < ::players[].direction (lexically)
::players[].impulse[5][0] <= ::players[].direction (lexically)
::players[].impulse[5][0] < ::players[].stepCounter (lexically)
::players[].impulse[5][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[5][0] elements <= ::input_n
::new_input in ::players[].impulse[5][0]
::players[].impulse[5][0] < point[].col (lexically)
::players[].impulse[5][0] <= point[].col (lexically)
::players[].impulse[5][0] < point[].row (lexically)
::players[].impulse[5][0] <= point[].row (lexically)
::players[].impulse[5][0] < orig(::players[].basePosition.row) (lexically)
::players[].impulse[5][0] <= orig(::players[].basePosition.row) (elementwise)
::players[].impulse[5][0] < orig(point[].col) (lexically)
::players[].impulse[5][0] <= orig(point[].col) (lexically)
::players[].impulse[5][0] < orig(point[].row) (lexically)
::players[].impulse[5][0] <= orig(point[].row) (lexically)
::players[].impulse[5][0] elements <= orig(direction)
::players[].impulse[5][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[5][0] elements <= size(::crashedPlayers[].start[0])
::players[].impulse[5][0] elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].impulse[5][0]
::players[].impulse[5][0] elements < size(::players[])-1
::players[].impulse[5][0] elements <= orig(size(point[]))
::players[].impulse[5][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[5][0] elements <= ::players[::new_input].body.bodyMapsSize
::players[].impulse[5][0] elements <= ::players[orig(direction)-1].body.bodyMapsSize
::players[].impulse[5][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[5][0] elements <= ::players[::new_input].body.bodySize
::players[].impulse[5][0] elements <= ::players[orig(direction)-1].body.bodySize
::players[].impulse[5][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[5][0] elements < ::players[::input_n-1].body.color
::players[].impulse[5][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[5][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[5][0] elements < ::players[::input_n-1].basePosition.row
::players[].impulse[5][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[5][0] elements < ::players[orig(direction)].basePosition.row
::players[].impulse[5][0] elements < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].impulse[3][0] in ::players[].impulse[5][0]
::players[orig(direction)-1].impulse[3][0] in ::players[].impulse[5][0]
::players[].impulse[5][0] elements < ::players[::input_n].stepCounter
::players[].impulse[5][0] elements < ::players[orig(direction)].stepCounter
::players[].impulse[5][0] elements < point[::input_n-1].col
::players[].impulse[5][0] elements <= point[::input_n-1].row
::players[].impulse[5][0] elements < orig(::players[::input_n-1].basePosition.row)
::players[].impulse[5][0] elements < orig(::players[direction-1].basePosition.row)
::players[].impulse[5][0] elements < orig(point[::input_n-1].col)
::players[].impulse[5][0] elements <= orig(point[::input_n-1].row)
::players[].impulse[6] - ::players[].impulse[7] + 4 == 0
::players[].impulse[6] - ::players[].impulse[8] + 8 == 0
::players[].impulse[7] - ::players[].impulse[8] + 4 == 0
::players[].impulse[7][0] < ::players[].direction (lexically)
::players[].impulse[7][0] <= ::players[].direction (lexically)
::players[].impulse[7][0] < ::players[].stepCounter (lexically)
::players[].impulse[7][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[7][0] elements <= ::input_n
::new_input in ::players[].impulse[7][0]
::players[].impulse[7][0] < point[].col (lexically)
::players[].impulse[7][0] <= point[].col (lexically)
::players[].impulse[7][0] < point[].row (lexically)
::players[].impulse[7][0] <= point[].row (lexically)
::players[].impulse[7][0] < orig(::players[].basePosition.row) (lexically)
::players[].impulse[7][0] <= orig(::players[].basePosition.row) (lexically)
::players[].impulse[7][0] < orig(point[].col) (lexically)
::players[].impulse[7][0] <= orig(point[].col) (lexically)
::players[].impulse[7][0] < orig(point[].row) (lexically)
::players[].impulse[7][0] <= orig(point[].row) (lexically)
::players[].impulse[7][0] elements <= orig(direction)
::players[].impulse[7][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[7][0] elements <= size(::crashedPlayers[].start[0])
size(::crashedPlayers[].start[0]) in ::players[].impulse[7][0]
::players[].impulse[7][0] elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].impulse[7][0]
::players[].impulse[7][0] elements < size(::players[])-1
::players[].impulse[7][0] elements <= orig(size(point[]))
::players[].impulse[7][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[7][0] elements <= ::players[::new_input].body.bodyMapsSize
::players[].impulse[7][0] elements <= ::players[orig(direction)-1].body.bodyMapsSize
::players[].impulse[7][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[7][0] elements <= ::players[::new_input].body.bodySize
::players[].impulse[7][0] elements <= ::players[orig(direction)-1].body.bodySize
::players[].impulse[7][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[7][0] elements < ::players[::input_n-1].body.color
::players[].impulse[7][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[7][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[7][0] elements < ::players[::input_n-1].basePosition.row
::players[].impulse[7][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[7][0] elements < ::players[orig(direction)].basePosition.row
::players[].impulse[7][0] elements < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].impulse[3][0] in ::players[].impulse[7][0]
::players[orig(direction)-1].impulse[3][0] in ::players[].impulse[7][0]
::players[].impulse[7][0] elements < ::players[::input_n].stepCounter
::players[].impulse[7][0] elements < ::players[orig(direction)].stepCounter
::players[].impulse[7][0] elements < point[::input_n-1].col
::players[].impulse[7][0] elements <= point[::input_n-1].row
::players[].impulse[7][0] elements < orig(::players[::input_n-1].basePosition.row)
::players[].impulse[7][0] elements < orig(::players[direction-1].basePosition.row)
::players[].impulse[7][0] elements < orig(point[::input_n-1].col)
::players[].impulse[7][0] elements <= orig(point[::input_n-1].row)
::players[].direction > ::players[].stepCounter (lexically)
::players[].direction >= ::players[].stepCounter (lexically)
::new_input in ::players[].direction
::players[].direction < point[].col (lexically)
::players[].direction <= point[].col (lexically)
::players[].direction < orig(::players[].basePosition.row) (lexically)
::players[].direction <= orig(::players[].basePosition.row) (lexically)
::players[].direction < orig(point[].col) (lexically)
::players[].direction <= orig(point[].col) (lexically)
orig(direction) in ::players[].direction
::players[].direction elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[].start[0]) in ::players[].direction
::players[].direction elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].direction
::players[].direction elements < size(::players[])-1
::players[orig(direction)-1].body.type in ::players[].direction
::players[].direction elements < ::players[::input_n].body.bodyPoints->aspect
::players[].direction elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].direction elements < ::players[::new_input].body.bodyPoints->aspect
::players[].direction elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].direction elements < ::players[::input_n-1].body.bodySize
::players[].direction elements <= ::players[::new_input].body.bodySize
::players[].direction elements < ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.color in ::players[].direction
::players[].direction elements < ::players[::input_n-1].basePosition.col
::players[].direction elements < ::players[::input_n].basePosition.row
::players[].direction elements < ::players[::input_n-1].basePosition.row
::players[].direction elements < ::players[::new_input].basePosition.row
::players[].direction elements < ::players[orig(direction)].basePosition.row
::players[].direction elements < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].impulse[3][0] in ::players[].direction
::players[orig(direction)-1].impulse[3][0] in ::players[].direction
::players[].direction elements < ::players[::input_n].stepCounter
::players[].direction elements < orig(::players[::input_n-1].basePosition.row)
::players[].direction elements < orig(::players[direction-1].basePosition.row)
::input_n in ::players[].stepCounter
::new_input in ::players[].stepCounter
::players[].stepCounter < point[].col (lexically)
::players[].stepCounter <= point[].col (lexically)
::players[].stepCounter < point[].row (lexically)
::players[].stepCounter <= point[].row (lexically)
::players[].stepCounter < orig(::players[].basePosition.row) (lexically)
::players[].stepCounter <= orig(::players[].basePosition.row) (lexically)
::players[].stepCounter < orig(point[].col) (lexically)
::players[].stepCounter <= orig(point[].col) (lexically)
::players[].stepCounter < orig(point[].row) (lexically)
::players[].stepCounter <= orig(point[].row) (lexically)
::players[].stepCounter elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[].start[0]) in ::players[].stepCounter
::players[].stepCounter elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in ::players[].stepCounter
::players[].stepCounter elements < size(::players[])-1
::players[orig(direction)-1].body.type in ::players[].stepCounter
::players[].stepCounter elements < ::players[::input_n].body.bodyPoints->aspect
::players[].stepCounter elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].stepCounter elements < ::players[::new_input].body.bodyPoints->aspect
::players[].stepCounter elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize in ::players[].stepCounter
::players[::new_input].body.bodyMapsSize in ::players[].stepCounter
::players[orig(direction)-1].body.bodyMapsSize in ::players[].stepCounter
::players[].stepCounter elements < ::players[::input_n-1].body.bodySize
::players[::input_n-1].body.bodyWidth in ::players[].stepCounter
::players[::new_input].body.bodyWidth in ::players[].stepCounter
::players[orig(direction)-1].body.bodyWidth in ::players[].stepCounter
::players[::new_input].body.bodyHeight in ::players[].stepCounter
::players[orig(direction)-1].body.bodyHeight in ::players[].stepCounter
::players[].stepCounter elements < ::players[::input_n-1].basePosition.col
::players[].stepCounter elements <= ::players[::input_n].basePosition.row
::players[::input_n-1].basePosition.row in ::players[].stepCounter
::players[::new_input].basePosition.row in ::players[].stepCounter
::players[].stepCounter elements <= ::players[orig(direction)].basePosition.row
::players[orig(direction)].impulse[3][0] in ::players[].stepCounter
::players[orig(direction)-1].impulse[3][0] in ::players[].stepCounter
::players[::new_input].direction in ::players[].stepCounter
orig(::players[::input_n-1].basePosition.row) in ::players[].stepCounter
::players[::input_n].onCrash in ::players[].pilot
::players[::input_n].onCrash in ::players[].onPushed
::input_n in orig(::players[].basePosition.row)
::input_n <= orig(direction)
::input_n != size(point[])-1
::input_n <= orig(size(point[]))
::input_n < ::players[::new_input].body.bodyPoints->aspect
::input_n < ::players[orig(direction)-1].body.bodyPoints->aspect
::input_n != ::players[::new_input].body.bodyWidth
::input_n != ::players[orig(direction)-1].body.bodyWidth
::input_n != ::players[::new_input].body.bodyHeight
::input_n != ::players[orig(direction)-1].body.bodyHeight
::input_n != ::players[::new_input].body.color
::input_n != ::players[::new_input].basePosition.col
::input_n != ::players[orig(direction)].basePosition.col
::input_n != ::players[orig(direction)-1].basePosition.col
::input_n < ::players[::input_n-1].basePosition.row
::input_n < ::players[::new_input].basePosition.row
::input_n < ::players[orig(direction)].basePosition.row
::input_n < ::players[orig(direction)-1].basePosition.row
::input_n >= ::players[::new_input].direction
::input_n != ::players[::new_input].stepCounter
::input_n < ::players[orig(direction)].stepCounter
::input_n != ::players[orig(direction)-1].stepCounter
::input_n < point[::input_n-1].col
::input_n <= point[::input_n-1].row
::input_n < orig(::players[::input_n-1].basePosition.row)
::input_n < orig(::players[direction-1].basePosition.row)
::input_n < orig(point[::input_n-1].col)
::input_n <= orig(point[::input_n-1].row)
::new_input in orig(::players[].basePosition.row)
::new_input % orig(direction) == 0
::new_input <= orig(direction)
::new_input < size(::players[])-1
::new_input <= orig(size(point[]))
::new_input < ::players[::input_n].body.bodyPoints->aspect
::new_input < ::players[::input_n-1].body.bodyPoints->aspect
::new_input < ::players[::new_input].body.bodyPoints->aspect
::new_input < ::players[orig(direction)-1].body.bodyPoints->aspect
::new_input < ::players[::input_n-1].body.bodyMapsSize
::new_input < ::players[orig(direction)-1].body.bodyMapsSize
::new_input < ::players[::input_n-1].body.bodySize
::new_input < ::players[orig(direction)-1].body.bodySize
::new_input < ::players[::input_n-1].body.bodyWidth
::new_input != ::players[::new_input].body.bodyWidth
::new_input <= ::players[orig(direction)-1].body.bodyWidth
::new_input != ::players[::new_input].body.bodyHeight
::new_input <= ::players[orig(direction)-1].body.bodyHeight
::new_input < ::players[::input_n-1].body.color
::new_input != ::players[::new_input].body.color
::new_input <= ::players[orig(direction)-1].body.color
::new_input < ::players[::input_n-1].basePosition.col
::new_input != ::players[::new_input].basePosition.col
::new_input <= ::players[orig(direction)-1].basePosition.col
::new_input < ::players[::input_n].basePosition.row
::new_input < ::players[::input_n-1].basePosition.row
::new_input < ::players[::new_input].basePosition.row
::new_input < ::players[orig(direction)].basePosition.row
::new_input < ::players[orig(direction)-1].basePosition.row
::new_input != ::players[::new_input].direction
::new_input <= ::players[orig(direction)-1].direction
::new_input < ::players[::input_n].stepCounter
::new_input < ::players[orig(direction)].stepCounter
::new_input < point[::input_n-1].col
::new_input < point[::input_n-1].row
::new_input < orig(::players[::input_n-1].basePosition.row)
::new_input < orig(::players[direction-1].basePosition.row)
::new_input < orig(point[::input_n-1].col)
::new_input < orig(point[::input_n-1].row)
::input_key > ::trace_pos
point[].col >= orig(point[].col) (elementwise)
point[].col elements >= size(::crashedPlayers[])-1
point[].col elements > size(::crashedPlayers[].start[0])
point[].row elements >= size(::crashedPlayers[])-1
point[].row elements > size(::crashedPlayers[].start[0])
point[].row elements < size(::players[])-1
point[].row elements < ::players[::input_n-1].body.bodyPoints->aspect
orig(::players[].basePosition.row) elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in orig(::players[].basePosition.row)
size(::crashedPlayers[].start[0]) in orig(::players[].basePosition.row)
orig(::players[].basePosition.row) elements >= size(::crashedPlayers[].start[0])-1
size(::crashedPlayers[].start[0])-1 in orig(::players[].basePosition.row)
orig(::players[].basePosition.row) elements < size(::players[])-1
::players[orig(direction)-1].body.type in orig(::players[].basePosition.row)
orig(::players[].basePosition.row) elements < ::players[::input_n].body.bodyPoints->aspect
orig(::players[].basePosition.row) elements < ::players[::input_n-1].body.bodyPoints->aspect
orig(::players[].basePosition.row) elements < ::players[::new_input].body.bodyPoints->aspect
orig(::players[].basePosition.row) elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize in orig(::players[].basePosition.row)
::players[::new_input].body.bodyMapsSize in orig(::players[].basePosition.row)
::players[orig(direction)-1].body.bodyMapsSize in orig(::players[].basePosition.row)
orig(::players[].basePosition.row) elements < ::players[::input_n-1].body.bodySize
::players[::new_input].body.bodyHeight in orig(::players[].basePosition.row)
::players[orig(direction)-1].body.bodyHeight in orig(::players[].basePosition.row)
::players[::input_n-1].body.color in orig(::players[].basePosition.row)
::players[::new_input].body.color in orig(::players[].basePosition.row)
::players[orig(direction)].body.color in orig(::players[].basePosition.row)
::players[orig(direction)-1].body.color in orig(::players[].basePosition.row)
orig(::players[].basePosition.row) elements < ::players[::input_n-1].basePosition.col
::players[orig(direction)].impulse[3][0] in orig(::players[].basePosition.row)
::players[orig(direction)-1].impulse[3][0] in orig(::players[].basePosition.row)
::players[::new_input].direction in orig(::players[].basePosition.row)
::players[orig(direction)].direction in orig(::players[].basePosition.row)
::players[orig(direction)-1].direction in orig(::players[].basePosition.row)
::players[orig(direction)-1].stepCounter in orig(::players[].basePosition.row)
orig(point[].col) elements >= size(::crashedPlayers[])-1
orig(point[].col) elements > size(::crashedPlayers[].start[0])
orig(point[].row) elements >= size(::crashedPlayers[])-1
orig(point[].row) elements > size(::crashedPlayers[].start[0])
orig(point[].row) elements < size(::players[])-1
orig(point[].row) elements < ::players[::input_n-1].body.bodyPoints->aspect
orig(direction) > size(::crashedPlayers[].start[0])
orig(direction) < size(::players[])-1
orig(direction) != size(point[])-1
orig(direction) > ::players[orig(direction)-1].body.type
orig(direction) < ::players[::input_n].body.bodyPoints->aspect
orig(direction) < ::players[::input_n-1].body.bodyPoints->aspect
orig(direction) < ::players[::new_input].body.bodyPoints->aspect
orig(direction) < ::players[orig(direction)-1].body.bodyPoints->aspect
orig(direction) != ::players[orig(direction)-1].body.bodyMapsSize
orig(direction) < ::players[::input_n-1].body.bodySize
orig(direction) <= ::players[::new_input].body.bodySize
orig(direction) != ::players[orig(direction)-1].body.bodySize
orig(direction) < ::players[::input_n-1].body.bodyWidth
orig(direction) != ::players[::new_input].body.bodyWidth
::players[orig(direction)-1].body.bodyWidth % orig(direction) == 0
orig(direction) != ::players[orig(direction)-1].body.bodyWidth
::players[orig(direction)-1].body.bodyHeight % orig(direction) == 0
orig(direction) != ::players[orig(direction)-1].body.bodyHeight
orig(direction) - ::players[orig(direction)].body.color - 1 == 0
orig(direction) != ::players[orig(direction)-1].body.color
orig(direction) < ::players[::input_n-1].basePosition.col
orig(direction) != ::players[::new_input].basePosition.col
orig(direction) != ::players[orig(direction)].basePosition.col
orig(direction) < ::players[::input_n].basePosition.row
orig(direction) < ::players[::input_n-1].basePosition.row
orig(direction) < ::players[::new_input].basePosition.row
orig(direction) < ::players[orig(direction)].basePosition.row
orig(direction) < ::players[orig(direction)-1].basePosition.row
orig(direction) > ::players[orig(direction)].impulse[3][0]
orig(direction) > ::players[orig(direction)-1].impulse[3][0]
orig(direction) >= ::players[::new_input].direction
orig(direction) >= ::players[orig(direction)-1].direction
orig(direction) < ::players[::input_n].stepCounter
::players[::new_input].stepCounter % orig(direction) == 0
orig(direction) != ::players[::new_input].stepCounter
orig(direction) <= ::players[orig(direction)].stepCounter
orig(direction) != ::players[orig(direction)-1].stepCounter
size(::crashedPlayers[])-1 <= size(point[])-1
orig(size(point[])) == size(::crashedPlayers[].start[0])**2
size(::crashedPlayers[].start[0]) == orig(size(point[]))**2
size(::crashedPlayers[].start[0]) < ::players[::new_input].body.bodyPoints->aspect
size(::crashedPlayers[].start[0]) < ::players[orig(direction)-1].body.bodyPoints->aspect
size(::crashedPlayers[].start[0]) < ::players[::new_input].body.bodyMapsSize
size(::crashedPlayers[].start[0]) < ::players[::new_input].body.bodySize
size(::crashedPlayers[].start[0]) < ::players[::new_input].body.bodyWidth
size(::crashedPlayers[].start[0]) < ::players[::new_input].body.bodyHeight
size(::crashedPlayers[].start[0]) < ::players[::new_input].body.color
size(::crashedPlayers[].start[0]) <= ::players[orig(direction)].body.color
size(::crashedPlayers[].start[0]) < ::players[::new_input].basePosition.col
size(::crashedPlayers[].start[0]) < ::players[orig(direction)].basePosition.col
size(::crashedPlayers[].start[0]) != ::players[orig(direction)-1].basePosition.col
size(::crashedPlayers[].start[0]) < ::players[::input_n-1].basePosition.row
size(::crashedPlayers[].start[0]) < ::players[::new_input].basePosition.row
size(::crashedPlayers[].start[0]) < ::players[orig(direction)].basePosition.row
size(::crashedPlayers[].start[0]) < ::players[orig(direction)-1].basePosition.row
size(::crashedPlayers[].start[0]) < ::players[orig(direction)].direction
size(::crashedPlayers[].start[0]) != ::players[orig(direction)-1].direction
size(::crashedPlayers[].start[0]) < ::players[orig(direction)].stepCounter
size(::crashedPlayers[].start[0]) < ::players[orig(direction)-1].stepCounter
size(::crashedPlayers[].start[0]) < point[::input_n-1].col
size(::crashedPlayers[].start[0]) < point[::input_n-1].row
size(::crashedPlayers[].start[0]) < orig(::players[::input_n-1].basePosition.row)
size(::crashedPlayers[].start[0]) < orig(::players[direction-1].basePosition.row)
size(::crashedPlayers[].start[0]) < orig(point[::input_n-1].col)
size(::crashedPlayers[].start[0]) < orig(point[::input_n-1].row)
size(::crashedPlayers[].start[0])-1 == size(point[])-1**2
size(point[])-1 == size(::crashedPlayers[].start[0])-1**2
size(::crashedPlayers[].start[0])-1 % ::players[orig(direction)].body.color == 0
size(::crashedPlayers[].start[0])-1 <= ::players[orig(direction)-1].body.color
size(::crashedPlayers[].start[0])-1 % ::players[orig(direction)].basePosition.col == 0
size(::crashedPlayers[].start[0])-1 <= ::players[orig(direction)-1].basePosition.col
size(::crashedPlayers[].start[0])-1 <= ::players[orig(direction)-1].direction
size(::players[]) != size(point[])-1
size(::players[]) != orig(size(point[]))
size(::players[])-1 != size(point[])-1
size(::players[])-1 != orig(size(point[]))
size(::players[])-1 > ::players[orig(direction)-1].body.type
size(::players[])-1 > ::players[::new_input].body.bodyPoints->aspect
size(::players[])-1 > ::players[orig(direction)-1].body.bodyPoints->aspect
size(::players[])-1 > ::players[::new_input].body.bodyMapsSize
size(::players[])-1 > ::players[orig(direction)-1].body.bodyMapsSize
size(::players[])-1 > ::players[::new_input].body.bodySize
size(::players[])-1 > ::players[orig(direction)-1].body.bodySize
size(::players[])-1 > ::players[::new_input].body.bodyWidth
size(::players[])-1 > ::players[orig(direction)-1].body.bodyWidth
size(::players[])-1 > ::players[::new_input].body.bodyHeight
size(::players[])-1 > ::players[orig(direction)-1].body.bodyHeight
size(::players[])-1 > ::players[::new_input].body.color
size(::players[])-1 > ::players[orig(direction)].body.color
size(::players[])-1 > ::players[orig(direction)-1].body.color
size(::players[])-1 > ::players[::new_input].basePosition.col
size(::players[])-1 > ::players[orig(direction)].basePosition.col
size(::players[])-1 > ::players[orig(direction)-1].basePosition.col
size(::players[])-1 > ::players[::input_n-1].basePosition.row
size(::players[])-1 > ::players[::new_input].basePosition.row
size(::players[])-1 > ::players[orig(direction)].basePosition.row
size(::players[])-1 > ::players[orig(direction)-1].basePosition.row
size(::players[])-1 > ::players[orig(direction)].impulse[3][0]
size(::players[])-1 > ::players[orig(direction)-1].impulse[3][0]
size(::players[])-1 > ::players[::new_input].direction
size(::players[])-1 > ::players[orig(direction)].direction
size(::players[])-1 > ::players[orig(direction)-1].direction
size(::players[])-1 > ::players[::new_input].stepCounter
size(::players[])-1 > ::players[orig(direction)].stepCounter
size(::players[])-1 > ::players[orig(direction)-1].stepCounter
size(::players[])-1 > point[::input_n-1].col
size(::players[])-1 > point[::input_n-1].row
size(::players[])-1 > orig(::players[::input_n-1].basePosition.row)
size(::players[])-1 > orig(::players[direction-1].basePosition.row)
size(::players[])-1 > orig(point[::input_n-1].col)
size(::players[])-1 > orig(point[::input_n-1].row)
size(point[])-1 != ::players[::input_n].body.bodyPoints->aspect
size(point[])-1 != ::players[::input_n-1].body.bodyPoints->aspect
size(point[])-1 != ::players[::new_input].body.bodyPoints->aspect
size(point[])-1 != ::players[orig(direction)-1].body.bodyPoints->aspect
size(point[])-1 != ::players[::input_n-1].body.bodyMapsSize
size(point[])-1 % ::players[::input_n-1].body.bodyMapsSize == 0
size(point[])-1 != ::players[::new_input].body.bodyMapsSize
size(point[])-1 % ::players[::new_input].body.bodyMapsSize == 0
size(point[])-1 != ::players[orig(direction)-1].body.bodyMapsSize
size(point[])-1 % ::players[orig(direction)-1].body.bodyMapsSize == 0
size(point[])-1 != ::players[::input_n-1].body.bodySize
size(point[])-1 != ::players[::new_input].body.bodySize
size(point[])-1 != ::players[orig(direction)-1].body.bodySize
size(point[])-1 != ::players[::input_n-1].body.bodyWidth
size(point[])-1 % ::players[::input_n-1].body.bodyWidth == 0
size(point[])-1 != ::players[::input_n-1].body.color
size(point[])-1 != ::players[::input_n-1].basePosition.col
size(point[])-1 != ::players[::input_n].basePosition.row
size(point[])-1 != ::players[::input_n-1].basePosition.row
size(point[])-1 != ::players[::new_input].basePosition.row
size(point[])-1 != ::players[orig(direction)].basePosition.row
size(point[])-1 != ::players[orig(direction)-1].basePosition.row
size(point[])-1 != ::players[::input_n].stepCounter
size(point[])-1 != ::players[orig(direction)].stepCounter
size(point[])-1 != point[::input_n-1].col
size(point[])-1 != point[::input_n-1].row
size(point[])-1 != orig(::players[::input_n-1].basePosition.row)
size(point[])-1 != orig(::players[direction-1].basePosition.row)
size(point[])-1 != orig(point[::input_n-1].col)
size(point[])-1 != orig(point[::input_n-1].row)
orig(size(point[])) >= ::players[orig(direction)-1].body.type
orig(size(point[])) != ::players[::input_n].body.bodyPoints->aspect
orig(size(point[])) != ::players[::input_n-1].body.bodyPoints->aspect
orig(size(point[])) != ::players[::new_input].body.bodyPoints->aspect
orig(size(point[])) != ::players[orig(direction)-1].body.bodyPoints->aspect
orig(size(point[])) != ::players[::input_n-1].body.bodyMapsSize
orig(size(point[])) != ::players[::input_n-1].body.bodySize
orig(size(point[])) != ::players[::input_n-1].body.bodyWidth
orig(size(point[])) != ::players[::new_input].body.bodyWidth
orig(size(point[])) != ::players[orig(direction)-1].body.bodyWidth
orig(size(point[])) != ::players[::new_input].body.bodyHeight
orig(size(point[])) != ::players[orig(direction)-1].body.bodyHeight
orig(size(point[])) != ::players[::input_n-1].body.color
orig(size(point[])) != ::players[::new_input].body.color
orig(size(point[])) != ::players[::input_n-1].basePosition.col
orig(size(point[])) != ::players[::new_input].basePosition.col
orig(size(point[])) != ::players[orig(direction)].basePosition.col
orig(size(point[])) != ::players[orig(direction)-1].basePosition.col
orig(size(point[])) != ::players[::input_n].basePosition.row
orig(size(point[])) != ::players[::input_n-1].basePosition.row
orig(size(point[])) != ::players[::new_input].basePosition.row
orig(size(point[])) != ::players[orig(direction)].basePosition.row
orig(size(point[])) != ::players[orig(direction)-1].basePosition.row
orig(size(point[])) >= ::players[orig(direction)].impulse[3][0]
orig(size(point[])) >= ::players[orig(direction)-1].impulse[3][0]
orig(size(point[])) >= ::players[::new_input].direction
orig(size(point[])) != ::players[::input_n].stepCounter
orig(size(point[])) != ::players[::new_input].stepCounter
orig(size(point[])) != ::players[orig(direction)].stepCounter
orig(size(point[])) != ::players[orig(direction)-1].stepCounter
orig(size(point[])) != point[::input_n-1].col
::players[orig(direction)-1].body.type < ::players[::input_n].body.bodyPoints->aspect
::players[orig(direction)-1].body.type < ::players[::input_n-1].body.bodyPoints->aspect
::players[orig(direction)-1].body.type < ::players[::new_input].body.bodyPoints->aspect
::players[orig(direction)-1].body.type < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[orig(direction)-1].body.type < ::players[::input_n-1].body.bodyMapsSize
::players[orig(direction)-1].body.type < ::players[::new_input].body.bodyMapsSize
::players[orig(direction)-1].body.type < ::players[::input_n-1].body.bodySize
::players[orig(direction)-1].body.type < ::players[::new_input].body.bodySize
::players[orig(direction)-1].body.type < ::players[::input_n-1].body.bodyWidth
::players[orig(direction)-1].body.type <= ::players[::new_input].body.bodyWidth
::players[orig(direction)-1].body.type != ::players[orig(direction)-1].body.bodyWidth
::players[orig(direction)-1].body.type <= ::players[::new_input].body.bodyHeight
::players[orig(direction)-1].body.type != ::players[orig(direction)-1].body.bodyHeight
::players[orig(direction)-1].body.type < ::players[::input_n-1].body.color
::players[orig(direction)-1].body.type <= ::players[::new_input].body.color
::players[orig(direction)-1].body.type <= ::players[orig(direction)].body.color
::players[orig(direction)-1].body.type < ::players[::input_n-1].basePosition.col
::players[orig(direction)-1].body.type <= ::players[::new_input].basePosition.col
::players[orig(direction)-1].body.type <= ::players[orig(direction)].basePosition.col
::players[orig(direction)-1].body.type != ::players[orig(direction)-1].basePosition.col
::players[orig(direction)-1].body.type < ::players[::input_n].basePosition.row
::players[orig(direction)-1].body.type < ::players[::input_n-1].basePosition.row
::players[orig(direction)-1].body.type < ::players[::new_input].basePosition.row
::players[orig(direction)-1].body.type < ::players[orig(direction)].basePosition.row
::players[orig(direction)-1].body.type < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)-1].body.type >= ::players[orig(direction)].impulse[3][0]
::players[orig(direction)-1].body.type >= ::players[orig(direction)-1].impulse[3][0]
::players[orig(direction)-1].body.type <= ::players[::new_input].direction
::players[orig(direction)-1].body.type != ::players[orig(direction)-1].direction
::players[orig(direction)-1].body.type < ::players[::input_n].stepCounter
::players[orig(direction)-1].body.type < ::players[orig(direction)].stepCounter
::players[orig(direction)-1].body.type < point[::input_n-1].col
::players[orig(direction)-1].body.type <= point[::input_n-1].row
::players[orig(direction)-1].body.type < orig(::players[::input_n-1].basePosition.row)
::players[orig(direction)-1].body.type < orig(::players[direction-1].basePosition.row)
::players[orig(direction)-1].body.type < orig(point[::input_n-1].col)
::players[orig(direction)-1].body.type <= orig(point[::input_n-1].row)
::players[::input_n].body.bodyPoints->aspect <= ::players[::new_input].body.bodyPoints->aspect
::players[::input_n].body.bodyPoints->aspect <= ::players[orig(direction)-1].body.bodyPoints->aspect
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.bodyMapsSize
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyMapsSize
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.bodySize
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodySize
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.bodyWidth
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyWidth
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.bodyHeight
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyHeight
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.color
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)].body.color
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)-1].body.color
::players[::input_n].body.bodyPoints->aspect != ::players[::new_input].basePosition.col
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)].basePosition.col
::players[::input_n].body.bodyPoints->aspect != ::players[orig(direction)-1].basePosition.col
::players[::input_n].body.bodyPoints->aspect > ::players[::input_n-1].basePosition.row
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].basePosition.row
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)].basePosition.row
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)-1].basePosition.row
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)].impulse[3][0]
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)-1].impulse[3][0]
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].direction
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)].direction
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)-1].direction
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].stepCounter
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)].stepCounter
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)-1].stepCounter
::players[::input_n].body.bodyPoints->aspect > point[::input_n-1].row
::players[::input_n].body.bodyPoints->aspect > orig(::players[::input_n-1].basePosition.row)
::players[::input_n].body.bodyPoints->aspect > orig(::players[direction-1].basePosition.row)
::players[::input_n].body.bodyPoints->aspect > orig(point[::input_n-1].row)
::players[::input_n-1].body.bodyPoints->aspect >= ::players[::new_input].body.bodyPoints->aspect
::players[::input_n-1].body.bodyPoints->aspect >= ::players[orig(direction)-1].body.bodyPoints->aspect
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyMapsSize
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyMapsSize
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.bodySize
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodySize
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyWidth
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyHeight
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.color
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)].body.color
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)-1].body.color
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].basePosition.col
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)].basePosition.col
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)-1].basePosition.col
::players[::input_n-1].body.bodyPoints->aspect > ::players[::input_n-1].basePosition.row
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].basePosition.row
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)].basePosition.row
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)-1].basePosition.row
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)].impulse[3][0]
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)-1].impulse[3][0]
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].direction
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)].direction
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)-1].direction
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].stepCounter
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)].stepCounter
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)-1].stepCounter
::players[::input_n-1].body.bodyPoints->aspect > point[::input_n-1].row
::players[::input_n-1].body.bodyPoints->aspect > orig(::players[::input_n-1].basePosition.row)
::players[::input_n-1].body.bodyPoints->aspect > orig(::players[direction-1].basePosition.row)
::players[::input_n-1].body.bodyPoints->aspect > orig(point[::input_n-1].row)
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].body.bodyMapsSize
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.bodyMapsSize
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyMapsSize
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].body.bodySize
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.bodySize
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodySize
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.bodyHeight
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyHeight
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].body.color
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.color
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)].body.color
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)-1].body.color
::players[::new_input].body.bodyPoints->aspect != ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].basePosition.col
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)].basePosition.col
::players[::new_input].body.bodyPoints->aspect != ::players[orig(direction)-1].basePosition.col
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)-1].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)].impulse[3][0]
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)-1].impulse[3][0]
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].direction
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)].direction
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)-1].direction
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n].stepCounter
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].stepCounter
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)].stepCounter
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)-1].stepCounter
::players[::new_input].body.bodyPoints->aspect > point[::input_n-1].row
::players[::new_input].body.bodyPoints->aspect > orig(::players[::input_n-1].basePosition.row)
::players[::new_input].body.bodyPoints->aspect > orig(::players[direction-1].basePosition.row)
::players[::new_input].body.bodyPoints->aspect > orig(point[::input_n-1].row)
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::input_n-1].body.bodyMapsSize
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyMapsSize
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyMapsSize
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::input_n-1].body.bodySize
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::new_input].body.bodySize
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodySize
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::input_n-1].body.bodyWidth
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyWidth
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyWidth
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyHeight
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyHeight
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::input_n-1].body.color
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::new_input].body.color
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)].body.color
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)-1].body.color
::players[orig(direction)-1].body.bodyPoints->aspect != ::players[::input_n-1].basePosition.col
::players[orig(direction)-1].body.bodyPoints->aspect != ::players[::new_input].basePosition.col
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)].basePosition.col
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)-1].basePosition.col
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::input_n].basePosition.row
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::input_n-1].basePosition.row
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::new_input].basePosition.row
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)].basePosition.row
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)-1].basePosition.row
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)].impulse[3][0]
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)-1].impulse[3][0]
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::new_input].direction
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)].direction
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)-1].direction
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::input_n].stepCounter
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::new_input].stepCounter
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)].stepCounter
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)-1].stepCounter
::players[orig(direction)-1].body.bodyPoints->aspect > point[::input_n-1].row
::players[orig(direction)-1].body.bodyPoints->aspect > orig(::players[::input_n-1].basePosition.row)
::players[orig(direction)-1].body.bodyPoints->aspect > orig(::players[direction-1].basePosition.row)
::players[orig(direction)-1].body.bodyPoints->aspect > orig(point[::input_n-1].row)
::players[::input_n-1].body.bodyMapsSize >= ::players[::new_input].body.bodyMapsSize
::players[::input_n-1].body.bodyMapsSize >= ::players[orig(direction)-1].body.bodyMapsSize
::players[::input_n-1].body.bodyMapsSize != ::players[::new_input].body.bodySize
::players[::input_n-1].body.bodyMapsSize != ::players[orig(direction)-1].body.bodySize
::players[::input_n-1].body.bodyMapsSize != ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.bodyMapsSize != ::players[orig(direction)-1].body.bodyWidth
::players[::input_n-1].body.bodyMapsSize >= ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize >= ::players[orig(direction)-1].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize > ::players[::new_input].body.color
::players[::input_n-1].body.bodyMapsSize >= ::players[orig(direction)].body.color
::players[::input_n-1].body.bodyMapsSize > ::players[orig(direction)-1].body.color
::players[::input_n-1].body.bodyMapsSize != ::players[::new_input].basePosition.col
::players[::input_n-1].body.bodyMapsSize != ::players[orig(direction)-1].basePosition.col
::players[::input_n-1].body.bodyMapsSize < ::players[::input_n-1].basePosition.row
::players[::input_n-1].body.bodyMapsSize < ::players[::new_input].basePosition.row
::players[::input_n-1].body.bodyMapsSize < ::players[orig(direction)].basePosition.row
::players[::input_n-1].body.bodyMapsSize < ::players[orig(direction)-1].basePosition.row
::players[::input_n-1].body.bodyMapsSize > ::players[orig(direction)].impulse[3][0]
::players[::input_n-1].body.bodyMapsSize > ::players[orig(direction)-1].impulse[3][0]
::players[::input_n-1].body.bodyMapsSize > ::players[::new_input].direction
::players[::input_n-1].body.bodyMapsSize > ::players[orig(direction)].direction
::players[::input_n-1].body.bodyMapsSize > ::players[orig(direction)-1].direction
::players[::input_n-1].body.bodyMapsSize != ::players[::new_input].stepCounter
::players[::input_n-1].body.bodyMapsSize <= ::players[orig(direction)].stepCounter
::players[::input_n-1].body.bodyMapsSize < orig(::players[::input_n-1].basePosition.row)
::players[::input_n-1].body.bodyMapsSize < orig(::players[direction-1].basePosition.row)
::players[::new_input].body.bodyMapsSize < ::players[::input_n-1].body.bodySize
::players[::new_input].body.bodyMapsSize != ::players[orig(direction)-1].body.bodySize
::players[::new_input].body.bodyMapsSize < ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyMapsSize != ::players[::new_input].body.bodyWidth
::players[::new_input].body.bodyMapsSize != ::players[orig(direction)-1].body.bodyWidth
::players[::new_input].body.bodyMapsSize >= ::players[::new_input].body.bodyHeight
::players[::new_input].body.bodyMapsSize != ::players[::input_n-1].body.color
::players[::new_input].body.bodyMapsSize > ::players[::new_input].body.color
::players[::new_input].body.bodyMapsSize >= ::players[orig(direction)].body.color
::players[::new_input].body.bodyMapsSize != ::players[orig(direction)-1].body.color
::players[::new_input].body.bodyMapsSize < ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodyMapsSize != ::players[::new_input].basePosition.col
::players[::new_input].body.bodyMapsSize != ::players[orig(direction)-1].basePosition.col
::players[::new_input].body.bodyMapsSize < ::players[::input_n].basePosition.row
::players[::new_input].body.bodyMapsSize < ::players[::input_n-1].basePosition.row
::players[::new_input].body.bodyMapsSize < ::players[::new_input].basePosition.row
::players[::new_input].body.bodyMapsSize < ::players[orig(direction)].basePosition.row
::players[::new_input].body.bodyMapsSize < ::players[orig(direction)-1].basePosition.row
::players[::new_input].body.bodyMapsSize > ::players[orig(direction)].impulse[3][0]
::players[::new_input].body.bodyMapsSize > ::players[orig(direction)-1].impulse[3][0]
::players[::new_input].body.bodyMapsSize > ::players[::new_input].direction
::players[::new_input].body.bodyMapsSize > ::players[orig(direction)].direction
::players[::new_input].body.bodyMapsSize >= ::players[orig(direction)-1].direction
::players[::new_input].body.bodyMapsSize < ::players[::input_n].stepCounter
::players[::new_input].body.bodyMapsSize != ::players[::new_input].stepCounter
::players[::new_input].body.bodyMapsSize <= ::players[orig(direction)].stepCounter
::players[::new_input].body.bodyMapsSize < orig(::players[::input_n-1].basePosition.row)
::players[::new_input].body.bodyMapsSize < orig(::players[direction-1].basePosition.row)
::players[orig(direction)-1].body.bodyMapsSize < ::players[::input_n-1].body.bodySize
::players[orig(direction)-1].body.bodyMapsSize != ::players[::new_input].body.bodySize
::players[orig(direction)-1].body.bodyMapsSize < ::players[::input_n-1].body.bodyWidth
::players[orig(direction)-1].body.bodyMapsSize != ::players[::new_input].body.bodyWidth
::players[orig(direction)-1].body.bodyMapsSize != ::players[orig(direction)-1].body.bodyWidth
::players[orig(direction)-1].body.bodyMapsSize >= ::players[orig(direction)-1].body.bodyHeight
::players[orig(direction)-1].body.bodyMapsSize != ::players[::input_n-1].body.color
::players[orig(direction)-1].body.bodyMapsSize != ::players[::new_input].body.color
::players[orig(direction)].body.color % ::players[orig(direction)-1].body.bodyMapsSize == 0
::players[orig(direction)-1].body.bodyMapsSize < ::players[::input_n-1].basePosition.col
::players[orig(direction)-1].body.bodyMapsSize != ::players[::new_input].basePosition.col
::players[orig(direction)-1].body.bodyMapsSize != ::players[orig(direction)].basePosition.col
::players[orig(direction)].basePosition.col % ::players[orig(direction)-1].body.bodyMapsSize == 0
::players[orig(direction)-1].basePosition.col % ::players[orig(direction)-1].body.bodyMapsSize == 0
::players[orig(direction)-1].body.bodyMapsSize != ::players[orig(direction)-1].basePosition.col
::players[orig(direction)-1].body.bodyMapsSize < ::players[::input_n].basePosition.row
::players[orig(direction)-1].body.bodyMapsSize < ::players[::input_n-1].basePosition.row
::players[orig(direction)-1].body.bodyMapsSize < ::players[::new_input].basePosition.row
::players[orig(direction)-1].body.bodyMapsSize < ::players[orig(direction)].basePosition.row
::players[orig(direction)-1].body.bodyMapsSize < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)-1].body.bodyMapsSize >= ::players[orig(direction)].impulse[3][0]
::players[orig(direction)-1].body.bodyMapsSize >= ::players[::new_input].direction
::players[orig(direction)].direction % ::players[orig(direction)-1].body.bodyMapsSize == 0
::players[orig(direction)-1].body.bodyMapsSize != ::players[orig(direction)-1].direction
::players[orig(direction)-1].body.bodyMapsSize < ::players[::input_n].stepCounter
::players[orig(direction)-1].body.bodyMapsSize != ::players[::new_input].stepCounter
::players[orig(direction)-1].body.bodyMapsSize < ::players[orig(direction)].stepCounter
::players[orig(direction)-1].body.bodyMapsSize != ::players[orig(direction)-1].stepCounter
::players[orig(direction)-1].stepCounter % ::players[orig(direction)-1].body.bodyMapsSize == 0
::players[orig(direction)-1].body.bodyMapsSize <= point[::input_n-1].col
::players[orig(direction)-1].body.bodyMapsSize <= point[::input_n-1].row
::players[orig(direction)-1].body.bodyMapsSize < orig(::players[::input_n-1].basePosition.row)
::players[orig(direction)-1].body.bodyMapsSize < orig(::players[direction-1].basePosition.row)
::players[orig(direction)-1].body.bodyMapsSize <= orig(point[::input_n-1].col)
::players[orig(direction)-1].body.bodyMapsSize <= orig(point[::input_n-1].row)
::players[::input_n-1].body.bodySize >= ::players[::new_input].body.bodySize
::players[::input_n-1].body.bodySize >= ::players[orig(direction)-1].body.bodySize
::players[::input_n-1].body.bodySize > ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.bodySize > ::players[orig(direction)-1].body.bodyWidth
::players[::input_n-1].body.bodySize > ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodySize > ::players[orig(direction)-1].body.bodyHeight
::players[::input_n-1].body.bodySize > ::players[::new_input].body.color
::players[::input_n-1].body.bodySize > ::players[orig(direction)].body.color
::players[::input_n-1].body.bodySize > ::players[orig(direction)-1].body.color
::players[::input_n-1].body.bodySize != ::players[::new_input].basePosition.col
::players[::input_n-1].body.bodySize > ::players[orig(direction)].basePosition.col
::players[::input_n-1].body.bodySize != ::players[orig(direction)-1].basePosition.col
::players[::input_n-1].body.bodySize > ::players[::input_n-1].basePosition.row
::players[::input_n-1].body.bodySize > ::players[::new_input].basePosition.row
::players[::input_n-1].body.bodySize > ::players[orig(direction)].basePosition.row
::players[::input_n-1].body.bodySize > ::players[orig(direction)-1].basePosition.row
::players[::input_n-1].body.bodySize > ::players[orig(direction)].impulse[3][0]
::players[::input_n-1].body.bodySize > ::players[orig(direction)-1].impulse[3][0]
::players[::input_n-1].body.bodySize > ::players[::new_input].direction
::players[::input_n-1].body.bodySize > ::players[orig(direction)].direction
::players[::input_n-1].body.bodySize > ::players[orig(direction)-1].direction
::players[::input_n-1].body.bodySize > ::players[::new_input].stepCounter
::players[::input_n-1].body.bodySize > ::players[orig(direction)].stepCounter
::players[::input_n-1].body.bodySize > ::players[orig(direction)-1].stepCounter
::players[::input_n-1].body.bodySize > point[::input_n-1].row
::players[::input_n-1].body.bodySize > orig(::players[::input_n-1].basePosition.row)
::players[::input_n-1].body.bodySize > orig(::players[direction-1].basePosition.row)
::players[::input_n-1].body.bodySize > orig(point[::input_n-1].row)
::players[::new_input].body.bodySize != ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodySize > ::players[::new_input].body.bodyWidth
::players[::new_input].body.bodySize != ::players[orig(direction)-1].body.bodyWidth
::players[::new_input].body.bodySize > ::players[::new_input].body.bodyHeight
::players[::new_input].body.bodySize != ::players[orig(direction)-1].body.bodyHeight
::players[::new_input].body.bodySize != ::players[::input_n-1].body.color
::players[::new_input].body.bodySize > ::players[::new_input].body.color
::players[::new_input].body.bodySize > ::players[orig(direction)].body.color
::players[::new_input].body.bodySize != ::players[orig(direction)-1].body.color
::players[::new_input].body.bodySize < ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodySize != ::players[::new_input].basePosition.col
::players[::new_input].body.bodySize > ::players[orig(direction)].basePosition.col
::players[::new_input].body.bodySize != ::players[orig(direction)-1].basePosition.col
::players[::new_input].body.bodySize != ::players[::input_n].basePosition.row
::players[::new_input].body.bodySize != ::players[::input_n-1].basePosition.row
::players[::new_input].body.bodySize != ::players[::new_input].basePosition.row
::players[::new_input].body.bodySize != ::players[orig(direction)].basePosition.row
::players[::new_input].body.bodySize != ::players[orig(direction)-1].basePosition.row
::players[::new_input].body.bodySize > ::players[orig(direction)].impulse[3][0]
::players[::new_input].body.bodySize > ::players[orig(direction)-1].impulse[3][0]
::players[::new_input].body.bodySize > ::players[::new_input].direction
::players[::new_input].body.bodySize > ::players[orig(direction)].direction
::players[::new_input].body.bodySize >= ::players[orig(direction)-1].direction
::players[::new_input].body.bodySize != ::players[::input_n].stepCounter
::players[::new_input].body.bodySize != ::players[::new_input].stepCounter
::players[::new_input].body.bodySize != ::players[orig(direction)].stepCounter
::players[::new_input].body.bodySize > ::players[orig(direction)-1].stepCounter
::players[::new_input].body.bodySize != point[::input_n-1].row
::players[::new_input].body.bodySize != orig(::players[::input_n-1].basePosition.row)
::players[::new_input].body.bodySize != orig(::players[direction-1].basePosition.row)
::players[::new_input].body.bodySize != orig(point[::input_n-1].row)
::players[orig(direction)-1].body.bodySize != ::players[::input_n-1].body.bodyWidth
::players[orig(direction)-1].body.bodySize != ::players[::new_input].body.bodyWidth
::players[orig(direction)-1].body.bodySize > ::players[orig(direction)-1].body.bodyWidth
::players[orig(direction)-1].body.bodySize != ::players[::new_input].body.bodyHeight
::players[orig(direction)-1].body.bodySize > ::players[orig(direction)-1].body.bodyHeight
::players[orig(direction)-1].body.bodySize != ::players[::input_n-1].body.color
::players[orig(direction)-1].body.bodySize != ::players[::new_input].body.color
::players[orig(direction)].body.color % ::players[orig(direction)-1].body.bodySize == 0
::players[orig(direction)-1].body.bodySize < ::players[::input_n-1].basePosition.col
::players[orig(direction)-1].body.bodySize != ::players[::new_input].basePosition.col
::players[orig(direction)-1].body.bodySize != ::players[orig(direction)].basePosition.col
::players[orig(direction)].basePosition.col % ::players[orig(direction)-1].body.bodySize == 0
::players[orig(direction)-1].body.bodySize != ::players[orig(direction)-1].basePosition.col
::players[orig(direction)-1].body.bodySize != ::players[::input_n].basePosition.row
::players[orig(direction)-1].body.bodySize != ::players[::input_n-1].basePosition.row
::players[orig(direction)-1].body.bodySize != ::players[::new_input].basePosition.row
::players[orig(direction)-1].body.bodySize != ::players[orig(direction)].basePosition.row
::players[orig(direction)-1].body.bodySize != ::players[orig(direction)-1].basePosition.row
::players[orig(direction)-1].body.bodySize >= ::players[orig(direction)].impulse[3][0]
::players[orig(direction)-1].body.bodySize >= ::players[::new_input].direction
::players[orig(direction)].direction % ::players[orig(direction)-1].body.bodySize == 0
::players[orig(direction)-1].body.bodySize != ::players[orig(direction)-1].direction
::players[orig(direction)-1].body.bodySize != ::players[::input_n].stepCounter
::players[orig(direction)-1].body.bodySize > ::players[::new_input].stepCounter
::players[orig(direction)-1].body.bodySize != ::players[orig(direction)].stepCounter
::players[orig(direction)-1].body.bodySize != ::players[orig(direction)-1].stepCounter
::players[orig(direction)-1].stepCounter % ::players[orig(direction)-1].body.bodySize == 0
::players[orig(direction)-1].body.bodySize != point[::input_n-1].col
::players[orig(direction)-1].body.bodySize != orig(::players[::input_n-1].basePosition.row)
::players[orig(direction)-1].body.bodySize != orig(::players[direction-1].basePosition.row)
::players[orig(direction)-1].body.bodySize != orig(point[::input_n-1].col)
::players[::input_n-1].body.bodyWidth >= ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.bodyWidth >= ::players[orig(direction)-1].body.bodyWidth
::players[::input_n-1].body.bodyWidth > ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodyWidth > ::players[orig(direction)-1].body.bodyHeight
::players[::input_n-1].body.bodyWidth > ::players[::new_input].body.color
::players[::input_n-1].body.bodyWidth > ::players[orig(direction)].body.color
::players[::input_n-1].body.bodyWidth > ::players[orig(direction)-1].body.color
::players[::input_n-1].body.bodyWidth != ::players[::new_input].basePosition.col
::players[::input_n-1].body.bodyWidth >= ::players[orig(direction)].basePosition.col
::players[::input_n-1].body.bodyWidth != ::players[orig(direction)-1].basePosition.col
::players[::input_n-1].body.bodyWidth < ::players[::input_n-1].basePosition.row
::players[::input_n-1].body.bodyWidth < ::players[::new_input].basePosition.row
::players[::input_n-1].body.bodyWidth < ::players[orig(direction)].basePosition.row
::players[::input_n-1].body.bodyWidth < ::players[orig(direction)-1].basePosition.row
::players[::input_n-1].body.bodyWidth > ::players[orig(direction)].impulse[3][0]
::players[::input_n-1].body.bodyWidth > ::players[orig(direction)-1].impulse[3][0]
::players[::input_n-1].body.bodyWidth > ::players[::new_input].direction
::players[::input_n-1].body.bodyWidth > ::players[orig(direction)].direction
::players[::input_n-1].body.bodyWidth > ::players[orig(direction)-1].direction
::players[::input_n-1].body.bodyWidth != ::players[::new_input].stepCounter
::players[::input_n-1].body.bodyWidth != ::players[orig(direction)-1].stepCounter
::players[::input_n-1].body.bodyWidth < orig(::players[::input_n-1].basePosition.row)
::players[::input_n-1].body.bodyWidth < orig(::players[direction-1].basePosition.row)
::players[::new_input].body.bodyWidth != ::players[orig(direction)-1].body.bodyHeight
::players[::new_input].body.bodyWidth != ::players[::input_n-1].body.color
::players[::new_input].body.bodyWidth >= ::players[::new_input].body.color
::players[::new_input].body.bodyWidth >= ::players[orig(direction)].body.color
::players[::new_input].body.bodyWidth != ::players[orig(direction)-1].body.color
::players[::new_input].body.bodyWidth < ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodyWidth <= ::players[::new_input].basePosition.col
::players[::new_input].body.bodyWidth >= ::players[orig(direction)].basePosition.col
::players[::new_input].body.bodyWidth != ::players[orig(direction)-1].basePosition.col
::players[::new_input].body.bodyWidth < ::players[::input_n].basePosition.row
::players[::new_input].body.bodyWidth < ::players[::input_n-1].basePosition.row
::players[::new_input].body.bodyWidth < ::players[::new_input].basePosition.row
::players[::new_input].body.bodyWidth < ::players[orig(direction)].basePosition.row
::players[::new_input].body.bodyWidth < ::players[orig(direction)-1].basePosition.row
::players[::new_input].body.bodyWidth >= ::players[orig(direction)].impulse[3][0]
::players[::new_input].body.bodyWidth >= ::players[orig(direction)-1].impulse[3][0]
::players[::new_input].body.bodyWidth >= ::players[::new_input].direction
::players[::new_input].body.bodyWidth >= ::players[orig(direction)].direction
::players[::new_input].body.bodyWidth != ::players[orig(direction)-1].direction
::players[::new_input].body.bodyWidth < ::players[::input_n].stepCounter
::players[::new_input].body.bodyWidth != ::players[::new_input].stepCounter
::players[::new_input].body.bodyWidth < orig(::players[::input_n-1].basePosition.row)
::players[::new_input].body.bodyWidth < orig(::players[direction-1].basePosition.row)
::players[orig(direction)-1].body.bodyWidth != ::players[::new_input].body.bodyHeight
::players[orig(direction)-1].body.bodyWidth != ::players[::input_n-1].body.color
::players[orig(direction)-1].body.bodyWidth != ::players[::new_input].body.color
::players[orig(direction)-1].body.bodyWidth != ::players[orig(direction)].body.color
::players[orig(direction)-1].body.bodyWidth < ::players[::input_n-1].basePosition.col
::players[orig(direction)-1].body.bodyWidth != ::players[::new_input].basePosition.col
::players[orig(direction)-1].body.bodyWidth != ::players[orig(direction)].basePosition.col
::players[orig(direction)-1].body.bodyWidth <= ::players[orig(direction)-1].basePosition.col
::players[orig(direction)-1].body.bodyWidth < ::players[::input_n].basePosition.row
::players[orig(direction)-1].body.bodyWidth < ::players[::input_n-1].basePosition.row
::players[orig(direction)-1].body.bodyWidth < ::players[::new_input].basePosition.row
::players[orig(direction)-1].body.bodyWidth < ::players[orig(direction)].basePosition.row
::players[orig(direction)-1].body.bodyWidth < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)-1].body.bodyWidth != ::players[::new_input].direction
::players[orig(direction)-1].body.bodyWidth < ::players[::input_n].stepCounter
::players[orig(direction)-1].body.bodyWidth < ::players[orig(direction)].stepCounter
::players[orig(direction)-1].body.bodyWidth != ::players[orig(direction)-1].stepCounter
::players[orig(direction)-1].body.bodyWidth < orig(::players[::input_n-1].basePosition.row)
::players[orig(direction)-1].body.bodyWidth < orig(::players[direction-1].basePosition.row)
::players[::new_input].body.bodyHeight != ::players[::input_n-1].body.color
::players[::new_input].body.bodyHeight >= ::players[::new_input].body.color
::players[::new_input].body.bodyHeight >= ::players[orig(direction)].body.color
::players[::new_input].body.bodyHeight != ::players[orig(direction)-1].body.color
::players[::new_input].body.bodyHeight < ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodyHeight <= ::players[::new_input].basePosition.col
::players[::new_input].body.bodyHeight != ::players[orig(direction)-1].basePosition.col
::players[::new_input].body.bodyHeight < ::players[::input_n].basePosition.row
::players[::new_input].body.bodyHeight < ::players[::input_n-1].basePosition.row
::players[::new_input].body.bodyHeight < ::players[::new_input].basePosition.row
::players[::new_input].body.bodyHeight < ::players[orig(direction)].basePosition.row
::players[::new_input].body.bodyHeight < ::players[orig(direction)-1].basePosition.row
::players[::new_input].body.bodyHeight >= ::players[orig(direction)].impulse[3][0]
::players[::new_input].body.bodyHeight >= ::players[orig(direction)-1].impulse[3][0]
::players[::new_input].body.bodyHeight >= ::players[::new_input].direction
::players[::new_input].body.bodyHeight >= ::players[orig(direction)].direction
::players[::new_input].body.bodyHeight != ::players[orig(direction)-1].direction
::players[::new_input].body.bodyHeight < ::players[::input_n].stepCounter
::players[::new_input].body.bodyHeight != ::players[::new_input].stepCounter
::players[::new_input].body.bodyHeight <= ::players[orig(direction)].stepCounter
::players[::new_input].body.bodyHeight < orig(::players[::input_n-1].basePosition.row)
::players[::new_input].body.bodyHeight < orig(::players[direction-1].basePosition.row)
::players[orig(direction)-1].body.bodyHeight != ::players[::input_n-1].body.color
::players[orig(direction)-1].body.bodyHeight != ::players[::new_input].body.color
::players[orig(direction)-1].body.bodyHeight != ::players[orig(direction)].body.color
::players[orig(direction)-1].body.bodyHeight < ::players[::input_n-1].basePosition.col
::players[orig(direction)-1].body.bodyHeight != ::players[::new_input].basePosition.col
::players[orig(direction)-1].body.bodyHeight != ::players[orig(direction)].basePosition.col
::players[orig(direction)-1].body.bodyHeight <= ::players[orig(direction)-1].basePosition.col
::players[orig(direction)-1].body.bodyHeight < ::players[::input_n].basePosition.row
::players[orig(direction)-1].body.bodyHeight < ::players[::input_n-1].basePosition.row
::players[orig(direction)-1].body.bodyHeight < ::players[::new_input].basePosition.row
::players[orig(direction)-1].body.bodyHeight < ::players[orig(direction)].basePosition.row
::players[orig(direction)-1].body.bodyHeight < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)-1].body.bodyHeight != ::players[::new_input].direction
::players[orig(direction)-1].body.bodyHeight < ::players[::input_n].stepCounter
::players[orig(direction)-1].body.bodyHeight < ::players[orig(direction)].stepCounter
::players[orig(direction)-1].body.bodyHeight != ::players[orig(direction)-1].stepCounter
::players[orig(direction)-1].body.bodyHeight <= point[::input_n-1].col
::players[orig(direction)-1].body.bodyHeight <= point[::input_n-1].row
::players[orig(direction)-1].body.bodyHeight < orig(::players[::input_n-1].basePosition.row)
::players[orig(direction)-1].body.bodyHeight < orig(::players[direction-1].basePosition.row)
::players[orig(direction)-1].body.bodyHeight <= orig(point[::input_n-1].col)
::players[orig(direction)-1].body.bodyHeight < orig(point[::input_n-1].row)
::players[::input_n-1].body.color >= ::players[::new_input].body.color
::players[::input_n-1].body.color >= ::players[orig(direction)-1].body.color
::players[::input_n-1].body.color != ::players[::new_input].basePosition.col
::players[::input_n-1].body.color < ::players[::input_n-1].basePosition.row
::players[::input_n-1].body.color < ::players[::new_input].basePosition.row
::players[::input_n-1].body.color < ::players[orig(direction)].basePosition.row
::players[::input_n-1].body.color < ::players[orig(direction)-1].basePosition.row
::players[::input_n-1].body.color > ::players[orig(direction)].impulse[3][0]
::players[::input_n-1].body.color > ::players[orig(direction)-1].impulse[3][0]
::players[::input_n-1].body.color > ::players[::new_input].direction
::players[::input_n-1].body.color >= ::players[orig(direction)].direction
::players[::input_n-1].body.color >= ::players[orig(direction)-1].direction
::players[::input_n-1].body.color != ::players[::new_input].stepCounter
::players[::input_n-1].body.color < ::players[orig(direction)].stepCounter
::players[::input_n-1].body.color != ::players[orig(direction)-1].stepCounter
::players[::input_n-1].body.color <= point[::input_n-1].col
::players[::input_n-1].body.color < orig(::players[::input_n-1].basePosition.row)
::players[::input_n-1].body.color < orig(::players[direction-1].basePosition.row)
::players[::input_n-1].body.color != orig(point[::input_n-1].col)
::players[::new_input].body.color < ::players[::input_n-1].basePosition.col
::players[::new_input].body.color < ::players[::input_n].basePosition.row
::players[::new_input].body.color < ::players[::input_n-1].basePosition.row
::players[::new_input].body.color < ::players[::new_input].basePosition.row
::players[::new_input].body.color < ::players[orig(direction)].basePosition.row
::players[::new_input].body.color < ::players[orig(direction)-1].basePosition.row
::players[::new_input].body.color >= ::players[orig(direction)].impulse[3][0]
::players[::new_input].body.color >= ::players[orig(direction)-1].impulse[3][0]
::players[::new_input].body.color >= ::players[::new_input].direction
::players[::new_input].body.color >= ::players[orig(direction)].direction
::players[::new_input].body.color < ::players[::input_n].stepCounter
::players[::new_input].body.color != ::players[::new_input].stepCounter
::players[::new_input].body.color < ::players[orig(direction)].stepCounter
::players[::new_input].body.color <= point[::input_n-1].col
::players[::new_input].body.color < orig(::players[::input_n-1].basePosition.row)
::players[::new_input].body.color < orig(::players[direction-1].basePosition.row)
::players[::new_input].body.color != orig(point[::input_n-1].col)
::players[orig(direction)].body.color != ::players[orig(direction)-1].body.color
::players[orig(direction)].body.color < ::players[::input_n-1].basePosition.col
::players[orig(direction)].body.color <= ::players[::new_input].basePosition.col
::players[orig(direction)].body.color < ::players[::input_n].basePosition.row
::players[orig(direction)].body.color < ::players[::input_n-1].basePosition.row
::players[orig(direction)].body.color < ::players[::new_input].basePosition.row
::players[orig(direction)].body.color < ::players[orig(direction)].basePosition.row
::players[orig(direction)].body.color < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].body.color >= ::players[orig(direction)].impulse[3][0]
::players[orig(direction)].body.color >= ::players[orig(direction)-1].impulse[3][0]
::players[orig(direction)].body.color < ::players[::input_n].stepCounter
::players[orig(direction)].body.color < ::players[orig(direction)].stepCounter
::players[orig(direction)].body.color <= ::players[orig(direction)-1].stepCounter
::players[orig(direction)].body.color <= point[::input_n-1].col
::players[orig(direction)].body.color < orig(::players[::input_n-1].basePosition.row)
::players[orig(direction)].body.color < orig(::players[direction-1].basePosition.row)
::players[orig(direction)].body.color <= orig(point[::input_n-1].col)
::players[orig(direction)-1].body.color < ::players[::input_n-1].basePosition.col
::players[orig(direction)-1].body.color != ::players[::new_input].basePosition.col
::players[orig(direction)-1].body.color != ::players[orig(direction)].basePosition.col
::players[orig(direction)-1].body.color < ::players[::input_n].basePosition.row
::players[orig(direction)-1].body.color < ::players[::input_n-1].basePosition.row
::players[orig(direction)-1].body.color < ::players[::new_input].basePosition.row
::players[orig(direction)-1].body.color < ::players[orig(direction)].basePosition.row
::players[orig(direction)-1].body.color < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)-1].body.color >= ::players[orig(direction)].impulse[3][0]
::players[orig(direction)-1].body.color >= ::players[orig(direction)-1].impulse[3][0]
::players[orig(direction)-1].body.color != ::players[orig(direction)].direction
::players[orig(direction)-1].body.color < ::players[::input_n].stepCounter
::players[orig(direction)-1].body.color < ::players[orig(direction)].stepCounter
::players[orig(direction)-1].body.color != ::players[orig(direction)-1].stepCounter
::players[orig(direction)-1].body.color < point[::input_n-1].col
::players[orig(direction)-1].body.color < orig(::players[::input_n-1].basePosition.row)
::players[orig(direction)-1].body.color < orig(::players[direction-1].basePosition.row)
::players[orig(direction)-1].body.color < orig(point[::input_n-1].col)
::players[::input_n-1].basePosition.col >= ::players[::new_input].basePosition.col
::players[::input_n-1].basePosition.col > ::players[orig(direction)].basePosition.col
::players[::input_n-1].basePosition.col >= ::players[orig(direction)-1].basePosition.col
::players[::input_n-1].basePosition.col > ::players[::input_n-1].basePosition.row
::players[::input_n-1].basePosition.col > ::players[::new_input].basePosition.row
::players[::input_n-1].basePosition.col > ::players[orig(direction)].basePosition.row
::players[::input_n-1].basePosition.col > ::players[orig(direction)-1].basePosition.row
::players[::input_n-1].basePosition.col > ::players[orig(direction)].impulse[3][0]
::players[::input_n-1].basePosition.col > ::players[orig(direction)-1].impulse[3][0]
::players[::input_n-1].basePosition.col > ::players[::new_input].direction
::players[::input_n-1].basePosition.col > ::players[orig(direction)].direction
::players[::input_n-1].basePosition.col > ::players[orig(direction)-1].direction
::players[::input_n-1].basePosition.col > ::players[::new_input].stepCounter
::players[::input_n-1].basePosition.col > ::players[orig(direction)].stepCounter
::players[::input_n-1].basePosition.col > ::players[orig(direction)-1].stepCounter
::players[::input_n-1].basePosition.col > point[::input_n-1].row
::players[::input_n-1].basePosition.col > orig(::players[::input_n-1].basePosition.row)
::players[::input_n-1].basePosition.col > orig(::players[direction-1].basePosition.row)
::players[::input_n-1].basePosition.col > orig(point[::input_n-1].row)
::players[::new_input].basePosition.col >= ::players[orig(direction)].basePosition.col
::players[::new_input].basePosition.col != ::players[::input_n].basePosition.row
::players[::new_input].basePosition.col != ::players[::input_n-1].basePosition.row
::players[::new_input].basePosition.col != ::players[::new_input].basePosition.row
::players[::new_input].basePosition.col != ::players[orig(direction)].basePosition.row
::players[::new_input].basePosition.col != ::players[orig(direction)-1].basePosition.row
::players[::new_input].basePosition.col >= ::players[orig(direction)].impulse[3][0]
::players[::new_input].basePosition.col >= ::players[orig(direction)-1].impulse[3][0]
::players[::new_input].basePosition.col >= ::players[::new_input].direction
::players[::new_input].basePosition.col >= ::players[orig(direction)].direction
::players[::new_input].basePosition.col != ::players[orig(direction)-1].direction
::players[::new_input].basePosition.col != ::players[::input_n].stepCounter
::players[::new_input].basePosition.col != ::players[::new_input].stepCounter
::players[::new_input].basePosition.col != ::players[orig(direction)].stepCounter
::players[::new_input].basePosition.col >= ::players[orig(direction)-1].stepCounter
::players[::new_input].basePosition.col != point[::input_n-1].row
::players[::new_input].basePosition.col != orig(::players[::input_n-1].basePosition.row)
::players[::new_input].basePosition.col != orig(::players[direction-1].basePosition.row)
::players[::new_input].basePosition.col != orig(point[::input_n-1].row)
::players[orig(direction)].basePosition.col != ::players[orig(direction)-1].basePosition.col
::players[orig(direction)].basePosition.col < ::players[::input_n].basePosition.row
::players[orig(direction)].basePosition.col < ::players[::input_n-1].basePosition.row
::players[orig(direction)].basePosition.col < ::players[::new_input].basePosition.row
::players[orig(direction)].basePosition.col < ::players[orig(direction)].basePosition.row
::players[orig(direction)].basePosition.col < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].basePosition.col >= ::players[orig(direction)-1].impulse[3][0]
::players[orig(direction)].basePosition.col >= ::players[orig(direction)].direction
::players[orig(direction)].basePosition.col != ::players[orig(direction)-1].direction
::players[orig(direction)].basePosition.col < ::players[::input_n].stepCounter
::players[orig(direction)].basePosition.col < orig(::players[::input_n-1].basePosition.row)
::players[orig(direction)].basePosition.col < orig(::players[direction-1].basePosition.row)
::players[orig(direction)-1].basePosition.col != ::players[::input_n].basePosition.row
::players[orig(direction)-1].basePosition.col != ::players[::input_n-1].basePosition.row
::players[orig(direction)-1].basePosition.col != ::players[::new_input].basePosition.row
::players[orig(direction)-1].basePosition.col != ::players[orig(direction)].basePosition.row
::players[orig(direction)-1].basePosition.col != ::players[orig(direction)-1].basePosition.row
::players[orig(direction)-1].basePosition.col >= ::players[orig(direction)].impulse[3][0]
::players[orig(direction)-1].basePosition.col != ::players[::new_input].direction
::players[orig(direction)-1].basePosition.col != ::players[::input_n].stepCounter
::players[orig(direction)-1].basePosition.col >= ::players[::new_input].stepCounter
::players[orig(direction)-1].basePosition.col != ::players[orig(direction)].stepCounter
::players[orig(direction)-1].basePosition.col != ::players[orig(direction)-1].stepCounter
::players[orig(direction)-1].basePosition.col != orig(::players[::input_n-1].basePosition.row)
::players[orig(direction)-1].basePosition.col != orig(::players[direction-1].basePosition.row)
::players[::input_n].basePosition.row >= ::players[::input_n-1].basePosition.row
::players[::input_n].basePosition.row >= ::players[::new_input].basePosition.row
::players[::input_n].basePosition.row <= ::players[orig(direction)].basePosition.row
::players[::input_n].basePosition.row > ::players[orig(direction)].impulse[3][0]
::players[::input_n].basePosition.row > ::players[orig(direction)-1].impulse[3][0]
::players[::input_n].basePosition.row > ::players[::new_input].direction
::players[::input_n].basePosition.row > ::players[orig(direction)].direction
::players[::input_n].basePosition.row > ::players[orig(direction)-1].direction
::players[::input_n].basePosition.row > ::players[::new_input].stepCounter
::players[::input_n].basePosition.row > ::players[orig(direction)].stepCounter
::players[::input_n].basePosition.row > ::players[orig(direction)-1].stepCounter
::players[::input_n].basePosition.row >= orig(::players[::input_n-1].basePosition.row)
::players[::input_n-1].basePosition.row <= ::players[::new_input].basePosition.row
::players[::input_n-1].basePosition.row <= ::players[orig(direction)].basePosition.row
::players[::input_n-1].basePosition.row <= ::players[orig(direction)-1].basePosition.row
::players[::input_n-1].basePosition.row > ::players[orig(direction)].impulse[3][0]
::players[::input_n-1].basePosition.row > ::players[orig(direction)-1].impulse[3][0]
::players[::input_n-1].basePosition.row > ::players[::new_input].direction
::players[::input_n-1].basePosition.row > ::players[orig(direction)].direction
::players[::input_n-1].basePosition.row > ::players[orig(direction)-1].direction
::players[::input_n-1].basePosition.row >= ::players[::input_n].stepCounter
::players[::input_n-1].basePosition.row >= ::players[::new_input].stepCounter
::players[::input_n-1].basePosition.row >= ::players[orig(direction)].stepCounter
::players[::input_n-1].basePosition.row >= ::players[orig(direction)-1].stepCounter
::players[::input_n-1].basePosition.row <= orig(::players[::input_n-1].basePosition.row)
::players[::input_n-1].basePosition.row <= orig(::players[direction-1].basePosition.row)
::players[::new_input].basePosition.row <= ::players[orig(direction)].basePosition.row
::players[::new_input].basePosition.row > ::players[orig(direction)].impulse[3][0]
::players[::new_input].basePosition.row > ::players[orig(direction)-1].impulse[3][0]
::players[::new_input].basePosition.row > ::players[::new_input].direction
::players[::new_input].basePosition.row > ::players[orig(direction)].direction
::players[::new_input].basePosition.row > ::players[orig(direction)-1].direction
::players[::new_input].basePosition.row >= ::players[::input_n].stepCounter
::players[::new_input].basePosition.row > ::players[::new_input].stepCounter
::players[::new_input].basePosition.row >= ::players[orig(direction)].stepCounter
::players[::new_input].basePosition.row >= ::players[orig(direction)-1].stepCounter
::players[::new_input].basePosition.row >= orig(::players[::input_n-1].basePosition.row)
::players[orig(direction)].basePosition.row >= ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].basePosition.row > ::players[orig(direction)].impulse[3][0]
::players[orig(direction)].basePosition.row > ::players[orig(direction)-1].impulse[3][0]
::players[orig(direction)].basePosition.row > ::players[::new_input].direction
::players[orig(direction)].basePosition.row > ::players[orig(direction)].direction
::players[orig(direction)].basePosition.row > ::players[orig(direction)-1].direction
::players[orig(direction)].basePosition.row > ::players[::input_n].stepCounter
::players[orig(direction)].basePosition.row > ::players[::new_input].stepCounter
::players[orig(direction)].basePosition.row > ::players[orig(direction)].stepCounter
::players[orig(direction)].basePosition.row > ::players[orig(direction)-1].stepCounter
::players[orig(direction)].basePosition.row >= orig(::players[::input_n-1].basePosition.row)
::players[orig(direction)].basePosition.row >= orig(::players[direction-1].basePosition.row)
::players[orig(direction)-1].basePosition.row > ::players[orig(direction)].impulse[3][0]
::players[orig(direction)-1].basePosition.row > ::players[orig(direction)-1].impulse[3][0]
::players[orig(direction)-1].basePosition.row > ::players[::new_input].direction
::players[orig(direction)-1].basePosition.row > ::players[orig(direction)].direction
::players[orig(direction)-1].basePosition.row > ::players[orig(direction)-1].direction
::players[orig(direction)-1].basePosition.row >= ::players[::input_n].stepCounter
::players[orig(direction)-1].basePosition.row >= ::players[::new_input].stepCounter
::players[orig(direction)-1].basePosition.row >= ::players[orig(direction)].stepCounter
::players[orig(direction)-1].basePosition.row > ::players[orig(direction)-1].stepCounter
::players[orig(direction)-1].basePosition.row <= orig(::players[direction-1].basePosition.row)
::players[orig(direction)].impulse[3][0] >= ::players[orig(direction)-1].impulse[3][0]
::players[orig(direction)].impulse[3][0] <= ::players[::new_input].direction
::players[orig(direction)].impulse[3][0] <= ::players[orig(direction)-1].direction
::players[orig(direction)].impulse[3][0] < ::players[::input_n].stepCounter
::players[orig(direction)].impulse[3][0] < ::players[orig(direction)].stepCounter
::players[orig(direction)].impulse[3][0] <= ::players[orig(direction)-1].stepCounter
::players[orig(direction)].impulse[3][0] < point[::input_n-1].col
::players[orig(direction)].impulse[3][0] < point[::input_n-1].row
::players[orig(direction)].impulse[3][0] < orig(::players[::input_n-1].basePosition.row)
::players[orig(direction)].impulse[3][0] < orig(::players[direction-1].basePosition.row)
::players[orig(direction)].impulse[3][0] < orig(point[::input_n-1].col)
::players[orig(direction)].impulse[3][0] < orig(point[::input_n-1].row)
::players[orig(direction)-1].impulse[3][0] <= ::players[::new_input].direction
::players[orig(direction)-1].impulse[3][0] <= ::players[orig(direction)-1].direction
::players[orig(direction)-1].impulse[3][0] < ::players[::input_n].stepCounter
::players[orig(direction)-1].impulse[3][0] < ::players[orig(direction)].stepCounter
::players[orig(direction)-1].impulse[3][0] < point[::input_n-1].col
::players[orig(direction)-1].impulse[3][0] < point[::input_n-1].row
::players[orig(direction)-1].impulse[3][0] < orig(::players[::input_n-1].basePosition.row)
::players[orig(direction)-1].impulse[3][0] < orig(::players[direction-1].basePosition.row)
::players[orig(direction)-1].impulse[3][0] < orig(point[::input_n-1].col)
::players[orig(direction)-1].impulse[3][0] < orig(point[::input_n-1].row)
::players[::new_input].direction < ::players[::input_n].stepCounter
::players[::new_input].direction != ::players[::new_input].stepCounter
::players[::new_input].direction < ::players[orig(direction)].stepCounter
::players[::new_input].direction < point[::input_n-1].col
::players[::new_input].direction <= point[::input_n-1].row
::players[::new_input].direction < orig(::players[::input_n-1].basePosition.row)
::players[::new_input].direction < orig(::players[direction-1].basePosition.row)
::players[::new_input].direction < orig(point[::input_n-1].col)
::players[::new_input].direction <= orig(point[::input_n-1].row)
::players[orig(direction)].direction < ::players[::input_n].stepCounter
::players[orig(direction)].direction < ::players[orig(direction)].stepCounter
::players[orig(direction)].direction <= ::players[orig(direction)-1].stepCounter
::players[orig(direction)].direction < point[::input_n-1].col
::players[orig(direction)].direction < orig(::players[::input_n-1].basePosition.row)
::players[orig(direction)].direction < orig(::players[direction-1].basePosition.row)
::players[orig(direction)].direction < orig(point[::input_n-1].col)
::players[orig(direction)-1].direction < ::players[::input_n].stepCounter
::players[orig(direction)-1].direction < ::players[orig(direction)].stepCounter
::players[orig(direction)-1].direction != ::players[orig(direction)-1].stepCounter
::players[orig(direction)-1].direction <= point[::input_n-1].col
::players[orig(direction)-1].direction < orig(::players[::input_n-1].basePosition.row)
::players[orig(direction)-1].direction < orig(::players[direction-1].basePosition.row)
::players[orig(direction)-1].direction != orig(point[::input_n-1].col)
::players[::input_n].stepCounter >= ::players[::new_input].stepCounter
::players[::input_n].stepCounter >= ::players[orig(direction)].stepCounter
::players[::input_n].stepCounter >= ::players[orig(direction)-1].stepCounter
::players[::input_n].stepCounter <= orig(::players[::input_n-1].basePosition.row)
::players[::input_n].stepCounter <= orig(::players[direction-1].basePosition.row)
::players[::new_input].stepCounter % ::players[orig(direction)].stepCounter == 0
::players[::new_input].stepCounter <= ::players[orig(direction)].stepCounter
::players[::new_input].stepCounter < point[::input_n-1].col
::players[::new_input].stepCounter <= point[::input_n-1].row
::players[::new_input].stepCounter <= orig(::players[::input_n-1].basePosition.row)
::players[::new_input].stepCounter <= orig(::players[direction-1].basePosition.row)
::players[::new_input].stepCounter < orig(point[::input_n-1].col)
::players[::new_input].stepCounter < orig(point[::input_n-1].row)
::players[orig(direction)].stepCounter <= orig(::players[::input_n-1].basePosition.row)
::players[orig(direction)].stepCounter <= orig(::players[direction-1].basePosition.row)
::players[orig(direction)-1].stepCounter <= orig(::players[::input_n-1].basePosition.row)
::players[orig(direction)-1].stepCounter < orig(::players[direction-1].basePosition.row)
orig(direction) - 4 * ::players[orig(direction)-1].body.type - ::players[orig(direction)-1].body.color + 2 == 0
11 * orig(direction) + 4 * ::players[orig(direction)-1].body.bodyPoints->aspect - 11 * ::players[orig(direction)-1].body.color - 162 == 0
3 * orig(direction) + 4 * ::players[orig(direction)-1].body.bodyMapsSize - 3 * ::players[orig(direction)-1].body.color - 10 == 0
27 * orig(direction) + 4 * ::players[orig(direction)-1].body.bodySize - 27 * ::players[orig(direction)-1].body.color - 58 == 0
2 * orig(direction) + ::players[orig(direction)-1].body.bodyWidth - 2 * ::players[orig(direction)-1].body.color - 4 == 0
orig(direction) + ::players[orig(direction)-1].body.bodyHeight - ::players[orig(direction)-1].body.color - 2 == 0
orig(direction) + ::players[::input_n-1].basePosition.row - ::players[orig(direction)-1].basePosition.row - 1 == 0
4 * ::players[orig(direction)-1].body.type - ::players[orig(direction)].body.color + ::players[orig(direction)-1].body.color - 3 == 0
4 * ::players[orig(direction)-1].body.bodyPoints->aspect + 11 * ::players[orig(direction)].body.color - 11 * ::players[orig(direction)-1].body.color - 151 == 0
4 * ::players[orig(direction)-1].body.bodyMapsSize + 3 * ::players[orig(direction)].body.color - 3 * ::players[orig(direction)-1].body.color - 7 == 0
4 * ::players[orig(direction)-1].body.bodySize + 27 * ::players[orig(direction)].body.color - 27 * ::players[orig(direction)-1].body.color - 31 == 0
::players[orig(direction)-1].body.bodyWidth + 2 * ::players[orig(direction)].body.color - 2 * ::players[orig(direction)-1].body.color - 2 == 0
::players[orig(direction)-1].body.bodyHeight + ::players[orig(direction)].body.color - ::players[orig(direction)-1].body.color - 1 == 0
::players[orig(direction)].body.color + ::players[::input_n-1].basePosition.row - ::players[orig(direction)-1].basePosition.row == 0
::players[orig(direction)].body.color + orig(::players[::input_n-1].basePosition.row) - orig(::players[direction-1].basePosition.row) == 0
===========================================================================
..movePointInMap():::ENTER
::crashedPlayers[].start == ::crashedPlayers[].end
::crashedPlayers[].start == ::playerSpace[].playerNodes->start->prev
::crashedPlayers[].start == ::playerSpace[].playerNodes->end->next
::crashedPlayers[].start == ::playerSpace[].guideNodes->start
::crashedPlayers[].start == ::playerSpace[].guideNodes->end
::crashedPlayers[].start == space[].playerNodes->start->prev
::crashedPlayers[].start == space[].playerNodes->end->next
::crashedPlayers[].start == space[].guideNodes->start
::crashedPlayers[].start == space[].guideNodes->end
::playerSpace == space
::playerSpace[] == space[]
::playerSpace[].playerNodes == space[].playerNodes
::playerSpace[].playerNodes[0] == space[].playerNodes[0]
::playerSpace[].playerNodes->start == space[].playerNodes->start
::playerSpace[].playerNodes->start[0] == space[].playerNodes->start[0]
::playerSpace[].playerNodes->start->next == space[].playerNodes->start->next
::playerSpace[].playerNodes->start->next[0] == space[].playerNodes->start->next[0]
::playerSpace[].playerNodes->start->data == space[].playerNodes->start->data
::playerSpace[].playerNodes->end == space[].playerNodes->end
::playerSpace[].playerNodes->end[0] == space[].playerNodes->end[0]
::playerSpace[].playerNodes->end->data == space[].playerNodes->end->data
::playerSpace[].playerNodes->end->prev == space[].playerNodes->end->prev
::playerSpace[].playerNodes->end->prev[0] == space[].playerNodes->end->prev[0]
::playerSpace[].playerMap == space[].playerMap
::playerSpace[].guideNodes == space[].guideNodes
::playerSpace[].guideNodes[0] == space[].guideNodes[0]
::playerSpace[].groundMap == space[].groundMap
::playerSpace[].actionGroup == space[].actionGroup
::playerSpace[].actionGroup[0] == space[].actionGroup[0]
::playerSpace[].actionGroup->numActions == space[].actionGroup->numActions
::players == ::players[::input_n-1].body.bodyPoints->player
::players[].id == ::players[].type
::players[].id == ::players[].retired
::players[].id == ::players[].impulse[2][0]
::players[].id == ::players[].impulse[4][0]
::players[].id == ::players[].impulse[6][0]
::players[].id == ::players[].impulse[8][0]
::players[].body.visible == ::players[].body.tangible
::input_n == ::input_i
::input_n == size(::crashedPlayers[])
::input_n == size(::playerSpace[])
::input_n == size(::playerSpace[].playerNodes[0])
::input_n == size(::playerSpace[].playerNodes->start[0])
::input_n == size(::playerSpace[].playerNodes->start->next[0])
::input_n == size(::playerSpace[].playerNodes->end[0])
::input_n == size(::playerSpace[].playerNodes->end->prev[0])
::input_n == size(::playerSpace[].guideNodes[0])
::input_n == size(::playerSpace[].actionGroup[0])
::input_n == size(space[])
::input_n == size(space[].playerNodes[0])
::input_n == size(space[].playerNodes->start[0])
::input_n == size(space[].playerNodes->start->next[0])
::input_n == size(space[].playerNodes->end[0])
::input_n == size(space[].playerNodes->end->prev[0])
::input_n == size(space[].guideNodes[0])
::input_n == size(space[].actionGroup[0])
::input_n == ::players[::input_n].body.type
::input_n == ::players[::input_i].body.type
::input_n == ::players[direction].body.type
::input_n == ::players[::input_n].body.visible
::input_n == ::players[::input_n-1].body.visible
::input_n == ::players[::input_i].body.visible
::input_n == ::players[::input_i-1].body.visible
::input_n == ::players[::new_input].body.visible
::input_n == ::players[direction].body.visible
::input_n == ::players[direction-1].body.visible
::input_n == ::players[::input_n].body.tangible
::input_n == ::players[::input_n-1].body.tangible
::input_n == ::players[::input_i].body.tangible
::input_n == ::players[::input_i-1].body.tangible
::input_n == ::players[::new_input].body.tangible
::input_n == ::players[direction].body.tangible
::input_n == ::players[direction-1].body.tangible
::input_n == ::players[::input_n].body.bodyMapsSize
::input_n == ::players[::input_i].body.bodyMapsSize
::input_n == ::players[direction].body.bodyMapsSize
::input_n == ::players[::input_n].body.bodySize
::input_n == ::players[::input_i].body.bodySize
::input_n == ::players[direction].body.bodySize
::input_n == ::players[::input_n-1].direction
::input_n == ::players[::input_i-1].direction
::new_input == ::players[::new_input].body.type
::new_input == ::players[::input_n].impulse[0][0]
::new_input == ::players[::input_i].impulse[0][0]
::new_input == ::players[::new_input].impulse[0][0]
::new_input == ::players[direction].impulse[0][0]
::new_input == ::players[::input_n-1].impulse[1][0]
::new_input == ::players[::input_i-1].impulse[1][0]
::new_input == ::players[direction-1].impulse[1][0]
size(::crashedPlayers[])-1 == ::playerSpace[::input_n-1].actionGroup->numActions
size(::crashedPlayers[])-1 == ::playerSpace[::input_i-1].actionGroup->numActions
size(::crashedPlayers[])-1 == ::players[::input_n].id
size(::crashedPlayers[])-1 == ::players[::input_n-1].id
size(::crashedPlayers[])-1 == ::players[::input_i].id
size(::crashedPlayers[])-1 == ::players[::input_i-1].id
size(::crashedPlayers[])-1 == ::players[::new_input].id
size(::crashedPlayers[])-1 == ::players[direction].id
size(::crashedPlayers[])-1 == ::players[direction-1].id
size(::crashedPlayers[])-1 == ::players[::input_n].type
size(::crashedPlayers[])-1 == ::players[::input_n-1].type
size(::crashedPlayers[])-1 == ::players[::input_i].type
size(::crashedPlayers[])-1 == ::players[::input_i-1].type
size(::crashedPlayers[])-1 == ::players[::new_input].type
size(::crashedPlayers[])-1 == ::players[direction].type
size(::crashedPlayers[])-1 == ::players[direction-1].type
size(::crashedPlayers[])-1 == ::players[::input_n].retired
size(::crashedPlayers[])-1 == ::players[::input_n-1].retired
size(::crashedPlayers[])-1 == ::players[::input_i].retired
size(::crashedPlayers[])-1 == ::players[::input_i-1].retired
size(::crashedPlayers[])-1 == ::players[::new_input].retired
size(::crashedPlayers[])-1 == ::players[direction].retired
size(::crashedPlayers[])-1 == ::players[direction-1].retired
size(::crashedPlayers[])-1 == ::players[::input_n-1].body.type
size(::crashedPlayers[])-1 == ::players[::input_i-1].body.type
size(::crashedPlayers[])-1 == ::players[::input_n].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[::input_i].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[direction].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[::input_n].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[::input_i].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[direction].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[::input_n].body.color
size(::crashedPlayers[])-1 == ::players[::input_i].body.color
size(::crashedPlayers[])-1 == ::players[::input_n].basePosition.col
size(::crashedPlayers[])-1 == ::players[::input_i].basePosition.col
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[direction-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[direction].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[direction].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[direction-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[direction].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[direction-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[direction].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[direction-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[direction].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[direction-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[direction].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[direction-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[direction].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[direction-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_n].direction
size(::crashedPlayers[])-1 == ::players[::input_i].direction
size(::crashedPlayers[])-1 == ::players[::input_n-1].stepCounter
size(::crashedPlayers[])-1 == ::players[::input_i-1].stepCounter
size(::crashedPlayers[])-1 == space[::input_n-1].actionGroup->numActions
size(::crashedPlayers[])-1 == space[::input_i-1].actionGroup->numActions
size(::players[]) == size(::players[].body.bodyPoints[0])
size(::players[]) == size(::players[].body.bodyPoints->player[0])
size(::players[]) == size(::players[].impulse[0])
size(::players[]) == size(::players[].impulse[0][0])
size(::players[]) == size(::players[].impulse[1])
size(::players[]) == size(::players[].impulse[1][0])
size(::players[]) == size(::players[].impulse[2])
size(::players[]) == size(::players[].impulse[2][0])
size(::players[]) == size(::players[].impulse[3])
size(::players[]) == size(::players[].impulse[3][0])
size(::players[]) == size(::players[].impulse[4])
size(::players[]) == size(::players[].impulse[4][0])
size(::players[]) == size(::players[].impulse[5])
size(::players[]) == size(::players[].impulse[5][0])
size(::players[]) == size(::players[].impulse[6])
size(::players[]) == size(::players[].impulse[6][0])
size(::players[]) == size(::players[].impulse[7])
size(::players[]) == size(::players[].impulse[7][0])
size(::players[]) == size(::players[].impulse[8])
size(::players[]) == size(::players[].impulse[8][0])
size(::players[]) == size(::players[].magnetos[0])
size(point[]) == size(point[].player[0])
size(point[]) == size(point[].player->body.bodyPoints[0])
::players[::input_n] == ::players[::input_n].body.bodyPoints->player[0]
::players[::input_n] == ::players[::input_i].body.bodyPoints->player[0]
::players[::input_n-1] == ::players[::input_n-1].body.bodyPoints->player[0]
::players[::input_n-1] == ::players[::input_i-1].body.bodyPoints->player[0]
::players[::new_input] == ::players[::new_input].body.bodyPoints->player[0]
::players[direction] == ::players[direction].body.bodyPoints->player[0]
::players[direction-1] == ::players[direction-1].body.bodyPoints->player[0]
::players[::input_n].body.bodyPoints->aspect == ::players[direction].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize == ::players[::input_n-1].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize == ::players[::input_i-1].body.bodyHeight
::players[::input_n-1].basePosition.row == ::players[::input_n].stepCounter
::players[::input_i-1].basePosition.row == ::players[::input_n].stepCounter
::players[::input_n].pilot == ::players[direction].pilot
::players[::input_n].onCrash == ::players[direction].onCrash
::players[::input_n].onPushed == ::players[::input_n-1].onPushed
::players[::input_n].onPushed == ::players[::input_i-1].onPushed
::players[::input_n].onPushed == ::players[::new_input].onPushed
::players[::input_n].onPushed == ::players[direction].onPushed
::players[::input_n].onPushed == ::players[direction-1].onPushed
point[::input_n].player == point[::input_n-1].player
point[::input_n].player == point[::input_i-1].player
point[::input_n].player == point[::new_input].player
point[::input_n].player == point[direction].player
point[::input_n].player == point[direction-1].player
point[::input_n].player[0] == point[::input_n-1].player[0]
point[::input_n].player[0] == point[::input_i-1].player[0]
point[::input_n].player[0] == point[::new_input].player[0]
point[::input_n].player[0] == point[direction].player[0]
point[::input_n].player[0] == point[direction-1].player[0]
point[::input_n].player->body == point[::input_n-1].player->body
point[::input_n].player->body == point[::input_i-1].player->body
point[::input_n].player->body == point[::new_input].player->body
point[::input_n].player->body == point[direction].player->body
point[::input_n].player->body == point[direction-1].player->body
point[::input_n].player->body.bodyPoints[0] == point[::input_n-1].player->body.bodyPoints[0]
point[::input_n].player->body.bodyPoints[0] == point[::input_i-1].player->body.bodyPoints[0]
point[::input_n].player->body.bodyPoints[0] == point[::new_input].player->body.bodyPoints[0]
point[::input_n].player->body.bodyPoints[0] == point[direction].player->body.bodyPoints[0]
point[::input_n].player->body.bodyPoints[0] == point[direction-1].player->body.bodyPoints[0]
point[::input_n].player->basePosition == point[::input_n-1].player->basePosition
point[::input_n].player->basePosition == point[::input_i-1].player->basePosition
point[::input_n].player->basePosition == point[::new_input].player->basePosition
point[::input_n].player->basePosition == point[direction].player->basePosition
point[::input_n].player->basePosition == point[direction-1].player->basePosition
::crashedPlayers has only one value
::crashedPlayers != null
::crashedPlayers[] contains no nulls and has only one value, of length 1
::crashedPlayers[] elements has only one value
::crashedPlayers[] elements != null
::crashedPlayers[].start == [null]
::crashedPlayers[].start elements == null
::playerSpace has only one value
::playerSpace != null
::playerSpace[] contains no nulls and has only one value, of length 1
::playerSpace[] elements has only one value
::playerSpace[] elements != null
::playerSpace[].playerNodes contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes elements has only one value
::playerSpace[].playerNodes elements != null
::playerSpace[].playerNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes[0] elements has only one value
::playerSpace[].playerNodes[0] elements != null
::playerSpace[].playerNodes->start contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start elements has only one value
::playerSpace[].playerNodes->start elements != null
::playerSpace[].playerNodes->start[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start[0] elements has only one value
::playerSpace[].playerNodes->start[0] elements != null
::playerSpace[].playerNodes->start->next contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next elements has only one value
::playerSpace[].playerNodes->start->next elements != null
::playerSpace[].playerNodes->start->next[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next[0] elements has only one value
::playerSpace[].playerNodes->start->next[0] elements != null
::playerSpace[].playerNodes->start->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->data elements has only one value
::playerSpace[].playerNodes->start->data elements != null
::playerSpace[].playerNodes->end contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end elements has only one value
::playerSpace[].playerNodes->end elements != null
::playerSpace[].playerNodes->end[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end[0] elements has only one value
::playerSpace[].playerNodes->end[0] elements != null
::playerSpace[].playerNodes->end->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->data elements has only one value
::playerSpace[].playerNodes->end->data elements != null
::playerSpace[].playerNodes->end->prev contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->prev elements has only one value
::playerSpace[].playerNodes->end->prev elements != null
::playerSpace[].playerNodes->end->prev[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->prev[0] elements has only one value
::playerSpace[].playerNodes->end->prev[0] elements != null
::playerSpace[].playerMap contains no nulls and has only one value, of length 1
::playerSpace[].playerMap elements has only one value
::playerSpace[].playerMap elements != null
::playerSpace[].guideNodes contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes elements has only one value
::playerSpace[].guideNodes elements != null
::playerSpace[].guideNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes[0] elements has only one value
::playerSpace[].guideNodes[0] elements != null
::playerSpace[].groundMap contains no nulls and has only one value, of length 1
::playerSpace[].groundMap elements has only one value
::playerSpace[].groundMap elements != null
::playerSpace[].actionGroup contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup elements has only one value
::playerSpace[].actionGroup elements != null
::playerSpace[].actionGroup[0] contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup[0] elements has only one value
::playerSpace[].actionGroup[0] elements != null
::playerSpace[].actionGroup->numActions == [0]
::playerSpace[].actionGroup->numActions elements == 0
::players has only one value
::players[] contains no nulls and has only one value, of length 100
::players[] elements != null
::players[].id == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].id elements == 0
::players[].body contains no nulls and has only one value, of length 100
::players[].body elements != null
::players[].body.type == [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.type elements one of { 0, 1 }
::players[].body.visible == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.visible elements one of { 0, 1 }
::players[].body.visible sorted by >=
::players[].body.bodyPoints contains no nulls and has only one value, of length 100
::players[].body.bodyPoints elements != null
::players[].body.bodyPoints[0] contains no nulls and has only one value, of length 100
::players[].body.bodyPoints[0] elements != null
::players[].body.bodyPoints->position contains no nulls and has only one value, of length 100
::players[].body.bodyPoints->position elements != null
::players[].body.bodyPoints->player has only one value, of length 100
::players[].body.bodyPoints->player[0] has only one value, of length 100
::players[].body.bodyPoints->aspect == [46, 35, 35, 35, 35, 35, 86, 86, 86, 86, 86, 88, 91, 91, 91, 91, 91, 91, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyPoints->aspect elements >= 0
::players[].body.bodyMaps contains no nulls and has only one value, of length 100
::players[].body.bodyMaps elements != null
::players[].body.bodyMapsSize == [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyMapsSize elements one of { 0, 1, 4 }
::players[].body.bodyMapsSize sorted by >=
::players[].body.bodySize == [28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodySize elements >= 0
::players[].body.bodyWidth == [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyWidth elements one of { 0, 8, 14 }
::players[].body.bodyHeight == [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyHeight elements one of { 0, 4, 6 }
::players[].body.color == [3, 0, 1, 2, 3, 4, 0, 2, 4, 6, 8, 2, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.color elements >= 0
::players[].basePosition contains no nulls and has only one value, of length 100
::players[].basePosition elements != null
::players[].basePosition.col elements >= 0
::players[].basePosition.row elements >= 0
::players[].impulse[0] contains no nulls and has only one value, of length 100
::players[].impulse[0] elements != null
::players[].impulse[0][0] elements one of { 0, 1 }
::players[].impulse[1] contains no nulls and has only one value, of length 100
::players[].impulse[1] elements != null
::players[].impulse[1][0] elements one of { 0, 1, 5 }
::players[].impulse[2] contains no nulls and has only one value, of length 100
::players[].impulse[2] elements != null
::players[].impulse[3] contains no nulls and has only one value, of length 100
::players[].impulse[3] elements != null
::players[].impulse[3][0] elements one of { 0, 1 }
::players[].impulse[4] contains no nulls and has only one value, of length 100
::players[].impulse[4] elements != null
::players[].impulse[5] contains no nulls and has only one value, of length 100
::players[].impulse[5] elements != null
::players[].impulse[5][0] elements one of { 0, 1 }
::players[].impulse[6] contains no nulls and has only one value, of length 100
::players[].impulse[6] elements != null
::players[].impulse[7] contains no nulls and has only one value, of length 100
::players[].impulse[7] elements != null
::players[].impulse[7][0] elements one of { 0, 1 }
::players[].impulse[7][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[8] contains no nulls and has only one value, of length 100
::players[].impulse[8] elements != null
::players[].direction elements >= 0
::players[].magnetos has only one value, of length 100
::players[].magnetos[0] has only one value, of length 100
::players[].stepCounter one of { [0, 9, 7, 7, 4, 8, 9, 1, 8, 7, 1, 4, 8, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 9, 7, 7, 4, 8, 9, 1, 8, 7, 1, 4, 8, 2, 10, 4, 2, 9, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].stepCounter elements >= 0
::players[].pilot has only one value, of length 100
::players[].onCrash has only one value, of length 100
::players[].onPushed has only one value, of length 100
::snakeBodyMap has only one value
::trainBodyMap has only one value
::giantBodyMap has only one value
::squareBodyMap has only one value
::circleBodyMap has only one value
::input_n == 1
::new_input one of { 0, 1 }
::input_key == "k"
::trace_pos one of { "(40, 10) -> ", "(40, 10) -> (40, 9)\n" }
point != null
point[] elements != null
point[].position elements != null
point[].position.col elements >= 0
point[].position.row elements >= 0
direction one of { 1, 3, 5 }
size(::players[]) == 100
::players[::input_n] has only one value
::players[::input_n-1] has only one value
::players[::input_n].body has only one value
::players[::input_n-1].body has only one value
::players[::input_n].body.bodyPoints has only one value
::players[::input_n-1].body.bodyPoints has only one value
::players[::input_n].body.bodyPoints[0] has only one value
::players[::input_n-1].body.bodyPoints[0] has only one value
::players[::input_n].body.bodyPoints->position has only one value
::players[::input_n-1].body.bodyPoints->position has only one value
::players[::input_n].body.bodyPoints->player has only one value
::players[::input_n].body.bodyPoints->player != null
::players[::input_n-1].body.bodyPoints->player has only one value
::players[::input_n-1].body.bodyPoints->player != null
::players[::new_input].body.bodyPoints->player != null
::players[direction].body.bodyPoints->player != null
::players[direction-1].body.bodyPoints->player != null
::players[::input_n].body.bodyPoints->aspect == 35
::players[::input_n-1].body.bodyPoints->aspect == 46
::players[::new_input].body.bodyPoints->aspect one of { 35, 46 }
::players[direction-1].body.bodyPoints->aspect one of { 35, 46 }
::players[::input_n].body.bodyMaps has only one value
::players[::input_n-1].body.bodyMaps has only one value
::players[::input_n-1].body.bodyMapsSize == 4
::players[::new_input].body.bodyMapsSize one of { 1, 4 }
::players[direction-1].body.bodyMapsSize one of { 1, 4 }
::players[::input_n-1].body.bodySize == 28
::players[::new_input].body.bodySize one of { 1, 28 }
::players[direction-1].body.bodySize one of { 1, 28 }
::players[::input_n-1].body.bodyWidth == 8
::players[::new_input].body.bodyWidth one of { 0, 8 }
::players[direction-1].body.bodyWidth one of { 0, 8 }
::players[::new_input].body.bodyHeight one of { 0, 4 }
::players[direction-1].body.bodyHeight one of { 0, 4 }
::players[::input_n-1].body.color == 3
::players[::new_input].body.color one of { 0, 3 }
::players[direction].body.color one of { 0, 2, 4 }
::players[direction-1].body.color one of { 1, 3 }
::players[::input_n].basePosition has only one value
::players[::input_n-1].basePosition has only one value
::players[::input_n-1].basePosition.col == 40
::players[::new_input].basePosition.col one of { 0, 40 }
::players[::input_n].basePosition.row == 10
::players[::new_input].basePosition.row one of { 9, 10 }
::players[direction].basePosition.row one of { 10, 12, 13 }
::players[direction-1].basePosition.row one of { 9, 11, 13 }
::players[::input_n].impulse[0] has only one value
::players[::input_n-1].impulse[0] has only one value
::players[::input_n].impulse[1] has only one value
::players[::input_n-1].impulse[1] has only one value
::players[::input_n].impulse[2] has only one value
::players[::input_n-1].impulse[2] has only one value
::players[::input_n].impulse[3] has only one value
::players[::input_n-1].impulse[3] has only one value
::players[::input_n].impulse[4] has only one value
::players[::input_n-1].impulse[4] has only one value
::players[::input_n].impulse[5] has only one value
::players[::input_n-1].impulse[5] has only one value
::players[::input_n].impulse[6] has only one value
::players[::input_n-1].impulse[6] has only one value
::players[::input_n].impulse[7] has only one value
::players[::input_n-1].impulse[7] has only one value
::players[::input_n].impulse[8] has only one value
::players[::input_n-1].impulse[8] has only one value
::players[::new_input].direction one of { 0, 1 }
::players[direction].direction one of { 0, 1, 3 }
::players[direction-1].direction one of { 1, 3 }
::players[::input_n].magnetos has only one value
::players[::input_n].magnetos != null
::players[::input_n-1].magnetos has only one value
::players[::input_n-1].magnetos != null
::players[::new_input].magnetos != null
::players[direction].magnetos != null
::players[direction-1].magnetos != null
::players[::input_n].magnetos[0] has only one value
::players[::input_n].magnetos[0] != null
::players[::input_n-1].magnetos[0] has only one value
::players[::input_n-1].magnetos[0] != null
::players[::new_input].magnetos[0] != null
::players[direction].magnetos[0] != null
::players[direction-1].magnetos[0] != null
::players[::input_n].stepCounter == 9
::players[::new_input].stepCounter one of { 0, 9 }
::players[direction].stepCounter one of { 7, 8, 9 }
::players[direction-1].stepCounter one of { 0, 4, 7 }
::players[::input_n].pilot has only one value
::players[::input_n].pilot != null
::players[::input_n-1].pilot has only one value
::players[::input_n-1].pilot != null
::players[::new_input].pilot != null
::players[direction-1].pilot != null
::players[::input_n].onCrash == null
::players[::input_n-1].onCrash has only one value
::players[::input_n-1].onCrash != null
::players[::input_n].onPushed has only one value
::players[::input_n].onPushed != null
point[::input_n].player != null
point[::input_n].player[0] != null
point[::input_n].player->body != null
point[::input_n].player->body.bodyPoints[0] != null
point[::input_n].player->basePosition != null
point[::input_n].aspect >= 0
point[direction].aspect >= 0
point[direction-1].aspect >= 0
::crashedPlayers[] elements == ::crashedPlayers[::input_n-1]
::crashedPlayers[].start elements == ::crashedPlayers[::input_n-1].start
::playerSpace[] elements == ::playerSpace[::input_n-1]
::playerSpace[].playerNodes elements == ::playerSpace[::input_n-1].playerNodes
::playerSpace[].playerNodes[0] elements == ::playerSpace[::input_n-1].playerNodes[0]
::playerSpace[].playerNodes->start elements == ::playerSpace[::input_n-1].playerNodes->start
::playerSpace[].playerNodes->start[0] elements == ::playerSpace[::input_n-1].playerNodes->start[0]
::playerSpace[].playerNodes->start->next elements == ::playerSpace[::input_n-1].playerNodes->start->next
::playerSpace[].playerNodes->start->next[0] elements == ::playerSpace[::input_n-1].playerNodes->start->next[0]
::playerSpace[].playerNodes->start->data elements == ::playerSpace[::input_n-1].playerNodes->start->data
::playerSpace[].playerNodes->end elements == ::playerSpace[::input_n-1].playerNodes->end
::playerSpace[].playerNodes->end[0] elements == ::playerSpace[::input_n-1].playerNodes->end[0]
::playerSpace[].playerNodes->end->data elements == ::playerSpace[::input_n-1].playerNodes->end->data
::playerSpace[].playerNodes->end->prev elements == ::playerSpace[::input_n-1].playerNodes->end->prev
::playerSpace[].playerNodes->end->prev[0] elements == ::playerSpace[::input_n-1].playerNodes->end->prev[0]
::playerSpace[].playerMap elements == ::playerSpace[::input_n-1].playerMap
::playerSpace[].guideNodes elements == ::playerSpace[::input_n-1].guideNodes
::playerSpace[].guideNodes[0] elements == ::playerSpace[::input_n-1].guideNodes[0]
::playerSpace[].groundMap elements == ::playerSpace[::input_n-1].groundMap
::playerSpace[].actionGroup elements == ::playerSpace[::input_n-1].actionGroup
::playerSpace[].actionGroup[0] elements == ::playerSpace[::input_n-1].actionGroup[0]
::playerSpace[].actionGroup->numActions < ::players[].direction (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].direction (lexically)
::playerSpace[].actionGroup->numActions < point[].position.col (lexically)
::playerSpace[].actionGroup->numActions <= point[].position.col (lexically)
::playerSpace[].actionGroup->numActions < point[].position.row (lexically)
::playerSpace[].actionGroup->numActions <= point[].position.row (lexically)
::playerSpace[].actionGroup->numActions < point[].aspect (lexically)
::playerSpace[].actionGroup->numActions <= point[].aspect (lexically)
::playerSpace[].actionGroup->numActions elements == size(::crashedPlayers[])-1
::players in ::players[].body.bodyPoints->player
point[::input_n].player[0] in ::players[]
::players[].id <= ::players[].body.type (elementwise)
::players[].id <= ::players[].body.visible (elementwise)
::players[].id <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].id <= ::players[].body.bodyMapsSize (elementwise)
::players[].id <= ::players[].body.bodySize (elementwise)
::players[].id <= ::players[].body.bodyWidth (elementwise)
::players[].id <= ::players[].body.bodyHeight (elementwise)
::players[].id <= ::players[].body.color (elementwise)
::players[].id <= ::players[].basePosition.col (elementwise)
::players[].id <= ::players[].basePosition.row (elementwise)
::players[].id <= ::players[].impulse[0][0] (elementwise)
::players[].id <= ::players[].impulse[1][0] (elementwise)
::players[].id <= ::players[].impulse[3][0] (elementwise)
::players[].id <= ::players[].impulse[5][0] (elementwise)
::players[].id <= ::players[].impulse[7][0] (elementwise)
::players[].id < ::players[].direction (lexically)
::players[].id <= ::players[].direction (elementwise)
::players[].id <= ::players[].stepCounter (elementwise)
::players[].id < point[].position.col (lexically)
::players[].id <= point[].position.col (lexically)
::players[].id < point[].position.row (lexically)
::players[].id <= point[].position.row (lexically)
::players[].id < point[].aspect (lexically)
::players[].id <= point[].aspect (lexically)
::players[].id elements == size(::crashedPlayers[])-1
point[::input_n].player->body in ::players[].body
::players[].body.type <= ::players[].body.visible (elementwise)
::players[].body.type <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].body.type <= ::players[].body.bodyMapsSize (elementwise)
::players[].body.type <= ::players[].body.bodySize (elementwise)
::players[].body.type >= ::players[].impulse[0][0] (elementwise)
::players[].body.type < ::players[].direction (lexically)
::players[].body.type <= ::players[].direction (lexically)
::players[].body.type <= ::players[].stepCounter (elementwise)
::players[].body.type elements <= ::input_n
::players[].body.type < point[].position.col (lexically)
::players[].body.type <= point[].position.col (lexically)
::players[].body.type < point[].position.row (lexically)
::players[].body.type <= point[].position.row (lexically)
::players[].body.type < point[].aspect (lexically)
::players[].body.type <= point[].aspect (lexically)
::players[].body.type elements <= direction
::players[].body.type elements >= size(::crashedPlayers[])-1
::players[].body.type elements < size(::players[])-1
::players[].body.type elements < size(point[])-1
::players[].body.type elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.type elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.type elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.type elements < ::players[direction-1].body.bodyPoints->aspect
::players[].body.type elements < ::players[::input_n-1].body.bodyMapsSize
::players[].body.type elements <= ::players[::new_input].body.bodyMapsSize
::players[].body.type elements <= ::players[direction-1].body.bodyMapsSize
::players[].body.type elements < ::players[::input_n-1].body.bodySize
::players[].body.type elements <= ::players[::new_input].body.bodySize
::players[].body.type elements <= ::players[direction-1].body.bodySize
::players[].body.type elements < ::players[::input_n-1].body.bodyWidth
::players[].body.type elements < ::players[::input_n-1].body.color
::players[].body.type elements <= ::players[direction-1].body.color
::players[].body.type elements < ::players[::input_n-1].basePosition.col
::players[].body.type elements < ::players[direction-1].basePosition.col
::players[].body.type elements < ::players[::input_n].basePosition.row
::players[].body.type elements < ::players[::new_input].basePosition.row
::players[].body.type elements < ::players[direction].basePosition.row
::players[].body.type elements < ::players[direction-1].basePosition.row
::players[direction].impulse[3][0] in ::players[].body.type
::players[direction-1].impulse[3][0] in ::players[].body.type
::players[::new_input].direction in ::players[].body.type
::players[].body.type elements <= ::players[direction-1].direction
::players[].body.type elements < ::players[::input_n].stepCounter
::players[].body.type elements < ::players[direction].stepCounter
::players[].body.type elements < point[::input_n-1].position.col
::players[].body.type elements <= point[::input_n-1].position.row
::players[].body.type elements < point[::input_n-1].aspect
::players[].body.visible <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].body.visible <= ::players[].body.bodyMapsSize (elementwise)
::players[].body.visible <= ::players[].body.bodySize (elementwise)
::players[].body.visible >= ::players[].impulse[0][0] (elementwise)
::players[].body.visible >= ::players[].impulse[3][0] (elementwise)
::players[].body.visible >= ::players[].impulse[5][0] (elementwise)
::players[].body.visible >= ::players[].impulse[7][0] (elementwise)
::players[].body.visible > ::players[].direction (lexically)
::players[].body.visible >= ::players[].direction (lexically)
::players[].body.visible elements <= ::input_n
::new_input in ::players[].body.visible
::players[].body.visible < point[].position.col (lexically)
::players[].body.visible <= point[].position.col (lexically)
::players[].body.visible < point[].aspect (lexically)
::players[].body.visible <= point[].aspect (lexically)
::players[].body.visible elements <= direction
::players[].body.visible elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].body.visible
::players[].body.visible elements < size(::players[])-1
::players[].body.visible elements < size(point[])-1
::players[direction-1].body.type in ::players[].body.visible
::players[].body.visible elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.visible elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.visible elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.visible elements < ::players[direction-1].body.bodyPoints->aspect
::players[].body.visible elements < ::players[::input_n-1].body.bodyMapsSize
::players[].body.visible elements <= ::players[::new_input].body.bodyMapsSize
::players[].body.visible elements <= ::players[direction-1].body.bodyMapsSize
::players[].body.visible elements < ::players[::input_n-1].body.bodySize
::players[].body.visible elements <= ::players[::new_input].body.bodySize
::players[].body.visible elements <= ::players[direction-1].body.bodySize
::players[].body.visible elements < ::players[::input_n-1].body.bodyWidth
::players[].body.visible elements < ::players[::input_n-1].body.color
::players[].body.visible elements <= ::players[direction-1].body.color
::players[].body.visible elements < ::players[::input_n-1].basePosition.col
::players[].body.visible elements < ::players[direction-1].basePosition.col
::players[].body.visible elements < ::players[::input_n].basePosition.row
::players[].body.visible elements < ::players[::new_input].basePosition.row
::players[].body.visible elements < ::players[direction].basePosition.row
::players[].body.visible elements < ::players[direction-1].basePosition.row
::players[direction].impulse[3][0] in ::players[].body.visible
::players[direction-1].impulse[3][0] in ::players[].body.visible
::players[::new_input].direction in ::players[].body.visible
::players[].body.visible elements <= ::players[direction-1].direction
::players[].body.visible elements < ::players[::input_n].stepCounter
::players[].body.visible elements < ::players[direction].stepCounter
::players[].body.visible elements < point[::input_n-1].position.col
::players[].body.visible elements <= point[::input_n-1].position.row
::players[].body.visible elements < point[::input_n-1].aspect
point[::input_n].player->body.bodyPoints[0] in ::players[].body.bodyPoints[0]
::players[].body.bodyPoints->position - ::players[].basePosition + 7304 == 0
point[::input_n].player in ::players[].body.bodyPoints->player
point[::input_n].player[0] in ::players[].body.bodyPoints->player[0]
::players[].body.bodyPoints->aspect >= ::players[].body.bodyMapsSize (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodySize (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodyWidth (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.color (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].basePosition.col (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].basePosition.row (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[0][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[1][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[3][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[5][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyPoints->aspect > ::players[].direction (lexically)
::players[].body.bodyPoints->aspect >= ::players[].direction (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].stepCounter (elementwise)
::players[].body.bodyPoints->aspect > point[].position.row (lexically)
::players[].body.bodyPoints->aspect >= point[].position.row (lexically)
::players[].body.bodyPoints->aspect elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].body.bodyPoints->aspect
::players[].body.bodyPoints->aspect elements < size(::players[])-1
::players[].body.bodyPoints->aspect elements < size(point[])-1
::players[].body.bodyMapsSize <= ::players[].body.bodySize (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[0][0] (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[3][0] (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[5][0] (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyMapsSize > ::players[].direction (lexically)
::players[].body.bodyMapsSize >= ::players[].direction (lexically)
::new_input in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize < point[].aspect (lexically)
::players[].body.bodyMapsSize <= point[].aspect (lexically)
::players[].body.bodyMapsSize elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < size(::players[])-1
::players[].body.bodyMapsSize elements < size(point[])-1
::players[direction-1].body.type in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements < ::players[direction-1].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements <= ::players[::input_n-1].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::input_n-1].body.bodySize
::players[].body.bodyMapsSize elements < ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyHeight in ::players[].body.bodyMapsSize
::players[direction-1].body.bodyHeight in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::input_n-1].basePosition.col
::players[].body.bodyMapsSize elements < ::players[::input_n].basePosition.row
::players[].body.bodyMapsSize elements < ::players[::new_input].basePosition.row
::players[].body.bodyMapsSize elements < ::players[direction].basePosition.row
::players[].body.bodyMapsSize elements < ::players[direction-1].basePosition.row
::players[direction].impulse[3][0] in ::players[].body.bodyMapsSize
::players[direction-1].impulse[3][0] in ::players[].body.bodyMapsSize
::players[::new_input].direction in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::input_n].stepCounter
::players[].body.bodyMapsSize elements < ::players[direction].stepCounter
::players[].body.bodyMapsSize elements < point[::input_n-1].aspect
::players[].body.bodySize >= ::players[].body.bodyWidth (elementwise)
::players[].body.bodySize >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodySize >= ::players[].impulse[0][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[1][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[3][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[5][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodySize > ::players[].direction (lexically)
::players[].body.bodySize >= ::players[].direction (lexically)
::new_input in ::players[].body.bodySize
::players[].body.bodySize > point[].position.row (lexically)
::players[].body.bodySize >= point[].position.row (lexically)
::players[].body.bodySize < point[].aspect (lexically)
::players[].body.bodySize <= point[].aspect (lexically)
::players[].body.bodySize elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].body.bodySize
::players[].body.bodySize elements < size(::players[])-1
::players[].body.bodySize elements < size(point[])-1
::players[direction-1].body.type in ::players[].body.bodySize
::players[].body.bodySize elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[direction].impulse[3][0] in ::players[].body.bodySize
::players[direction-1].impulse[3][0] in ::players[].body.bodySize
::players[::new_input].direction in ::players[].body.bodySize
::players[].body.bodyWidth >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodyWidth >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyWidth > ::players[].direction (lexically)
::players[].body.bodyWidth >= ::players[].direction (lexically)
::players[].body.bodyWidth < point[].aspect (lexically)
::players[].body.bodyWidth <= point[].aspect (lexically)
::players[].body.bodyWidth elements >= size(::crashedPlayers[])-1
::players[].body.bodyWidth elements < size(::players[])-1
::players[].body.bodyWidth elements < size(point[])-1
::players[].body.bodyWidth elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[direction-1].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[::input_n-1].body.bodySize
::players[].body.bodyWidth elements < ::players[::input_n-1].basePosition.col
::players[].body.bodyWidth elements < point[::input_n-1].aspect
::players[].body.bodyHeight >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyHeight > ::players[].direction (lexically)
::players[].body.bodyHeight >= ::players[].direction (lexically)
::players[].body.bodyHeight < point[].aspect (lexically)
::players[].body.bodyHeight <= point[].aspect (lexically)
::players[].body.bodyHeight elements >= size(::crashedPlayers[])-1
::players[].body.bodyHeight elements < size(::players[])-1
::players[].body.bodyHeight elements < size(point[])-1
::players[].body.bodyHeight elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[direction-1].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[::input_n-1].body.bodySize
::players[].body.bodyHeight elements < ::players[::input_n-1].body.bodyWidth
::players[].body.bodyHeight elements < ::players[::input_n-1].basePosition.col
::players[].body.bodyHeight elements < ::players[::input_n].basePosition.row
::players[].body.bodyHeight elements < ::players[::new_input].basePosition.row
::players[].body.bodyHeight elements < ::players[direction].basePosition.row
::players[].body.bodyHeight elements < ::players[direction-1].basePosition.row
::players[].body.bodyHeight elements < ::players[::input_n].stepCounter
::players[].body.bodyHeight elements < ::players[direction].stepCounter
::players[].body.bodyHeight elements < point[::input_n-1].aspect
::players[].body.color <= ::players[].basePosition.col (elementwise)
::players[].body.color >= ::players[].impulse[5][0] (elementwise)
::players[].body.color > ::players[].direction (lexically)
::players[].body.color >= ::players[].direction (lexically)
::input_n in ::players[].body.color
::new_input in ::players[].body.color
::players[].body.color < point[].aspect (lexically)
::players[].body.color <= point[].aspect (lexically)
direction in ::players[].body.color
::players[].body.color elements >= size(::crashedPlayers[])-1
::players[].body.color elements < size(::players[])-1
::players[].body.color elements < size(point[])-1
::players[direction-1].body.type in ::players[].body.color
::players[].body.color elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.color elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.color elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.color elements < ::players[direction-1].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize in ::players[].body.color
::players[::new_input].body.bodyMapsSize in ::players[].body.color
::players[direction-1].body.bodyMapsSize in ::players[].body.color
::players[].body.color elements < ::players[::input_n-1].body.bodySize
::players[::input_n-1].body.bodyWidth in ::players[].body.color
::players[].body.color elements <= ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyWidth in ::players[].body.color
::players[direction-1].body.bodyWidth in ::players[].body.color
::players[::new_input].body.bodyHeight in ::players[].body.color
::players[direction-1].body.bodyHeight in ::players[].body.color
::players[].body.color elements < ::players[::input_n-1].basePosition.col
::players[direction].basePosition.col in ::players[].body.color
::players[].body.color elements < ::players[::input_n].basePosition.row
::players[].body.color elements < ::players[::new_input].basePosition.row
::players[].body.color elements < ::players[direction].basePosition.row
::players[].body.color elements < ::players[direction-1].basePosition.row
::players[direction].impulse[3][0] in ::players[].body.color
::players[direction-1].impulse[3][0] in ::players[].body.color
::players[::new_input].direction in ::players[].body.color
::players[direction].direction in ::players[].body.color
::players[direction-1].direction in ::players[].body.color
::players[].body.color elements < ::players[::input_n].stepCounter
::players[direction-1].stepCounter in ::players[].body.color
::players[].body.color elements < point[::input_n-1].aspect
point[::input_n].player->basePosition in ::players[].basePosition
::players[].basePosition.col > ::players[].basePosition.row (lexically)
::players[].basePosition.col >= ::players[].basePosition.row (lexically)
::players[].basePosition.col > ::players[].impulse[0][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[0][0] (lexically)
::players[].basePosition.col > ::players[].impulse[1][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[1][0] (lexically)
::players[].basePosition.col > ::players[].impulse[3][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[3][0] (elementwise)
::players[].basePosition.col > ::players[].impulse[5][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[5][0] (elementwise)
::players[].basePosition.col > ::players[].impulse[7][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[7][0] (elementwise)
::players[].basePosition.col > ::players[].direction (lexically)
::players[].basePosition.col >= ::players[].direction (lexically)
::players[].basePosition.col > ::players[].stepCounter (lexically)
::players[].basePosition.col >= ::players[].stepCounter (lexically)
::players[].basePosition.col > point[].position.row (lexically)
::players[].basePosition.col >= point[].position.row (lexically)
::players[].basePosition.col elements >= size(::crashedPlayers[])-1
::players[].basePosition.col elements < size(::players[])-1
::players[].basePosition.col elements < size(point[])-1
::players[::input_n-1].body.bodyMapsSize in ::players[].basePosition.col
::players[::input_n-1].body.bodyWidth in ::players[].basePosition.col
::players[::new_input].body.bodyWidth in ::players[].basePosition.col
::players[direction-1].body.bodyWidth in ::players[].basePosition.col
::players[::new_input].body.bodyHeight in ::players[].basePosition.col
::players[direction-1].body.bodyHeight in ::players[].basePosition.col
::players[::input_n].basePosition.row in ::players[].basePosition.col
::players[].basePosition.row > ::players[].impulse[0][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[0][0] (lexically)
::players[].basePosition.row > ::players[].impulse[1][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[1][0] (elementwise)
::players[].basePosition.row > ::players[].impulse[3][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[3][0] (lexically)
::players[].basePosition.row > ::players[].impulse[5][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[5][0] (elementwise)
::players[].basePosition.row > ::players[].impulse[7][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[7][0] (lexically)
::players[].basePosition.row > ::players[].direction (lexically)
::players[].basePosition.row >= ::players[].direction (lexically)
::players[].basePosition.row > ::players[].stepCounter (lexically)
::players[].basePosition.row >= ::players[].stepCounter (lexically)
::input_n in ::players[].basePosition.row
::new_input in ::players[].basePosition.row
::players[].basePosition.row < point[].aspect (lexically)
::players[].basePosition.row <= point[].aspect (lexically)
direction in ::players[].basePosition.row
::players[].basePosition.row elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].basePosition.row
::players[].basePosition.row elements < size(::players[])-1
::players[].basePosition.row elements < size(point[])-1
::players[direction-1].body.type in ::players[].basePosition.row
::players[].basePosition.row elements < ::players[::input_n].body.bodyPoints->aspect
::players[].basePosition.row elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].basePosition.row elements < ::players[::new_input].body.bodyPoints->aspect
::players[].basePosition.row elements < ::players[direction-1].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize in ::players[].basePosition.row
::players[::new_input].body.bodyMapsSize in ::players[].basePosition.row
::players[direction-1].body.bodyMapsSize in ::players[].basePosition.row
::players[].basePosition.row elements < ::players[::input_n-1].body.bodySize
::players[::new_input].body.bodyHeight in ::players[].basePosition.row
::players[direction-1].body.bodyHeight in ::players[].basePosition.row
::players[::input_n-1].body.color in ::players[].basePosition.row
::players[::new_input].body.color in ::players[].basePosition.row
::players[direction].body.color in ::players[].basePosition.row
::players[direction-1].body.color in ::players[].basePosition.row
::players[].basePosition.row elements < ::players[::input_n-1].basePosition.col
::players[direction].impulse[3][0] in ::players[].basePosition.row
::players[direction-1].impulse[3][0] in ::players[].basePosition.row
::players[::new_input].direction in ::players[].basePosition.row
::players[direction].direction in ::players[].basePosition.row
::players[direction-1].direction in ::players[].basePosition.row
::players[::new_input].stepCounter in ::players[].basePosition.row
::players[direction-1].stepCounter in ::players[].basePosition.row
::players[].basePosition.row elements < point[::input_n-1].aspect
::players[].impulse[0] - ::players[].impulse[1] + 4 == 0
::players[].impulse[0] - ::players[].impulse[2] + 8 == 0
::players[].impulse[0] - ::players[].impulse[3] + 12 == 0
::players[].impulse[0] - ::players[].impulse[4] + 16 == 0
::players[].impulse[0] - ::players[].impulse[5] + 20 == 0
::players[].impulse[0] - ::players[].impulse[6] + 24 == 0
::players[].impulse[0] - ::players[].impulse[7] + 28 == 0
::players[].impulse[0] - ::players[].impulse[8] + 32 == 0
::players[].impulse[0][0] < ::players[].direction (lexically)
::players[].impulse[0][0] <= ::players[].direction (lexically)
::players[].impulse[0][0] < ::players[].stepCounter (lexically)
::players[].impulse[0][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[0][0] elements <= ::input_n
::players[].impulse[0][0] < point[].position.col (lexically)
::players[].impulse[0][0] <= point[].position.col (lexically)
::players[].impulse[0][0] < point[].position.row (lexically)
::players[].impulse[0][0] <= point[].position.row (lexically)
::players[].impulse[0][0] < point[].aspect (lexically)
::players[].impulse[0][0] <= point[].aspect (lexically)
::players[].impulse[0][0] elements <= direction
::players[].impulse[0][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[0][0] elements < size(::players[])-1
::players[].impulse[0][0] elements < size(point[])-1
::players[].impulse[0][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[direction-1].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[0][0] elements <= ::players[::new_input].body.bodyMapsSize
::players[].impulse[0][0] elements <= ::players[direction-1].body.bodyMapsSize
::players[].impulse[0][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[0][0] elements <= ::players[::new_input].body.bodySize
::players[].impulse[0][0] elements <= ::players[direction-1].body.bodySize
::players[].impulse[0][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[0][0] elements < ::players[::input_n-1].body.color
::players[].impulse[0][0] elements <= ::players[direction-1].body.color
::players[].impulse[0][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[0][0] elements < ::players[direction-1].basePosition.col
::players[].impulse[0][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[0][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[0][0] elements < ::players[direction].basePosition.row
::players[].impulse[0][0] elements < ::players[direction-1].basePosition.row
::players[direction].impulse[3][0] in ::players[].impulse[0][0]
::players[direction-1].impulse[3][0] in ::players[].impulse[0][0]
::players[].impulse[0][0] elements <= ::players[direction-1].direction
::players[].impulse[0][0] elements < ::players[::input_n].stepCounter
::players[].impulse[0][0] elements < ::players[direction].stepCounter
::players[].impulse[0][0] elements < point[::input_n-1].position.col
::players[].impulse[0][0] elements <= point[::input_n-1].position.row
::players[].impulse[0][0] elements < point[::input_n-1].aspect
::players[].impulse[0][0] elements <= point[direction-1].aspect
::players[].impulse[1] - ::players[].impulse[2] + 4 == 0
::players[].impulse[1] - ::players[].impulse[3] + 8 == 0
::players[].impulse[1] - ::players[].impulse[4] + 12 == 0
::players[].impulse[1] - ::players[].impulse[5] + 16 == 0
::players[].impulse[1] - ::players[].impulse[6] + 20 == 0
::players[].impulse[1] - ::players[].impulse[7] + 24 == 0
::players[].impulse[1] - ::players[].impulse[8] + 28 == 0
::players[].impulse[1][0] >= ::players[].impulse[7][0] (lexically)
::players[].impulse[1][0] < point[].position.col (lexically)
::players[].impulse[1][0] <= point[].position.col (lexically)
::players[].impulse[1][0] < point[].position.row (lexically)
::players[].impulse[1][0] <= point[].position.row (lexically)
::players[].impulse[1][0] < point[].aspect (lexically)
::players[].impulse[1][0] <= point[].aspect (lexically)
::players[].impulse[1][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[1][0] elements < size(::players[])-1
::players[].impulse[1][0] elements < size(point[])-1
::players[].impulse[1][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[direction-1].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[1][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[1][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[1][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[1][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[1][0] elements < ::players[direction].basePosition.row
::players[].impulse[1][0] elements < ::players[direction-1].basePosition.row
::players[direction].impulse[3][0] in ::players[].impulse[1][0]
::players[direction-1].impulse[3][0] in ::players[].impulse[1][0]
::players[].impulse[1][0] elements < ::players[::input_n].stepCounter
::players[].impulse[1][0] elements < ::players[direction].stepCounter
::players[].impulse[1][0] elements < point[::input_n-1].aspect
::players[].impulse[1][0] elements <= point[direction-1].aspect
::players[].impulse[2] - ::players[].impulse[3] + 4 == 0
::players[].impulse[2] - ::players[].impulse[4] + 8 == 0
::players[].impulse[2] - ::players[].impulse[5] + 12 == 0
::players[].impulse[2] - ::players[].impulse[6] + 16 == 0
::players[].impulse[2] - ::players[].impulse[7] + 20 == 0
::players[].impulse[2] - ::players[].impulse[8] + 24 == 0
::players[].impulse[3] - ::players[].impulse[4] + 4 == 0
::players[].impulse[3] - ::players[].impulse[5] + 8 == 0
::players[].impulse[3] - ::players[].impulse[6] + 12 == 0
::players[].impulse[3] - ::players[].impulse[7] + 16 == 0
::players[].impulse[3] - ::players[].impulse[8] + 20 == 0
::players[].impulse[3][0] >= ::players[].impulse[7][0] (lexically)
::players[].impulse[3][0] < ::players[].direction (lexically)
::players[].impulse[3][0] <= ::players[].direction (lexically)
::players[].impulse[3][0] < ::players[].stepCounter (lexically)
::players[].impulse[3][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[3][0] elements <= ::input_n
::new_input in ::players[].impulse[3][0]
::players[].impulse[3][0] < point[].position.col (lexically)
::players[].impulse[3][0] <= point[].position.col (lexically)
::players[].impulse[3][0] < point[].position.row (lexically)
::players[].impulse[3][0] <= point[].position.row (lexically)
::players[].impulse[3][0] < point[].aspect (lexically)
::players[].impulse[3][0] <= point[].aspect (lexically)
::players[].impulse[3][0] elements <= direction
::players[].impulse[3][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[3][0] elements < size(::players[])-1
::players[].impulse[3][0] elements < size(point[])-1
::players[].impulse[3][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[direction-1].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[3][0] elements <= ::players[::new_input].body.bodyMapsSize
::players[].impulse[3][0] elements <= ::players[direction-1].body.bodyMapsSize
::players[].impulse[3][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[3][0] elements <= ::players[::new_input].body.bodySize
::players[].impulse[3][0] elements <= ::players[direction-1].body.bodySize
::players[].impulse[3][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[3][0] elements < ::players[::input_n-1].body.color
::players[].impulse[3][0] elements <= ::players[direction-1].body.color
::players[].impulse[3][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[3][0] elements < ::players[direction-1].basePosition.col
::players[].impulse[3][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[3][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[3][0] elements < ::players[direction].basePosition.row
::players[].impulse[3][0] elements < ::players[direction-1].basePosition.row
::players[].impulse[3][0] elements <= ::players[direction-1].direction
::players[].impulse[3][0] elements < ::players[::input_n].stepCounter
::players[].impulse[3][0] elements < ::players[direction].stepCounter
::players[].impulse[3][0] elements < point[::input_n-1].position.col
::players[].impulse[3][0] elements <= point[::input_n-1].position.row
::players[].impulse[3][0] elements < point[::input_n-1].aspect
::players[].impulse[3][0] elements <= point[direction-1].aspect
::players[].impulse[4] - ::players[].impulse[5] + 4 == 0
::players[].impulse[4] - ::players[].impulse[6] + 8 == 0
::players[].impulse[4] - ::players[].impulse[7] + 12 == 0
::players[].impulse[4] - ::players[].impulse[8] + 16 == 0
::players[].impulse[5] - ::players[].impulse[6] + 4 == 0
::players[].impulse[5] - ::players[].impulse[7] + 8 == 0
::players[].impulse[5] - ::players[].impulse[8] + 12 == 0
::players[].impulse[5][0] < ::players[].direction (lexically)
::players[].impulse[5][0] <= ::players[].direction (lexically)
::players[].impulse[5][0] < ::players[].stepCounter (lexically)
::players[].impulse[5][0] <= ::players[].stepCounter (elementwise)
::input_n in ::players[].impulse[5][0]
::players[].impulse[5][0] elements <= ::input_n
::new_input in ::players[].impulse[5][0]
::players[].impulse[5][0] < point[].position.col (lexically)
::players[].impulse[5][0] <= point[].position.col (lexically)
::players[].impulse[5][0] < point[].position.row (lexically)
::players[].impulse[5][0] <= point[].position.row (lexically)
::players[].impulse[5][0] < point[].aspect (lexically)
::players[].impulse[5][0] <= point[].aspect (lexically)
::players[].impulse[5][0] elements <= direction
::players[].impulse[5][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[5][0] elements < size(::players[])-1
::players[].impulse[5][0] elements < size(point[])-1
::players[direction-1].body.type in ::players[].impulse[5][0]
::players[].impulse[5][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[direction-1].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[5][0] elements <= ::players[::new_input].body.bodyMapsSize
::players[].impulse[5][0] elements <= ::players[direction-1].body.bodyMapsSize
::players[].impulse[5][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[5][0] elements <= ::players[::new_input].body.bodySize
::players[].impulse[5][0] elements <= ::players[direction-1].body.bodySize
::players[].impulse[5][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[5][0] elements < ::players[::input_n-1].body.color
::players[].impulse[5][0] elements <= ::players[direction-1].body.color
::players[].impulse[5][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[5][0] elements < ::players[direction-1].basePosition.col
::players[].impulse[5][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[5][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[5][0] elements < ::players[direction].basePosition.row
::players[].impulse[5][0] elements < ::players[direction-1].basePosition.row
::players[direction].impulse[3][0] in ::players[].impulse[5][0]
::players[direction-1].impulse[3][0] in ::players[].impulse[5][0]
::players[::new_input].direction in ::players[].impulse[5][0]
::players[].impulse[5][0] elements <= ::players[direction-1].direction
::players[].impulse[5][0] elements < ::players[::input_n].stepCounter
::players[].impulse[5][0] elements < ::players[direction].stepCounter
::players[].impulse[5][0] elements < point[::input_n-1].position.col
::players[].impulse[5][0] elements <= point[::input_n-1].position.row
::players[].impulse[5][0] elements < point[::input_n-1].aspect
::players[].impulse[6] - ::players[].impulse[7] + 4 == 0
::players[].impulse[6] - ::players[].impulse[8] + 8 == 0
::players[].impulse[7] - ::players[].impulse[8] + 4 == 0
::players[].impulse[7][0] < ::players[].direction (lexically)
::players[].impulse[7][0] <= ::players[].direction (lexically)
::players[].impulse[7][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[7][0] elements <= ::input_n
::new_input in ::players[].impulse[7][0]
::players[].impulse[7][0] < point[].position.col (lexically)
::players[].impulse[7][0] <= point[].position.col (lexically)
::players[].impulse[7][0] < point[].position.row (lexically)
::players[].impulse[7][0] <= point[].position.row (lexically)
::players[].impulse[7][0] < point[].aspect (lexically)
::players[].impulse[7][0] <= point[].aspect (lexically)
::players[].impulse[7][0] elements <= direction
::players[].impulse[7][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[7][0] elements < size(::players[])-1
::players[].impulse[7][0] elements < size(point[])-1
::players[].impulse[7][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[direction-1].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[7][0] elements <= ::players[::new_input].body.bodyMapsSize
::players[].impulse[7][0] elements <= ::players[direction-1].body.bodyMapsSize
::players[].impulse[7][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[7][0] elements <= ::players[::new_input].body.bodySize
::players[].impulse[7][0] elements <= ::players[direction-1].body.bodySize
::players[].impulse[7][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[7][0] elements < ::players[::input_n-1].body.color
::players[].impulse[7][0] elements <= ::players[direction-1].body.color
::players[].impulse[7][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[7][0] elements < ::players[direction-1].basePosition.col
::players[].impulse[7][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[7][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[7][0] elements < ::players[direction].basePosition.row
::players[].impulse[7][0] elements < ::players[direction-1].basePosition.row
::players[direction].impulse[3][0] in ::players[].impulse[7][0]
::players[direction-1].impulse[3][0] in ::players[].impulse[7][0]
::players[].impulse[7][0] elements <= ::players[direction-1].direction
::players[].impulse[7][0] elements < ::players[::input_n].stepCounter
::players[].impulse[7][0] elements < ::players[direction].stepCounter
::players[].impulse[7][0] elements < point[::input_n-1].position.col
::players[].impulse[7][0] elements <= point[::input_n-1].position.row
::players[].impulse[7][0] elements < point[::input_n-1].aspect
::players[].impulse[7][0] elements <= point[direction-1].aspect
::players[].direction > ::players[].stepCounter (lexically)
::players[].direction >= ::players[].stepCounter (lexically)
::new_input in ::players[].direction
::players[].direction < point[].position.col (lexically)
::players[].direction <= point[].position.col (lexically)
::players[].direction < point[].aspect (lexically)
::players[].direction <= point[].aspect (lexically)
direction in ::players[].direction
::players[].direction elements >= size(::crashedPlayers[])-1
::players[].direction elements < size(::players[])-1
::players[].direction elements < size(point[])-1
::players[direction-1].body.type in ::players[].direction
::players[].direction elements < ::players[::input_n].body.bodyPoints->aspect
::players[].direction elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].direction elements < ::players[::new_input].body.bodyPoints->aspect
::players[].direction elements < ::players[direction-1].body.bodyPoints->aspect
::players[].direction elements < ::players[::input_n-1].body.bodySize
::players[].direction elements <= ::players[::new_input].body.bodySize
::players[].direction elements < ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.color in ::players[].direction
::players[].direction elements < ::players[::input_n-1].basePosition.col
::players[].direction elements < ::players[::input_n].basePosition.row
::players[].direction elements < ::players[::new_input].basePosition.row
::players[].direction elements < ::players[direction].basePosition.row
::players[].direction elements < ::players[direction-1].basePosition.row
::players[direction].impulse[3][0] in ::players[].direction
::players[direction-1].impulse[3][0] in ::players[].direction
::players[].direction elements < ::players[::input_n].stepCounter
::players[].direction elements < ::players[direction].stepCounter
::players[].direction elements < point[::input_n-1].aspect
::input_n in ::players[].stepCounter
::new_input in ::players[].stepCounter
::players[].stepCounter < point[].position.col (lexically)
::players[].stepCounter <= point[].position.col (lexically)
::players[].stepCounter < point[].position.row (lexically)
::players[].stepCounter <= point[].position.row (lexically)
::players[].stepCounter < point[].aspect (lexically)
::players[].stepCounter <= point[].aspect (lexically)
::players[].stepCounter elements >= size(::crashedPlayers[])-1
::players[].stepCounter elements < size(::players[])-1
::players[].stepCounter elements < size(point[])-1
::players[direction-1].body.type in ::players[].stepCounter
::players[].stepCounter elements < ::players[::input_n].body.bodyPoints->aspect
::players[].stepCounter elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].stepCounter elements < ::players[::new_input].body.bodyPoints->aspect
::players[].stepCounter elements < ::players[direction-1].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize in ::players[].stepCounter
::players[::new_input].body.bodyMapsSize in ::players[].stepCounter
::players[direction-1].body.bodyMapsSize in ::players[].stepCounter
::players[].stepCounter elements < ::players[::input_n-1].body.bodySize
::players[::input_n-1].body.bodyWidth in ::players[].stepCounter
::players[::new_input].body.bodyWidth in ::players[].stepCounter
::players[direction-1].body.bodyWidth in ::players[].stepCounter
::players[::new_input].body.bodyHeight in ::players[].stepCounter
::players[direction-1].body.bodyHeight in ::players[].stepCounter
::players[direction].body.color in ::players[].stepCounter
::players[].stepCounter elements < ::players[::input_n-1].basePosition.col
::players[direction].basePosition.col in ::players[].stepCounter
::players[].stepCounter elements <= ::players[::input_n].basePosition.row
::players[::new_input].basePosition.row in ::players[].stepCounter
::players[].stepCounter elements <= ::players[direction].basePosition.row
::players[direction].impulse[3][0] in ::players[].stepCounter
::players[direction-1].impulse[3][0] in ::players[].stepCounter
::players[::new_input].direction in ::players[].stepCounter
::players[].stepCounter elements < point[::input_n-1].aspect
::players[::input_n].onCrash in ::players[].pilot
::players[::input_n].onCrash in ::players[].onPushed
::input_n in point[].aspect
::input_n <= direction
::input_n < size(point[])-1
::input_n < ::players[::new_input].body.bodyPoints->aspect
::input_n < ::players[direction-1].body.bodyPoints->aspect
::input_n != ::players[::new_input].body.bodyWidth
::input_n != ::players[direction-1].body.bodyWidth
::input_n != ::players[::new_input].body.bodyHeight
::input_n != ::players[direction-1].body.bodyHeight
::input_n != ::players[::new_input].body.color
::input_n != ::players[direction].body.color
::input_n <= ::players[direction-1].body.color
::input_n != ::players[::new_input].basePosition.col
::input_n != ::players[direction].basePosition.col
::input_n < ::players[direction-1].basePosition.col
::input_n < ::players[::new_input].basePosition.row
::input_n < ::players[direction].basePosition.row
::input_n < ::players[direction-1].basePosition.row
::input_n >= ::players[::new_input].direction
::input_n <= ::players[direction-1].direction
::input_n != ::players[::new_input].stepCounter
::input_n < ::players[direction].stepCounter
::input_n != ::players[direction-1].stepCounter
::input_n != point[::input_n].position.col
::input_n < point[::input_n-1].position.col
::input_n != point[::input_n].position.row
::input_n <= point[::input_n-1].position.row
::input_n != point[::input_n].aspect
::input_n < point[::input_n-1].aspect
::input_n != point[::new_input].position.col
::input_n != point[::new_input].aspect
::input_n != point[direction].position.col
::input_n != point[direction-1].position.col
::input_n != point[direction].position.row
::input_n != point[direction-1].position.row
::input_n != point[direction].aspect
::input_n != point[direction-1].aspect
::new_input in point[].position.col
::new_input in point[].position.row
::new_input in point[].aspect
::new_input % direction == 0
::new_input <= direction
::new_input < size(::players[])-1
::new_input < size(point[])-1
::new_input < ::players[::input_n].body.bodyPoints->aspect
::new_input < ::players[::input_n-1].body.bodyPoints->aspect
::new_input < ::players[::new_input].body.bodyPoints->aspect
::new_input < ::players[direction-1].body.bodyPoints->aspect
::new_input < ::players[::input_n-1].body.bodyMapsSize
::new_input < ::players[direction-1].body.bodyMapsSize
::new_input < ::players[::input_n-1].body.bodySize
::new_input < ::players[direction-1].body.bodySize
::new_input < ::players[::input_n-1].body.bodyWidth
::new_input != ::players[::new_input].body.bodyWidth
::new_input <= ::players[direction-1].body.bodyWidth
::new_input != ::players[::new_input].body.bodyHeight
::new_input <= ::players[direction-1].body.bodyHeight
::new_input < ::players[::input_n-1].body.color
::new_input != ::players[::new_input].body.color
::new_input < ::players[direction-1].body.color
::new_input < ::players[::input_n-1].basePosition.col
::new_input != ::players[::new_input].basePosition.col
::new_input < ::players[direction-1].basePosition.col
::new_input < ::players[::input_n].basePosition.row
::new_input < ::players[::new_input].basePosition.row
::new_input < ::players[direction].basePosition.row
::new_input < ::players[direction-1].basePosition.row
::new_input != ::players[::new_input].direction
::new_input <= ::players[direction-1].direction
::new_input < ::players[::input_n].stepCounter
::new_input < ::players[direction].stepCounter
::new_input < point[::input_n-1].position.col
::new_input < point[::input_n-1].position.row
::new_input < point[::input_n-1].aspect
::new_input != point[::new_input].position.col
::new_input != point[::new_input].position.row
::new_input != point[::new_input].aspect
::new_input <= point[direction-1].position.col
::new_input <= point[direction-1].position.row
::new_input <= point[direction-1].aspect
::input_key > ::trace_pos
point[].position.col elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in point[].position.col
::players[direction-1].body.bodyWidth in point[].position.col
::players[direction-1].body.bodyHeight in point[].position.col
::players[direction].impulse[3][0] in point[].position.col
::players[direction-1].impulse[3][0] in point[].position.col
::players[::new_input].stepCounter in point[].position.col
point[].position.row < point[].aspect (lexically)
point[].position.row <= point[].aspect (lexically)
direction in point[].position.row
point[].position.row elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in point[].position.row
point[].position.row elements < size(::players[])-1
point[].position.row elements < size(point[])-1
point[].position.row elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[direction-1].body.bodyWidth in point[].position.row
::players[direction-1].body.bodyHeight in point[].position.row
::players[direction].impulse[3][0] in point[].position.row
::players[direction-1].impulse[3][0] in point[].position.row
::players[::new_input].stepCounter in point[].position.row
size(::crashedPlayers[])-1 in point[].aspect
point[].aspect elements < size(point[])-1
::players[direction-1].body.type in point[].aspect
::players[direction-1].body.bodyMapsSize in point[].aspect
::players[::input_n-1].body.bodyWidth in point[].aspect
::players[::new_input].body.bodyWidth in point[].aspect
::players[direction-1].body.bodyWidth in point[].aspect
::players[direction-1].body.bodyHeight in point[].aspect
::players[direction].impulse[3][0] in point[].aspect
::players[direction-1].impulse[3][0] in point[].aspect
::players[::new_input].direction in point[].aspect
::players[::new_input].stepCounter in point[].aspect
direction < size(::players[])-1
direction < size(point[])-1
direction > ::players[direction-1].body.type
direction < ::players[::input_n].body.bodyPoints->aspect
direction < ::players[::input_n-1].body.bodyPoints->aspect
direction < ::players[::new_input].body.bodyPoints->aspect
direction < ::players[direction-1].body.bodyPoints->aspect
direction != ::players[::input_n-1].body.bodyMapsSize
direction != ::players[direction-1].body.bodyMapsSize
direction < ::players[::input_n-1].body.bodySize
direction <= ::players[::new_input].body.bodySize
direction != ::players[direction-1].body.bodySize
direction < ::players[::input_n-1].body.bodyWidth
direction != ::players[::new_input].body.bodyWidth
::players[direction-1].body.bodyWidth % direction == 0
direction != ::players[direction-1].body.bodyWidth
direction != ::players[::new_input].body.bodyHeight
::players[direction-1].body.bodyHeight % direction == 0
direction != ::players[direction-1].body.bodyHeight
direction > ::players[direction].body.color
direction != ::players[direction-1].body.color
direction < ::players[::input_n-1].basePosition.col
direction != ::players[::new_input].basePosition.col
direction != ::players[direction].basePosition.col
direction < ::players[::input_n].basePosition.row
direction < ::players[::new_input].basePosition.row
direction < ::players[direction].basePosition.row
direction < ::players[direction-1].basePosition.row
direction > ::players[direction].impulse[3][0]
direction > ::players[direction-1].impulse[3][0]
direction >= ::players[::new_input].direction
direction >= ::players[direction].direction
direction >= ::players[direction-1].direction
direction < ::players[::input_n].stepCounter
::players[::new_input].stepCounter % direction == 0
direction != ::players[::new_input].stepCounter
direction < ::players[direction].stepCounter
direction != ::players[direction-1].stepCounter
direction != point[::input_n].position.col
direction != point[::input_n-1].position.col
direction != point[::input_n].position.row
direction != point[::input_n-1].position.row
direction != point[::input_n].aspect
direction < point[::input_n-1].aspect
direction != point[::new_input].position.col
direction != point[::new_input].position.row
direction != point[::new_input].aspect
direction != point[direction].position.col
direction != point[direction-1].position.col
direction != point[direction].position.row
direction != point[direction-1].position.row
direction != point[direction].aspect
direction != point[direction-1].aspect
size(::crashedPlayers[])-1 <= point[::input_n].position.col
size(::crashedPlayers[])-1 <= point[::input_n].position.row
size(::crashedPlayers[])-1 <= point[::input_n].aspect
size(::crashedPlayers[])-1 <= point[::new_input].position.col
size(::crashedPlayers[])-1 <= point[::new_input].position.row
size(::crashedPlayers[])-1 <= point[::new_input].aspect
size(::crashedPlayers[])-1 <= point[direction].position.col
size(::crashedPlayers[])-1 <= point[direction-1].position.col
size(::crashedPlayers[])-1 <= point[direction].position.row
size(::crashedPlayers[])-1 <= point[direction-1].position.row
size(::crashedPlayers[])-1 <= point[direction].aspect
size(::crashedPlayers[])-1 <= point[direction-1].aspect
size(::players[]) < size(point[])-1
size(::players[])-1 > ::players[direction-1].body.type
size(::players[])-1 > ::players[::new_input].body.bodyPoints->aspect
size(::players[])-1 > ::players[direction-1].body.bodyPoints->aspect
size(::players[])-1 > ::players[::new_input].body.bodyMapsSize
size(::players[])-1 > ::players[direction-1].body.bodyMapsSize
size(::players[])-1 > ::players[::new_input].body.bodySize
size(::players[])-1 > ::players[direction-1].body.bodySize
size(::players[])-1 > ::players[::new_input].body.bodyWidth
size(::players[])-1 > ::players[direction-1].body.bodyWidth
size(::players[])-1 > ::players[::new_input].body.bodyHeight
size(::players[])-1 > ::players[direction-1].body.bodyHeight
size(::players[])-1 > ::players[::new_input].body.color
size(::players[])-1 > ::players[direction].body.color
size(::players[])-1 > ::players[direction-1].body.color
size(::players[])-1 > ::players[::new_input].basePosition.col
size(::players[])-1 > ::players[direction].basePosition.col
size(::players[])-1 > ::players[direction-1].basePosition.col
size(::players[])-1 > ::players[::new_input].basePosition.row
size(::players[])-1 > ::players[direction].basePosition.row
size(::players[])-1 > ::players[direction-1].basePosition.row
size(::players[])-1 > ::players[direction].impulse[3][0]
size(::players[])-1 > ::players[direction-1].impulse[3][0]
size(::players[])-1 > ::players[::new_input].direction
size(::players[])-1 > ::players[direction].direction
size(::players[])-1 > ::players[direction-1].direction
size(::players[])-1 > ::players[::new_input].stepCounter
size(::players[])-1 > ::players[direction].stepCounter
size(::players[])-1 > ::players[direction-1].stepCounter
size(::players[])-1 > point[::input_n].position.col
size(::players[])-1 > point[::input_n-1].position.col
size(::players[])-1 > point[::input_n].position.row
size(::players[])-1 > point[::input_n-1].position.row
size(::players[])-1 > point[::input_n].aspect
size(::players[])-1 > point[::input_n-1].aspect
size(::players[])-1 > point[::new_input].position.col
size(::players[])-1 > point[::new_input].position.row
size(::players[])-1 > point[::new_input].aspect
size(::players[])-1 > point[direction].position.col
size(::players[])-1 > point[direction-1].position.col
size(::players[])-1 > point[direction].position.row
size(::players[])-1 > point[direction-1].position.row
size(::players[])-1 > point[direction].aspect
size(::players[])-1 > point[direction-1].aspect
size(point[])-1 > ::players[direction-1].body.type
size(point[])-1 > ::players[::input_n].body.bodyPoints->aspect
size(point[])-1 > ::players[::input_n-1].body.bodyPoints->aspect
size(point[])-1 > ::players[::new_input].body.bodyPoints->aspect
size(point[])-1 > ::players[direction-1].body.bodyPoints->aspect
size(point[])-1 > ::players[::input_n-1].body.bodyMapsSize
size(point[])-1 > ::players[::new_input].body.bodyMapsSize
size(point[])-1 > ::players[direction-1].body.bodyMapsSize
size(point[])-1 > ::players[::input_n-1].body.bodySize
size(point[])-1 > ::players[::new_input].body.bodySize
size(point[])-1 > ::players[direction-1].body.bodySize
size(point[])-1 > ::players[::input_n-1].body.bodyWidth
size(point[])-1 > ::players[::new_input].body.bodyWidth
size(point[])-1 > ::players[direction-1].body.bodyWidth
size(point[])-1 > ::players[::new_input].body.bodyHeight
size(point[])-1 > ::players[direction-1].body.bodyHeight
size(point[])-1 > ::players[::input_n-1].body.color
size(point[])-1 > ::players[::new_input].body.color
size(point[])-1 > ::players[direction].body.color
size(point[])-1 > ::players[direction-1].body.color
size(point[])-1 > ::players[::input_n-1].basePosition.col
size(point[])-1 > ::players[::new_input].basePosition.col
size(point[])-1 > ::players[direction].basePosition.col
size(point[])-1 > ::players[direction-1].basePosition.col
size(point[])-1 > ::players[::input_n].basePosition.row
size(point[])-1 > ::players[::new_input].basePosition.row
size(point[])-1 > ::players[direction].basePosition.row
size(point[])-1 > ::players[direction-1].basePosition.row
size(point[])-1 > ::players[direction].impulse[3][0]
size(point[])-1 > ::players[direction-1].impulse[3][0]
size(point[])-1 > ::players[::new_input].direction
size(point[])-1 > ::players[direction].direction
size(point[])-1 > ::players[direction-1].direction
size(point[])-1 > ::players[::input_n].stepCounter
size(point[])-1 > ::players[::new_input].stepCounter
size(point[])-1 > ::players[direction].stepCounter
size(point[])-1 > ::players[direction-1].stepCounter
size(point[])-1 > point[::input_n].position.col
size(point[])-1 > point[::input_n-1].position.col
size(point[])-1 > point[::input_n].position.row
size(point[])-1 > point[::input_n-1].position.row
size(point[])-1 > point[::input_n].aspect
size(point[])-1 > point[::input_n-1].aspect
size(point[])-1 > point[::new_input].position.col
size(point[])-1 > point[::new_input].position.row
size(point[])-1 > point[::new_input].aspect
size(point[])-1 > point[direction].position.col
size(point[])-1 > point[direction-1].position.col
size(point[])-1 > point[direction].position.row
size(point[])-1 > point[direction-1].position.row
size(point[])-1 > point[direction].aspect
size(point[])-1 > point[direction-1].aspect
::players[direction-1].body.type < ::players[::input_n].body.bodyPoints->aspect
::players[direction-1].body.type < ::players[::input_n-1].body.bodyPoints->aspect
::players[direction-1].body.type < ::players[::new_input].body.bodyPoints->aspect
::players[direction-1].body.type < ::players[direction-1].body.bodyPoints->aspect
::players[direction-1].body.type < ::players[::input_n-1].body.bodyMapsSize
::players[direction-1].body.type < ::players[::new_input].body.bodyMapsSize
::players[direction-1].body.type < ::players[::input_n-1].body.bodySize
::players[direction-1].body.type < ::players[::new_input].body.bodySize
::players[direction-1].body.type < ::players[::input_n-1].body.bodyWidth
::players[direction-1].body.type <= ::players[::new_input].body.bodyWidth
::players[direction-1].body.type != ::players[direction-1].body.bodyWidth
::players[direction-1].body.type <= ::players[::new_input].body.bodyHeight
::players[direction-1].body.type != ::players[direction-1].body.bodyHeight
::players[direction-1].body.type < ::players[::input_n-1].body.color
::players[direction-1].body.type <= ::players[::new_input].body.color
::players[direction-1].body.type <= ::players[direction].body.color
::players[direction-1].body.type <= ::players[direction-1].body.color
::players[direction-1].body.type < ::players[::input_n-1].basePosition.col
::players[direction-1].body.type <= ::players[::new_input].basePosition.col
::players[direction-1].body.type <= ::players[direction].basePosition.col
::players[direction-1].body.type < ::players[direction-1].basePosition.col
::players[direction-1].body.type < ::players[::input_n].basePosition.row
::players[direction-1].body.type < ::players[::new_input].basePosition.row
::players[direction-1].body.type < ::players[direction].basePosition.row
::players[direction-1].body.type < ::players[direction-1].basePosition.row
::players[direction-1].body.type >= ::players[direction].impulse[3][0]
::players[direction-1].body.type >= ::players[direction-1].impulse[3][0]
::players[direction-1].body.type <= ::players[::new_input].direction
::players[direction-1].body.type < ::players[direction-1].direction
::players[direction-1].body.type < ::players[::input_n].stepCounter
::players[direction-1].body.type < ::players[direction].stepCounter
::players[direction-1].body.type < point[::input_n-1].position.col
::players[direction-1].body.type <= point[::input_n-1].position.row
::players[direction-1].body.type < point[::input_n-1].aspect
::players[direction-1].body.type <= point[::new_input].position.col
::players[direction-1].body.type <= point[::new_input].position.row
::players[direction-1].body.type <= point[::new_input].aspect
::players[direction-1].body.type != point[direction-1].position.col
::players[direction-1].body.type != point[direction-1].position.row
::players[direction-1].body.type != point[direction-1].aspect
::players[::input_n].body.bodyPoints->aspect <= ::players[::new_input].body.bodyPoints->aspect
::players[::input_n].body.bodyPoints->aspect <= ::players[direction-1].body.bodyPoints->aspect
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.bodyMapsSize
::players[::input_n].body.bodyPoints->aspect > ::players[direction-1].body.bodyMapsSize
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.bodySize
::players[::input_n].body.bodyPoints->aspect > ::players[direction-1].body.bodySize
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.bodyWidth
::players[::input_n].body.bodyPoints->aspect > ::players[direction-1].body.bodyWidth
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.bodyHeight
::players[::input_n].body.bodyPoints->aspect > ::players[direction-1].body.bodyHeight
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.color
::players[::input_n].body.bodyPoints->aspect > ::players[direction].body.color
::players[::input_n].body.bodyPoints->aspect > ::players[direction-1].body.color
::players[::input_n].body.bodyPoints->aspect != ::players[::new_input].basePosition.col
::players[::input_n].body.bodyPoints->aspect > ::players[direction].basePosition.col
::players[::input_n].body.bodyPoints->aspect != ::players[direction-1].basePosition.col
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].basePosition.row
::players[::input_n].body.bodyPoints->aspect > ::players[direction].basePosition.row
::players[::input_n].body.bodyPoints->aspect > ::players[direction-1].basePosition.row
::players[::input_n].body.bodyPoints->aspect > ::players[direction].impulse[3][0]
::players[::input_n].body.bodyPoints->aspect > ::players[direction-1].impulse[3][0]
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].direction
::players[::input_n].body.bodyPoints->aspect > ::players[direction].direction
::players[::input_n].body.bodyPoints->aspect > ::players[direction-1].direction
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].stepCounter
::players[::input_n].body.bodyPoints->aspect > ::players[direction].stepCounter
::players[::input_n].body.bodyPoints->aspect > ::players[direction-1].stepCounter
::players[::input_n].body.bodyPoints->aspect != point[::input_n].position.col
::players[::input_n].body.bodyPoints->aspect != point[::input_n-1].position.col
::players[::input_n].body.bodyPoints->aspect > point[::input_n].position.row
::players[::input_n].body.bodyPoints->aspect > point[::input_n-1].position.row
::players[::input_n].body.bodyPoints->aspect != point[::input_n].aspect
::players[::input_n].body.bodyPoints->aspect != point[::new_input].position.col
::players[::input_n].body.bodyPoints->aspect > point[::new_input].position.row
::players[::input_n].body.bodyPoints->aspect != point[direction].position.col
::players[::input_n].body.bodyPoints->aspect != point[direction-1].position.col
::players[::input_n].body.bodyPoints->aspect > point[direction].position.row
::players[::input_n].body.bodyPoints->aspect > point[direction-1].position.row
::players[::input_n-1].body.bodyPoints->aspect >= ::players[::new_input].body.bodyPoints->aspect
::players[::input_n-1].body.bodyPoints->aspect >= ::players[direction-1].body.bodyPoints->aspect
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyMapsSize
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction-1].body.bodyMapsSize
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.bodySize
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction-1].body.bodySize
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction-1].body.bodyWidth
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction-1].body.bodyHeight
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.color
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction].body.color
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction-1].body.color
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].basePosition.col
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction].basePosition.col
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction-1].basePosition.col
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].basePosition.row
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction].basePosition.row
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction-1].basePosition.row
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction].impulse[3][0]
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction-1].impulse[3][0]
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].direction
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction].direction
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction-1].direction
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].stepCounter
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction].stepCounter
::players[::input_n-1].body.bodyPoints->aspect > ::players[direction-1].stepCounter
::players[::input_n-1].body.bodyPoints->aspect > point[::input_n].position.row
::players[::input_n-1].body.bodyPoints->aspect > point[::input_n-1].position.row
::players[::input_n-1].body.bodyPoints->aspect > point[::new_input].position.row
::players[::input_n-1].body.bodyPoints->aspect > point[direction].position.row
::players[::input_n-1].body.bodyPoints->aspect > point[direction-1].position.row
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].body.bodyMapsSize
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.bodyMapsSize
::players[::new_input].body.bodyPoints->aspect > ::players[direction-1].body.bodyMapsSize
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].body.bodySize
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.bodySize
::players[::new_input].body.bodyPoints->aspect > ::players[direction-1].body.bodySize
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > ::players[direction-1].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.bodyHeight
::players[::new_input].body.bodyPoints->aspect > ::players[direction-1].body.bodyHeight
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].body.color
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.color
::players[::new_input].body.bodyPoints->aspect > ::players[direction].body.color
::players[::new_input].body.bodyPoints->aspect > ::players[direction-1].body.color
::players[::new_input].body.bodyPoints->aspect != ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].basePosition.col
::players[::new_input].body.bodyPoints->aspect > ::players[direction].basePosition.col
::players[::new_input].body.bodyPoints->aspect != ::players[direction-1].basePosition.col
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[direction].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[direction-1].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[direction].impulse[3][0]
::players[::new_input].body.bodyPoints->aspect > ::players[direction-1].impulse[3][0]
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].direction
::players[::new_input].body.bodyPoints->aspect > ::players[direction].direction
::players[::new_input].body.bodyPoints->aspect > ::players[direction-1].direction
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n].stepCounter
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].stepCounter
::players[::new_input].body.bodyPoints->aspect > ::players[direction].stepCounter
::players[::new_input].body.bodyPoints->aspect > ::players[direction-1].stepCounter
::players[::new_input].body.bodyPoints->aspect != point[::input_n].position.col
::players[::new_input].body.bodyPoints->aspect != point[::input_n-1].position.col
::players[::new_input].body.bodyPoints->aspect > point[::input_n].position.row
::players[::new_input].body.bodyPoints->aspect > point[::input_n-1].position.row
::players[::new_input].body.bodyPoints->aspect != point[::input_n-1].aspect
::players[::new_input].body.bodyPoints->aspect != point[::new_input].position.col
::players[::new_input].body.bodyPoints->aspect > point[::new_input].position.row
::players[::new_input].body.bodyPoints->aspect != point[::new_input].aspect
::players[::new_input].body.bodyPoints->aspect != point[direction].position.col
::players[::new_input].body.bodyPoints->aspect != point[direction-1].position.col
::players[::new_input].body.bodyPoints->aspect > point[direction].position.row
::players[::new_input].body.bodyPoints->aspect > point[direction-1].position.row
::players[::new_input].body.bodyPoints->aspect != point[direction].aspect
::players[::new_input].body.bodyPoints->aspect != point[direction-1].aspect
::players[direction-1].body.bodyPoints->aspect > ::players[::input_n-1].body.bodyMapsSize
::players[direction-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyMapsSize
::players[direction-1].body.bodyPoints->aspect > ::players[direction-1].body.bodyMapsSize
::players[direction-1].body.bodyPoints->aspect > ::players[::input_n-1].body.bodySize
::players[direction-1].body.bodyPoints->aspect > ::players[::new_input].body.bodySize
::players[direction-1].body.bodyPoints->aspect > ::players[direction-1].body.bodySize
::players[direction-1].body.bodyPoints->aspect > ::players[::input_n-1].body.bodyWidth
::players[direction-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyWidth
::players[direction-1].body.bodyPoints->aspect > ::players[direction-1].body.bodyWidth
::players[direction-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyHeight
::players[direction-1].body.bodyPoints->aspect > ::players[direction-1].body.bodyHeight
::players[direction-1].body.bodyPoints->aspect > ::players[::input_n-1].body.color
::players[direction-1].body.bodyPoints->aspect > ::players[::new_input].body.color
::players[direction-1].body.bodyPoints->aspect > ::players[direction].body.color
::players[direction-1].body.bodyPoints->aspect > ::players[direction-1].body.color
::players[direction-1].body.bodyPoints->aspect != ::players[::input_n-1].basePosition.col
::players[direction-1].body.bodyPoints->aspect != ::players[::new_input].basePosition.col
::players[direction-1].body.bodyPoints->aspect > ::players[direction].basePosition.col
::players[direction-1].body.bodyPoints->aspect > ::players[direction-1].basePosition.col
::players[direction-1].body.bodyPoints->aspect > ::players[::input_n].basePosition.row
::players[direction-1].body.bodyPoints->aspect > ::players[::new_input].basePosition.row
::players[direction-1].body.bodyPoints->aspect > ::players[direction].basePosition.row
::players[direction-1].body.bodyPoints->aspect > ::players[direction-1].basePosition.row
::players[direction-1].body.bodyPoints->aspect > ::players[direction].impulse[3][0]
::players[direction-1].body.bodyPoints->aspect > ::players[direction-1].impulse[3][0]
::players[direction-1].body.bodyPoints->aspect > ::players[::new_input].direction
::players[direction-1].body.bodyPoints->aspect > ::players[direction].direction
::players[direction-1].body.bodyPoints->aspect > ::players[direction-1].direction
::players[direction-1].body.bodyPoints->aspect > ::players[::input_n].stepCounter
::players[direction-1].body.bodyPoints->aspect > ::players[::new_input].stepCounter
::players[direction-1].body.bodyPoints->aspect > ::players[direction].stepCounter
::players[direction-1].body.bodyPoints->aspect > ::players[direction-1].stepCounter
::players[direction-1].body.bodyPoints->aspect > point[::input_n].position.row
::players[direction-1].body.bodyPoints->aspect > point[::input_n-1].position.row
::players[direction-1].body.bodyPoints->aspect > point[::new_input].position.row
::players[direction-1].body.bodyPoints->aspect > point[direction].position.row
::players[direction-1].body.bodyPoints->aspect > point[direction-1].position.row
::players[::input_n-1].body.bodyMapsSize >= ::players[::new_input].body.bodyMapsSize
::players[::input_n-1].body.bodyMapsSize >= ::players[direction-1].body.bodyMapsSize
::players[::input_n-1].body.bodyMapsSize != ::players[::new_input].body.bodySize
::players[::input_n-1].body.bodyMapsSize != ::players[direction-1].body.bodySize
::players[::input_n-1].body.bodyMapsSize != ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.bodyMapsSize != ::players[direction-1].body.bodyWidth
::players[::input_n-1].body.bodyMapsSize >= ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize >= ::players[direction-1].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize > ::players[::new_input].body.color
::players[::input_n-1].body.bodyMapsSize >= ::players[direction].body.color
::players[::input_n-1].body.bodyMapsSize > ::players[direction-1].body.color
::players[::input_n-1].body.bodyMapsSize != ::players[::new_input].basePosition.col
::players[::input_n-1].body.bodyMapsSize != ::players[direction-1].basePosition.col
::players[::input_n-1].body.bodyMapsSize < ::players[::new_input].basePosition.row
::players[::input_n-1].body.bodyMapsSize < ::players[direction].basePosition.row
::players[::input_n-1].body.bodyMapsSize < ::players[direction-1].basePosition.row
::players[::input_n-1].body.bodyMapsSize > ::players[direction].impulse[3][0]
::players[::input_n-1].body.bodyMapsSize > ::players[direction-1].impulse[3][0]
::players[::input_n-1].body.bodyMapsSize > ::players[::new_input].direction
::players[::input_n-1].body.bodyMapsSize > ::players[direction].direction
::players[::input_n-1].body.bodyMapsSize > ::players[direction-1].direction
::players[::input_n-1].body.bodyMapsSize != ::players[::new_input].stepCounter
::players[::input_n-1].body.bodyMapsSize < ::players[direction].stepCounter
::players[::input_n-1].body.bodyMapsSize != point[::input_n].position.row
::players[::input_n-1].body.bodyMapsSize != point[::input_n-1].position.row
::players[::input_n-1].body.bodyMapsSize != point[::input_n].aspect
::players[::input_n-1].body.bodyMapsSize < point[::input_n-1].aspect
::players[::input_n-1].body.bodyMapsSize != point[::new_input].position.row
::players[::input_n-1].body.bodyMapsSize != point[::new_input].aspect
::players[::input_n-1].body.bodyMapsSize != point[direction].position.row
::players[::input_n-1].body.bodyMapsSize != point[direction-1].position.row
::players[::input_n-1].body.bodyMapsSize != point[direction].aspect
::players[::input_n-1].body.bodyMapsSize != point[direction-1].aspect
::players[::new_input].body.bodyMapsSize < ::players[::input_n-1].body.bodySize
::players[::new_input].body.bodyMapsSize != ::players[direction-1].body.bodySize
::players[::new_input].body.bodyMapsSize < ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyMapsSize != ::players[::new_input].body.bodyWidth
::players[::new_input].body.bodyMapsSize != ::players[direction-1].body.bodyWidth
::players[::new_input].body.bodyMapsSize >= ::players[::new_input].body.bodyHeight
::players[::new_input].body.bodyMapsSize != ::players[::input_n-1].body.color
::players[::new_input].body.bodyMapsSize > ::players[::new_input].body.color
::players[::new_input].body.bodyMapsSize >= ::players[direction].body.color
::players[::new_input].body.bodyMapsSize != ::players[direction-1].body.color
::players[::new_input].body.bodyMapsSize < ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodyMapsSize != ::players[::new_input].basePosition.col
::players[::new_input].body.bodyMapsSize != ::players[direction-1].basePosition.col
::players[::new_input].body.bodyMapsSize < ::players[::input_n].basePosition.row
::players[::new_input].body.bodyMapsSize < ::players[::new_input].basePosition.row
::players[::new_input].body.bodyMapsSize < ::players[direction].basePosition.row
::players[::new_input].body.bodyMapsSize < ::players[direction-1].basePosition.row
::players[::new_input].body.bodyMapsSize > ::players[direction].impulse[3][0]
::players[::new_input].body.bodyMapsSize > ::players[direction-1].impulse[3][0]
::players[::new_input].body.bodyMapsSize > ::players[::new_input].direction
::players[::new_input].body.bodyMapsSize > ::players[direction].direction
::players[::new_input].body.bodyMapsSize >= ::players[direction-1].direction
::players[::new_input].body.bodyMapsSize < ::players[::input_n].stepCounter
::players[::new_input].body.bodyMapsSize != ::players[::new_input].stepCounter
::players[::new_input].body.bodyMapsSize < ::players[direction].stepCounter
::players[::new_input].body.bodyMapsSize != point[::input_n].position.row
::players[::new_input].body.bodyMapsSize != point[::input_n-1].position.row
::players[::new_input].body.bodyMapsSize != point[::input_n].aspect
::players[::new_input].body.bodyMapsSize < point[::input_n-1].aspect
::players[::new_input].body.bodyMapsSize != point[::new_input].position.row
::players[::new_input].body.bodyMapsSize != point[::new_input].aspect
::players[::new_input].body.bodyMapsSize != point[direction].position.row
::players[::new_input].body.bodyMapsSize != point[direction-1].position.row
::players[::new_input].body.bodyMapsSize != point[direction].aspect
::players[::new_input].body.bodyMapsSize != point[direction-1].aspect
::players[direction-1].body.bodyMapsSize < ::players[::input_n-1].body.bodySize
::players[direction-1].body.bodyMapsSize != ::players[::new_input].body.bodySize
::players[direction-1].body.bodyMapsSize < ::players[::input_n-1].body.bodyWidth
::players[direction-1].body.bodyMapsSize != ::players[::new_input].body.bodyWidth
::players[direction-1].body.bodyMapsSize != ::players[direction-1].body.bodyWidth
::players[direction-1].body.bodyMapsSize >= ::players[direction-1].body.bodyHeight
::players[direction-1].body.bodyMapsSize != ::players[::input_n-1].body.color
::players[direction-1].body.bodyMapsSize != ::players[::new_input].body.color
::players[direction-1].body.bodyMapsSize != ::players[direction].body.color
::players[direction].body.color % ::players[direction-1].body.bodyMapsSize == 0
::players[direction-1].body.bodyMapsSize < ::players[::input_n-1].basePosition.col
::players[direction-1].body.bodyMapsSize != ::players[::new_input].basePosition.col
::players[direction-1].body.bodyMapsSize != ::players[direction].basePosition.col
::players[direction].basePosition.col % ::players[direction-1].body.bodyMapsSize == 0
::players[direction-1].basePosition.col % ::players[direction-1].body.bodyMapsSize == 0
::players[direction-1].body.bodyMapsSize < ::players[direction-1].basePosition.col
::players[direction-1].body.bodyMapsSize < ::players[::input_n].basePosition.row
::players[direction-1].body.bodyMapsSize < ::players[::new_input].basePosition.row
::players[direction-1].body.bodyMapsSize < ::players[direction].basePosition.row
::players[direction-1].body.bodyMapsSize < ::players[direction-1].basePosition.row
::players[direction-1].body.bodyMapsSize >= ::players[direction].impulse[3][0]
::players[direction-1].body.bodyMapsSize >= ::players[::new_input].direction
::players[direction].direction % ::players[direction-1].body.bodyMapsSize == 0
::players[direction-1].body.bodyMapsSize != ::players[direction-1].direction
::players[direction-1].body.bodyMapsSize < ::players[::input_n].stepCounter
::players[direction-1].body.bodyMapsSize != ::players[::new_input].stepCounter
::players[direction-1].body.bodyMapsSize < ::players[direction].stepCounter
::players[direction-1].body.bodyMapsSize != ::players[direction-1].stepCounter
::players[direction-1].stepCounter % ::players[direction-1].body.bodyMapsSize == 0
::players[direction-1].body.bodyMapsSize <= point[::input_n-1].position.col
::players[direction-1].body.bodyMapsSize != point[::input_n].position.row
::players[direction-1].body.bodyMapsSize <= point[::input_n-1].position.row
::players[direction-1].body.bodyMapsSize != point[::input_n].aspect
::players[direction-1].body.bodyMapsSize < point[::input_n-1].aspect
::players[direction-1].body.bodyMapsSize != point[::new_input].aspect
::players[direction-1].body.bodyMapsSize != point[direction].position.row
::players[direction-1].body.bodyMapsSize != point[direction-1].position.row
::players[direction-1].body.bodyMapsSize != point[direction].aspect
::players[direction-1].body.bodyMapsSize != point[direction-1].aspect
::players[::input_n-1].body.bodySize >= ::players[::new_input].body.bodySize
::players[::input_n-1].body.bodySize >= ::players[direction-1].body.bodySize
::players[::input_n-1].body.bodySize > ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.bodySize > ::players[direction-1].body.bodyWidth
::players[::input_n-1].body.bodySize > ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodySize > ::players[direction-1].body.bodyHeight
::players[::input_n-1].body.bodySize > ::players[::new_input].body.color
::players[::input_n-1].body.bodySize > ::players[direction].body.color
::players[::input_n-1].body.bodySize > ::players[direction-1].body.color
::players[::input_n-1].body.bodySize != ::players[::new_input].basePosition.col
::players[::input_n-1].body.bodySize > ::players[direction].basePosition.col
::players[::input_n-1].body.bodySize != ::players[direction-1].basePosition.col
::players[::input_n-1].body.bodySize > ::players[::new_input].basePosition.row
::players[::input_n-1].body.bodySize > ::players[direction].basePosition.row
::players[::input_n-1].body.bodySize > ::players[direction-1].basePosition.row
::players[::input_n-1].body.bodySize > ::players[direction].impulse[3][0]
::players[::input_n-1].body.bodySize > ::players[direction-1].impulse[3][0]
::players[::input_n-1].body.bodySize > ::players[::new_input].direction
::players[::input_n-1].body.bodySize > ::players[direction].direction
::players[::input_n-1].body.bodySize > ::players[direction-1].direction
::players[::input_n-1].body.bodySize > ::players[::new_input].stepCounter
::players[::input_n-1].body.bodySize > ::players[direction].stepCounter
::players[::input_n-1].body.bodySize > ::players[direction-1].stepCounter
::players[::input_n-1].body.bodySize != point[::input_n].position.col
::players[::input_n-1].body.bodySize != point[::input_n-1].position.col
::players[::input_n-1].body.bodySize > point[::input_n].position.row
::players[::input_n-1].body.bodySize > point[::input_n-1].position.row
::players[::input_n-1].body.bodySize != point[::input_n].aspect
::players[::input_n-1].body.bodySize < point[::input_n-1].aspect
::players[::input_n-1].body.bodySize != point[::new_input].position.col
::players[::input_n-1].body.bodySize > point[::new_input].position.row
::players[::input_n-1].body.bodySize != point[::new_input].aspect
::players[::input_n-1].body.bodySize != point[direction].position.col
::players[::input_n-1].body.bodySize != point[direction-1].position.col
::players[::input_n-1].body.bodySize > point[direction].position.row
::players[::input_n-1].body.bodySize > point[direction-1].position.row
::players[::input_n-1].body.bodySize != point[direction].aspect
::players[::input_n-1].body.bodySize != point[direction-1].aspect
::players[::new_input].body.bodySize != ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodySize > ::players[::new_input].body.bodyWidth
::players[::new_input].body.bodySize != ::players[direction-1].body.bodyWidth
::players[::new_input].body.bodySize > ::players[::new_input].body.bodyHeight
::players[::new_input].body.bodySize != ::players[direction-1].body.bodyHeight
::players[::new_input].body.bodySize != ::players[::input_n-1].body.color
::players[::new_input].body.bodySize > ::players[::new_input].body.color
::players[::new_input].body.bodySize > ::players[direction].body.color
::players[::new_input].body.bodySize != ::players[direction-1].body.color
::players[::new_input].body.bodySize < ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodySize != ::players[::new_input].basePosition.col
::players[::new_input].body.bodySize > ::players[direction].basePosition.col
::players[::new_input].body.bodySize != ::players[direction-1].basePosition.col
::players[::new_input].body.bodySize != ::players[::input_n].basePosition.row
::players[::new_input].body.bodySize != ::players[::new_input].basePosition.row
::players[::new_input].body.bodySize != ::players[direction].basePosition.row
::players[::new_input].body.bodySize != ::players[direction-1].basePosition.row
::players[::new_input].body.bodySize > ::players[direction].impulse[3][0]
::players[::new_input].body.bodySize > ::players[direction-1].impulse[3][0]
::players[::new_input].body.bodySize > ::players[::new_input].direction
::players[::new_input].body.bodySize > ::players[direction].direction
::players[::new_input].body.bodySize >= ::players[direction-1].direction
::players[::new_input].body.bodySize != ::players[::input_n].stepCounter
::players[::new_input].body.bodySize != ::players[::new_input].stepCounter
::players[::new_input].body.bodySize != ::players[direction].stepCounter
::players[::new_input].body.bodySize > ::players[direction-1].stepCounter
::players[::new_input].body.bodySize != point[::input_n].position.col
::players[::new_input].body.bodySize != point[::input_n-1].position.col
::players[::new_input].body.bodySize != point[::input_n].position.row
::players[::new_input].body.bodySize != point[::input_n-1].position.row
::players[::new_input].body.bodySize != point[::input_n].aspect
::players[::new_input].body.bodySize < point[::input_n-1].aspect
::players[::new_input].body.bodySize != point[::new_input].position.col
::players[::new_input].body.bodySize != point[::new_input].position.row
::players[::new_input].body.bodySize != point[::new_input].aspect
::players[::new_input].body.bodySize != point[direction].position.col
::players[::new_input].body.bodySize != point[direction-1].position.col
::players[::new_input].body.bodySize != point[direction].position.row
::players[::new_input].body.bodySize != point[direction-1].position.row
::players[::new_input].body.bodySize != point[direction].aspect
::players[::new_input].body.bodySize != point[direction-1].aspect
::players[direction-1].body.bodySize != ::players[::input_n-1].body.bodyWidth
::players[direction-1].body.bodySize != ::players[::new_input].body.bodyWidth
::players[direction-1].body.bodySize > ::players[direction-1].body.bodyWidth
::players[direction-1].body.bodySize != ::players[::new_input].body.bodyHeight
::players[direction-1].body.bodySize > ::players[direction-1].body.bodyHeight
::players[direction-1].body.bodySize != ::players[::input_n-1].body.color
::players[direction-1].body.bodySize != ::players[::new_input].body.color
::players[direction-1].body.bodySize != ::players[direction].body.color
::players[direction].body.color % ::players[direction-1].body.bodySize == 0
::players[direction-1].body.bodySize < ::players[::input_n-1].basePosition.col
::players[direction-1].body.bodySize != ::players[::new_input].basePosition.col
::players[direction-1].body.bodySize != ::players[direction].basePosition.col
::players[direction].basePosition.col % ::players[direction-1].body.bodySize == 0
::players[direction-1].body.bodySize < ::players[direction-1].basePosition.col
::players[direction-1].body.bodySize != ::players[::input_n].basePosition.row
::players[direction-1].body.bodySize != ::players[::new_input].basePosition.row
::players[direction-1].body.bodySize != ::players[direction].basePosition.row
::players[direction-1].body.bodySize != ::players[direction-1].basePosition.row
::players[direction-1].body.bodySize >= ::players[direction].impulse[3][0]
::players[direction-1].body.bodySize >= ::players[::new_input].direction
::players[direction].direction % ::players[direction-1].body.bodySize == 0
::players[direction-1].body.bodySize != ::players[direction-1].direction
::players[direction-1].body.bodySize != ::players[::input_n].stepCounter
::players[direction-1].body.bodySize > ::players[::new_input].stepCounter
::players[direction-1].body.bodySize != ::players[direction].stepCounter
::players[direction-1].body.bodySize != ::players[direction-1].stepCounter
::players[direction-1].stepCounter % ::players[direction-1].body.bodySize == 0
::players[direction-1].body.bodySize != point[::input_n].position.col
::players[direction-1].body.bodySize != point[::input_n-1].position.col
::players[direction-1].body.bodySize != point[::input_n].position.row
::players[direction-1].body.bodySize != point[::input_n].aspect
::players[direction-1].body.bodySize < point[::input_n-1].aspect
::players[direction-1].body.bodySize != point[::new_input].position.col
::players[direction-1].body.bodySize != point[::new_input].aspect
::players[direction-1].body.bodySize != point[direction].position.col
::players[direction-1].body.bodySize != point[direction-1].position.col
::players[direction-1].body.bodySize != point[direction].position.row
::players[direction-1].body.bodySize != point[direction-1].position.row
::players[direction-1].body.bodySize != point[direction].aspect
::players[direction-1].body.bodySize != point[direction-1].aspect
::players[::input_n-1].body.bodyWidth >= ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.bodyWidth >= ::players[direction-1].body.bodyWidth
::players[::input_n-1].body.bodyWidth > ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodyWidth > ::players[direction-1].body.bodyHeight
::players[::input_n-1].body.bodyWidth > ::players[::new_input].body.color
::players[::input_n-1].body.bodyWidth > ::players[direction].body.color
::players[::input_n-1].body.bodyWidth > ::players[direction-1].body.color
::players[::input_n-1].body.bodyWidth != ::players[::new_input].basePosition.col
::players[::input_n-1].body.bodyWidth >= ::players[direction].basePosition.col
::players[::input_n-1].body.bodyWidth != ::players[direction-1].basePosition.col
::players[::input_n-1].body.bodyWidth < ::players[::new_input].basePosition.row
::players[::input_n-1].body.bodyWidth < ::players[direction].basePosition.row
::players[::input_n-1].body.bodyWidth < ::players[direction-1].basePosition.row
::players[::input_n-1].body.bodyWidth > ::players[direction].impulse[3][0]
::players[::input_n-1].body.bodyWidth > ::players[direction-1].impulse[3][0]
::players[::input_n-1].body.bodyWidth > ::players[::new_input].direction
::players[::input_n-1].body.bodyWidth > ::players[direction].direction
::players[::input_n-1].body.bodyWidth > ::players[direction-1].direction
::players[::input_n-1].body.bodyWidth != ::players[::new_input].stepCounter
::players[::input_n-1].body.bodyWidth > ::players[direction-1].stepCounter
::players[::input_n-1].body.bodyWidth != point[::input_n].aspect
::players[::input_n-1].body.bodyWidth < point[::input_n-1].aspect
::players[::input_n-1].body.bodyWidth != point[::new_input].aspect
::players[::input_n-1].body.bodyWidth != point[direction].aspect
::players[::input_n-1].body.bodyWidth != point[direction-1].aspect
::players[::new_input].body.bodyWidth != ::players[direction-1].body.bodyHeight
::players[::new_input].body.bodyWidth != ::players[::input_n-1].body.color
::players[::new_input].body.bodyWidth >= ::players[::new_input].body.color
::players[::new_input].body.bodyWidth >= ::players[direction].body.color
::players[::new_input].body.bodyWidth != ::players[direction-1].body.color
::players[::new_input].body.bodyWidth < ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodyWidth <= ::players[::new_input].basePosition.col
::players[::new_input].body.bodyWidth >= ::players[direction].basePosition.col
::players[::new_input].body.bodyWidth != ::players[direction-1].basePosition.col
::players[::new_input].body.bodyWidth < ::players[::input_n].basePosition.row
::players[::new_input].body.bodyWidth < ::players[::new_input].basePosition.row
::players[::new_input].body.bodyWidth < ::players[direction].basePosition.row
::players[::new_input].body.bodyWidth < ::players[direction-1].basePosition.row
::players[::new_input].body.bodyWidth >= ::players[direction].impulse[3][0]
::players[::new_input].body.bodyWidth >= ::players[direction-1].impulse[3][0]
::players[::new_input].body.bodyWidth >= ::players[::new_input].direction
::players[::new_input].body.bodyWidth >= ::players[direction].direction
::players[::new_input].body.bodyWidth != ::players[direction-1].direction
::players[::new_input].body.bodyWidth < ::players[::input_n].stepCounter
::players[::new_input].body.bodyWidth != ::players[::new_input].stepCounter
::players[::new_input].body.bodyWidth >= ::players[direction-1].stepCounter
::players[::new_input].body.bodyWidth < point[::input_n-1].aspect
::players[::new_input].body.bodyWidth <= point[::new_input].aspect
::players[::new_input].body.bodyWidth != point[direction-1].aspect
::players[direction-1].body.bodyWidth != ::players[::new_input].body.bodyHeight
::players[direction-1].body.bodyWidth != ::players[::input_n-1].body.color
::players[direction-1].body.bodyWidth != ::players[::new_input].body.color
::players[direction-1].body.bodyWidth != ::players[direction].body.color
::players[direction-1].body.bodyWidth != ::players[direction-1].body.color
::players[direction-1].body.bodyWidth < ::players[::input_n-1].basePosition.col
::players[direction-1].body.bodyWidth != ::players[::new_input].basePosition.col
::players[direction-1].body.bodyWidth != ::players[direction].basePosition.col
::players[direction-1].body.bodyWidth < ::players[direction-1].basePosition.col
::players[direction-1].body.bodyWidth < ::players[::input_n].basePosition.row
::players[direction-1].body.bodyWidth < ::players[::new_input].basePosition.row
::players[direction-1].body.bodyWidth < ::players[direction].basePosition.row
::players[direction-1].body.bodyWidth < ::players[direction-1].basePosition.row
::players[direction-1].body.bodyWidth != ::players[::new_input].direction
::players[direction-1].body.bodyWidth != ::players[direction-1].direction
::players[direction-1].body.bodyWidth < ::players[::input_n].stepCounter
::players[direction-1].body.bodyWidth < ::players[direction].stepCounter
::players[direction-1].body.bodyWidth != ::players[direction-1].stepCounter
::players[direction-1].body.bodyWidth < point[::input_n-1].aspect
::players[direction-1].body.bodyWidth != point[::new_input].aspect
::players[direction-1].body.bodyWidth <= point[direction-1].aspect
::players[::new_input].body.bodyHeight != ::players[::input_n-1].body.color
::players[::new_input].body.bodyHeight >= ::players[::new_input].body.color
::players[::new_input].body.bodyHeight >= ::players[direction].body.color
::players[::new_input].body.bodyHeight != ::players[direction-1].body.color
::players[::new_input].body.bodyHeight < ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodyHeight <= ::players[::new_input].basePosition.col
::players[::new_input].body.bodyHeight != ::players[direction-1].basePosition.col
::players[::new_input].body.bodyHeight < ::players[::input_n].basePosition.row
::players[::new_input].body.bodyHeight < ::players[::new_input].basePosition.row
::players[::new_input].body.bodyHeight < ::players[direction].basePosition.row
::players[::new_input].body.bodyHeight < ::players[direction-1].basePosition.row
::players[::new_input].body.bodyHeight >= ::players[direction].impulse[3][0]
::players[::new_input].body.bodyHeight >= ::players[direction-1].impulse[3][0]
::players[::new_input].body.bodyHeight >= ::players[::new_input].direction
::players[::new_input].body.bodyHeight >= ::players[direction].direction
::players[::new_input].body.bodyHeight != ::players[direction-1].direction
::players[::new_input].body.bodyHeight < ::players[::input_n].stepCounter
::players[::new_input].body.bodyHeight != ::players[::new_input].stepCounter
::players[::new_input].body.bodyHeight < ::players[direction].stepCounter
::players[::new_input].body.bodyHeight != point[::input_n-1].position.row
::players[::new_input].body.bodyHeight < point[::input_n-1].aspect
::players[::new_input].body.bodyHeight <= point[::new_input].aspect
::players[::new_input].body.bodyHeight != point[direction-1].position.row
::players[::new_input].body.bodyHeight != point[direction-1].aspect
::players[direction-1].body.bodyHeight != ::players[::input_n-1].body.color
::players[direction-1].body.bodyHeight != ::players[::new_input].body.color
::players[direction-1].body.bodyHeight != ::players[direction].body.color
::players[direction-1].body.bodyHeight != ::players[direction-1].body.color
::players[direction-1].body.bodyHeight < ::players[::input_n-1].basePosition.col
::players[direction-1].body.bodyHeight != ::players[::new_input].basePosition.col
::players[direction-1].body.bodyHeight != ::players[direction].basePosition.col
::players[direction-1].body.bodyHeight < ::players[direction-1].basePosition.col
::players[direction-1].body.bodyHeight < ::players[::input_n].basePosition.row
::players[direction-1].body.bodyHeight < ::players[::new_input].basePosition.row
::players[direction-1].body.bodyHeight < ::players[direction].basePosition.row
::players[direction-1].body.bodyHeight < ::players[direction-1].basePosition.row
::players[direction-1].body.bodyHeight != ::players[::new_input].direction
::players[direction-1].body.bodyHeight != ::players[direction-1].direction
::players[direction-1].body.bodyHeight < ::players[::input_n].stepCounter
::players[direction-1].body.bodyHeight < ::players[direction].stepCounter
::players[direction-1].body.bodyHeight != ::players[direction-1].stepCounter
::players[direction-1].body.bodyHeight <= point[::input_n-1].position.col
::players[direction-1].body.bodyHeight < point[::input_n-1].position.row
::players[direction-1].body.bodyHeight < point[::input_n-1].aspect
::players[direction-1].body.bodyHeight != point[::new_input].position.row
::players[direction-1].body.bodyHeight != point[::new_input].aspect
::players[direction-1].body.bodyHeight <= point[direction-1].position.col
::players[direction-1].body.bodyHeight <= point[direction-1].position.row
::players[direction-1].body.bodyHeight <= point[direction-1].aspect
::players[::input_n-1].body.color >= ::players[::new_input].body.color
::players[::input_n-1].body.color != ::players[direction].body.color
::players[::input_n-1].body.color >= ::players[direction-1].body.color
::players[::input_n-1].body.color != ::players[::new_input].basePosition.col
::players[::input_n-1].body.color != ::players[direction].basePosition.col
::players[::input_n-1].body.color < ::players[::new_input].basePosition.row
::players[::input_n-1].body.color < ::players[direction].basePosition.row
::players[::input_n-1].body.color < ::players[direction-1].basePosition.row
::players[::input_n-1].body.color > ::players[direction].impulse[3][0]
::players[::input_n-1].body.color > ::players[direction-1].impulse[3][0]
::players[::input_n-1].body.color > ::players[::new_input].direction
::players[::input_n-1].body.color >= ::players[direction].direction
::players[::input_n-1].body.color >= ::players[direction-1].direction
::players[::input_n-1].body.color != ::players[::new_input].stepCounter
::players[::input_n-1].body.color < ::players[direction].stepCounter
::players[::input_n-1].body.color != ::players[direction-1].stepCounter
::players[::input_n-1].body.color != point[::input_n].position.col
::players[::input_n-1].body.color != point[::input_n-1].position.col
::players[::input_n-1].body.color != point[::input_n].position.row
::players[::input_n-1].body.color != point[::input_n-1].position.row
::players[::input_n-1].body.color != point[::input_n].aspect
::players[::input_n-1].body.color < point[::input_n-1].aspect
::players[::input_n-1].body.color != point[::new_input].position.col
::players[::input_n-1].body.color != point[::new_input].position.row
::players[::input_n-1].body.color != point[::new_input].aspect
::players[::input_n-1].body.color != point[direction].position.col
::players[::input_n-1].body.color != point[direction-1].position.col
::players[::input_n-1].body.color != point[direction].position.row
::players[::input_n-1].body.color != point[direction-1].position.row
::players[::input_n-1].body.color != point[direction].aspect
::players[::input_n-1].body.color != point[direction-1].aspect
::players[::new_input].body.color < ::players[::input_n-1].basePosition.col
::players[::new_input].body.color < ::players[::input_n].basePosition.row
::players[::new_input].body.color < ::players[::new_input].basePosition.row
::players[::new_input].body.color < ::players[direction].basePosition.row
::players[::new_input].body.color < ::players[direction-1].basePosition.row
::players[::new_input].body.color >= ::players[direction].impulse[3][0]
::players[::new_input].body.color >= ::players[direction-1].impulse[3][0]
::players[::new_input].body.color >= ::players[::new_input].direction
::players[::new_input].body.color >= ::players[direction].direction
::players[::new_input].body.color < ::players[::input_n].stepCounter
::players[::new_input].body.color != ::players[::new_input].stepCounter
::players[::new_input].body.color < ::players[direction].stepCounter
::players[::new_input].body.color != point[::input_n-1].position.col
::players[::new_input].body.color != point[::input_n-1].position.row
::players[::new_input].body.color < point[::input_n-1].aspect
::players[::new_input].body.color <= point[::new_input].aspect
::players[::new_input].body.color != point[direction-1].position.col
::players[::new_input].body.color != point[direction-1].position.row
::players[::new_input].body.color != point[direction-1].aspect
::players[direction].body.color != ::players[direction-1].body.color
::players[direction].body.color < ::players[::input_n-1].basePosition.col
::players[direction].body.color <= ::players[::new_input].basePosition.col
::players[direction].body.color <= ::players[direction-1].basePosition.col
::players[direction].body.color < ::players[::input_n].basePosition.row
::players[direction].body.color < ::players[::new_input].basePosition.row
::players[direction].body.color < ::players[direction].basePosition.row
::players[direction].body.color < ::players[direction-1].basePosition.row
::players[direction].body.color >= ::players[direction].impulse[3][0]
::players[direction].body.color >= ::players[direction-1].impulse[3][0]
::players[direction].body.color != ::players[direction-1].direction
::players[direction].body.color < ::players[::input_n].stepCounter
::players[direction].body.color < ::players[direction].stepCounter
::players[direction].body.color <= ::players[direction-1].stepCounter
::players[direction].body.color <= point[::input_n-1].position.col
::players[direction].body.color != point[::input_n-1].position.row
::players[direction].body.color < point[::input_n-1].aspect
::players[direction].body.color <= point[::new_input].position.col
::players[direction].body.color <= point[::new_input].aspect
::players[direction].body.color != point[direction-1].position.col
::players[direction].body.color != point[direction-1].position.row
::players[direction].body.color != point[direction-1].aspect
::players[direction-1].body.color < ::players[::input_n-1].basePosition.col
::players[direction-1].body.color != ::players[::new_input].basePosition.col
::players[direction-1].body.color != ::players[direction].basePosition.col
::players[direction-1].body.color < ::players[direction-1].basePosition.col
::players[direction-1].body.color < ::players[::input_n].basePosition.row
::players[direction-1].body.color < ::players[::new_input].basePosition.row
::players[direction-1].body.color < ::players[direction].basePosition.row
::players[direction-1].body.color < ::players[direction-1].basePosition.row
::players[direction-1].body.color >= ::players[direction].impulse[3][0]
::players[direction-1].body.color >= ::players[direction-1].impulse[3][0]
::players[direction-1].body.color >= ::players[::new_input].direction
::players[direction-1].body.color != ::players[direction].direction
::players[direction-1].body.color < ::players[::input_n].stepCounter
::players[direction-1].body.color != ::players[::new_input].stepCounter
::players[direction-1].body.color < ::players[direction].stepCounter
::players[direction-1].body.color != ::players[direction-1].stepCounter
::players[direction-1].body.color != point[::input_n].position.col
::players[direction-1].body.color < point[::input_n-1].position.col
::players[direction-1].body.color != point[::input_n].position.row
::players[direction-1].body.color != point[::input_n-1].position.row
::players[direction-1].body.color != point[::input_n].aspect
::players[direction-1].body.color < point[::input_n-1].aspect
::players[direction-1].body.color != point[::new_input].position.col
::players[direction-1].body.color != point[::new_input].position.row
::players[direction-1].body.color != point[::new_input].aspect
::players[direction-1].body.color != point[direction].position.col
::players[direction-1].body.color != point[direction-1].position.col
::players[direction-1].body.color != point[direction].position.row
::players[direction-1].body.color != point[direction-1].position.row
::players[direction-1].body.color != point[direction].aspect
::players[direction-1].body.color != point[direction-1].aspect
::players[::input_n-1].basePosition.col >= ::players[::new_input].basePosition.col
::players[::input_n-1].basePosition.col > ::players[direction].basePosition.col
::players[::input_n-1].basePosition.col >= ::players[direction-1].basePosition.col
::players[::input_n-1].basePosition.col > ::players[::new_input].basePosition.row
::players[::input_n-1].basePosition.col > ::players[direction].basePosition.row
::players[::input_n-1].basePosition.col > ::players[direction-1].basePosition.row
::players[::input_n-1].basePosition.col > ::players[direction].impulse[3][0]
::players[::input_n-1].basePosition.col > ::players[direction-1].impulse[3][0]
::players[::input_n-1].basePosition.col > ::players[::new_input].direction
::players[::input_n-1].basePosition.col > ::players[direction].direction
::players[::input_n-1].basePosition.col > ::players[direction-1].direction
::players[::input_n-1].basePosition.col > ::players[::new_input].stepCounter
::players[::input_n-1].basePosition.col > ::players[direction].stepCounter
::players[::input_n-1].basePosition.col > ::players[direction-1].stepCounter
::players[::input_n-1].basePosition.col > point[::input_n].position.row
::players[::input_n-1].basePosition.col > point[::input_n-1].position.row
::players[::input_n-1].basePosition.col != point[::input_n].aspect
::players[::input_n-1].basePosition.col != point[::input_n-1].aspect
::players[::input_n-1].basePosition.col > point[::new_input].position.row
::players[::input_n-1].basePosition.col != point[::new_input].aspect
::players[::input_n-1].basePosition.col > point[direction].position.row
::players[::input_n-1].basePosition.col > point[direction-1].position.row
::players[::input_n-1].basePosition.col != point[direction].aspect
::players[::input_n-1].basePosition.col != point[direction-1].aspect
::players[::new_input].basePosition.col >= ::players[direction].basePosition.col
::players[::new_input].basePosition.col != ::players[::input_n].basePosition.row
::players[::new_input].basePosition.col != ::players[::new_input].basePosition.row
::players[::new_input].basePosition.col != ::players[direction].basePosition.row
::players[::new_input].basePosition.col != ::players[direction-1].basePosition.row
::players[::new_input].basePosition.col >= ::players[direction].impulse[3][0]
::players[::new_input].basePosition.col >= ::players[direction-1].impulse[3][0]
::players[::new_input].basePosition.col >= ::players[::new_input].direction
::players[::new_input].basePosition.col >= ::players[direction].direction
::players[::new_input].basePosition.col != ::players[direction-1].direction
::players[::new_input].basePosition.col != ::players[::input_n].stepCounter
::players[::new_input].basePosition.col != ::players[::new_input].stepCounter
::players[::new_input].basePosition.col != ::players[direction].stepCounter
::players[::new_input].basePosition.col >= ::players[direction-1].stepCounter
::players[::new_input].basePosition.col != point[::input_n-1].position.col
::players[::new_input].basePosition.col != point[::input_n-1].position.row
::players[::new_input].basePosition.col != point[::input_n-1].aspect
::players[::new_input].basePosition.col != point[direction-1].position.col
::players[::new_input].basePosition.col != point[direction-1].position.row
::players[::new_input].basePosition.col != point[direction-1].aspect
::players[direction].basePosition.col != ::players[direction-1].basePosition.col
::players[direction].basePosition.col < ::players[::input_n].basePosition.row
::players[direction].basePosition.col < ::players[::new_input].basePosition.row
::players[direction].basePosition.col < ::players[direction].basePosition.row
::players[direction].basePosition.col < ::players[direction-1].basePosition.row
::players[direction].basePosition.col >= ::players[direction-1].impulse[3][0]
::players[direction].basePosition.col >= ::players[direction].direction
::players[direction].basePosition.col != ::players[direction-1].direction
::players[direction].basePosition.col < ::players[::input_n].stepCounter
::players[direction].basePosition.col <= ::players[direction].stepCounter
::players[direction].basePosition.col < point[::input_n-1].aspect
::players[direction].basePosition.col <= point[::new_input].aspect
::players[direction].basePosition.col != point[direction-1].position.col
::players[direction].basePosition.col != point[direction-1].aspect
::players[direction-1].basePosition.col != ::players[::input_n].basePosition.row
::players[direction-1].basePosition.col != ::players[::new_input].basePosition.row
::players[direction-1].basePosition.col != ::players[direction].basePosition.row
::players[direction-1].basePosition.col != ::players[direction-1].basePosition.row
::players[direction-1].basePosition.col > ::players[direction].impulse[3][0]
::players[direction-1].basePosition.col > ::players[direction-1].impulse[3][0]
::players[direction-1].basePosition.col > ::players[::new_input].direction
::players[direction-1].basePosition.col >= ::players[direction].direction
::players[direction-1].basePosition.col != ::players[::input_n].stepCounter
::players[direction-1].basePosition.col > ::players[::new_input].stepCounter
::players[direction-1].basePosition.col != ::players[direction].stepCounter
::players[direction-1].basePosition.col != ::players[direction-1].stepCounter
::players[direction-1].basePosition.col != point[::input_n].aspect
::players[direction-1].basePosition.col != point[::input_n-1].aspect
::players[direction-1].basePosition.col != point[::new_input].aspect
::players[direction-1].basePosition.col != point[direction].aspect
::players[direction-1].basePosition.col != point[direction-1].aspect
::players[::input_n].basePosition.row >= ::players[::new_input].basePosition.row
::players[::input_n].basePosition.row <= ::players[direction].basePosition.row
::players[::input_n].basePosition.row != ::players[direction-1].basePosition.row
::players[::input_n].basePosition.row > ::players[direction].impulse[3][0]
::players[::input_n].basePosition.row > ::players[direction-1].impulse[3][0]
::players[::input_n].basePosition.row > ::players[::new_input].direction
::players[::input_n].basePosition.row > ::players[direction].direction
::players[::input_n].basePosition.row > ::players[direction-1].direction
::players[::input_n].basePosition.row > ::players[::new_input].stepCounter
::players[::input_n].basePosition.row > ::players[direction].stepCounter
::players[::input_n].basePosition.row > ::players[direction-1].stepCounter
::players[::input_n].basePosition.row != point[::input_n].aspect
::players[::input_n].basePosition.row < point[::input_n-1].aspect
::players[::input_n].basePosition.row != point[::new_input].aspect
::players[::input_n].basePosition.row != point[direction].aspect
::players[::input_n].basePosition.row != point[direction-1].aspect
::players[::new_input].basePosition.row <= ::players[direction].basePosition.row
::players[::new_input].basePosition.row > ::players[direction].impulse[3][0]
::players[::new_input].basePosition.row > ::players[direction-1].impulse[3][0]
::players[::new_input].basePosition.row > ::players[::new_input].direction
::players[::new_input].basePosition.row > ::players[direction].direction
::players[::new_input].basePosition.row > ::players[direction-1].direction
::players[::new_input].basePosition.row >= ::players[::input_n].stepCounter
::players[::new_input].basePosition.row > ::players[::new_input].stepCounter
::players[::new_input].basePosition.row >= ::players[direction].stepCounter
::players[::new_input].basePosition.row > ::players[direction-1].stepCounter
::players[::new_input].basePosition.row != point[::input_n].aspect
::players[::new_input].basePosition.row < point[::input_n-1].aspect
::players[::new_input].basePosition.row != point[::new_input].aspect
::players[::new_input].basePosition.row != point[direction].aspect
::players[::new_input].basePosition.row != point[direction-1].aspect
::players[direction].basePosition.row >= ::players[direction-1].basePosition.row
::players[direction].basePosition.row > ::players[direction].impulse[3][0]
::players[direction].basePosition.row > ::players[direction-1].impulse[3][0]
::players[direction].basePosition.row > ::players[::new_input].direction
::players[direction].basePosition.row > ::players[direction].direction
::players[direction].basePosition.row > ::players[direction-1].direction
::players[direction].basePosition.row > ::players[::input_n].stepCounter
::players[direction].basePosition.row > ::players[::new_input].stepCounter
::players[direction].basePosition.row > ::players[direction].stepCounter
::players[direction].basePosition.row > ::players[direction-1].stepCounter
::players[direction].basePosition.row != point[::input_n].aspect
::players[direction].basePosition.row < point[::input_n-1].aspect
::players[direction].basePosition.row != point[::new_input].aspect
::players[direction].basePosition.row != point[direction].aspect
::players[direction].basePosition.row != point[direction-1].aspect
::players[direction-1].basePosition.row > ::players[direction].impulse[3][0]
::players[direction-1].basePosition.row > ::players[direction-1].impulse[3][0]
::players[direction-1].basePosition.row > ::players[::new_input].direction
::players[direction-1].basePosition.row > ::players[direction].direction
::players[direction-1].basePosition.row > ::players[direction-1].direction
::players[direction-1].basePosition.row >= ::players[::input_n].stepCounter
::players[::new_input].stepCounter % ::players[direction-1].basePosition.row == 0
::players[direction-1].basePosition.row >= ::players[::new_input].stepCounter
::players[direction-1].basePosition.row >= ::players[direction].stepCounter
::players[direction-1].basePosition.row > ::players[direction-1].stepCounter
::players[direction-1].basePosition.row != point[::input_n].aspect
::players[direction-1].basePosition.row < point[::input_n-1].aspect
::players[direction-1].basePosition.row != point[::new_input].aspect
::players[direction-1].basePosition.row != point[direction].aspect
::players[direction-1].basePosition.row != point[direction-1].aspect
::players[direction].impulse[3][0] >= ::players[direction-1].impulse[3][0]
::players[direction].impulse[3][0] <= ::players[::new_input].direction
::players[direction].impulse[3][0] < ::players[direction-1].direction
::players[direction].impulse[3][0] < ::players[::input_n].stepCounter
::players[direction].impulse[3][0] < ::players[direction].stepCounter
::players[direction].impulse[3][0] <= ::players[direction-1].stepCounter
::players[direction].impulse[3][0] < point[::input_n-1].position.col
::players[direction].impulse[3][0] < point[::input_n-1].position.row
::players[direction].impulse[3][0] <= point[::input_n].aspect
::players[direction].impulse[3][0] < point[::input_n-1].aspect
::players[direction].impulse[3][0] <= point[::new_input].position.col
::players[direction].impulse[3][0] <= point[::new_input].position.row
::players[direction].impulse[3][0] <= point[::new_input].aspect
::players[direction].impulse[3][0] <= point[direction].aspect
::players[direction].impulse[3][0] <= point[direction-1].aspect
::players[direction-1].impulse[3][0] <= ::players[::new_input].direction
::players[direction-1].impulse[3][0] < ::players[direction-1].direction
::players[direction-1].impulse[3][0] < ::players[::input_n].stepCounter
::players[direction-1].impulse[3][0] < ::players[direction].stepCounter
::players[direction-1].impulse[3][0] < point[::input_n-1].position.col
::players[direction-1].impulse[3][0] < point[::input_n-1].position.row
::players[direction-1].impulse[3][0] <= point[::input_n].aspect
::players[direction-1].impulse[3][0] < point[::input_n-1].aspect
::players[direction-1].impulse[3][0] <= point[::new_input].position.col
::players[direction-1].impulse[3][0] <= point[::new_input].position.row
::players[direction-1].impulse[3][0] <= point[::new_input].aspect
::players[direction-1].impulse[3][0] <= point[direction].aspect
::players[direction-1].impulse[3][0] <= point[direction-1].aspect
::players[::new_input].direction <= ::players[direction-1].direction
::players[::new_input].direction < ::players[::input_n].stepCounter
::players[::new_input].direction != ::players[::new_input].stepCounter
::players[::new_input].direction < ::players[direction].stepCounter
::players[::new_input].direction < point[::input_n-1].position.col
::players[::new_input].direction <= point[::input_n-1].position.row
::players[::new_input].direction < point[::input_n-1].aspect
::players[::new_input].direction <= point[::new_input].position.col
::players[::new_input].direction <= point[::new_input].position.row
::players[::new_input].direction <= point[::new_input].aspect
::players[::new_input].direction != point[direction-1].position.col
::players[::new_input].direction != point[direction-1].position.row
::players[::new_input].direction != point[direction-1].aspect
::players[direction].direction <= ::players[direction-1].direction
::players[direction].direction < ::players[::input_n].stepCounter
::players[direction].direction < ::players[direction].stepCounter
::players[direction].direction <= ::players[direction-1].stepCounter
::players[direction].direction < point[::input_n-1].position.col
::players[direction].direction <= point[::input_n-1].position.row
::players[direction].direction < point[::input_n-1].aspect
::players[direction].direction <= point[::new_input].position.col
::players[direction].direction <= point[::new_input].position.row
::players[direction].direction <= point[::new_input].aspect
::players[direction].direction != point[direction-1].aspect
::players[direction-1].direction < ::players[::input_n].stepCounter
::players[direction-1].direction != ::players[::new_input].stepCounter
::players[direction-1].direction < ::players[direction].stepCounter
::players[direction-1].direction != ::players[direction-1].stepCounter
::players[direction-1].direction != point[::input_n].position.col
::players[direction-1].direction != point[::input_n-1].position.col
::players[direction-1].direction != point[::input_n].position.row
::players[direction-1].direction != point[::input_n-1].position.row
::players[direction-1].direction != point[::input_n].aspect
::players[direction-1].direction < point[::input_n-1].aspect
::players[direction-1].direction != point[::new_input].position.col
::players[direction-1].direction != point[::new_input].position.row
::players[direction-1].direction != point[::new_input].aspect
::players[direction-1].direction != point[direction].position.col
::players[direction-1].direction != point[direction-1].position.col
::players[direction-1].direction != point[direction].position.row
::players[direction-1].direction != point[direction-1].position.row
::players[direction-1].direction != point[direction].aspect
::players[direction-1].direction != point[direction-1].aspect
::players[::input_n].stepCounter >= ::players[::new_input].stepCounter
::players[::input_n].stepCounter >= ::players[direction].stepCounter
::players[::input_n].stepCounter > ::players[direction-1].stepCounter
::players[::input_n].stepCounter != point[::input_n].aspect
::players[::input_n].stepCounter < point[::input_n-1].aspect
::players[::input_n].stepCounter != point[::new_input].aspect
::players[::input_n].stepCounter != point[direction].aspect
::players[::input_n].stepCounter != point[direction-1].aspect
::players[::new_input].stepCounter % ::players[direction].stepCounter == 0
::players[::new_input].stepCounter <= ::players[direction].stepCounter
::players[::new_input].stepCounter < point[::input_n-1].position.col
::players[::new_input].stepCounter < point[::input_n-1].position.row
::players[::new_input].stepCounter < point[::input_n-1].aspect
::players[::new_input].stepCounter != point[::new_input].position.col
::players[::new_input].stepCounter != point[::new_input].position.row
::players[::new_input].stepCounter != point[::new_input].aspect
::players[::new_input].stepCounter <= point[direction-1].position.col
::players[::new_input].stepCounter <= point[direction-1].position.row
::players[::new_input].stepCounter <= point[direction-1].aspect
::players[direction].stepCounter >= ::players[direction-1].stepCounter
::players[direction].stepCounter != point[::input_n].aspect
::players[direction].stepCounter < point[::input_n-1].aspect
::players[direction].stepCounter != point[::new_input].aspect
::players[direction].stepCounter != point[direction].aspect
::players[direction].stepCounter != point[direction-1].aspect
::players[direction-1].stepCounter != point[::input_n-1].position.row
::players[direction-1].stepCounter < point[::input_n-1].aspect
::players[direction-1].stepCounter <= point[::new_input].aspect
::players[direction-1].stepCounter != point[direction-1].position.col
::players[direction-1].stepCounter != point[direction-1].position.row
::players[direction-1].stepCounter != point[direction-1].aspect
point[::input_n].position.col != point[::input_n-1].position.col
point[::input_n-1].position.col != point[::input_n-1].aspect
point[::input_n-1].position.col != point[direction].position.col
point[::input_n-1].position.col != point[direction-1].aspect
point[::input_n].position.row <= point[::input_n].aspect
point[::input_n].position.row < point[::input_n-1].aspect
point[::input_n].position.row <= point[::new_input].aspect
point[::input_n-1].position.row != point[::input_n].aspect
point[::input_n-1].position.row < point[::input_n-1].aspect
point[::input_n-1].position.row != point[::new_input].aspect
point[::input_n-1].position.row != point[direction].aspect
point[::input_n-1].position.row != point[direction-1].aspect
point[::input_n].aspect >= point[direction].position.row
point[::input_n-1].aspect > point[::new_input].position.row
point[::input_n-1].aspect != point[direction-1].position.col
point[::input_n-1].aspect > point[direction].position.row
point[::input_n-1].aspect > point[direction-1].position.row
point[::new_input].position.row <= point[::new_input].aspect
point[::new_input].position.row != point[direction-1].aspect
point[::new_input].aspect >= point[direction].position.row
point[::new_input].aspect != point[direction-1].position.row
point[direction].position.row <= point[direction].aspect
point[direction].position.row <= point[direction-1].aspect
point[direction-1].position.row <= point[direction-1].aspect
===========================================================================
..movePointInMap():::EXIT
::crashedPlayers == orig(::crashedPlayers)
::crashedPlayers[] == orig(::crashedPlayers[])
::crashedPlayers[].start == ::crashedPlayers[].end
::crashedPlayers[].start == ::playerSpace[].playerNodes->start->prev
::crashedPlayers[].start == ::playerSpace[].playerNodes->end->next
::crashedPlayers[].start == ::playerSpace[].guideNodes->start
::crashedPlayers[].start == ::playerSpace[].guideNodes->end
::crashedPlayers[].start == space[].playerNodes->start->prev
::crashedPlayers[].start == space[].playerNodes->end->next
::crashedPlayers[].start == space[].guideNodes->start
::crashedPlayers[].start == space[].guideNodes->end
::crashedPlayers[].start == orig(::crashedPlayers[].start)
::crashedPlayers[].start == orig(::crashedPlayers[].end)
::crashedPlayers[].start == orig(::playerSpace[].playerNodes->start->prev)
::crashedPlayers[].start == orig(::playerSpace[].playerNodes->end->next)
::crashedPlayers[].start == orig(::playerSpace[].guideNodes->start)
::crashedPlayers[].start == orig(::playerSpace[].guideNodes->end)
::crashedPlayers[].start == orig(space[].playerNodes->start->prev)
::crashedPlayers[].start == orig(space[].playerNodes->end->next)
::crashedPlayers[].start == orig(space[].guideNodes->start)
::crashedPlayers[].start == orig(space[].guideNodes->end)
::playerSpace == orig(::playerSpace)
::playerSpace == orig(space)
::playerSpace[] == space[]
::playerSpace[] == orig(::playerSpace[])
::playerSpace[] == orig(space[])
::playerSpace[].playerNodes == space[].playerNodes
::playerSpace[].playerNodes == orig(::playerSpace[].playerNodes)
::playerSpace[].playerNodes == orig(space[].playerNodes)
::playerSpace[].playerNodes[0] == space[].playerNodes[0]
::playerSpace[].playerNodes[0] == orig(::playerSpace[].playerNodes[0])
::playerSpace[].playerNodes[0] == orig(space[].playerNodes[0])
::playerSpace[].playerNodes->start == space[].playerNodes->start
::playerSpace[].playerNodes->start == orig(::playerSpace[].playerNodes->start)
::playerSpace[].playerNodes->start == orig(space[].playerNodes->start)
::playerSpace[].playerNodes->start[0] == space[].playerNodes->start[0]
::playerSpace[].playerNodes->start[0] == orig(::playerSpace[].playerNodes->start[0])
::playerSpace[].playerNodes->start[0] == orig(space[].playerNodes->start[0])
::playerSpace[].playerNodes->start->next == space[].playerNodes->start->next
::playerSpace[].playerNodes->start->next == orig(::playerSpace[].playerNodes->start->next)
::playerSpace[].playerNodes->start->next == orig(space[].playerNodes->start->next)
::playerSpace[].playerNodes->start->next[0] == space[].playerNodes->start->next[0]
::playerSpace[].playerNodes->start->next[0] == orig(::playerSpace[].playerNodes->start->next[0])
::playerSpace[].playerNodes->start->next[0] == orig(space[].playerNodes->start->next[0])
::playerSpace[].playerNodes->start->data == space[].playerNodes->start->data
::playerSpace[].playerNodes->start->data == orig(::playerSpace[].playerNodes->start->data)
::playerSpace[].playerNodes->start->data == orig(space[].playerNodes->start->data)
::playerSpace[].playerNodes->end == space[].playerNodes->end
::playerSpace[].playerNodes->end == orig(::playerSpace[].playerNodes->end)
::playerSpace[].playerNodes->end == orig(space[].playerNodes->end)
::playerSpace[].playerNodes->end[0] == space[].playerNodes->end[0]
::playerSpace[].playerNodes->end[0] == orig(::playerSpace[].playerNodes->end[0])
::playerSpace[].playerNodes->end[0] == orig(space[].playerNodes->end[0])
::playerSpace[].playerNodes->end->data == space[].playerNodes->end->data
::playerSpace[].playerNodes->end->data == orig(::playerSpace[].playerNodes->end->data)
::playerSpace[].playerNodes->end->data == orig(space[].playerNodes->end->data)
::playerSpace[].playerNodes->end->prev == space[].playerNodes->end->prev
::playerSpace[].playerNodes->end->prev == orig(::playerSpace[].playerNodes->end->prev)
::playerSpace[].playerNodes->end->prev == orig(space[].playerNodes->end->prev)
::playerSpace[].playerNodes->end->prev[0] == space[].playerNodes->end->prev[0]
::playerSpace[].playerNodes->end->prev[0] == orig(::playerSpace[].playerNodes->end->prev[0])
::playerSpace[].playerNodes->end->prev[0] == orig(space[].playerNodes->end->prev[0])
::playerSpace[].playerMap == space[].playerMap
::playerSpace[].playerMap == orig(::playerSpace[].playerMap)
::playerSpace[].playerMap == orig(space[].playerMap)
::playerSpace[].guideNodes == space[].guideNodes
::playerSpace[].guideNodes == orig(::playerSpace[].guideNodes)
::playerSpace[].guideNodes == orig(space[].guideNodes)
::playerSpace[].guideNodes[0] == space[].guideNodes[0]
::playerSpace[].guideNodes[0] == orig(::playerSpace[].guideNodes[0])
::playerSpace[].guideNodes[0] == orig(space[].guideNodes[0])
::playerSpace[].groundMap == space[].groundMap
::playerSpace[].groundMap == orig(::playerSpace[].groundMap)
::playerSpace[].groundMap == orig(space[].groundMap)
::playerSpace[].actionGroup == space[].actionGroup
::playerSpace[].actionGroup == orig(::playerSpace[].actionGroup)
::playerSpace[].actionGroup == orig(space[].actionGroup)
::playerSpace[].actionGroup[0] == space[].actionGroup[0]
::playerSpace[].actionGroup[0] == orig(::playerSpace[].actionGroup[0])
::playerSpace[].actionGroup[0] == orig(space[].actionGroup[0])
::playerSpace[].actionGroup->numActions == space[].actionGroup->numActions
::playerSpace[].actionGroup->numActions == orig(::playerSpace[].actionGroup->numActions)
::playerSpace[].actionGroup->numActions == orig(space[].actionGroup->numActions)
::players == orig(::players)
::players == ::players[::input_n-1].body.bodyPoints->player
::players[] == orig(::players[])
::players[].id == ::players[].type
::players[].id == ::players[].retired
::players[].id == ::players[].impulse[2][0]
::players[].id == ::players[].impulse[4][0]
::players[].id == ::players[].impulse[6][0]
::players[].id == ::players[].impulse[8][0]
::players[].id == orig(::players[].id)
::players[].id == orig(::players[].type)
::players[].id == orig(::players[].retired)
::players[].id == orig(::players[].impulse[2][0])
::players[].id == orig(::players[].impulse[4][0])
::players[].id == orig(::players[].impulse[6][0])
::players[].id == orig(::players[].impulse[8][0])
::players[].body == orig(::players[].body)
::players[].body.type == orig(::players[].body.type)
::players[].body.visible == ::players[].body.tangible
::players[].body.visible == orig(::players[].body.visible)
::players[].body.visible == orig(::players[].body.tangible)
::players[].body.bodyPoints == orig(::players[].body.bodyPoints)
::players[].body.bodyPoints[0] == orig(::players[].body.bodyPoints[0])
::players[].body.bodyPoints->position == orig(::players[].body.bodyPoints->position)
::players[].body.bodyPoints->player == orig(::players[].body.bodyPoints->player)
::players[].body.bodyPoints->player[0] == orig(::players[].body.bodyPoints->player[0])
::players[].body.bodyPoints->aspect == orig(::players[].body.bodyPoints->aspect)
::players[].body.bodyMaps == orig(::players[].body.bodyMaps)
::players[].body.bodyMapsSize == orig(::players[].body.bodyMapsSize)
::players[].body.bodySize == orig(::players[].body.bodySize)
::players[].body.bodyWidth == orig(::players[].body.bodyWidth)
::players[].body.bodyHeight == orig(::players[].body.bodyHeight)
::players[].body.color == orig(::players[].body.color)
::players[].basePosition == orig(::players[].basePosition)
::players[].basePosition.col == orig(::players[].basePosition.col)
::players[].basePosition.row == orig(::players[].basePosition.row)
::players[].impulse[0] == orig(::players[].impulse[0])
::players[].impulse[0][0] == orig(::players[].impulse[0][0])
::players[].impulse[1] == orig(::players[].impulse[1])
::players[].impulse[1][0] == orig(::players[].impulse[1][0])
::players[].impulse[2] == orig(::players[].impulse[2])
::players[].impulse[3] == orig(::players[].impulse[3])
::players[].impulse[3][0] == orig(::players[].impulse[3][0])
::players[].impulse[4] == orig(::players[].impulse[4])
::players[].impulse[5] == orig(::players[].impulse[5])
::players[].impulse[5][0] == orig(::players[].impulse[5][0])
::players[].impulse[6] == orig(::players[].impulse[6])
::players[].impulse[7] == orig(::players[].impulse[7])
::players[].impulse[7][0] == orig(::players[].impulse[7][0])
::players[].impulse[8] == orig(::players[].impulse[8])
::players[].direction == orig(::players[].direction)
::players[].magnetos == orig(::players[].magnetos)
::players[].magnetos[0] == orig(::players[].magnetos[0])
::players[].stepCounter == orig(::players[].stepCounter)
::players[].pilot == orig(::players[].pilot)
::players[].onCrash == orig(::players[].onCrash)
::players[].onPushed == orig(::players[].onPushed)
::snakeBodyMap == orig(::snakeBodyMap)
::trainBodyMap == orig(::trainBodyMap)
::giantBodyMap == orig(::giantBodyMap)
::squareBodyMap == orig(::squareBodyMap)
::circleBodyMap == orig(::circleBodyMap)
::input_n == ::input_i
::input_n == orig(::input_n)
::input_n == orig(::input_i)
::input_n == size(::crashedPlayers[])
::input_n == size(::playerSpace[])
::input_n == size(::playerSpace[].playerNodes[0])
::input_n == size(::playerSpace[].playerNodes->start[0])
::input_n == size(::playerSpace[].playerNodes->start->next[0])
::input_n == size(::playerSpace[].playerNodes->end[0])
::input_n == size(::playerSpace[].playerNodes->end->prev[0])
::input_n == size(::playerSpace[].guideNodes[0])
::input_n == size(::playerSpace[].actionGroup[0])
::input_n == orig(size(::crashedPlayers[]))
::input_n == orig(size(::playerSpace[]))
::input_n == orig(size(::playerSpace[].playerNodes[0]))
::input_n == orig(size(::playerSpace[].playerNodes->start[0]))
::input_n == orig(size(::playerSpace[].playerNodes->start->next[0]))
::input_n == orig(size(::playerSpace[].playerNodes->end[0]))
::input_n == orig(size(::playerSpace[].playerNodes->end->prev[0]))
::input_n == orig(size(::playerSpace[].guideNodes[0]))
::input_n == orig(size(::playerSpace[].actionGroup[0]))
::input_n == orig(size(space[]))
::input_n == orig(size(space[].playerNodes[0]))
::input_n == orig(size(space[].playerNodes->start[0]))
::input_n == orig(size(space[].playerNodes->start->next[0]))
::input_n == orig(size(space[].playerNodes->end[0]))
::input_n == orig(size(space[].playerNodes->end->prev[0]))
::input_n == orig(size(space[].guideNodes[0]))
::input_n == orig(size(space[].actionGroup[0]))
::input_n == ::players[::input_n].body.type
::input_n == ::players[::input_i].body.type
::input_n == ::players[orig(::input_n)].body.type
::input_n == ::players[orig(::input_i)].body.type
::input_n == ::players[orig(direction)].body.type
::input_n == ::players[::input_n].body.visible
::input_n == ::players[::input_n-1].body.visible
::input_n == ::players[::input_i].body.visible
::input_n == ::players[::input_i-1].body.visible
::input_n == ::players[::new_input].body.visible
::input_n == ::players[orig(::input_n)].body.visible
::input_n == ::players[orig(::input_n)-1].body.visible
::input_n == ::players[orig(::input_i)].body.visible
::input_n == ::players[orig(::input_i)-1].body.visible
::input_n == ::players[orig(::new_input)].body.visible
::input_n == ::players[orig(direction)].body.visible
::input_n == ::players[orig(direction)-1].body.visible
::input_n == ::players[::input_n].body.tangible
::input_n == ::players[::input_n-1].body.tangible
::input_n == ::players[::input_i].body.tangible
::input_n == ::players[::input_i-1].body.tangible
::input_n == ::players[::new_input].body.tangible
::input_n == ::players[orig(::input_n)].body.tangible
::input_n == ::players[orig(::input_n)-1].body.tangible
::input_n == ::players[orig(::input_i)].body.tangible
::input_n == ::players[orig(::input_i)-1].body.tangible
::input_n == ::players[orig(::new_input)].body.tangible
::input_n == ::players[orig(direction)].body.tangible
::input_n == ::players[orig(direction)-1].body.tangible
::input_n == ::players[::input_n].body.bodyMapsSize
::input_n == ::players[::input_i].body.bodyMapsSize
::input_n == ::players[orig(::input_n)].body.bodyMapsSize
::input_n == ::players[orig(::input_i)].body.bodyMapsSize
::input_n == ::players[orig(direction)].body.bodyMapsSize
::input_n == ::players[::input_n].body.bodySize
::input_n == ::players[::input_i].body.bodySize
::input_n == ::players[orig(::input_n)].body.bodySize
::input_n == ::players[orig(::input_i)].body.bodySize
::input_n == ::players[orig(direction)].body.bodySize
::input_n == ::players[::input_n-1].direction
::input_n == ::players[::input_i-1].direction
::input_n == ::players[orig(::input_n)-1].direction
::input_n == ::players[orig(::input_i)-1].direction
::input_n == orig(::players[post(::input_n)].body.type)
::input_n == orig(::players[post(::input_n)].body.visible)
::input_n == orig(::players[post(::input_n)-1].body.visible)
::input_n == orig(::players[post(::input_n)].body.tangible)
::input_n == orig(::players[post(::input_n)-1].body.tangible)
::input_n == orig(::players[post(::input_n)].body.bodyMapsSize)
::input_n == orig(::players[post(::input_n)].body.bodySize)
::input_n == orig(::players[post(::input_n)-1].direction)
::input_n == orig(::players[post(::input_i)].body.type)
::input_n == orig(::players[post(::input_i)].body.visible)
::input_n == orig(::players[post(::input_i)-1].body.visible)
::input_n == orig(::players[post(::input_i)].body.tangible)
::input_n == orig(::players[post(::input_i)-1].body.tangible)
::input_n == orig(::players[post(::input_i)].body.bodyMapsSize)
::input_n == orig(::players[post(::input_i)].body.bodySize)
::input_n == orig(::players[post(::input_i)-1].direction)
::input_n == orig(::players[post(::new_input)].body.visible)
::input_n == orig(::players[post(::new_input)].body.tangible)
::input_n == orig(::players[post(direction)].body.type)
::input_n == orig(::players[post(direction)].body.visible)
::input_n == orig(::players[post(direction)-1].body.visible)
::input_n == orig(::players[post(direction)].body.tangible)
::input_n == orig(::players[post(direction)-1].body.tangible)
::input_n == orig(::players[post(direction)].body.bodyMapsSize)
::input_n == orig(::players[post(direction)].body.bodySize)
::input_n == orig(::players[::input_n].body.type)
::input_n == orig(::players[::input_i].body.type)
::input_n == orig(::players[direction].body.type)
::input_n == orig(::players[::input_n].body.visible)
::input_n == orig(::players[::input_n-1].body.visible)
::input_n == orig(::players[::input_i].body.visible)
::input_n == orig(::players[::input_i-1].body.visible)
::input_n == orig(::players[::new_input].body.visible)
::input_n == orig(::players[direction].body.visible)
::input_n == orig(::players[direction-1].body.visible)
::input_n == orig(::players[::input_n].body.tangible)
::input_n == orig(::players[::input_n-1].body.tangible)
::input_n == orig(::players[::input_i].body.tangible)
::input_n == orig(::players[::input_i-1].body.tangible)
::input_n == orig(::players[::new_input].body.tangible)
::input_n == orig(::players[direction].body.tangible)
::input_n == orig(::players[direction-1].body.tangible)
::input_n == orig(::players[::input_n].body.bodyMapsSize)
::input_n == orig(::players[::input_i].body.bodyMapsSize)
::input_n == orig(::players[direction].body.bodyMapsSize)
::input_n == orig(::players[::input_n].body.bodySize)
::input_n == orig(::players[::input_i].body.bodySize)
::input_n == orig(::players[direction].body.bodySize)
::input_n == orig(::players[::input_n-1].direction)
::input_n == orig(::players[::input_i-1].direction)
::new_input == orig(::new_input)
::new_input == ::players[::new_input].body.type
::new_input == ::players[orig(::new_input)].body.type
::new_input == ::players[::input_n].impulse[0][0]
::new_input == ::players[::input_i].impulse[0][0]
::new_input == ::players[::new_input].impulse[0][0]
::new_input == ::players[orig(::input_n)].impulse[0][0]
::new_input == ::players[orig(::input_i)].impulse[0][0]
::new_input == ::players[orig(::new_input)].impulse[0][0]
::new_input == ::players[orig(direction)].impulse[0][0]
::new_input == ::players[::input_n-1].impulse[1][0]
::new_input == ::players[::input_i-1].impulse[1][0]
::new_input == ::players[orig(::input_n)-1].impulse[1][0]
::new_input == ::players[orig(::input_i)-1].impulse[1][0]
::new_input == ::players[orig(direction)-1].impulse[1][0]
::new_input == orig(::players[post(::input_n)].impulse[0][0])
::new_input == orig(::players[post(::input_n)-1].impulse[1][0])
::new_input == orig(::players[post(::input_i)].impulse[0][0])
::new_input == orig(::players[post(::input_i)-1].impulse[1][0])
::new_input == orig(::players[post(::new_input)].body.type)
::new_input == orig(::players[post(::new_input)].impulse[0][0])
::new_input == orig(::players[post(direction)].impulse[0][0])
::new_input == orig(::players[post(direction)-1].impulse[1][0])
::new_input == orig(::players[::new_input].body.type)
::new_input == orig(::players[::input_n].impulse[0][0])
::new_input == orig(::players[::input_i].impulse[0][0])
::new_input == orig(::players[::new_input].impulse[0][0])
::new_input == orig(::players[direction].impulse[0][0])
::new_input == orig(::players[::input_n-1].impulse[1][0])
::new_input == orig(::players[::input_i-1].impulse[1][0])
::new_input == orig(::players[direction-1].impulse[1][0])
::input_key == orig(::input_key)
::trace_pos == orig(::trace_pos)
point[] == orig(point[])
point[].position == orig(point[].position)
point[].player == orig(point[].player)
point[].player[0] == orig(point[].player[0])
point[].player->body == orig(point[].player->body)
point[].player->body.bodyPoints[0] == orig(point[].player->body.bodyPoints[0])
point[].player->basePosition == orig(point[].player->basePosition)
point[].aspect == orig(point[].aspect)
size(::crashedPlayers[])-1 == ::playerSpace[::input_n-1].actionGroup->numActions
size(::crashedPlayers[])-1 == ::playerSpace[::input_i-1].actionGroup->numActions
size(::crashedPlayers[])-1 == ::playerSpace[orig(::input_n)-1].actionGroup->numActions
size(::crashedPlayers[])-1 == ::playerSpace[orig(::input_i)-1].actionGroup->numActions
size(::crashedPlayers[])-1 == ::players[::input_n].id
size(::crashedPlayers[])-1 == ::players[::input_n-1].id
size(::crashedPlayers[])-1 == ::players[::input_i].id
size(::crashedPlayers[])-1 == ::players[::input_i-1].id
size(::crashedPlayers[])-1 == ::players[::new_input].id
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].id
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].id
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].id
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].id
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].id
size(::crashedPlayers[])-1 == ::players[orig(direction)].id
size(::crashedPlayers[])-1 == ::players[orig(direction)-1].id
size(::crashedPlayers[])-1 == ::players[::input_n].type
size(::crashedPlayers[])-1 == ::players[::input_n-1].type
size(::crashedPlayers[])-1 == ::players[::input_i].type
size(::crashedPlayers[])-1 == ::players[::input_i-1].type
size(::crashedPlayers[])-1 == ::players[::new_input].type
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].type
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].type
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].type
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].type
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].type
size(::crashedPlayers[])-1 == ::players[orig(direction)].type
size(::crashedPlayers[])-1 == ::players[orig(direction)-1].type
size(::crashedPlayers[])-1 == ::players[::input_n].retired
size(::crashedPlayers[])-1 == ::players[::input_n-1].retired
size(::crashedPlayers[])-1 == ::players[::input_i].retired
size(::crashedPlayers[])-1 == ::players[::input_i-1].retired
size(::crashedPlayers[])-1 == ::players[::new_input].retired
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].retired
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].retired
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].retired
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].retired
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].retired
size(::crashedPlayers[])-1 == ::players[orig(direction)].retired
size(::crashedPlayers[])-1 == ::players[orig(direction)-1].retired
size(::crashedPlayers[])-1 == ::players[::input_n-1].body.type
size(::crashedPlayers[])-1 == ::players[::input_i-1].body.type
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].body.type
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].body.type
size(::crashedPlayers[])-1 == ::players[::input_n].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[::input_i].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[orig(direction)].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[::input_n].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[::input_i].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[orig(direction)].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[::input_n].body.color
size(::crashedPlayers[])-1 == ::players[::input_i].body.color
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].body.color
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].body.color
size(::crashedPlayers[])-1 == ::players[::input_n].basePosition.col
size(::crashedPlayers[])-1 == ::players[::input_i].basePosition.col
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].basePosition.col
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].basePosition.col
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[orig(direction)-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_n].direction
size(::crashedPlayers[])-1 == ::players[::input_i].direction
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].direction
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].direction
size(::crashedPlayers[])-1 == ::players[::input_n-1].stepCounter
size(::crashedPlayers[])-1 == ::players[::input_i-1].stepCounter
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].stepCounter
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].stepCounter
size(::crashedPlayers[])-1 == space[::input_n-1].actionGroup->numActions
size(::crashedPlayers[])-1 == orig(::playerSpace[post(::input_n)-1].actionGroup->numActions)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].id)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].id)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].type)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].type)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].retired)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].retired)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].body.type)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].body.bodyWidth)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].body.bodyHeight)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].body.color)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].basePosition.col)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[0][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].direction)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].stepCounter)
size(::crashedPlayers[])-1 == orig(space[post(::input_n)-1].actionGroup->numActions)
size(::crashedPlayers[])-1 == space[::input_i-1].actionGroup->numActions
size(::crashedPlayers[])-1 == orig(::playerSpace[post(::input_i)-1].actionGroup->numActions)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].id)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].id)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].type)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].type)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].retired)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].retired)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].body.type)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].body.bodyWidth)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].body.bodyHeight)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].body.color)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].basePosition.col)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[0][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].direction)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].stepCounter)
size(::crashedPlayers[])-1 == orig(space[post(::input_i)-1].actionGroup->numActions)
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].id)
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].type)
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].retired)
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[8][0])
size(::crashedPlayers[])-1 == space[orig(::input_n)-1].actionGroup->numActions
size(::crashedPlayers[])-1 == space[orig(::input_i)-1].actionGroup->numActions
size(::crashedPlayers[])-1 == orig(::players[post(direction)].id)
size(::crashedPlayers[])-1 == orig(::players[post(direction)-1].id)
size(::crashedPlayers[])-1 == orig(::players[post(direction)].type)
size(::crashedPlayers[])-1 == orig(::players[post(direction)-1].type)
size(::crashedPlayers[])-1 == orig(::players[post(direction)].retired)
size(::crashedPlayers[])-1 == orig(::players[post(direction)-1].retired)
size(::crashedPlayers[])-1 == orig(::players[post(direction)].body.bodyWidth)
size(::crashedPlayers[])-1 == orig(::players[post(direction)].body.bodyHeight)
size(::crashedPlayers[])-1 == orig(::players[post(direction)-1].impulse[0][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)-1].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)-1].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)-1].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)-1].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)-1].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[post(direction)-1].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::playerSpace[::input_n-1].actionGroup->numActions)
size(::crashedPlayers[])-1 == orig(::playerSpace[::input_i-1].actionGroup->numActions)
size(::crashedPlayers[])-1 == orig(::players[::input_n].id)
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].id)
size(::crashedPlayers[])-1 == orig(::players[::input_i].id)
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].id)
size(::crashedPlayers[])-1 == orig(::players[::new_input].id)
size(::crashedPlayers[])-1 == orig(::players[direction].id)
size(::crashedPlayers[])-1 == orig(::players[direction-1].id)
size(::crashedPlayers[])-1 == orig(::players[::input_n].type)
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].type)
size(::crashedPlayers[])-1 == orig(::players[::input_i].type)
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].type)
size(::crashedPlayers[])-1 == orig(::players[::new_input].type)
size(::crashedPlayers[])-1 == orig(::players[direction].type)
size(::crashedPlayers[])-1 == orig(::players[direction-1].type)
size(::crashedPlayers[])-1 == orig(::players[::input_n].retired)
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].retired)
size(::crashedPlayers[])-1 == orig(::players[::input_i].retired)
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].retired)
size(::crashedPlayers[])-1 == orig(::players[::new_input].retired)
size(::crashedPlayers[])-1 == orig(::players[direction].retired)
size(::crashedPlayers[])-1 == orig(::players[direction-1].retired)
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].body.type)
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].body.type)
size(::crashedPlayers[])-1 == orig(::players[::input_n].body.bodyWidth)
size(::crashedPlayers[])-1 == orig(::players[::input_i].body.bodyWidth)
size(::crashedPlayers[])-1 == orig(::players[direction].body.bodyWidth)
size(::crashedPlayers[])-1 == orig(::players[::input_n].body.bodyHeight)
size(::crashedPlayers[])-1 == orig(::players[::input_i].body.bodyHeight)
size(::crashedPlayers[])-1 == orig(::players[direction].body.bodyHeight)
size(::crashedPlayers[])-1 == orig(::players[::input_n].body.color)
size(::crashedPlayers[])-1 == orig(::players[::input_i].body.color)
size(::crashedPlayers[])-1 == orig(::players[::input_n].basePosition.col)
size(::crashedPlayers[])-1 == orig(::players[::input_i].basePosition.col)
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[0][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[0][0])
size(::crashedPlayers[])-1 == orig(::players[direction-1].impulse[0][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[direction].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[direction].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[direction-1].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[direction].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[direction-1].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[direction].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[direction-1].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[direction].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[direction-1].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[direction].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[direction-1].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[direction].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[direction-1].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].direction)
size(::crashedPlayers[])-1 == orig(::players[::input_i].direction)
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].stepCounter)
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].stepCounter)
size(::crashedPlayers[])-1 == orig(space[::input_n-1].actionGroup->numActions)
size(::crashedPlayers[])-1 == orig(space[::input_i-1].actionGroup->numActions)
size(::players[]) == size(::players[].body.bodyPoints[0])
size(::players[]) == size(::players[].body.bodyPoints->player[0])
size(::players[]) == size(::players[].impulse[0])
size(::players[]) == size(::players[].impulse[0][0])
size(::players[]) == size(::players[].impulse[1])
size(::players[]) == size(::players[].impulse[1][0])
size(::players[]) == size(::players[].impulse[2])
size(::players[]) == size(::players[].impulse[2][0])
size(::players[]) == size(::players[].impulse[3])
size(::players[]) == size(::players[].impulse[3][0])
size(::players[]) == size(::players[].impulse[4])
size(::players[]) == size(::players[].impulse[4][0])
size(::players[]) == size(::players[].impulse[5])
size(::players[]) == size(::players[].impulse[5][0])
size(::players[]) == size(::players[].impulse[6])
size(::players[]) == size(::players[].impulse[6][0])
size(::players[]) == size(::players[].impulse[7])
size(::players[]) == size(::players[].impulse[7][0])
size(::players[]) == size(::players[].impulse[8])
size(::players[]) == size(::players[].impulse[8][0])
size(::players[]) == size(::players[].magnetos[0])
size(::players[]) == orig(size(::players[].body.bodyPoints[0]))
size(::players[]) == orig(size(::players[].body.bodyPoints->player[0]))
size(::players[]) == orig(size(::players[].impulse[0]))
size(::players[]) == orig(size(::players[].impulse[0][0]))
size(::players[]) == orig(size(::players[].impulse[1]))
size(::players[]) == orig(size(::players[].impulse[1][0]))
size(::players[]) == orig(size(::players[].impulse[2]))
size(::players[]) == orig(size(::players[].impulse[2][0]))
size(::players[]) == orig(size(::players[].impulse[3]))
size(::players[]) == orig(size(::players[].impulse[3][0]))
size(::players[]) == orig(size(::players[].impulse[4]))
size(::players[]) == orig(size(::players[].impulse[4][0]))
size(::players[]) == orig(size(::players[].impulse[5]))
size(::players[]) == orig(size(::players[].impulse[5][0]))
size(::players[]) == orig(size(::players[].impulse[6]))
size(::players[]) == orig(size(::players[].impulse[6][0]))
size(::players[]) == orig(size(::players[].impulse[7]))
size(::players[]) == orig(size(::players[].impulse[7][0]))
size(::players[]) == orig(size(::players[].impulse[8]))
size(::players[]) == orig(size(::players[].impulse[8][0]))
size(::players[]) == orig(size(::players[].magnetos[0]))
::players[::input_n] == ::players[::input_n].body.bodyPoints->player[0]
::players[::input_n] == ::players[::input_i].body.bodyPoints->player[0]
::players[::input_n] == ::players[orig(::input_n)].body.bodyPoints->player[0]
::players[::input_n] == ::players[orig(::input_i)].body.bodyPoints->player[0]
::players[::input_n] == orig(::players[post(::input_n)].body.bodyPoints->player[0])
::players[::input_n] == orig(::players[post(::input_i)].body.bodyPoints->player[0])
::players[::input_n] == orig(::players[::input_n].body.bodyPoints->player[0])
::players[::input_n] == orig(::players[::input_i].body.bodyPoints->player[0])
::players[::input_n-1] == ::players[::input_n-1].body.bodyPoints->player[0]
::players[::input_n-1] == ::players[::input_i-1].body.bodyPoints->player[0]
::players[::input_n-1] == ::players[orig(::input_n)-1].body.bodyPoints->player[0]
::players[::input_n-1] == ::players[orig(::input_i)-1].body.bodyPoints->player[0]
::players[::input_n-1] == orig(::players[post(::input_n)-1].body.bodyPoints->player[0])
::players[::input_n-1] == orig(::players[post(::input_i)-1].body.bodyPoints->player[0])
::players[::input_n-1] == orig(::players[::input_n-1].body.bodyPoints->player[0])
::players[::input_n-1] == orig(::players[::input_i-1].body.bodyPoints->player[0])
::players[::new_input] == ::players[::new_input].body.bodyPoints->player[0]
::players[::new_input] == ::players[orig(::new_input)].body.bodyPoints->player[0]
::players[::new_input] == orig(::players[post(::new_input)].body.bodyPoints->player[0])
::players[::new_input] == orig(::players[::new_input].body.bodyPoints->player[0])
::players[orig(direction)] == ::players[orig(direction)].body.bodyPoints->player[0]
::players[orig(direction)] == orig(::players[post(direction)].body.bodyPoints->player[0])
::players[orig(direction)] == orig(::players[direction].body.bodyPoints->player[0])
::players[orig(direction)-1] == ::players[orig(direction)-1].body.bodyPoints->player[0]
::players[orig(direction)-1] == orig(::players[post(direction)-1].body.bodyPoints->player[0])
::players[orig(direction)-1] == orig(::players[direction-1].body.bodyPoints->player[0])
::players[::input_n].body.bodyPoints->aspect == ::players[orig(direction)].body.bodyPoints->aspect
::players[::input_n].body.bodyPoints->aspect == orig(::players[post(direction)].body.bodyPoints->aspect)
::players[::input_n].body.bodyPoints->aspect == orig(::players[direction].body.bodyPoints->aspect)
::players[::input_n-1].body.bodyMapsSize == ::players[::input_n-1].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize == ::players[::input_i-1].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize == ::players[orig(::input_n)-1].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize == ::players[orig(::input_i)-1].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize == orig(::players[post(::input_n)-1].body.bodyHeight)
::players[::input_n-1].body.bodyMapsSize == orig(::players[post(::input_i)-1].body.bodyHeight)
::players[::input_n-1].body.bodyMapsSize == orig(::players[::input_n-1].body.bodyHeight)
::players[::input_n-1].body.bodyMapsSize == orig(::players[::input_i-1].body.bodyHeight)
::players[::input_n-1].basePosition.row == ::players[::input_n].stepCounter
::players[::input_i-1].basePosition.row == ::players[::input_n].stepCounter
::players[orig(::input_n)-1].basePosition.row == ::players[::input_n].stepCounter
::players[orig(::input_i)-1].basePosition.row == ::players[::input_n].stepCounter
::players[::input_n].stepCounter == orig(::players[post(::input_n)-1].basePosition.row)
::players[::input_n].stepCounter == orig(::players[post(::input_i)-1].basePosition.row)
::players[::input_n].stepCounter == orig(::players[::input_n-1].basePosition.row)
::players[::input_n].stepCounter == orig(::players[::input_i-1].basePosition.row)
::players[::input_n].pilot == ::players[orig(direction)].pilot
::players[::input_n].pilot == orig(::players[post(direction)].pilot)
::players[::input_n].pilot == orig(::players[direction].pilot)
::players[::input_n].onCrash == ::players[orig(direction)].onCrash
::players[::input_n].onCrash == orig(::players[post(direction)].onCrash)
::players[::input_n].onCrash == orig(::players[direction].onCrash)
::players[::input_n].onPushed == ::players[::input_n-1].onPushed
::players[::input_n].onPushed == ::players[::input_i-1].onPushed
::players[::input_n].onPushed == ::players[::new_input].onPushed
::players[::input_n].onPushed == ::players[orig(::input_n)-1].onPushed
::players[::input_n].onPushed == ::players[orig(::input_i)-1].onPushed
::players[::input_n].onPushed == ::players[orig(::new_input)].onPushed
::players[::input_n].onPushed == ::players[orig(direction)].onPushed
::players[::input_n].onPushed == ::players[orig(direction)-1].onPushed
::players[::input_n].onPushed == orig(::players[post(::input_n)-1].onPushed)
::players[::input_n].onPushed == orig(::players[post(::input_i)-1].onPushed)
::players[::input_n].onPushed == orig(::players[post(::new_input)].onPushed)
::players[::input_n].onPushed == orig(::players[post(direction)].onPushed)
::players[::input_n].onPushed == orig(::players[post(direction)-1].onPushed)
::players[::input_n].onPushed == orig(::players[::input_n-1].onPushed)
::players[::input_n].onPushed == orig(::players[::input_i-1].onPushed)
::players[::input_n].onPushed == orig(::players[::new_input].onPushed)
::players[::input_n].onPushed == orig(::players[direction].onPushed)
::players[::input_n].onPushed == orig(::players[direction-1].onPushed)
point[::input_n].position.col == orig(point[post(::input_n)].position.col)
point[::input_n].position.col == orig(point[post(::input_i)].position.col)
point[::input_n].position.col == orig(point[::input_n].position.col)
point[::input_n].position.col == orig(point[::input_i].position.col)
point[::input_n].position.row == orig(point[post(::input_n)].position.row)
point[::input_n].position.row == orig(point[post(::input_i)].position.row)
point[::input_n].position.row == orig(point[::input_n].position.row)
point[::input_n].position.row == orig(point[::input_i].position.row)
point[::input_n].player == point[::input_n-1].player
point[::input_n].player == orig(point[post(::input_n)-1].player)
point[::input_n].player == point[::input_i-1].player
point[::input_n].player == orig(point[post(::input_i)-1].player)
point[::input_n].player == point[::new_input].player
point[::input_n].player == orig(point[post(::new_input)].player)
point[::input_n].player == point[orig(::input_n)-1].player
point[::input_n].player == point[orig(::input_i)-1].player
point[::input_n].player == point[orig(::new_input)].player
point[::input_n].player == point[orig(direction)].player
point[::input_n].player == point[orig(direction)-1].player
point[::input_n].player == orig(point[post(direction)].player)
point[::input_n].player == orig(point[post(direction)-1].player)
point[::input_n].player == orig(point[::input_n-1].player)
point[::input_n].player == orig(point[::input_i-1].player)
point[::input_n].player == orig(point[::new_input].player)
point[::input_n].player == orig(point[direction].player)
point[::input_n].player == orig(point[direction-1].player)
point[::input_n].player[0] == point[::input_n-1].player[0]
point[::input_n].player[0] == orig(point[post(::input_n)-1].player[0])
point[::input_n].player[0] == point[::input_i-1].player[0]
point[::input_n].player[0] == orig(point[post(::input_i)-1].player[0])
point[::input_n].player[0] == point[::new_input].player[0]
point[::input_n].player[0] == orig(point[post(::new_input)].player[0])
point[::input_n].player[0] == point[orig(::input_n)-1].player[0]
point[::input_n].player[0] == point[orig(::input_i)-1].player[0]
point[::input_n].player[0] == point[orig(::new_input)].player[0]
point[::input_n].player[0] == point[orig(direction)].player[0]
point[::input_n].player[0] == point[orig(direction)-1].player[0]
point[::input_n].player[0] == orig(point[post(direction)].player[0])
point[::input_n].player[0] == orig(point[post(direction)-1].player[0])
point[::input_n].player[0] == orig(point[::input_n-1].player[0])
point[::input_n].player[0] == orig(point[::input_i-1].player[0])
point[::input_n].player[0] == orig(point[::new_input].player[0])
point[::input_n].player[0] == orig(point[direction].player[0])
point[::input_n].player[0] == orig(point[direction-1].player[0])
point[::input_n].player->body == point[::input_n-1].player->body
point[::input_n].player->body == orig(point[post(::input_n)-1].player->body)
point[::input_n].player->body == point[::input_i-1].player->body
point[::input_n].player->body == orig(point[post(::input_i)-1].player->body)
point[::input_n].player->body == point[::new_input].player->body
point[::input_n].player->body == orig(point[post(::new_input)].player->body)
point[::input_n].player->body == point[orig(::input_n)-1].player->body
point[::input_n].player->body == point[orig(::input_i)-1].player->body
point[::input_n].player->body == point[orig(::new_input)].player->body
point[::input_n].player->body == point[orig(direction)].player->body
point[::input_n].player->body == point[orig(direction)-1].player->body
point[::input_n].player->body == orig(point[post(direction)].player->body)
point[::input_n].player->body == orig(point[post(direction)-1].player->body)
point[::input_n].player->body == orig(point[::input_n-1].player->body)
point[::input_n].player->body == orig(point[::input_i-1].player->body)
point[::input_n].player->body == orig(point[::new_input].player->body)
point[::input_n].player->body == orig(point[direction].player->body)
point[::input_n].player->body == orig(point[direction-1].player->body)
point[::input_n].player->body.bodyPoints[0] == point[::input_n-1].player->body.bodyPoints[0]
point[::input_n].player->body.bodyPoints[0] == orig(point[post(::input_n)-1].player->body.bodyPoints[0])
point[::input_n].player->body.bodyPoints[0] == point[::input_i-1].player->body.bodyPoints[0]
point[::input_n].player->body.bodyPoints[0] == orig(point[post(::input_i)-1].player->body.bodyPoints[0])
point[::input_n].player->body.bodyPoints[0] == point[::new_input].player->body.bodyPoints[0]
point[::input_n].player->body.bodyPoints[0] == orig(point[post(::new_input)].player->body.bodyPoints[0])
point[::input_n].player->body.bodyPoints[0] == point[orig(::input_n)-1].player->body.bodyPoints[0]
point[::input_n].player->body.bodyPoints[0] == point[orig(::input_i)-1].player->body.bodyPoints[0]
point[::input_n].player->body.bodyPoints[0] == point[orig(::new_input)].player->body.bodyPoints[0]
point[::input_n].player->body.bodyPoints[0] == point[orig(direction)].player->body.bodyPoints[0]
point[::input_n].player->body.bodyPoints[0] == point[orig(direction)-1].player->body.bodyPoints[0]
point[::input_n].player->body.bodyPoints[0] == orig(point[post(direction)].player->body.bodyPoints[0])
point[::input_n].player->body.bodyPoints[0] == orig(point[post(direction)-1].player->body.bodyPoints[0])
point[::input_n].player->body.bodyPoints[0] == orig(point[::input_n-1].player->body.bodyPoints[0])
point[::input_n].player->body.bodyPoints[0] == orig(point[::input_i-1].player->body.bodyPoints[0])
point[::input_n].player->body.bodyPoints[0] == orig(point[::new_input].player->body.bodyPoints[0])
point[::input_n].player->body.bodyPoints[0] == orig(point[direction].player->body.bodyPoints[0])
point[::input_n].player->body.bodyPoints[0] == orig(point[direction-1].player->body.bodyPoints[0])
point[::input_n].player->basePosition == point[::input_n-1].player->basePosition
point[::input_n].player->basePosition == orig(point[post(::input_n)-1].player->basePosition)
point[::input_n].player->basePosition == point[::input_i-1].player->basePosition
point[::input_n].player->basePosition == orig(point[post(::input_i)-1].player->basePosition)
point[::input_n].player->basePosition == point[::new_input].player->basePosition
point[::input_n].player->basePosition == orig(point[post(::new_input)].player->basePosition)
point[::input_n].player->basePosition == point[orig(::input_n)-1].player->basePosition
point[::input_n].player->basePosition == point[orig(::input_i)-1].player->basePosition
point[::input_n].player->basePosition == point[orig(::new_input)].player->basePosition
point[::input_n].player->basePosition == point[orig(direction)].player->basePosition
point[::input_n].player->basePosition == point[orig(direction)-1].player->basePosition
point[::input_n].player->basePosition == orig(point[post(direction)].player->basePosition)
point[::input_n].player->basePosition == orig(point[post(direction)-1].player->basePosition)
point[::input_n].player->basePosition == orig(point[::input_n-1].player->basePosition)
point[::input_n].player->basePosition == orig(point[::input_i-1].player->basePosition)
point[::input_n].player->basePosition == orig(point[::new_input].player->basePosition)
point[::input_n].player->basePosition == orig(point[direction].player->basePosition)
point[::input_n].player->basePosition == orig(point[direction-1].player->basePosition)
point[orig(direction)].position.col == orig(point[post(direction)].position.col)
point[orig(direction)].position.col == orig(point[direction].position.col)
point[orig(direction)-1].position.col == orig(point[post(direction)-1].position.col)
point[orig(direction)-1].position.col == orig(point[direction-1].position.col)
point[orig(direction)].position.row == orig(point[post(direction)].position.row)
point[orig(direction)].position.row == orig(point[direction].position.row)
::crashedPlayers has only one value
::crashedPlayers != null
::crashedPlayers[] contains no nulls and has only one value, of length 1
::crashedPlayers[] elements has only one value
::crashedPlayers[] elements != null
::crashedPlayers[].start == [null]
::crashedPlayers[].start elements == null
::playerSpace has only one value
::playerSpace != null
::playerSpace[] contains no nulls and has only one value, of length 1
::playerSpace[] elements has only one value
::playerSpace[] elements != null
::playerSpace[].playerNodes contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes elements has only one value
::playerSpace[].playerNodes elements != null
::playerSpace[].playerNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes[0] elements has only one value
::playerSpace[].playerNodes[0] elements != null
::playerSpace[].playerNodes->start contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start elements has only one value
::playerSpace[].playerNodes->start elements != null
::playerSpace[].playerNodes->start[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start[0] elements has only one value
::playerSpace[].playerNodes->start[0] elements != null
::playerSpace[].playerNodes->start->next contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next elements has only one value
::playerSpace[].playerNodes->start->next elements != null
::playerSpace[].playerNodes->start->next[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next[0] elements has only one value
::playerSpace[].playerNodes->start->next[0] elements != null
::playerSpace[].playerNodes->start->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->data elements has only one value
::playerSpace[].playerNodes->start->data elements != null
::playerSpace[].playerNodes->end contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end elements has only one value
::playerSpace[].playerNodes->end elements != null
::playerSpace[].playerNodes->end[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end[0] elements has only one value
::playerSpace[].playerNodes->end[0] elements != null
::playerSpace[].playerNodes->end->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->data elements has only one value
::playerSpace[].playerNodes->end->data elements != null
::playerSpace[].playerNodes->end->prev contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->prev elements has only one value
::playerSpace[].playerNodes->end->prev elements != null
::playerSpace[].playerNodes->end->prev[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->prev[0] elements has only one value
::playerSpace[].playerNodes->end->prev[0] elements != null
::playerSpace[].playerMap contains no nulls and has only one value, of length 1
::playerSpace[].playerMap elements has only one value
::playerSpace[].playerMap elements != null
::playerSpace[].guideNodes contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes elements has only one value
::playerSpace[].guideNodes elements != null
::playerSpace[].guideNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes[0] elements has only one value
::playerSpace[].guideNodes[0] elements != null
::playerSpace[].groundMap contains no nulls and has only one value, of length 1
::playerSpace[].groundMap elements has only one value
::playerSpace[].groundMap elements != null
::playerSpace[].actionGroup contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup elements has only one value
::playerSpace[].actionGroup elements != null
::playerSpace[].actionGroup[0] contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup[0] elements has only one value
::playerSpace[].actionGroup[0] elements != null
::playerSpace[].actionGroup->numActions == [0]
::playerSpace[].actionGroup->numActions elements == 0
::players has only one value
::players[] contains no nulls and has only one value, of length 100
::players[] elements != null
::players[].id == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].id elements == 0
::players[].body contains no nulls and has only one value, of length 100
::players[].body elements != null
::players[].body.type == [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.type elements one of { 0, 1 }
::players[].body.visible == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.visible elements one of { 0, 1 }
::players[].body.visible sorted by >=
::players[].body.bodyPoints contains no nulls and has only one value, of length 100
::players[].body.bodyPoints elements != null
::players[].body.bodyPoints[0] contains no nulls and has only one value, of length 100
::players[].body.bodyPoints[0] elements != null
::players[].body.bodyPoints->position contains no nulls and has only one value, of length 100
::players[].body.bodyPoints->position elements != null
::players[].body.bodyPoints->player has only one value, of length 100
::players[].body.bodyPoints->player[0] has only one value, of length 100
::players[].body.bodyPoints->aspect == [46, 35, 35, 35, 35, 35, 86, 86, 86, 86, 86, 88, 91, 91, 91, 91, 91, 91, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyPoints->aspect elements >= 0
::players[].body.bodyMaps contains no nulls and has only one value, of length 100
::players[].body.bodyMaps elements != null
::players[].body.bodyMapsSize == [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyMapsSize elements one of { 0, 1, 4 }
::players[].body.bodyMapsSize sorted by >=
::players[].body.bodySize == [28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodySize elements >= 0
::players[].body.bodyWidth == [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyWidth elements one of { 0, 8, 14 }
::players[].body.bodyHeight == [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyHeight elements one of { 0, 4, 6 }
::players[].body.color == [3, 0, 1, 2, 3, 4, 0, 2, 4, 6, 8, 2, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.color elements >= 0
::players[].basePosition contains no nulls and has only one value, of length 100
::players[].basePosition elements != null
::players[].basePosition.col elements >= 0
::players[].basePosition.row elements >= 0
::players[].impulse[0] contains no nulls and has only one value, of length 100
::players[].impulse[0] elements != null
::players[].impulse[0][0] elements one of { 0, 1 }
::players[].impulse[1] contains no nulls and has only one value, of length 100
::players[].impulse[1] elements != null
::players[].impulse[1][0] elements one of { 0, 1, 5 }
::players[].impulse[2] contains no nulls and has only one value, of length 100
::players[].impulse[2] elements != null
::players[].impulse[3] contains no nulls and has only one value, of length 100
::players[].impulse[3] elements != null
::players[].impulse[3][0] elements one of { 0, 1 }
::players[].impulse[4] contains no nulls and has only one value, of length 100
::players[].impulse[4] elements != null
::players[].impulse[5] contains no nulls and has only one value, of length 100
::players[].impulse[5] elements != null
::players[].impulse[5][0] elements one of { 0, 1 }
::players[].impulse[6] contains no nulls and has only one value, of length 100
::players[].impulse[6] elements != null
::players[].impulse[7] contains no nulls and has only one value, of length 100
::players[].impulse[7] elements != null
::players[].impulse[7][0] elements one of { 0, 1 }
::players[].impulse[7][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[8] contains no nulls and has only one value, of length 100
::players[].impulse[8] elements != null
::players[].direction elements >= 0
::players[].magnetos has only one value, of length 100
::players[].magnetos[0] has only one value, of length 100
::players[].stepCounter one of { [0, 9, 7, 7, 4, 8, 9, 1, 8, 7, 1, 4, 8, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 9, 7, 7, 4, 8, 9, 1, 8, 7, 1, 4, 8, 2, 10, 4, 2, 9, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].stepCounter elements >= 0
::players[].pilot has only one value, of length 100
::players[].onCrash has only one value, of length 100
::players[].onPushed has only one value, of length 100
::snakeBodyMap has only one value
::trainBodyMap has only one value
::giantBodyMap has only one value
::squareBodyMap has only one value
::circleBodyMap has only one value
::input_n == 1
::new_input one of { 0, 1 }
::input_key == "k"
::trace_pos one of { "(40, 10) -> ", "(40, 10) -> (40, 9)\n" }
point[] elements != null
point[].position elements != null
point[].position.col elements >= 0
point[].position.row elements >= 0
size(::players[]) == 100
::players[::input_n] has only one value
::players[::input_n-1] has only one value
::players[::input_n].body has only one value
::players[::input_n-1].body has only one value
::players[::input_n].body.bodyPoints has only one value
::players[::input_n-1].body.bodyPoints has only one value
::players[::input_n].body.bodyPoints[0] has only one value
::players[::input_n-1].body.bodyPoints[0] has only one value
::players[::input_n].body.bodyPoints->position has only one value
::players[::input_n-1].body.bodyPoints->position has only one value
::players[::input_n].body.bodyPoints->player has only one value
::players[::input_n].body.bodyPoints->player != null
::players[::input_n-1].body.bodyPoints->player has only one value
::players[::input_n-1].body.bodyPoints->player != null
::players[::new_input].body.bodyPoints->player != null
::players[orig(direction)].body.bodyPoints->player != null
::players[orig(direction)-1].body.bodyPoints->player != null
::players[::input_n].body.bodyPoints->aspect == 35
::players[::input_n-1].body.bodyPoints->aspect == 46
::players[::new_input].body.bodyPoints->aspect one of { 35, 46 }
::players[orig(direction)-1].body.bodyPoints->aspect one of { 35, 46 }
::players[::input_n].body.bodyMaps has only one value
::players[::input_n-1].body.bodyMaps has only one value
::players[::input_n-1].body.bodyMapsSize == 4
::players[::new_input].body.bodyMapsSize one of { 1, 4 }
::players[orig(direction)-1].body.bodyMapsSize one of { 1, 4 }
::players[::input_n-1].body.bodySize == 28
::players[::new_input].body.bodySize one of { 1, 28 }
::players[orig(direction)-1].body.bodySize one of { 1, 28 }
::players[::input_n-1].body.bodyWidth == 8
::players[::new_input].body.bodyWidth one of { 0, 8 }
::players[orig(direction)-1].body.bodyWidth one of { 0, 8 }
::players[::new_input].body.bodyHeight one of { 0, 4 }
::players[orig(direction)-1].body.bodyHeight one of { 0, 4 }
::players[::input_n-1].body.color == 3
::players[::new_input].body.color one of { 0, 3 }
::players[orig(direction)].body.color one of { 0, 2, 4 }
::players[orig(direction)-1].body.color one of { 1, 3 }
::players[::input_n].basePosition has only one value
::players[::input_n-1].basePosition has only one value
::players[::input_n-1].basePosition.col == 40
::players[::new_input].basePosition.col one of { 0, 40 }
::players[::input_n].basePosition.row == 10
::players[::new_input].basePosition.row one of { 9, 10 }
::players[orig(direction)].basePosition.row one of { 10, 12, 13 }
::players[orig(direction)-1].basePosition.row one of { 9, 11, 13 }
::players[::input_n].impulse[0] has only one value
::players[::input_n-1].impulse[0] has only one value
::players[::input_n].impulse[1] has only one value
::players[::input_n-1].impulse[1] has only one value
::players[::input_n].impulse[2] has only one value
::players[::input_n-1].impulse[2] has only one value
::players[::input_n].impulse[3] has only one value
::players[::input_n-1].impulse[3] has only one value
::players[::input_n].impulse[4] has only one value
::players[::input_n-1].impulse[4] has only one value
::players[::input_n].impulse[5] has only one value
::players[::input_n-1].impulse[5] has only one value
::players[::input_n].impulse[6] has only one value
::players[::input_n-1].impulse[6] has only one value
::players[::input_n].impulse[7] has only one value
::players[::input_n-1].impulse[7] has only one value
::players[::input_n].impulse[8] has only one value
::players[::input_n-1].impulse[8] has only one value
::players[::new_input].direction one of { 0, 1 }
::players[orig(direction)].direction one of { 0, 1, 3 }
::players[orig(direction)-1].direction one of { 1, 3 }
::players[::input_n].magnetos has only one value
::players[::input_n].magnetos != null
::players[::input_n-1].magnetos has only one value
::players[::input_n-1].magnetos != null
::players[::new_input].magnetos != null
::players[orig(direction)].magnetos != null
::players[orig(direction)-1].magnetos != null
::players[::input_n].magnetos[0] has only one value
::players[::input_n].magnetos[0] != null
::players[::input_n-1].magnetos[0] has only one value
::players[::input_n-1].magnetos[0] != null
::players[::new_input].magnetos[0] != null
::players[orig(direction)].magnetos[0] != null
::players[orig(direction)-1].magnetos[0] != null
::players[::input_n].stepCounter == 9
::players[::new_input].stepCounter one of { 0, 9 }
::players[orig(direction)].stepCounter one of { 7, 8, 9 }
::players[orig(direction)-1].stepCounter one of { 0, 4, 7 }
::players[::input_n].pilot has only one value
::players[::input_n].pilot != null
::players[::input_n-1].pilot has only one value
::players[::input_n-1].pilot != null
::players[::new_input].pilot != null
::players[orig(direction)-1].pilot != null
::players[::input_n].onCrash == null
::players[::input_n-1].onCrash has only one value
::players[::input_n-1].onCrash != null
::players[::input_n].onPushed has only one value
::players[::input_n].onPushed != null
point[::input_n].player != null
point[::input_n].player[0] != null
point[::input_n].player->body != null
point[::input_n].player->body.bodyPoints[0] != null
point[::input_n].player->basePosition != null
point[::input_n].aspect >= 0
point[orig(direction)].aspect >= 0
point[orig(direction)-1].aspect >= 0
::crashedPlayers[] elements == ::crashedPlayers[::input_n-1]
::crashedPlayers[].start elements == ::crashedPlayers[::input_n-1].start
::playerSpace[] elements == ::playerSpace[::input_n-1]
::playerSpace[].playerNodes elements == ::playerSpace[::input_n-1].playerNodes
::playerSpace[].playerNodes[0] elements == ::playerSpace[::input_n-1].playerNodes[0]
::playerSpace[].playerNodes->start elements == ::playerSpace[::input_n-1].playerNodes->start
::playerSpace[].playerNodes->start[0] elements == ::playerSpace[::input_n-1].playerNodes->start[0]
::playerSpace[].playerNodes->start->next elements == ::playerSpace[::input_n-1].playerNodes->start->next
::playerSpace[].playerNodes->start->next[0] elements == ::playerSpace[::input_n-1].playerNodes->start->next[0]
::playerSpace[].playerNodes->start->data elements == ::playerSpace[::input_n-1].playerNodes->start->data
::playerSpace[].playerNodes->end elements == ::playerSpace[::input_n-1].playerNodes->end
::playerSpace[].playerNodes->end[0] elements == ::playerSpace[::input_n-1].playerNodes->end[0]
::playerSpace[].playerNodes->end->data elements == ::playerSpace[::input_n-1].playerNodes->end->data
::playerSpace[].playerNodes->end->prev elements == ::playerSpace[::input_n-1].playerNodes->end->prev
::playerSpace[].playerNodes->end->prev[0] elements == ::playerSpace[::input_n-1].playerNodes->end->prev[0]
::playerSpace[].playerMap elements == ::playerSpace[::input_n-1].playerMap
::playerSpace[].guideNodes elements == ::playerSpace[::input_n-1].guideNodes
::playerSpace[].guideNodes[0] elements == ::playerSpace[::input_n-1].guideNodes[0]
::playerSpace[].groundMap elements == ::playerSpace[::input_n-1].groundMap
::playerSpace[].actionGroup elements == ::playerSpace[::input_n-1].actionGroup
::playerSpace[].actionGroup[0] elements == ::playerSpace[::input_n-1].actionGroup[0]
::playerSpace[].actionGroup->numActions < ::players[].direction (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].direction (lexically)
::playerSpace[].actionGroup->numActions < point[].position.col (lexically)
::playerSpace[].actionGroup->numActions <= point[].position.col (lexically)
::playerSpace[].actionGroup->numActions < point[].position.row (lexically)
::playerSpace[].actionGroup->numActions <= point[].position.row (lexically)
::playerSpace[].actionGroup->numActions < point[].aspect (lexically)
::playerSpace[].actionGroup->numActions <= point[].aspect (lexically)
::playerSpace[].actionGroup->numActions < orig(point[].position.col) (lexically)
::playerSpace[].actionGroup->numActions <= orig(point[].position.col) (lexically)
::playerSpace[].actionGroup->numActions < orig(point[].position.row) (lexically)
::playerSpace[].actionGroup->numActions <= orig(point[].position.row) (lexically)
::playerSpace[].actionGroup->numActions elements == size(::crashedPlayers[])-1
::players in ::players[].body.bodyPoints->player
point[::input_n].player[0] in ::players[]
::players[].id <= ::players[].body.type (elementwise)
::players[].id <= ::players[].body.visible (elementwise)
::players[].id <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].id <= ::players[].body.bodyMapsSize (elementwise)
::players[].id <= ::players[].body.bodySize (elementwise)
::players[].id <= ::players[].body.bodyWidth (elementwise)
::players[].id <= ::players[].body.bodyHeight (elementwise)
::players[].id <= ::players[].body.color (elementwise)
::players[].id <= ::players[].basePosition.col (elementwise)
::players[].id <= ::players[].basePosition.row (elementwise)
::players[].id <= ::players[].impulse[0][0] (elementwise)
::players[].id <= ::players[].impulse[1][0] (elementwise)
::players[].id <= ::players[].impulse[3][0] (elementwise)
::players[].id <= ::players[].impulse[5][0] (elementwise)
::players[].id <= ::players[].impulse[7][0] (elementwise)
::players[].id < ::players[].direction (lexically)
::players[].id <= ::players[].direction (elementwise)
::players[].id <= ::players[].stepCounter (elementwise)
::players[].id < point[].position.col (lexically)
::players[].id <= point[].position.col (lexically)
::players[].id < point[].position.row (lexically)
::players[].id <= point[].position.row (lexically)
::players[].id < point[].aspect (lexically)
::players[].id <= point[].aspect (lexically)
::players[].id < orig(point[].position.col) (lexically)
::players[].id <= orig(point[].position.col) (lexically)
::players[].id < orig(point[].position.row) (lexically)
::players[].id <= orig(point[].position.row) (lexically)
::players[].id elements == size(::crashedPlayers[])-1
point[::input_n].player->body in ::players[].body
::players[].body.type <= ::players[].body.visible (elementwise)
::players[].body.type <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].body.type <= ::players[].body.bodyMapsSize (elementwise)
::players[].body.type <= ::players[].body.bodySize (elementwise)
::players[].body.type >= ::players[].impulse[0][0] (elementwise)
::players[].body.type < ::players[].direction (lexically)
::players[].body.type <= ::players[].direction (lexically)
::players[].body.type <= ::players[].stepCounter (elementwise)
::players[].body.type elements <= ::input_n
::players[].body.type < point[].position.col (lexically)
::players[].body.type <= point[].position.col (lexically)
::players[].body.type < point[].position.row (lexically)
::players[].body.type <= point[].position.row (lexically)
::players[].body.type < point[].aspect (lexically)
::players[].body.type <= point[].aspect (lexically)
::players[].body.type < orig(point[].position.col) (lexically)
::players[].body.type <= orig(point[].position.col) (lexically)
::players[].body.type < orig(point[].position.row) (lexically)
::players[].body.type <= orig(point[].position.row) (lexically)
::players[].body.type elements <= orig(direction)
::players[].body.type elements >= size(::crashedPlayers[])-1
::players[].body.type elements < size(::players[])-1
::players[].body.type elements < size(point[])-1
::players[].body.type elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.type elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.type elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.type elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].body.type elements < ::players[::input_n-1].body.bodyMapsSize
::players[].body.type elements <= ::players[::new_input].body.bodyMapsSize
::players[].body.type elements <= ::players[orig(direction)-1].body.bodyMapsSize
::players[].body.type elements < ::players[::input_n-1].body.bodySize
::players[].body.type elements <= ::players[::new_input].body.bodySize
::players[].body.type elements <= ::players[orig(direction)-1].body.bodySize
::players[].body.type elements < ::players[::input_n-1].body.bodyWidth
::players[].body.type elements < ::players[::input_n-1].body.color
::players[].body.type elements <= ::players[orig(direction)-1].body.color
::players[].body.type elements < ::players[::input_n-1].basePosition.col
::players[].body.type elements < ::players[orig(direction)-1].basePosition.col
::players[].body.type elements < ::players[::input_n].basePosition.row
::players[].body.type elements < ::players[::new_input].basePosition.row
::players[].body.type elements < ::players[orig(direction)].basePosition.row
::players[].body.type elements < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].impulse[3][0] in ::players[].body.type
::players[orig(direction)-1].impulse[3][0] in ::players[].body.type
::players[::new_input].direction in ::players[].body.type
::players[].body.type elements <= ::players[orig(direction)-1].direction
::players[].body.type elements < ::players[::input_n].stepCounter
::players[].body.type elements < ::players[orig(direction)].stepCounter
::players[].body.type elements < point[::input_n-1].position.col
::players[].body.type elements < point[::input_n-1].position.row
::players[].body.type elements < point[::input_n-1].aspect
::players[].body.type elements < orig(point[::input_n-1].position.col)
::players[].body.type elements <= orig(point[::input_n-1].position.row)
::players[].body.visible <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].body.visible <= ::players[].body.bodyMapsSize (elementwise)
::players[].body.visible <= ::players[].body.bodySize (elementwise)
::players[].body.visible >= ::players[].impulse[0][0] (elementwise)
::players[].body.visible >= ::players[].impulse[3][0] (elementwise)
::players[].body.visible >= ::players[].impulse[5][0] (elementwise)
::players[].body.visible >= ::players[].impulse[7][0] (elementwise)
::players[].body.visible > ::players[].direction (lexically)
::players[].body.visible >= ::players[].direction (lexically)
::players[].body.visible elements <= ::input_n
::new_input in ::players[].body.visible
::players[].body.visible < point[].position.col (lexically)
::players[].body.visible <= point[].position.col (lexically)
::players[].body.visible < point[].position.row (lexically)
::players[].body.visible <= point[].position.row (lexically)
::players[].body.visible < point[].aspect (lexically)
::players[].body.visible <= point[].aspect (lexically)
::players[].body.visible < orig(point[].position.col) (lexically)
::players[].body.visible <= orig(point[].position.col) (lexically)
::players[].body.visible elements <= orig(direction)
::players[].body.visible elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].body.visible
::players[].body.visible elements < size(::players[])-1
::players[].body.visible elements < size(point[])-1
::players[orig(direction)-1].body.type in ::players[].body.visible
::players[].body.visible elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.visible elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.visible elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.visible elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].body.visible elements < ::players[::input_n-1].body.bodyMapsSize
::players[].body.visible elements <= ::players[::new_input].body.bodyMapsSize
::players[].body.visible elements <= ::players[orig(direction)-1].body.bodyMapsSize
::players[].body.visible elements < ::players[::input_n-1].body.bodySize
::players[].body.visible elements <= ::players[::new_input].body.bodySize
::players[].body.visible elements <= ::players[orig(direction)-1].body.bodySize
::players[].body.visible elements < ::players[::input_n-1].body.bodyWidth
::players[].body.visible elements < ::players[::input_n-1].body.color
::players[].body.visible elements <= ::players[orig(direction)-1].body.color
::players[].body.visible elements < ::players[::input_n-1].basePosition.col
::players[].body.visible elements < ::players[orig(direction)-1].basePosition.col
::players[].body.visible elements < ::players[::input_n].basePosition.row
::players[].body.visible elements < ::players[::new_input].basePosition.row
::players[].body.visible elements < ::players[orig(direction)].basePosition.row
::players[].body.visible elements < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].impulse[3][0] in ::players[].body.visible
::players[orig(direction)-1].impulse[3][0] in ::players[].body.visible
::players[::new_input].direction in ::players[].body.visible
::players[].body.visible elements <= ::players[orig(direction)-1].direction
::players[].body.visible elements < ::players[::input_n].stepCounter
::players[].body.visible elements < ::players[orig(direction)].stepCounter
::players[].body.visible elements < point[::input_n-1].position.col
::players[].body.visible elements < point[::input_n-1].position.row
::players[].body.visible elements < point[::input_n-1].aspect
::players[].body.visible elements < orig(point[::input_n-1].position.col)
::players[].body.visible elements <= orig(point[::input_n-1].position.row)
point[::input_n].player->body.bodyPoints[0] in ::players[].body.bodyPoints[0]
::players[].body.bodyPoints->position - ::players[].basePosition + 7304 == 0
point[::input_n].player in ::players[].body.bodyPoints->player
point[::input_n].player[0] in ::players[].body.bodyPoints->player[0]
::players[].body.bodyPoints->aspect >= ::players[].body.bodyMapsSize (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodySize (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodyWidth (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.color (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].basePosition.col (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].basePosition.row (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[0][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[1][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[3][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[5][0] (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyPoints->aspect > ::players[].direction (lexically)
::players[].body.bodyPoints->aspect >= ::players[].direction (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].stepCounter (elementwise)
::players[].body.bodyPoints->aspect > point[].position.row (lexically)
::players[].body.bodyPoints->aspect >= point[].position.row (lexically)
::players[].body.bodyPoints->aspect > orig(point[].position.row) (lexically)
::players[].body.bodyPoints->aspect >= orig(point[].position.row) (lexically)
::players[].body.bodyPoints->aspect elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].body.bodyPoints->aspect
::players[].body.bodyPoints->aspect elements < size(::players[])-1
::players[].body.bodyPoints->aspect elements < size(point[])-1
::players[].body.bodyMapsSize <= ::players[].body.bodySize (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[0][0] (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[3][0] (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[5][0] (elementwise)
::players[].body.bodyMapsSize >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyMapsSize > ::players[].direction (lexically)
::players[].body.bodyMapsSize >= ::players[].direction (lexically)
::new_input in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize < point[].aspect (lexically)
::players[].body.bodyMapsSize <= point[].aspect (lexically)
::players[].body.bodyMapsSize elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < size(::players[])-1
::players[].body.bodyMapsSize elements < size(point[])-1
::players[orig(direction)-1].body.type in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements <= ::players[::input_n-1].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::input_n-1].body.bodySize
::players[].body.bodyMapsSize elements < ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyHeight in ::players[].body.bodyMapsSize
::players[orig(direction)-1].body.bodyHeight in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::input_n-1].basePosition.col
::players[].body.bodyMapsSize elements < ::players[::input_n].basePosition.row
::players[].body.bodyMapsSize elements < ::players[::new_input].basePosition.row
::players[].body.bodyMapsSize elements < ::players[orig(direction)].basePosition.row
::players[].body.bodyMapsSize elements < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].impulse[3][0] in ::players[].body.bodyMapsSize
::players[orig(direction)-1].impulse[3][0] in ::players[].body.bodyMapsSize
::players[::new_input].direction in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < ::players[::input_n].stepCounter
::players[].body.bodyMapsSize elements < ::players[orig(direction)].stepCounter
::players[].body.bodyMapsSize elements < point[::input_n-1].aspect
::players[].body.bodySize >= ::players[].body.bodyWidth (elementwise)
::players[].body.bodySize >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodySize >= ::players[].impulse[0][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[1][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[3][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[5][0] (elementwise)
::players[].body.bodySize >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodySize > ::players[].direction (lexically)
::players[].body.bodySize >= ::players[].direction (lexically)
::new_input in ::players[].body.bodySize
::players[].body.bodySize > point[].position.row (lexically)
::players[].body.bodySize >= point[].position.row (lexically)
::players[].body.bodySize < point[].aspect (lexically)
::players[].body.bodySize <= point[].aspect (lexically)
::players[].body.bodySize > orig(point[].position.row) (lexically)
::players[].body.bodySize >= orig(point[].position.row) (lexically)
::players[].body.bodySize elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].body.bodySize
::players[].body.bodySize elements < size(::players[])-1
::players[].body.bodySize elements < size(point[])-1
::players[orig(direction)-1].body.type in ::players[].body.bodySize
::players[].body.bodySize elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[orig(direction)].impulse[3][0] in ::players[].body.bodySize
::players[orig(direction)-1].impulse[3][0] in ::players[].body.bodySize
::players[::new_input].direction in ::players[].body.bodySize
::players[].body.bodyWidth >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodyWidth >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyWidth > ::players[].direction (lexically)
::players[].body.bodyWidth >= ::players[].direction (lexically)
::players[].body.bodyWidth < point[].aspect (lexically)
::players[].body.bodyWidth <= point[].aspect (lexically)
::players[].body.bodyWidth elements >= size(::crashedPlayers[])-1
::players[].body.bodyWidth elements < size(::players[])-1
::players[].body.bodyWidth elements < size(point[])-1
::players[].body.bodyWidth elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].body.bodyWidth elements < ::players[::input_n-1].body.bodySize
::players[].body.bodyWidth elements < ::players[::input_n-1].basePosition.col
::players[].body.bodyWidth elements < point[::input_n-1].aspect
::players[].body.bodyHeight >= ::players[].impulse[7][0] (elementwise)
::players[].body.bodyHeight > ::players[].direction (lexically)
::players[].body.bodyHeight >= ::players[].direction (lexically)
::players[].body.bodyHeight < point[].aspect (lexically)
::players[].body.bodyHeight <= point[].aspect (lexically)
::players[].body.bodyHeight elements >= size(::crashedPlayers[])-1
::players[].body.bodyHeight elements < size(::players[])-1
::players[].body.bodyHeight elements < size(point[])-1
::players[].body.bodyHeight elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].body.bodyHeight elements < ::players[::input_n-1].body.bodySize
::players[].body.bodyHeight elements < ::players[::input_n-1].body.bodyWidth
::players[].body.bodyHeight elements < ::players[::input_n-1].basePosition.col
::players[].body.bodyHeight elements < ::players[::input_n].basePosition.row
::players[].body.bodyHeight elements < ::players[::new_input].basePosition.row
::players[].body.bodyHeight elements < ::players[orig(direction)].basePosition.row
::players[].body.bodyHeight elements < ::players[orig(direction)-1].basePosition.row
::players[].body.bodyHeight elements < ::players[::input_n].stepCounter
::players[].body.bodyHeight elements < ::players[orig(direction)].stepCounter
::players[].body.bodyHeight elements < point[::input_n-1].aspect
::players[].body.color <= ::players[].basePosition.col (elementwise)
::players[].body.color >= ::players[].impulse[5][0] (elementwise)
::players[].body.color > ::players[].direction (lexically)
::players[].body.color >= ::players[].direction (lexically)
::input_n in ::players[].body.color
::new_input in ::players[].body.color
::players[].body.color < point[].aspect (lexically)
::players[].body.color <= point[].aspect (lexically)
orig(direction) in ::players[].body.color
::players[].body.color elements >= size(::crashedPlayers[])-1
::players[].body.color elements < size(::players[])-1
::players[].body.color elements < size(point[])-1
::players[orig(direction)-1].body.type in ::players[].body.color
::players[].body.color elements < ::players[::input_n].body.bodyPoints->aspect
::players[].body.color elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].body.color elements < ::players[::new_input].body.bodyPoints->aspect
::players[].body.color elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize in ::players[].body.color
::players[::new_input].body.bodyMapsSize in ::players[].body.color
::players[orig(direction)-1].body.bodyMapsSize in ::players[].body.color
::players[].body.color elements < ::players[::input_n-1].body.bodySize
::players[::input_n-1].body.bodyWidth in ::players[].body.color
::players[].body.color elements <= ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyWidth in ::players[].body.color
::players[orig(direction)-1].body.bodyWidth in ::players[].body.color
::players[::new_input].body.bodyHeight in ::players[].body.color
::players[orig(direction)-1].body.bodyHeight in ::players[].body.color
::players[].body.color elements < ::players[::input_n-1].basePosition.col
::players[orig(direction)].basePosition.col in ::players[].body.color
::players[].body.color elements < ::players[::input_n].basePosition.row
::players[].body.color elements < ::players[::new_input].basePosition.row
::players[].body.color elements < ::players[orig(direction)].basePosition.row
::players[].body.color elements < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].impulse[3][0] in ::players[].body.color
::players[orig(direction)-1].impulse[3][0] in ::players[].body.color
::players[::new_input].direction in ::players[].body.color
::players[orig(direction)].direction in ::players[].body.color
::players[orig(direction)-1].direction in ::players[].body.color
::players[].body.color elements < ::players[::input_n].stepCounter
::players[orig(direction)-1].stepCounter in ::players[].body.color
::players[].body.color elements < point[::input_n-1].aspect
point[::input_n].player->basePosition in ::players[].basePosition
::players[].basePosition.col > ::players[].basePosition.row (lexically)
::players[].basePosition.col >= ::players[].basePosition.row (lexically)
::players[].basePosition.col > ::players[].impulse[0][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[0][0] (lexically)
::players[].basePosition.col > ::players[].impulse[1][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[1][0] (lexically)
::players[].basePosition.col > ::players[].impulse[3][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[3][0] (elementwise)
::players[].basePosition.col > ::players[].impulse[5][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[5][0] (elementwise)
::players[].basePosition.col > ::players[].impulse[7][0] (lexically)
::players[].basePosition.col >= ::players[].impulse[7][0] (elementwise)
::players[].basePosition.col > ::players[].direction (lexically)
::players[].basePosition.col >= ::players[].direction (lexically)
::players[].basePosition.col > ::players[].stepCounter (lexically)
::players[].basePosition.col >= ::players[].stepCounter (lexically)
::players[].basePosition.col > point[].position.row (lexically)
::players[].basePosition.col >= point[].position.row (lexically)
::players[].basePosition.col > orig(point[].position.row) (lexically)
::players[].basePosition.col >= orig(point[].position.row) (lexically)
::players[].basePosition.col elements >= size(::crashedPlayers[])-1
::players[].basePosition.col elements < size(::players[])-1
::players[].basePosition.col elements < size(point[])-1
::players[::input_n-1].body.bodyMapsSize in ::players[].basePosition.col
::players[::input_n-1].body.bodyWidth in ::players[].basePosition.col
::players[::new_input].body.bodyWidth in ::players[].basePosition.col
::players[orig(direction)-1].body.bodyWidth in ::players[].basePosition.col
::players[::new_input].body.bodyHeight in ::players[].basePosition.col
::players[orig(direction)-1].body.bodyHeight in ::players[].basePosition.col
::players[::input_n].basePosition.row in ::players[].basePosition.col
::players[].basePosition.row > ::players[].impulse[0][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[0][0] (lexically)
::players[].basePosition.row > ::players[].impulse[1][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[1][0] (elementwise)
::players[].basePosition.row > ::players[].impulse[3][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[3][0] (lexically)
::players[].basePosition.row > ::players[].impulse[5][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[5][0] (elementwise)
::players[].basePosition.row > ::players[].impulse[7][0] (lexically)
::players[].basePosition.row >= ::players[].impulse[7][0] (lexically)
::players[].basePosition.row > ::players[].direction (lexically)
::players[].basePosition.row >= ::players[].direction (lexically)
::players[].basePosition.row > ::players[].stepCounter (lexically)
::players[].basePosition.row >= ::players[].stepCounter (lexically)
::input_n in ::players[].basePosition.row
::new_input in ::players[].basePosition.row
::players[].basePosition.row < point[].aspect (lexically)
::players[].basePosition.row <= point[].aspect (lexically)
orig(direction) in ::players[].basePosition.row
::players[].basePosition.row elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in ::players[].basePosition.row
::players[].basePosition.row elements < size(::players[])-1
::players[].basePosition.row elements < size(point[])-1
::players[orig(direction)-1].body.type in ::players[].basePosition.row
::players[].basePosition.row elements < ::players[::input_n].body.bodyPoints->aspect
::players[].basePosition.row elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].basePosition.row elements < ::players[::new_input].body.bodyPoints->aspect
::players[].basePosition.row elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize in ::players[].basePosition.row
::players[::new_input].body.bodyMapsSize in ::players[].basePosition.row
::players[orig(direction)-1].body.bodyMapsSize in ::players[].basePosition.row
::players[].basePosition.row elements < ::players[::input_n-1].body.bodySize
::players[::new_input].body.bodyHeight in ::players[].basePosition.row
::players[orig(direction)-1].body.bodyHeight in ::players[].basePosition.row
::players[::input_n-1].body.color in ::players[].basePosition.row
::players[::new_input].body.color in ::players[].basePosition.row
::players[orig(direction)].body.color in ::players[].basePosition.row
::players[orig(direction)-1].body.color in ::players[].basePosition.row
::players[].basePosition.row elements < ::players[::input_n-1].basePosition.col
::players[orig(direction)].impulse[3][0] in ::players[].basePosition.row
::players[orig(direction)-1].impulse[3][0] in ::players[].basePosition.row
::players[::new_input].direction in ::players[].basePosition.row
::players[orig(direction)].direction in ::players[].basePosition.row
::players[orig(direction)-1].direction in ::players[].basePosition.row
::players[::new_input].stepCounter in ::players[].basePosition.row
::players[orig(direction)-1].stepCounter in ::players[].basePosition.row
::players[].basePosition.row elements < point[::input_n-1].aspect
::players[].impulse[0] - ::players[].impulse[1] + 4 == 0
::players[].impulse[0] - ::players[].impulse[2] + 8 == 0
::players[].impulse[0] - ::players[].impulse[3] + 12 == 0
::players[].impulse[0] - ::players[].impulse[4] + 16 == 0
::players[].impulse[0] - ::players[].impulse[5] + 20 == 0
::players[].impulse[0] - ::players[].impulse[6] + 24 == 0
::players[].impulse[0] - ::players[].impulse[7] + 28 == 0
::players[].impulse[0] - ::players[].impulse[8] + 32 == 0
::players[].impulse[0][0] < ::players[].direction (lexically)
::players[].impulse[0][0] <= ::players[].direction (lexically)
::players[].impulse[0][0] < ::players[].stepCounter (lexically)
::players[].impulse[0][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[0][0] elements <= ::input_n
::players[].impulse[0][0] < point[].position.col (lexically)
::players[].impulse[0][0] <= point[].position.col (lexically)
::players[].impulse[0][0] < point[].position.row (lexically)
::players[].impulse[0][0] <= point[].position.row (lexically)
::players[].impulse[0][0] < point[].aspect (lexically)
::players[].impulse[0][0] <= point[].aspect (lexically)
::players[].impulse[0][0] < orig(point[].position.col) (lexically)
::players[].impulse[0][0] <= orig(point[].position.col) (lexically)
::players[].impulse[0][0] < orig(point[].position.row) (lexically)
::players[].impulse[0][0] <= orig(point[].position.row) (lexically)
::players[].impulse[0][0] elements <= orig(direction)
::players[].impulse[0][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[0][0] elements < size(::players[])-1
::players[].impulse[0][0] elements < size(point[])-1
::players[].impulse[0][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].impulse[0][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[0][0] elements <= ::players[::new_input].body.bodyMapsSize
::players[].impulse[0][0] elements <= ::players[orig(direction)-1].body.bodyMapsSize
::players[].impulse[0][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[0][0] elements <= ::players[::new_input].body.bodySize
::players[].impulse[0][0] elements <= ::players[orig(direction)-1].body.bodySize
::players[].impulse[0][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[0][0] elements < ::players[::input_n-1].body.color
::players[].impulse[0][0] elements <= ::players[orig(direction)-1].body.color
::players[].impulse[0][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[0][0] elements < ::players[orig(direction)-1].basePosition.col
::players[].impulse[0][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[0][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[0][0] elements < ::players[orig(direction)].basePosition.row
::players[].impulse[0][0] elements < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].impulse[3][0] in ::players[].impulse[0][0]
::players[orig(direction)-1].impulse[3][0] in ::players[].impulse[0][0]
::players[].impulse[0][0] elements <= ::players[orig(direction)-1].direction
::players[].impulse[0][0] elements < ::players[::input_n].stepCounter
::players[].impulse[0][0] elements < ::players[orig(direction)].stepCounter
::players[].impulse[0][0] elements < point[::input_n-1].position.col
::players[].impulse[0][0] elements < point[::input_n-1].position.row
::players[].impulse[0][0] elements < point[::input_n-1].aspect
::players[].impulse[0][0] elements <= point[orig(direction)-1].aspect
::players[].impulse[0][0] elements < orig(point[::input_n-1].position.col)
::players[].impulse[0][0] elements <= orig(point[::input_n-1].position.row)
::players[].impulse[1] - ::players[].impulse[2] + 4 == 0
::players[].impulse[1] - ::players[].impulse[3] + 8 == 0
::players[].impulse[1] - ::players[].impulse[4] + 12 == 0
::players[].impulse[1] - ::players[].impulse[5] + 16 == 0
::players[].impulse[1] - ::players[].impulse[6] + 20 == 0
::players[].impulse[1] - ::players[].impulse[7] + 24 == 0
::players[].impulse[1] - ::players[].impulse[8] + 28 == 0
::players[].impulse[1][0] >= ::players[].impulse[7][0] (lexically)
::players[].impulse[1][0] < point[].position.col (lexically)
::players[].impulse[1][0] <= point[].position.col (lexically)
::players[].impulse[1][0] < point[].position.row (lexically)
::players[].impulse[1][0] <= point[].position.row (lexically)
::players[].impulse[1][0] < point[].aspect (lexically)
::players[].impulse[1][0] <= point[].aspect (lexically)
::players[].impulse[1][0] < orig(point[].position.col) (lexically)
::players[].impulse[1][0] <= orig(point[].position.col) (lexically)
::players[].impulse[1][0] < orig(point[].position.row) (lexically)
::players[].impulse[1][0] <= orig(point[].position.row) (lexically)
::players[].impulse[1][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[1][0] elements < size(::players[])-1
::players[].impulse[1][0] elements < size(point[])-1
::players[].impulse[1][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].impulse[1][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[1][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[1][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[1][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[1][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[1][0] elements < ::players[orig(direction)].basePosition.row
::players[].impulse[1][0] elements < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].impulse[3][0] in ::players[].impulse[1][0]
::players[orig(direction)-1].impulse[3][0] in ::players[].impulse[1][0]
::players[].impulse[1][0] elements < ::players[::input_n].stepCounter
::players[].impulse[1][0] elements < ::players[orig(direction)].stepCounter
::players[].impulse[1][0] elements < point[::input_n-1].aspect
::players[].impulse[1][0] elements <= point[orig(direction)-1].aspect
::players[].impulse[2] - ::players[].impulse[3] + 4 == 0
::players[].impulse[2] - ::players[].impulse[4] + 8 == 0
::players[].impulse[2] - ::players[].impulse[5] + 12 == 0
::players[].impulse[2] - ::players[].impulse[6] + 16 == 0
::players[].impulse[2] - ::players[].impulse[7] + 20 == 0
::players[].impulse[2] - ::players[].impulse[8] + 24 == 0
::players[].impulse[3] - ::players[].impulse[4] + 4 == 0
::players[].impulse[3] - ::players[].impulse[5] + 8 == 0
::players[].impulse[3] - ::players[].impulse[6] + 12 == 0
::players[].impulse[3] - ::players[].impulse[7] + 16 == 0
::players[].impulse[3] - ::players[].impulse[8] + 20 == 0
::players[].impulse[3][0] >= ::players[].impulse[7][0] (lexically)
::players[].impulse[3][0] < ::players[].direction (lexically)
::players[].impulse[3][0] <= ::players[].direction (lexically)
::players[].impulse[3][0] < ::players[].stepCounter (lexically)
::players[].impulse[3][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[3][0] elements <= ::input_n
::new_input in ::players[].impulse[3][0]
::players[].impulse[3][0] < point[].position.col (lexically)
::players[].impulse[3][0] <= point[].position.col (lexically)
::players[].impulse[3][0] < point[].position.row (lexically)
::players[].impulse[3][0] <= point[].position.row (lexically)
::players[].impulse[3][0] < point[].aspect (lexically)
::players[].impulse[3][0] <= point[].aspect (lexically)
::players[].impulse[3][0] < orig(point[].position.col) (lexically)
::players[].impulse[3][0] <= orig(point[].position.col) (lexically)
::players[].impulse[3][0] < orig(point[].position.row) (lexically)
::players[].impulse[3][0] <= orig(point[].position.row) (lexically)
::players[].impulse[3][0] elements <= orig(direction)
::players[].impulse[3][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[3][0] elements < size(::players[])-1
::players[].impulse[3][0] elements < size(point[])-1
::players[].impulse[3][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].impulse[3][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[3][0] elements <= ::players[::new_input].body.bodyMapsSize
::players[].impulse[3][0] elements <= ::players[orig(direction)-1].body.bodyMapsSize
::players[].impulse[3][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[3][0] elements <= ::players[::new_input].body.bodySize
::players[].impulse[3][0] elements <= ::players[orig(direction)-1].body.bodySize
::players[].impulse[3][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[3][0] elements < ::players[::input_n-1].body.color
::players[].impulse[3][0] elements <= ::players[orig(direction)-1].body.color
::players[].impulse[3][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[3][0] elements < ::players[orig(direction)-1].basePosition.col
::players[].impulse[3][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[3][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[3][0] elements < ::players[orig(direction)].basePosition.row
::players[].impulse[3][0] elements < ::players[orig(direction)-1].basePosition.row
::players[].impulse[3][0] elements <= ::players[orig(direction)-1].direction
::players[].impulse[3][0] elements < ::players[::input_n].stepCounter
::players[].impulse[3][0] elements < ::players[orig(direction)].stepCounter
::players[].impulse[3][0] elements < point[::input_n-1].position.col
::players[].impulse[3][0] elements < point[::input_n-1].position.row
::players[].impulse[3][0] elements < point[::input_n-1].aspect
::players[].impulse[3][0] elements <= point[orig(direction)-1].aspect
::players[].impulse[3][0] elements < orig(point[::input_n-1].position.col)
::players[].impulse[3][0] elements <= orig(point[::input_n-1].position.row)
::players[].impulse[4] - ::players[].impulse[5] + 4 == 0
::players[].impulse[4] - ::players[].impulse[6] + 8 == 0
::players[].impulse[4] - ::players[].impulse[7] + 12 == 0
::players[].impulse[4] - ::players[].impulse[8] + 16 == 0
::players[].impulse[5] - ::players[].impulse[6] + 4 == 0
::players[].impulse[5] - ::players[].impulse[7] + 8 == 0
::players[].impulse[5] - ::players[].impulse[8] + 12 == 0
::players[].impulse[5][0] < ::players[].direction (lexically)
::players[].impulse[5][0] <= ::players[].direction (lexically)
::players[].impulse[5][0] < ::players[].stepCounter (lexically)
::players[].impulse[5][0] <= ::players[].stepCounter (elementwise)
::input_n in ::players[].impulse[5][0]
::players[].impulse[5][0] elements <= ::input_n
::new_input in ::players[].impulse[5][0]
::players[].impulse[5][0] < point[].position.col (lexically)
::players[].impulse[5][0] <= point[].position.col (lexically)
::players[].impulse[5][0] < point[].position.row (lexically)
::players[].impulse[5][0] <= point[].position.row (lexically)
::players[].impulse[5][0] < point[].aspect (lexically)
::players[].impulse[5][0] <= point[].aspect (lexically)
::players[].impulse[5][0] < orig(point[].position.col) (lexically)
::players[].impulse[5][0] <= orig(point[].position.col) (lexically)
::players[].impulse[5][0] < orig(point[].position.row) (lexically)
::players[].impulse[5][0] <= orig(point[].position.row) (lexically)
::players[].impulse[5][0] elements <= orig(direction)
::players[].impulse[5][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[5][0] elements < size(::players[])-1
::players[].impulse[5][0] elements < size(point[])-1
::players[orig(direction)-1].body.type in ::players[].impulse[5][0]
::players[].impulse[5][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].impulse[5][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[5][0] elements <= ::players[::new_input].body.bodyMapsSize
::players[].impulse[5][0] elements <= ::players[orig(direction)-1].body.bodyMapsSize
::players[].impulse[5][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[5][0] elements <= ::players[::new_input].body.bodySize
::players[].impulse[5][0] elements <= ::players[orig(direction)-1].body.bodySize
::players[].impulse[5][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[5][0] elements < ::players[::input_n-1].body.color
::players[].impulse[5][0] elements <= ::players[orig(direction)-1].body.color
::players[].impulse[5][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[5][0] elements < ::players[orig(direction)-1].basePosition.col
::players[].impulse[5][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[5][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[5][0] elements < ::players[orig(direction)].basePosition.row
::players[].impulse[5][0] elements < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].impulse[3][0] in ::players[].impulse[5][0]
::players[orig(direction)-1].impulse[3][0] in ::players[].impulse[5][0]
::players[::new_input].direction in ::players[].impulse[5][0]
::players[].impulse[5][0] elements <= ::players[orig(direction)-1].direction
::players[].impulse[5][0] elements < ::players[::input_n].stepCounter
::players[].impulse[5][0] elements < ::players[orig(direction)].stepCounter
::players[].impulse[5][0] elements < point[::input_n-1].position.col
::players[].impulse[5][0] elements < point[::input_n-1].position.row
::players[].impulse[5][0] elements < point[::input_n-1].aspect
::players[].impulse[5][0] elements < orig(point[::input_n-1].position.col)
::players[].impulse[5][0] elements <= orig(point[::input_n-1].position.row)
::players[].impulse[6] - ::players[].impulse[7] + 4 == 0
::players[].impulse[6] - ::players[].impulse[8] + 8 == 0
::players[].impulse[7] - ::players[].impulse[8] + 4 == 0
::players[].impulse[7][0] < ::players[].direction (lexically)
::players[].impulse[7][0] <= ::players[].direction (lexically)
::players[].impulse[7][0] <= ::players[].stepCounter (elementwise)
::players[].impulse[7][0] elements <= ::input_n
::new_input in ::players[].impulse[7][0]
::players[].impulse[7][0] < point[].position.col (lexically)
::players[].impulse[7][0] <= point[].position.col (lexically)
::players[].impulse[7][0] < point[].position.row (lexically)
::players[].impulse[7][0] <= point[].position.row (lexically)
::players[].impulse[7][0] < point[].aspect (lexically)
::players[].impulse[7][0] <= point[].aspect (lexically)
::players[].impulse[7][0] < orig(point[].position.col) (lexically)
::players[].impulse[7][0] <= orig(point[].position.col) (lexically)
::players[].impulse[7][0] < orig(point[].position.row) (lexically)
::players[].impulse[7][0] <= orig(point[].position.row) (lexically)
::players[].impulse[7][0] elements <= orig(direction)
::players[].impulse[7][0] elements >= size(::crashedPlayers[])-1
::players[].impulse[7][0] elements < size(::players[])-1
::players[].impulse[7][0] elements < size(point[])-1
::players[].impulse[7][0] elements < ::players[::input_n].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[::new_input].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].impulse[7][0] elements < ::players[::input_n-1].body.bodyMapsSize
::players[].impulse[7][0] elements <= ::players[::new_input].body.bodyMapsSize
::players[].impulse[7][0] elements <= ::players[orig(direction)-1].body.bodyMapsSize
::players[].impulse[7][0] elements < ::players[::input_n-1].body.bodySize
::players[].impulse[7][0] elements <= ::players[::new_input].body.bodySize
::players[].impulse[7][0] elements <= ::players[orig(direction)-1].body.bodySize
::players[].impulse[7][0] elements < ::players[::input_n-1].body.bodyWidth
::players[].impulse[7][0] elements < ::players[::input_n-1].body.color
::players[].impulse[7][0] elements <= ::players[orig(direction)-1].body.color
::players[].impulse[7][0] elements < ::players[::input_n-1].basePosition.col
::players[].impulse[7][0] elements < ::players[orig(direction)-1].basePosition.col
::players[].impulse[7][0] elements < ::players[::input_n].basePosition.row
::players[].impulse[7][0] elements < ::players[::new_input].basePosition.row
::players[].impulse[7][0] elements < ::players[orig(direction)].basePosition.row
::players[].impulse[7][0] elements < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].impulse[3][0] in ::players[].impulse[7][0]
::players[orig(direction)-1].impulse[3][0] in ::players[].impulse[7][0]
::players[].impulse[7][0] elements <= ::players[orig(direction)-1].direction
::players[].impulse[7][0] elements < ::players[::input_n].stepCounter
::players[].impulse[7][0] elements < ::players[orig(direction)].stepCounter
::players[].impulse[7][0] elements < point[::input_n-1].position.col
::players[].impulse[7][0] elements < point[::input_n-1].position.row
::players[].impulse[7][0] elements < point[::input_n-1].aspect
::players[].impulse[7][0] elements <= point[orig(direction)-1].aspect
::players[].impulse[7][0] elements < orig(point[::input_n-1].position.col)
::players[].impulse[7][0] elements <= orig(point[::input_n-1].position.row)
::players[].direction > ::players[].stepCounter (lexically)
::players[].direction >= ::players[].stepCounter (lexically)
::new_input in ::players[].direction
::players[].direction < point[].position.col (lexically)
::players[].direction <= point[].position.col (lexically)
::players[].direction < point[].position.row (lexically)
::players[].direction <= point[].position.row (lexically)
::players[].direction < point[].aspect (lexically)
::players[].direction <= point[].aspect (lexically)
::players[].direction < orig(point[].position.col) (lexically)
::players[].direction <= orig(point[].position.col) (lexically)
orig(direction) in ::players[].direction
::players[].direction elements >= size(::crashedPlayers[])-1
::players[].direction elements < size(::players[])-1
::players[].direction elements < size(point[])-1
::players[orig(direction)-1].body.type in ::players[].direction
::players[].direction elements < ::players[::input_n].body.bodyPoints->aspect
::players[].direction elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].direction elements < ::players[::new_input].body.bodyPoints->aspect
::players[].direction elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[].direction elements < ::players[::input_n-1].body.bodySize
::players[].direction elements <= ::players[::new_input].body.bodySize
::players[].direction elements < ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.color in ::players[].direction
::players[].direction elements < ::players[::input_n-1].basePosition.col
::players[].direction elements < ::players[::input_n].basePosition.row
::players[].direction elements < ::players[::new_input].basePosition.row
::players[].direction elements < ::players[orig(direction)].basePosition.row
::players[].direction elements < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].impulse[3][0] in ::players[].direction
::players[orig(direction)-1].impulse[3][0] in ::players[].direction
::players[].direction elements < ::players[::input_n].stepCounter
::players[].direction elements < ::players[orig(direction)].stepCounter
::players[].direction elements < point[::input_n-1].aspect
::input_n in ::players[].stepCounter
::new_input in ::players[].stepCounter
::players[].stepCounter < point[].position.col (lexically)
::players[].stepCounter <= point[].position.col (lexically)
::players[].stepCounter < point[].position.row (lexically)
::players[].stepCounter <= point[].position.row (lexically)
::players[].stepCounter < point[].aspect (lexically)
::players[].stepCounter <= point[].aspect (lexically)
::players[].stepCounter < orig(point[].position.col) (lexically)
::players[].stepCounter <= orig(point[].position.col) (lexically)
::players[].stepCounter < orig(point[].position.row) (lexically)
::players[].stepCounter <= orig(point[].position.row) (lexically)
::players[].stepCounter elements >= size(::crashedPlayers[])-1
::players[].stepCounter elements < size(::players[])-1
::players[].stepCounter elements < size(point[])-1
::players[orig(direction)-1].body.type in ::players[].stepCounter
::players[].stepCounter elements < ::players[::input_n].body.bodyPoints->aspect
::players[].stepCounter elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[].stepCounter elements < ::players[::new_input].body.bodyPoints->aspect
::players[].stepCounter elements < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMapsSize in ::players[].stepCounter
::players[::new_input].body.bodyMapsSize in ::players[].stepCounter
::players[orig(direction)-1].body.bodyMapsSize in ::players[].stepCounter
::players[].stepCounter elements < ::players[::input_n-1].body.bodySize
::players[::input_n-1].body.bodyWidth in ::players[].stepCounter
::players[::new_input].body.bodyWidth in ::players[].stepCounter
::players[orig(direction)-1].body.bodyWidth in ::players[].stepCounter
::players[::new_input].body.bodyHeight in ::players[].stepCounter
::players[orig(direction)-1].body.bodyHeight in ::players[].stepCounter
::players[orig(direction)].body.color in ::players[].stepCounter
::players[].stepCounter elements < ::players[::input_n-1].basePosition.col
::players[orig(direction)].basePosition.col in ::players[].stepCounter
::players[].stepCounter elements <= ::players[::input_n].basePosition.row
::players[::new_input].basePosition.row in ::players[].stepCounter
::players[].stepCounter elements <= ::players[orig(direction)].basePosition.row
::players[orig(direction)].impulse[3][0] in ::players[].stepCounter
::players[orig(direction)-1].impulse[3][0] in ::players[].stepCounter
::players[::new_input].direction in ::players[].stepCounter
::players[].stepCounter elements < point[::input_n-1].aspect
::players[::input_n].onCrash in ::players[].pilot
::players[::input_n].onCrash in ::players[].onPushed
::input_n in point[].aspect
::input_n <= orig(direction)
::input_n < size(point[])-1
::input_n < ::players[::new_input].body.bodyPoints->aspect
::input_n < ::players[orig(direction)-1].body.bodyPoints->aspect
::input_n != ::players[::new_input].body.bodyWidth
::input_n != ::players[orig(direction)-1].body.bodyWidth
::input_n != ::players[::new_input].body.bodyHeight
::input_n != ::players[orig(direction)-1].body.bodyHeight
::input_n != ::players[::new_input].body.color
::input_n != ::players[orig(direction)].body.color
::input_n <= ::players[orig(direction)-1].body.color
::input_n != ::players[::new_input].basePosition.col
::input_n != ::players[orig(direction)].basePosition.col
::input_n < ::players[orig(direction)-1].basePosition.col
::input_n < ::players[::new_input].basePosition.row
::input_n < ::players[orig(direction)].basePosition.row
::input_n < ::players[orig(direction)-1].basePosition.row
::input_n >= ::players[::new_input].direction
::input_n <= ::players[orig(direction)-1].direction
::input_n != ::players[::new_input].stepCounter
::input_n < ::players[orig(direction)].stepCounter
::input_n != ::players[orig(direction)-1].stepCounter
::input_n != point[::input_n].position.col
::input_n < point[::input_n-1].position.col
::input_n != point[::input_n].position.row
::input_n < point[::input_n-1].position.row
::input_n != point[::input_n].aspect
::input_n < point[::input_n-1].aspect
::input_n != point[::new_input].position.col
::input_n != point[::new_input].position.row
::input_n != point[::new_input].aspect
::input_n != point[orig(direction)].position.col
::input_n != point[orig(direction)-1].position.col
::input_n != point[orig(direction)].position.row
::input_n != point[orig(direction)-1].position.row
::input_n != point[orig(direction)].aspect
::input_n != point[orig(direction)-1].aspect
::input_n < orig(point[::input_n-1].position.col)
::input_n <= orig(point[::input_n-1].position.row)
::input_n != orig(point[::new_input].position.col)
::input_n != orig(point[direction-1].position.row)
::new_input in point[].position.col
::new_input in point[].position.row
::new_input in point[].aspect
::new_input in orig(point[].position.col)
::new_input in orig(point[].position.row)
::new_input % orig(direction) == 0
::new_input <= orig(direction)
::new_input < size(::players[])-1
::new_input < size(point[])-1
::new_input < ::players[::input_n].body.bodyPoints->aspect
::new_input < ::players[::input_n-1].body.bodyPoints->aspect
::new_input < ::players[::new_input].body.bodyPoints->aspect
::new_input < ::players[orig(direction)-1].body.bodyPoints->aspect
::new_input < ::players[::input_n-1].body.bodyMapsSize
::new_input < ::players[orig(direction)-1].body.bodyMapsSize
::new_input < ::players[::input_n-1].body.bodySize
::new_input < ::players[orig(direction)-1].body.bodySize
::new_input < ::players[::input_n-1].body.bodyWidth
::new_input != ::players[::new_input].body.bodyWidth
::new_input <= ::players[orig(direction)-1].body.bodyWidth
::new_input != ::players[::new_input].body.bodyHeight
::new_input <= ::players[orig(direction)-1].body.bodyHeight
::new_input < ::players[::input_n-1].body.color
::new_input != ::players[::new_input].body.color
::new_input < ::players[orig(direction)-1].body.color
::new_input < ::players[::input_n-1].basePosition.col
::new_input != ::players[::new_input].basePosition.col
::new_input < ::players[orig(direction)-1].basePosition.col
::new_input < ::players[::input_n].basePosition.row
::new_input < ::players[::new_input].basePosition.row
::new_input < ::players[orig(direction)].basePosition.row
::new_input < ::players[orig(direction)-1].basePosition.row
::new_input != ::players[::new_input].direction
::new_input <= ::players[orig(direction)-1].direction
::new_input < ::players[::input_n].stepCounter
::new_input < ::players[orig(direction)].stepCounter
::new_input < point[::input_n-1].position.col
::new_input < point[::input_n-1].position.row
::new_input < point[::input_n-1].aspect
::new_input != point[::new_input].position.col
::new_input != point[::new_input].position.row
::new_input != point[::new_input].aspect
::new_input <= point[orig(direction)-1].position.col
::new_input <= point[orig(direction)-1].position.row
::new_input <= point[orig(direction)-1].aspect
::new_input < orig(point[::input_n-1].position.col)
::new_input < orig(point[::input_n-1].position.row)
::new_input != orig(point[::new_input].position.col)
::new_input != orig(point[::new_input].position.row)
::new_input <= orig(point[direction-1].position.row)
::input_key > ::trace_pos
point[].position.col >= orig(point[].position.col) (elementwise)
point[].position.col elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in point[].position.col
::players[orig(direction)-1].body.bodyWidth in point[].position.col
::players[orig(direction)-1].body.bodyHeight in point[].position.col
::players[orig(direction)].impulse[3][0] in point[].position.col
::players[orig(direction)-1].impulse[3][0] in point[].position.col
::players[::new_input].stepCounter in point[].position.col
point[].position.row < point[].aspect (lexically)
point[].position.row <= point[].aspect (lexically)
orig(direction) in point[].position.row
point[].position.row elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in point[].position.row
point[].position.row elements < size(::players[])-1
point[].position.row elements < size(point[])-1
point[].position.row elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[orig(direction)-1].body.bodyWidth in point[].position.row
::players[orig(direction)-1].body.bodyHeight in point[].position.row
::players[orig(direction)].impulse[3][0] in point[].position.row
::players[orig(direction)-1].impulse[3][0] in point[].position.row
::players[::new_input].stepCounter in point[].position.row
point[].aspect > orig(point[].position.row) (lexically)
point[].aspect >= orig(point[].position.row) (lexically)
size(::crashedPlayers[])-1 in point[].aspect
point[].aspect elements < size(point[])-1
::players[orig(direction)-1].body.type in point[].aspect
::players[orig(direction)-1].body.bodyMapsSize in point[].aspect
::players[::input_n-1].body.bodyWidth in point[].aspect
::players[::new_input].body.bodyWidth in point[].aspect
::players[orig(direction)-1].body.bodyWidth in point[].aspect
::players[orig(direction)-1].body.bodyHeight in point[].aspect
::players[orig(direction)].impulse[3][0] in point[].aspect
::players[orig(direction)-1].impulse[3][0] in point[].aspect
::players[::new_input].direction in point[].aspect
::players[::new_input].stepCounter in point[].aspect
orig(point[].position.col) elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in orig(point[].position.col)
::players[orig(direction)-1].body.bodyWidth in orig(point[].position.col)
::players[orig(direction)-1].body.bodyHeight in orig(point[].position.col)
::players[orig(direction)].impulse[3][0] in orig(point[].position.col)
::players[orig(direction)-1].impulse[3][0] in orig(point[].position.col)
::players[::new_input].stepCounter in orig(point[].position.col)
orig(point[].position.row) elements >= size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in orig(point[].position.row)
orig(point[].position.row) elements < size(::players[])-1
orig(point[].position.row) elements < size(point[])-1
orig(point[].position.row) elements < ::players[::input_n-1].body.bodyPoints->aspect
::players[orig(direction)-1].body.bodyWidth in orig(point[].position.row)
::players[orig(direction)-1].body.bodyHeight in orig(point[].position.row)
::players[orig(direction)].impulse[3][0] in orig(point[].position.row)
::players[orig(direction)-1].impulse[3][0] in orig(point[].position.row)
::players[::new_input].stepCounter in orig(point[].position.row)
orig(direction) < size(::players[])-1
orig(direction) < size(point[])-1
orig(direction) > ::players[orig(direction)-1].body.type
orig(direction) < ::players[::input_n].body.bodyPoints->aspect
orig(direction) < ::players[::input_n-1].body.bodyPoints->aspect
orig(direction) < ::players[::new_input].body.bodyPoints->aspect
orig(direction) < ::players[orig(direction)-1].body.bodyPoints->aspect
orig(direction) != ::players[::input_n-1].body.bodyMapsSize
orig(direction) != ::players[orig(direction)-1].body.bodyMapsSize
orig(direction) < ::players[::input_n-1].body.bodySize
orig(direction) <= ::players[::new_input].body.bodySize
orig(direction) != ::players[orig(direction)-1].body.bodySize
orig(direction) < ::players[::input_n-1].body.bodyWidth
orig(direction) != ::players[::new_input].body.bodyWidth
::players[orig(direction)-1].body.bodyWidth % orig(direction) == 0
orig(direction) != ::players[orig(direction)-1].body.bodyWidth
orig(direction) != ::players[::new_input].body.bodyHeight
::players[orig(direction)-1].body.bodyHeight % orig(direction) == 0
orig(direction) != ::players[orig(direction)-1].body.bodyHeight
orig(direction) > ::players[orig(direction)].body.color
orig(direction) != ::players[orig(direction)-1].body.color
orig(direction) < ::players[::input_n-1].basePosition.col
orig(direction) != ::players[::new_input].basePosition.col
orig(direction) != ::players[orig(direction)].basePosition.col
orig(direction) < ::players[::input_n].basePosition.row
orig(direction) < ::players[::new_input].basePosition.row
orig(direction) < ::players[orig(direction)].basePosition.row
orig(direction) < ::players[orig(direction)-1].basePosition.row
orig(direction) > ::players[orig(direction)].impulse[3][0]
orig(direction) > ::players[orig(direction)-1].impulse[3][0]
orig(direction) >= ::players[::new_input].direction
orig(direction) >= ::players[orig(direction)].direction
orig(direction) >= ::players[orig(direction)-1].direction
orig(direction) < ::players[::input_n].stepCounter
::players[::new_input].stepCounter % orig(direction) == 0
orig(direction) != ::players[::new_input].stepCounter
orig(direction) < ::players[orig(direction)].stepCounter
orig(direction) != ::players[orig(direction)-1].stepCounter
orig(direction) != point[::input_n].position.col
orig(direction) != point[::input_n].position.row
orig(direction) != point[::input_n-1].position.row
orig(direction) != point[::input_n].aspect
orig(direction) < point[::input_n-1].aspect
orig(direction) != point[::new_input].position.row
orig(direction) != point[::new_input].aspect
orig(direction) != point[orig(direction)].position.col
orig(direction) != point[orig(direction)-1].position.col
orig(direction) != point[orig(direction)].position.row
orig(direction) != point[orig(direction)-1].position.row
orig(direction) != point[orig(direction)].aspect
orig(direction) != point[orig(direction)-1].aspect
size(::crashedPlayers[])-1 <= point[::input_n].position.col
size(::crashedPlayers[])-1 <= point[::input_n].position.row
size(::crashedPlayers[])-1 <= point[::input_n].aspect
size(::crashedPlayers[])-1 <= point[::new_input].position.col
size(::crashedPlayers[])-1 <= point[::new_input].position.row
size(::crashedPlayers[])-1 <= point[::new_input].aspect
size(::crashedPlayers[])-1 <= point[orig(direction)].position.col
size(::crashedPlayers[])-1 <= point[orig(direction)-1].position.col
size(::crashedPlayers[])-1 <= point[orig(direction)].position.row
size(::crashedPlayers[])-1 <= point[orig(direction)-1].position.row
size(::crashedPlayers[])-1 <= point[orig(direction)].aspect
size(::crashedPlayers[])-1 <= point[orig(direction)-1].aspect
size(::crashedPlayers[])-1 <= orig(point[::new_input].position.col)
size(::crashedPlayers[])-1 <= orig(point[::new_input].position.row)
size(::crashedPlayers[])-1 <= orig(point[direction-1].position.row)
size(::players[]) < size(point[])-1
size(::players[])-1 > ::players[orig(direction)-1].body.type
size(::players[])-1 > ::players[::new_input].body.bodyPoints->aspect
size(::players[])-1 > ::players[orig(direction)-1].body.bodyPoints->aspect
size(::players[])-1 > ::players[::new_input].body.bodyMapsSize
size(::players[])-1 > ::players[orig(direction)-1].body.bodyMapsSize
size(::players[])-1 > ::players[::new_input].body.bodySize
size(::players[])-1 > ::players[orig(direction)-1].body.bodySize
size(::players[])-1 > ::players[::new_input].body.bodyWidth
size(::players[])-1 > ::players[orig(direction)-1].body.bodyWidth
size(::players[])-1 > ::players[::new_input].body.bodyHeight
size(::players[])-1 > ::players[orig(direction)-1].body.bodyHeight
size(::players[])-1 > ::players[::new_input].body.color
size(::players[])-1 > ::players[orig(direction)].body.color
size(::players[])-1 > ::players[orig(direction)-1].body.color
size(::players[])-1 > ::players[::new_input].basePosition.col
size(::players[])-1 > ::players[orig(direction)].basePosition.col
size(::players[])-1 > ::players[orig(direction)-1].basePosition.col
size(::players[])-1 > ::players[::new_input].basePosition.row
size(::players[])-1 > ::players[orig(direction)].basePosition.row
size(::players[])-1 > ::players[orig(direction)-1].basePosition.row
size(::players[])-1 > ::players[orig(direction)].impulse[3][0]
size(::players[])-1 > ::players[orig(direction)-1].impulse[3][0]
size(::players[])-1 > ::players[::new_input].direction
size(::players[])-1 > ::players[orig(direction)].direction
size(::players[])-1 > ::players[orig(direction)-1].direction
size(::players[])-1 > ::players[::new_input].stepCounter
size(::players[])-1 > ::players[orig(direction)].stepCounter
size(::players[])-1 > ::players[orig(direction)-1].stepCounter
size(::players[])-1 > point[::input_n].position.col
size(::players[])-1 > point[::input_n-1].position.col
size(::players[])-1 > point[::input_n].position.row
size(::players[])-1 > point[::input_n-1].position.row
size(::players[])-1 > point[::input_n].aspect
size(::players[])-1 > point[::input_n-1].aspect
size(::players[])-1 > point[::new_input].position.col
size(::players[])-1 > point[::new_input].position.row
size(::players[])-1 > point[::new_input].aspect
size(::players[])-1 > point[orig(direction)].position.col
size(::players[])-1 > point[orig(direction)-1].position.col
size(::players[])-1 > point[orig(direction)].position.row
size(::players[])-1 > point[orig(direction)-1].position.row
size(::players[])-1 > point[orig(direction)].aspect
size(::players[])-1 > point[orig(direction)-1].aspect
size(::players[])-1 > orig(point[::input_n-1].position.col)
size(::players[])-1 > orig(point[::input_n-1].position.row)
size(::players[])-1 > orig(point[::new_input].position.col)
size(::players[])-1 > orig(point[::new_input].position.row)
size(::players[])-1 > orig(point[direction-1].position.row)
size(point[])-1 > ::players[orig(direction)-1].body.type
size(point[])-1 > ::players[::input_n].body.bodyPoints->aspect
size(point[])-1 > ::players[::input_n-1].body.bodyPoints->aspect
size(point[])-1 > ::players[::new_input].body.bodyPoints->aspect
size(point[])-1 > ::players[orig(direction)-1].body.bodyPoints->aspect
size(point[])-1 > ::players[::input_n-1].body.bodyMapsSize
size(point[])-1 > ::players[::new_input].body.bodyMapsSize
size(point[])-1 > ::players[orig(direction)-1].body.bodyMapsSize
size(point[])-1 > ::players[::input_n-1].body.bodySize
size(point[])-1 > ::players[::new_input].body.bodySize
size(point[])-1 > ::players[orig(direction)-1].body.bodySize
size(point[])-1 > ::players[::input_n-1].body.bodyWidth
size(point[])-1 > ::players[::new_input].body.bodyWidth
size(point[])-1 > ::players[orig(direction)-1].body.bodyWidth
size(point[])-1 > ::players[::new_input].body.bodyHeight
size(point[])-1 > ::players[orig(direction)-1].body.bodyHeight
size(point[])-1 > ::players[::input_n-1].body.color
size(point[])-1 > ::players[::new_input].body.color
size(point[])-1 > ::players[orig(direction)].body.color
size(point[])-1 > ::players[orig(direction)-1].body.color
size(point[])-1 > ::players[::input_n-1].basePosition.col
size(point[])-1 > ::players[::new_input].basePosition.col
size(point[])-1 > ::players[orig(direction)].basePosition.col
size(point[])-1 > ::players[orig(direction)-1].basePosition.col
size(point[])-1 > ::players[::input_n].basePosition.row
size(point[])-1 > ::players[::new_input].basePosition.row
size(point[])-1 > ::players[orig(direction)].basePosition.row
size(point[])-1 > ::players[orig(direction)-1].basePosition.row
size(point[])-1 > ::players[orig(direction)].impulse[3][0]
size(point[])-1 > ::players[orig(direction)-1].impulse[3][0]
size(point[])-1 > ::players[::new_input].direction
size(point[])-1 > ::players[orig(direction)].direction
size(point[])-1 > ::players[orig(direction)-1].direction
size(point[])-1 > ::players[::input_n].stepCounter
size(point[])-1 > ::players[::new_input].stepCounter
size(point[])-1 > ::players[orig(direction)].stepCounter
size(point[])-1 > ::players[orig(direction)-1].stepCounter
size(point[])-1 > point[::input_n].position.col
size(point[])-1 > point[::input_n-1].position.col
size(point[])-1 > point[::input_n].position.row
size(point[])-1 > point[::input_n-1].position.row
size(point[])-1 > point[::input_n].aspect
size(point[])-1 > point[::input_n-1].aspect
size(point[])-1 > point[::new_input].position.col
size(point[])-1 > point[::new_input].position.row
size(point[])-1 > point[::new_input].aspect
size(point[])-1 > point[orig(direction)].position.col
size(point[])-1 > point[orig(direction)-1].position.col
size(point[])-1 > point[orig(direction)].position.row
size(point[])-1 > point[orig(direction)-1].position.row
size(point[])-1 > point[orig(direction)].aspect
size(point[])-1 > point[orig(direction)-1].aspect
size(point[])-1 > orig(point[::input_n-1].position.col)
size(point[])-1 > orig(point[::input_n-1].position.row)
size(point[])-1 > orig(point[::new_input].position.col)
size(point[])-1 > orig(point[::new_input].position.row)
size(point[])-1 > orig(point[direction-1].position.row)
::players[orig(direction)-1].body.type < ::players[::input_n].body.bodyPoints->aspect
::players[orig(direction)-1].body.type < ::players[::input_n-1].body.bodyPoints->aspect
::players[orig(direction)-1].body.type < ::players[::new_input].body.bodyPoints->aspect
::players[orig(direction)-1].body.type < ::players[orig(direction)-1].body.bodyPoints->aspect
::players[orig(direction)-1].body.type < ::players[::input_n-1].body.bodyMapsSize
::players[orig(direction)-1].body.type < ::players[::new_input].body.bodyMapsSize
::players[orig(direction)-1].body.type < ::players[::input_n-1].body.bodySize
::players[orig(direction)-1].body.type < ::players[::new_input].body.bodySize
::players[orig(direction)-1].body.type < ::players[::input_n-1].body.bodyWidth
::players[orig(direction)-1].body.type <= ::players[::new_input].body.bodyWidth
::players[orig(direction)-1].body.type != ::players[orig(direction)-1].body.bodyWidth
::players[orig(direction)-1].body.type <= ::players[::new_input].body.bodyHeight
::players[orig(direction)-1].body.type != ::players[orig(direction)-1].body.bodyHeight
::players[orig(direction)-1].body.type < ::players[::input_n-1].body.color
::players[orig(direction)-1].body.type <= ::players[::new_input].body.color
::players[orig(direction)-1].body.type <= ::players[orig(direction)].body.color
::players[orig(direction)-1].body.type <= ::players[orig(direction)-1].body.color
::players[orig(direction)-1].body.type < ::players[::input_n-1].basePosition.col
::players[orig(direction)-1].body.type <= ::players[::new_input].basePosition.col
::players[orig(direction)-1].body.type <= ::players[orig(direction)].basePosition.col
::players[orig(direction)-1].body.type < ::players[orig(direction)-1].basePosition.col
::players[orig(direction)-1].body.type < ::players[::input_n].basePosition.row
::players[orig(direction)-1].body.type < ::players[::new_input].basePosition.row
::players[orig(direction)-1].body.type < ::players[orig(direction)].basePosition.row
::players[orig(direction)-1].body.type < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)-1].body.type >= ::players[orig(direction)].impulse[3][0]
::players[orig(direction)-1].body.type >= ::players[orig(direction)-1].impulse[3][0]
::players[orig(direction)-1].body.type <= ::players[::new_input].direction
::players[orig(direction)-1].body.type < ::players[orig(direction)-1].direction
::players[orig(direction)-1].body.type < ::players[::input_n].stepCounter
::players[orig(direction)-1].body.type < ::players[orig(direction)].stepCounter
::players[orig(direction)-1].body.type < point[::input_n-1].position.col
::players[orig(direction)-1].body.type < point[::input_n-1].position.row
::players[orig(direction)-1].body.type < point[::input_n-1].aspect
::players[orig(direction)-1].body.type <= point[::new_input].position.col
::players[orig(direction)-1].body.type <= point[::new_input].position.row
::players[orig(direction)-1].body.type <= point[::new_input].aspect
::players[orig(direction)-1].body.type != point[orig(direction)-1].position.col
::players[orig(direction)-1].body.type != point[orig(direction)-1].position.row
::players[orig(direction)-1].body.type != point[orig(direction)-1].aspect
::players[orig(direction)-1].body.type < orig(point[::input_n-1].position.col)
::players[orig(direction)-1].body.type <= orig(point[::input_n-1].position.row)
::players[orig(direction)-1].body.type <= orig(point[::new_input].position.col)
::players[orig(direction)-1].body.type <= orig(point[::new_input].position.row)
::players[orig(direction)-1].body.type != orig(point[direction-1].position.row)
::players[::input_n].body.bodyPoints->aspect <= ::players[::new_input].body.bodyPoints->aspect
::players[::input_n].body.bodyPoints->aspect <= ::players[orig(direction)-1].body.bodyPoints->aspect
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.bodyMapsSize
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyMapsSize
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.bodySize
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodySize
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.bodyWidth
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyWidth
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.bodyHeight
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyHeight
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].body.color
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)].body.color
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)-1].body.color
::players[::input_n].body.bodyPoints->aspect != ::players[::new_input].basePosition.col
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)].basePosition.col
::players[::input_n].body.bodyPoints->aspect != ::players[orig(direction)-1].basePosition.col
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].basePosition.row
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)].basePosition.row
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)-1].basePosition.row
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)].impulse[3][0]
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)-1].impulse[3][0]
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].direction
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)].direction
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)-1].direction
::players[::input_n].body.bodyPoints->aspect > ::players[::new_input].stepCounter
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)].stepCounter
::players[::input_n].body.bodyPoints->aspect > ::players[orig(direction)-1].stepCounter
::players[::input_n].body.bodyPoints->aspect != point[::input_n].position.col
::players[::input_n].body.bodyPoints->aspect != point[::input_n-1].position.col
::players[::input_n].body.bodyPoints->aspect > point[::input_n].position.row
::players[::input_n].body.bodyPoints->aspect > point[::input_n-1].position.row
::players[::input_n].body.bodyPoints->aspect != point[::input_n].aspect
::players[::input_n].body.bodyPoints->aspect != point[::new_input].position.col
::players[::input_n].body.bodyPoints->aspect > point[::new_input].position.row
::players[::input_n].body.bodyPoints->aspect != point[orig(direction)].position.col
::players[::input_n].body.bodyPoints->aspect != point[orig(direction)-1].position.col
::players[::input_n].body.bodyPoints->aspect > point[orig(direction)].position.row
::players[::input_n].body.bodyPoints->aspect > point[orig(direction)-1].position.row
::players[::input_n].body.bodyPoints->aspect != orig(point[::input_n-1].position.col)
::players[::input_n].body.bodyPoints->aspect > orig(point[::input_n-1].position.row)
::players[::input_n].body.bodyPoints->aspect != orig(point[::new_input].position.col)
::players[::input_n].body.bodyPoints->aspect > orig(point[::new_input].position.row)
::players[::input_n].body.bodyPoints->aspect > orig(point[direction-1].position.row)
::players[::input_n-1].body.bodyPoints->aspect >= ::players[::new_input].body.bodyPoints->aspect
::players[::input_n-1].body.bodyPoints->aspect >= ::players[orig(direction)-1].body.bodyPoints->aspect
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyMapsSize
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyMapsSize
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.bodySize
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodySize
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyWidth
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyHeight
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].body.color
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)].body.color
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)-1].body.color
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].basePosition.col
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)].basePosition.col
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)-1].basePosition.col
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].basePosition.row
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)].basePosition.row
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)-1].basePosition.row
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)].impulse[3][0]
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)-1].impulse[3][0]
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].direction
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)].direction
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)-1].direction
::players[::input_n-1].body.bodyPoints->aspect > ::players[::new_input].stepCounter
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)].stepCounter
::players[::input_n-1].body.bodyPoints->aspect > ::players[orig(direction)-1].stepCounter
::players[::input_n-1].body.bodyPoints->aspect > point[::input_n].position.row
::players[::input_n-1].body.bodyPoints->aspect > point[::input_n-1].position.row
::players[::input_n-1].body.bodyPoints->aspect > point[::new_input].position.row
::players[::input_n-1].body.bodyPoints->aspect > point[orig(direction)].position.row
::players[::input_n-1].body.bodyPoints->aspect > point[orig(direction)-1].position.row
::players[::input_n-1].body.bodyPoints->aspect > orig(point[::input_n-1].position.row)
::players[::input_n-1].body.bodyPoints->aspect > orig(point[::new_input].position.row)
::players[::input_n-1].body.bodyPoints->aspect > orig(point[direction-1].position.row)
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].body.bodyMapsSize
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.bodyMapsSize
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyMapsSize
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].body.bodySize
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.bodySize
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodySize
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyWidth
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.bodyHeight
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyHeight
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n-1].body.color
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].body.color
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)].body.color
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)-1].body.color
::players[::new_input].body.bodyPoints->aspect != ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].basePosition.col
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)].basePosition.col
::players[::new_input].body.bodyPoints->aspect != ::players[orig(direction)-1].basePosition.col
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)-1].basePosition.row
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)].impulse[3][0]
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)-1].impulse[3][0]
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].direction
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)].direction
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)-1].direction
::players[::new_input].body.bodyPoints->aspect > ::players[::input_n].stepCounter
::players[::new_input].body.bodyPoints->aspect > ::players[::new_input].stepCounter
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)].stepCounter
::players[::new_input].body.bodyPoints->aspect > ::players[orig(direction)-1].stepCounter
::players[::new_input].body.bodyPoints->aspect != point[::input_n].position.col
::players[::new_input].body.bodyPoints->aspect != point[::input_n-1].position.col
::players[::new_input].body.bodyPoints->aspect > point[::input_n].position.row
::players[::new_input].body.bodyPoints->aspect > point[::input_n-1].position.row
::players[::new_input].body.bodyPoints->aspect != point[::input_n-1].aspect
::players[::new_input].body.bodyPoints->aspect != point[::new_input].position.col
::players[::new_input].body.bodyPoints->aspect > point[::new_input].position.row
::players[::new_input].body.bodyPoints->aspect != point[::new_input].aspect
::players[::new_input].body.bodyPoints->aspect != point[orig(direction)].position.col
::players[::new_input].body.bodyPoints->aspect != point[orig(direction)-1].position.col
::players[::new_input].body.bodyPoints->aspect > point[orig(direction)].position.row
::players[::new_input].body.bodyPoints->aspect > point[orig(direction)-1].position.row
::players[::new_input].body.bodyPoints->aspect != point[orig(direction)].aspect
::players[::new_input].body.bodyPoints->aspect != point[orig(direction)-1].aspect
::players[::new_input].body.bodyPoints->aspect != orig(point[::input_n-1].position.col)
::players[::new_input].body.bodyPoints->aspect > orig(point[::input_n-1].position.row)
::players[::new_input].body.bodyPoints->aspect != orig(point[::new_input].position.col)
::players[::new_input].body.bodyPoints->aspect > orig(point[::new_input].position.row)
::players[::new_input].body.bodyPoints->aspect > orig(point[direction-1].position.row)
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::input_n-1].body.bodyMapsSize
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyMapsSize
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyMapsSize
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::input_n-1].body.bodySize
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::new_input].body.bodySize
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodySize
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::input_n-1].body.bodyWidth
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyWidth
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyWidth
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::new_input].body.bodyHeight
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)-1].body.bodyHeight
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::input_n-1].body.color
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::new_input].body.color
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)].body.color
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)-1].body.color
::players[orig(direction)-1].body.bodyPoints->aspect != ::players[::input_n-1].basePosition.col
::players[orig(direction)-1].body.bodyPoints->aspect != ::players[::new_input].basePosition.col
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)].basePosition.col
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)-1].basePosition.col
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::input_n].basePosition.row
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::new_input].basePosition.row
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)].basePosition.row
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)-1].basePosition.row
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)].impulse[3][0]
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)-1].impulse[3][0]
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::new_input].direction
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)].direction
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)-1].direction
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::input_n].stepCounter
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[::new_input].stepCounter
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)].stepCounter
::players[orig(direction)-1].body.bodyPoints->aspect > ::players[orig(direction)-1].stepCounter
::players[orig(direction)-1].body.bodyPoints->aspect > point[::input_n].position.row
::players[orig(direction)-1].body.bodyPoints->aspect > point[::input_n-1].position.row
::players[orig(direction)-1].body.bodyPoints->aspect > point[::new_input].position.row
::players[orig(direction)-1].body.bodyPoints->aspect > point[orig(direction)].position.row
::players[orig(direction)-1].body.bodyPoints->aspect > point[orig(direction)-1].position.row
::players[orig(direction)-1].body.bodyPoints->aspect > orig(point[::input_n-1].position.row)
::players[orig(direction)-1].body.bodyPoints->aspect > orig(point[::new_input].position.row)
::players[orig(direction)-1].body.bodyPoints->aspect > orig(point[direction-1].position.row)
::players[::input_n-1].body.bodyMapsSize >= ::players[::new_input].body.bodyMapsSize
::players[::input_n-1].body.bodyMapsSize >= ::players[orig(direction)-1].body.bodyMapsSize
::players[::input_n-1].body.bodyMapsSize != ::players[::new_input].body.bodySize
::players[::input_n-1].body.bodyMapsSize != ::players[orig(direction)-1].body.bodySize
::players[::input_n-1].body.bodyMapsSize != ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.bodyMapsSize != ::players[orig(direction)-1].body.bodyWidth
::players[::input_n-1].body.bodyMapsSize >= ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize >= ::players[orig(direction)-1].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize > ::players[::new_input].body.color
::players[::input_n-1].body.bodyMapsSize >= ::players[orig(direction)].body.color
::players[::input_n-1].body.bodyMapsSize > ::players[orig(direction)-1].body.color
::players[::input_n-1].body.bodyMapsSize != ::players[::new_input].basePosition.col
::players[::input_n-1].body.bodyMapsSize != ::players[orig(direction)-1].basePosition.col
::players[::input_n-1].body.bodyMapsSize < ::players[::new_input].basePosition.row
::players[::input_n-1].body.bodyMapsSize < ::players[orig(direction)].basePosition.row
::players[::input_n-1].body.bodyMapsSize < ::players[orig(direction)-1].basePosition.row
::players[::input_n-1].body.bodyMapsSize > ::players[orig(direction)].impulse[3][0]
::players[::input_n-1].body.bodyMapsSize > ::players[orig(direction)-1].impulse[3][0]
::players[::input_n-1].body.bodyMapsSize > ::players[::new_input].direction
::players[::input_n-1].body.bodyMapsSize > ::players[orig(direction)].direction
::players[::input_n-1].body.bodyMapsSize > ::players[orig(direction)-1].direction
::players[::input_n-1].body.bodyMapsSize != ::players[::new_input].stepCounter
::players[::input_n-1].body.bodyMapsSize < ::players[orig(direction)].stepCounter
::players[::input_n-1].body.bodyMapsSize != point[::input_n].position.row
::players[::input_n-1].body.bodyMapsSize != point[::input_n].aspect
::players[::input_n-1].body.bodyMapsSize < point[::input_n-1].aspect
::players[::input_n-1].body.bodyMapsSize != point[::new_input].aspect
::players[::input_n-1].body.bodyMapsSize != point[orig(direction)].position.row
::players[::input_n-1].body.bodyMapsSize != point[orig(direction)].aspect
::players[::input_n-1].body.bodyMapsSize != point[orig(direction)-1].aspect
::players[::input_n-1].body.bodyMapsSize != orig(point[::input_n-1].position.row)
::players[::input_n-1].body.bodyMapsSize != orig(point[::new_input].position.row)
::players[::input_n-1].body.bodyMapsSize != orig(point[direction-1].position.row)
::players[::new_input].body.bodyMapsSize < ::players[::input_n-1].body.bodySize
::players[::new_input].body.bodyMapsSize != ::players[orig(direction)-1].body.bodySize
::players[::new_input].body.bodyMapsSize < ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodyMapsSize != ::players[::new_input].body.bodyWidth
::players[::new_input].body.bodyMapsSize != ::players[orig(direction)-1].body.bodyWidth
::players[::new_input].body.bodyMapsSize >= ::players[::new_input].body.bodyHeight
::players[::new_input].body.bodyMapsSize != ::players[::input_n-1].body.color
::players[::new_input].body.bodyMapsSize > ::players[::new_input].body.color
::players[::new_input].body.bodyMapsSize >= ::players[orig(direction)].body.color
::players[::new_input].body.bodyMapsSize != ::players[orig(direction)-1].body.color
::players[::new_input].body.bodyMapsSize < ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodyMapsSize != ::players[::new_input].basePosition.col
::players[::new_input].body.bodyMapsSize != ::players[orig(direction)-1].basePosition.col
::players[::new_input].body.bodyMapsSize < ::players[::input_n].basePosition.row
::players[::new_input].body.bodyMapsSize < ::players[::new_input].basePosition.row
::players[::new_input].body.bodyMapsSize < ::players[orig(direction)].basePosition.row
::players[::new_input].body.bodyMapsSize < ::players[orig(direction)-1].basePosition.row
::players[::new_input].body.bodyMapsSize > ::players[orig(direction)].impulse[3][0]
::players[::new_input].body.bodyMapsSize > ::players[orig(direction)-1].impulse[3][0]
::players[::new_input].body.bodyMapsSize > ::players[::new_input].direction
::players[::new_input].body.bodyMapsSize > ::players[orig(direction)].direction
::players[::new_input].body.bodyMapsSize >= ::players[orig(direction)-1].direction
::players[::new_input].body.bodyMapsSize < ::players[::input_n].stepCounter
::players[::new_input].body.bodyMapsSize != ::players[::new_input].stepCounter
::players[::new_input].body.bodyMapsSize < ::players[orig(direction)].stepCounter
::players[::new_input].body.bodyMapsSize != point[::input_n].position.row
::players[::new_input].body.bodyMapsSize != point[::input_n].aspect
::players[::new_input].body.bodyMapsSize < point[::input_n-1].aspect
::players[::new_input].body.bodyMapsSize != point[::new_input].aspect
::players[::new_input].body.bodyMapsSize != point[orig(direction)].position.row
::players[::new_input].body.bodyMapsSize != point[orig(direction)].aspect
::players[::new_input].body.bodyMapsSize != point[orig(direction)-1].aspect
::players[::new_input].body.bodyMapsSize != orig(point[::input_n-1].position.row)
::players[::new_input].body.bodyMapsSize != orig(point[::new_input].position.row)
::players[::new_input].body.bodyMapsSize != orig(point[direction-1].position.row)
::players[orig(direction)-1].body.bodyMapsSize < ::players[::input_n-1].body.bodySize
::players[orig(direction)-1].body.bodyMapsSize != ::players[::new_input].body.bodySize
::players[orig(direction)-1].body.bodyMapsSize < ::players[::input_n-1].body.bodyWidth
::players[orig(direction)-1].body.bodyMapsSize != ::players[::new_input].body.bodyWidth
::players[orig(direction)-1].body.bodyMapsSize != ::players[orig(direction)-1].body.bodyWidth
::players[orig(direction)-1].body.bodyMapsSize >= ::players[orig(direction)-1].body.bodyHeight
::players[orig(direction)-1].body.bodyMapsSize != ::players[::input_n-1].body.color
::players[orig(direction)-1].body.bodyMapsSize != ::players[::new_input].body.color
::players[orig(direction)-1].body.bodyMapsSize != ::players[orig(direction)].body.color
::players[orig(direction)].body.color % ::players[orig(direction)-1].body.bodyMapsSize == 0
::players[orig(direction)-1].body.bodyMapsSize < ::players[::input_n-1].basePosition.col
::players[orig(direction)-1].body.bodyMapsSize != ::players[::new_input].basePosition.col
::players[orig(direction)-1].body.bodyMapsSize != ::players[orig(direction)].basePosition.col
::players[orig(direction)].basePosition.col % ::players[orig(direction)-1].body.bodyMapsSize == 0
::players[orig(direction)-1].basePosition.col % ::players[orig(direction)-1].body.bodyMapsSize == 0
::players[orig(direction)-1].body.bodyMapsSize < ::players[orig(direction)-1].basePosition.col
::players[orig(direction)-1].body.bodyMapsSize < ::players[::input_n].basePosition.row
::players[orig(direction)-1].body.bodyMapsSize < ::players[::new_input].basePosition.row
::players[orig(direction)-1].body.bodyMapsSize < ::players[orig(direction)].basePosition.row
::players[orig(direction)-1].body.bodyMapsSize < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)-1].body.bodyMapsSize >= ::players[orig(direction)].impulse[3][0]
::players[orig(direction)-1].body.bodyMapsSize >= ::players[::new_input].direction
::players[orig(direction)].direction % ::players[orig(direction)-1].body.bodyMapsSize == 0
::players[orig(direction)-1].body.bodyMapsSize != ::players[orig(direction)-1].direction
::players[orig(direction)-1].body.bodyMapsSize < ::players[::input_n].stepCounter
::players[orig(direction)-1].body.bodyMapsSize != ::players[::new_input].stepCounter
::players[orig(direction)-1].body.bodyMapsSize < ::players[orig(direction)].stepCounter
::players[orig(direction)-1].body.bodyMapsSize != ::players[orig(direction)-1].stepCounter
::players[orig(direction)-1].stepCounter % ::players[orig(direction)-1].body.bodyMapsSize == 0
::players[orig(direction)-1].body.bodyMapsSize <= point[::input_n-1].position.col
::players[orig(direction)-1].body.bodyMapsSize != point[::input_n].position.row
::players[orig(direction)-1].body.bodyMapsSize <= point[::input_n-1].position.row
::players[orig(direction)-1].body.bodyMapsSize != point[::input_n].aspect
::players[orig(direction)-1].body.bodyMapsSize < point[::input_n-1].aspect
::players[orig(direction)-1].body.bodyMapsSize != point[::new_input].aspect
::players[orig(direction)-1].body.bodyMapsSize != point[orig(direction)].position.row
::players[orig(direction)-1].body.bodyMapsSize != point[orig(direction)].aspect
::players[orig(direction)-1].body.bodyMapsSize != point[orig(direction)-1].aspect
::players[orig(direction)-1].body.bodyMapsSize <= orig(point[::input_n-1].position.col)
::players[orig(direction)-1].body.bodyMapsSize <= orig(point[::input_n-1].position.row)
::players[orig(direction)-1].body.bodyMapsSize != orig(point[direction-1].position.row)
::players[::input_n-1].body.bodySize >= ::players[::new_input].body.bodySize
::players[::input_n-1].body.bodySize >= ::players[orig(direction)-1].body.bodySize
::players[::input_n-1].body.bodySize > ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.bodySize > ::players[orig(direction)-1].body.bodyWidth
::players[::input_n-1].body.bodySize > ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodySize > ::players[orig(direction)-1].body.bodyHeight
::players[::input_n-1].body.bodySize > ::players[::new_input].body.color
::players[::input_n-1].body.bodySize > ::players[orig(direction)].body.color
::players[::input_n-1].body.bodySize > ::players[orig(direction)-1].body.color
::players[::input_n-1].body.bodySize != ::players[::new_input].basePosition.col
::players[::input_n-1].body.bodySize > ::players[orig(direction)].basePosition.col
::players[::input_n-1].body.bodySize != ::players[orig(direction)-1].basePosition.col
::players[::input_n-1].body.bodySize > ::players[::new_input].basePosition.row
::players[::input_n-1].body.bodySize > ::players[orig(direction)].basePosition.row
::players[::input_n-1].body.bodySize > ::players[orig(direction)-1].basePosition.row
::players[::input_n-1].body.bodySize > ::players[orig(direction)].impulse[3][0]
::players[::input_n-1].body.bodySize > ::players[orig(direction)-1].impulse[3][0]
::players[::input_n-1].body.bodySize > ::players[::new_input].direction
::players[::input_n-1].body.bodySize > ::players[orig(direction)].direction
::players[::input_n-1].body.bodySize > ::players[orig(direction)-1].direction
::players[::input_n-1].body.bodySize > ::players[::new_input].stepCounter
::players[::input_n-1].body.bodySize > ::players[orig(direction)].stepCounter
::players[::input_n-1].body.bodySize > ::players[orig(direction)-1].stepCounter
::players[::input_n-1].body.bodySize != point[::input_n].position.col
::players[::input_n-1].body.bodySize != point[::input_n-1].position.col
::players[::input_n-1].body.bodySize > point[::input_n].position.row
::players[::input_n-1].body.bodySize > point[::input_n-1].position.row
::players[::input_n-1].body.bodySize != point[::input_n].aspect
::players[::input_n-1].body.bodySize < point[::input_n-1].aspect
::players[::input_n-1].body.bodySize != point[::new_input].position.col
::players[::input_n-1].body.bodySize > point[::new_input].position.row
::players[::input_n-1].body.bodySize != point[::new_input].aspect
::players[::input_n-1].body.bodySize != point[orig(direction)].position.col
::players[::input_n-1].body.bodySize != point[orig(direction)-1].position.col
::players[::input_n-1].body.bodySize > point[orig(direction)].position.row
::players[::input_n-1].body.bodySize > point[orig(direction)-1].position.row
::players[::input_n-1].body.bodySize != point[orig(direction)].aspect
::players[::input_n-1].body.bodySize != point[orig(direction)-1].aspect
::players[::input_n-1].body.bodySize != orig(point[::input_n-1].position.col)
::players[::input_n-1].body.bodySize > orig(point[::input_n-1].position.row)
::players[::input_n-1].body.bodySize != orig(point[::new_input].position.col)
::players[::input_n-1].body.bodySize > orig(point[::new_input].position.row)
::players[::input_n-1].body.bodySize > orig(point[direction-1].position.row)
::players[::new_input].body.bodySize != ::players[::input_n-1].body.bodyWidth
::players[::new_input].body.bodySize > ::players[::new_input].body.bodyWidth
::players[::new_input].body.bodySize != ::players[orig(direction)-1].body.bodyWidth
::players[::new_input].body.bodySize > ::players[::new_input].body.bodyHeight
::players[::new_input].body.bodySize != ::players[orig(direction)-1].body.bodyHeight
::players[::new_input].body.bodySize != ::players[::input_n-1].body.color
::players[::new_input].body.bodySize > ::players[::new_input].body.color
::players[::new_input].body.bodySize > ::players[orig(direction)].body.color
::players[::new_input].body.bodySize != ::players[orig(direction)-1].body.color
::players[::new_input].body.bodySize < ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodySize != ::players[::new_input].basePosition.col
::players[::new_input].body.bodySize > ::players[orig(direction)].basePosition.col
::players[::new_input].body.bodySize != ::players[orig(direction)-1].basePosition.col
::players[::new_input].body.bodySize != ::players[::input_n].basePosition.row
::players[::new_input].body.bodySize != ::players[::new_input].basePosition.row
::players[::new_input].body.bodySize != ::players[orig(direction)].basePosition.row
::players[::new_input].body.bodySize != ::players[orig(direction)-1].basePosition.row
::players[::new_input].body.bodySize > ::players[orig(direction)].impulse[3][0]
::players[::new_input].body.bodySize > ::players[orig(direction)-1].impulse[3][0]
::players[::new_input].body.bodySize > ::players[::new_input].direction
::players[::new_input].body.bodySize > ::players[orig(direction)].direction
::players[::new_input].body.bodySize >= ::players[orig(direction)-1].direction
::players[::new_input].body.bodySize != ::players[::input_n].stepCounter
::players[::new_input].body.bodySize != ::players[::new_input].stepCounter
::players[::new_input].body.bodySize != ::players[orig(direction)].stepCounter
::players[::new_input].body.bodySize > ::players[orig(direction)-1].stepCounter
::players[::new_input].body.bodySize != point[::input_n].position.col
::players[::new_input].body.bodySize != point[::input_n-1].position.col
::players[::new_input].body.bodySize != point[::input_n].position.row
::players[::new_input].body.bodySize != point[::input_n-1].position.row
::players[::new_input].body.bodySize != point[::input_n].aspect
::players[::new_input].body.bodySize < point[::input_n-1].aspect
::players[::new_input].body.bodySize != point[::new_input].position.col
::players[::new_input].body.bodySize != point[::new_input].position.row
::players[::new_input].body.bodySize != point[::new_input].aspect
::players[::new_input].body.bodySize != point[orig(direction)].position.col
::players[::new_input].body.bodySize != point[orig(direction)-1].position.col
::players[::new_input].body.bodySize != point[orig(direction)].position.row
::players[::new_input].body.bodySize != point[orig(direction)-1].position.row
::players[::new_input].body.bodySize != point[orig(direction)].aspect
::players[::new_input].body.bodySize != point[orig(direction)-1].aspect
::players[::new_input].body.bodySize != orig(point[::input_n-1].position.col)
::players[::new_input].body.bodySize != orig(point[::input_n-1].position.row)
::players[::new_input].body.bodySize != orig(point[::new_input].position.col)
::players[::new_input].body.bodySize != orig(point[::new_input].position.row)
::players[::new_input].body.bodySize != orig(point[direction-1].position.row)
::players[orig(direction)-1].body.bodySize != ::players[::input_n-1].body.bodyWidth
::players[orig(direction)-1].body.bodySize != ::players[::new_input].body.bodyWidth
::players[orig(direction)-1].body.bodySize > ::players[orig(direction)-1].body.bodyWidth
::players[orig(direction)-1].body.bodySize != ::players[::new_input].body.bodyHeight
::players[orig(direction)-1].body.bodySize > ::players[orig(direction)-1].body.bodyHeight
::players[orig(direction)-1].body.bodySize != ::players[::input_n-1].body.color
::players[orig(direction)-1].body.bodySize != ::players[::new_input].body.color
::players[orig(direction)-1].body.bodySize != ::players[orig(direction)].body.color
::players[orig(direction)].body.color % ::players[orig(direction)-1].body.bodySize == 0
::players[orig(direction)-1].body.bodySize < ::players[::input_n-1].basePosition.col
::players[orig(direction)-1].body.bodySize != ::players[::new_input].basePosition.col
::players[orig(direction)-1].body.bodySize != ::players[orig(direction)].basePosition.col
::players[orig(direction)].basePosition.col % ::players[orig(direction)-1].body.bodySize == 0
::players[orig(direction)-1].body.bodySize < ::players[orig(direction)-1].basePosition.col
::players[orig(direction)-1].body.bodySize != ::players[::input_n].basePosition.row
::players[orig(direction)-1].body.bodySize != ::players[::new_input].basePosition.row
::players[orig(direction)-1].body.bodySize != ::players[orig(direction)].basePosition.row
::players[orig(direction)-1].body.bodySize != ::players[orig(direction)-1].basePosition.row
::players[orig(direction)-1].body.bodySize >= ::players[orig(direction)].impulse[3][0]
::players[orig(direction)-1].body.bodySize >= ::players[::new_input].direction
::players[orig(direction)].direction % ::players[orig(direction)-1].body.bodySize == 0
::players[orig(direction)-1].body.bodySize != ::players[orig(direction)-1].direction
::players[orig(direction)-1].body.bodySize != ::players[::input_n].stepCounter
::players[orig(direction)-1].body.bodySize > ::players[::new_input].stepCounter
::players[orig(direction)-1].body.bodySize != ::players[orig(direction)].stepCounter
::players[orig(direction)-1].body.bodySize != ::players[orig(direction)-1].stepCounter
::players[orig(direction)-1].stepCounter % ::players[orig(direction)-1].body.bodySize == 0
::players[orig(direction)-1].body.bodySize != point[::input_n].position.col
::players[orig(direction)-1].body.bodySize != point[::input_n-1].position.col
::players[orig(direction)-1].body.bodySize != point[::input_n].position.row
::players[orig(direction)-1].body.bodySize != point[::input_n-1].position.row
::players[orig(direction)-1].body.bodySize != point[::input_n].aspect
::players[orig(direction)-1].body.bodySize < point[::input_n-1].aspect
::players[orig(direction)-1].body.bodySize != point[::new_input].position.col
::players[orig(direction)-1].body.bodySize != point[::new_input].position.row
::players[orig(direction)-1].body.bodySize != point[::new_input].aspect
::players[orig(direction)-1].body.bodySize != point[orig(direction)].position.col
::players[orig(direction)-1].body.bodySize != point[orig(direction)-1].position.col
::players[orig(direction)-1].body.bodySize != point[orig(direction)].position.row
::players[orig(direction)-1].body.bodySize != point[orig(direction)-1].position.row
::players[orig(direction)-1].body.bodySize != point[orig(direction)].aspect
::players[orig(direction)-1].body.bodySize != point[orig(direction)-1].aspect
::players[orig(direction)-1].body.bodySize != orig(point[::input_n-1].position.col)
::players[orig(direction)-1].body.bodySize != orig(point[::new_input].position.col)
::players[orig(direction)-1].body.bodySize != orig(point[direction-1].position.row)
::players[::input_n-1].body.bodyWidth >= ::players[::new_input].body.bodyWidth
::players[::input_n-1].body.bodyWidth >= ::players[orig(direction)-1].body.bodyWidth
::players[::input_n-1].body.bodyWidth > ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodyWidth > ::players[orig(direction)-1].body.bodyHeight
::players[::input_n-1].body.bodyWidth > ::players[::new_input].body.color
::players[::input_n-1].body.bodyWidth > ::players[orig(direction)].body.color
::players[::input_n-1].body.bodyWidth > ::players[orig(direction)-1].body.color
::players[::input_n-1].body.bodyWidth != ::players[::new_input].basePosition.col
::players[::input_n-1].body.bodyWidth >= ::players[orig(direction)].basePosition.col
::players[::input_n-1].body.bodyWidth != ::players[orig(direction)-1].basePosition.col
::players[::input_n-1].body.bodyWidth < ::players[::new_input].basePosition.row
::players[::input_n-1].body.bodyWidth < ::players[orig(direction)].basePosition.row
::players[::input_n-1].body.bodyWidth < ::players[orig(direction)-1].basePosition.row
::players[::input_n-1].body.bodyWidth > ::players[orig(direction)].impulse[3][0]
::players[::input_n-1].body.bodyWidth > ::players[orig(direction)-1].impulse[3][0]
::players[::input_n-1].body.bodyWidth > ::players[::new_input].direction
::players[::input_n-1].body.bodyWidth > ::players[orig(direction)].direction
::players[::input_n-1].body.bodyWidth > ::players[orig(direction)-1].direction
::players[::input_n-1].body.bodyWidth != ::players[::new_input].stepCounter
::players[::input_n-1].body.bodyWidth > ::players[orig(direction)-1].stepCounter
::players[::input_n-1].body.bodyWidth != point[::input_n].aspect
::players[::input_n-1].body.bodyWidth < point[::input_n-1].aspect
::players[::input_n-1].body.bodyWidth != point[::new_input].aspect
::players[::input_n-1].body.bodyWidth != point[orig(direction)].aspect
::players[::input_n-1].body.bodyWidth != point[orig(direction)-1].aspect
::players[::new_input].body.bodyWidth != ::players[orig(direction)-1].body.bodyHeight
::players[::new_input].body.bodyWidth != ::players[::input_n-1].body.color
::players[::new_input].body.bodyWidth >= ::players[::new_input].body.color
::players[::new_input].body.bodyWidth >= ::players[orig(direction)].body.color
::players[::new_input].body.bodyWidth != ::players[orig(direction)-1].body.color
::players[::new_input].body.bodyWidth < ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodyWidth <= ::players[::new_input].basePosition.col
::players[::new_input].body.bodyWidth >= ::players[orig(direction)].basePosition.col
::players[::new_input].body.bodyWidth != ::players[orig(direction)-1].basePosition.col
::players[::new_input].body.bodyWidth < ::players[::input_n].basePosition.row
::players[::new_input].body.bodyWidth < ::players[::new_input].basePosition.row
::players[::new_input].body.bodyWidth < ::players[orig(direction)].basePosition.row
::players[::new_input].body.bodyWidth < ::players[orig(direction)-1].basePosition.row
::players[::new_input].body.bodyWidth >= ::players[orig(direction)].impulse[3][0]
::players[::new_input].body.bodyWidth >= ::players[orig(direction)-1].impulse[3][0]
::players[::new_input].body.bodyWidth >= ::players[::new_input].direction
::players[::new_input].body.bodyWidth >= ::players[orig(direction)].direction
::players[::new_input].body.bodyWidth != ::players[orig(direction)-1].direction
::players[::new_input].body.bodyWidth < ::players[::input_n].stepCounter
::players[::new_input].body.bodyWidth != ::players[::new_input].stepCounter
::players[::new_input].body.bodyWidth >= ::players[orig(direction)-1].stepCounter
::players[::new_input].body.bodyWidth < point[::input_n-1].aspect
::players[::new_input].body.bodyWidth <= point[::new_input].aspect
::players[::new_input].body.bodyWidth != point[orig(direction)-1].aspect
::players[orig(direction)-1].body.bodyWidth != ::players[::new_input].body.bodyHeight
::players[orig(direction)-1].body.bodyWidth != ::players[::input_n-1].body.color
::players[orig(direction)-1].body.bodyWidth != ::players[::new_input].body.color
::players[orig(direction)-1].body.bodyWidth != ::players[orig(direction)].body.color
::players[orig(direction)-1].body.bodyWidth != ::players[orig(direction)-1].body.color
::players[orig(direction)-1].body.bodyWidth < ::players[::input_n-1].basePosition.col
::players[orig(direction)-1].body.bodyWidth != ::players[::new_input].basePosition.col
::players[orig(direction)-1].body.bodyWidth != ::players[orig(direction)].basePosition.col
::players[orig(direction)-1].body.bodyWidth < ::players[orig(direction)-1].basePosition.col
::players[orig(direction)-1].body.bodyWidth < ::players[::input_n].basePosition.row
::players[orig(direction)-1].body.bodyWidth < ::players[::new_input].basePosition.row
::players[orig(direction)-1].body.bodyWidth < ::players[orig(direction)].basePosition.row
::players[orig(direction)-1].body.bodyWidth < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)-1].body.bodyWidth != ::players[::new_input].direction
::players[orig(direction)-1].body.bodyWidth != ::players[orig(direction)-1].direction
::players[orig(direction)-1].body.bodyWidth < ::players[::input_n].stepCounter
::players[orig(direction)-1].body.bodyWidth < ::players[orig(direction)].stepCounter
::players[orig(direction)-1].body.bodyWidth != ::players[orig(direction)-1].stepCounter
::players[orig(direction)-1].body.bodyWidth < point[::input_n-1].aspect
::players[orig(direction)-1].body.bodyWidth != point[::new_input].aspect
::players[orig(direction)-1].body.bodyWidth <= point[orig(direction)-1].aspect
::players[::new_input].body.bodyHeight != ::players[::input_n-1].body.color
::players[::new_input].body.bodyHeight >= ::players[::new_input].body.color
::players[::new_input].body.bodyHeight >= ::players[orig(direction)].body.color
::players[::new_input].body.bodyHeight != ::players[orig(direction)-1].body.color
::players[::new_input].body.bodyHeight < ::players[::input_n-1].basePosition.col
::players[::new_input].body.bodyHeight <= ::players[::new_input].basePosition.col
::players[::new_input].body.bodyHeight != ::players[orig(direction)-1].basePosition.col
::players[::new_input].body.bodyHeight < ::players[::input_n].basePosition.row
::players[::new_input].body.bodyHeight < ::players[::new_input].basePosition.row
::players[::new_input].body.bodyHeight < ::players[orig(direction)].basePosition.row
::players[::new_input].body.bodyHeight < ::players[orig(direction)-1].basePosition.row
::players[::new_input].body.bodyHeight >= ::players[orig(direction)].impulse[3][0]
::players[::new_input].body.bodyHeight >= ::players[orig(direction)-1].impulse[3][0]
::players[::new_input].body.bodyHeight >= ::players[::new_input].direction
::players[::new_input].body.bodyHeight >= ::players[orig(direction)].direction
::players[::new_input].body.bodyHeight != ::players[orig(direction)-1].direction
::players[::new_input].body.bodyHeight < ::players[::input_n].stepCounter
::players[::new_input].body.bodyHeight != ::players[::new_input].stepCounter
::players[::new_input].body.bodyHeight < ::players[orig(direction)].stepCounter
::players[::new_input].body.bodyHeight < point[::input_n-1].aspect
::players[::new_input].body.bodyHeight <= point[::new_input].aspect
::players[::new_input].body.bodyHeight != point[orig(direction)-1].aspect
::players[::new_input].body.bodyHeight != orig(point[::input_n-1].position.row)
::players[::new_input].body.bodyHeight != orig(point[direction-1].position.row)
::players[orig(direction)-1].body.bodyHeight != ::players[::input_n-1].body.color
::players[orig(direction)-1].body.bodyHeight != ::players[::new_input].body.color
::players[orig(direction)-1].body.bodyHeight != ::players[orig(direction)].body.color
::players[orig(direction)-1].body.bodyHeight != ::players[orig(direction)-1].body.color
::players[orig(direction)-1].body.bodyHeight < ::players[::input_n-1].basePosition.col
::players[orig(direction)-1].body.bodyHeight != ::players[::new_input].basePosition.col
::players[orig(direction)-1].body.bodyHeight != ::players[orig(direction)].basePosition.col
::players[orig(direction)-1].body.bodyHeight < ::players[orig(direction)-1].basePosition.col
::players[orig(direction)-1].body.bodyHeight < ::players[::input_n].basePosition.row
::players[orig(direction)-1].body.bodyHeight < ::players[::new_input].basePosition.row
::players[orig(direction)-1].body.bodyHeight < ::players[orig(direction)].basePosition.row
::players[orig(direction)-1].body.bodyHeight < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)-1].body.bodyHeight != ::players[::new_input].direction
::players[orig(direction)-1].body.bodyHeight != ::players[orig(direction)-1].direction
::players[orig(direction)-1].body.bodyHeight < ::players[::input_n].stepCounter
::players[orig(direction)-1].body.bodyHeight < ::players[orig(direction)].stepCounter
::players[orig(direction)-1].body.bodyHeight != ::players[orig(direction)-1].stepCounter
::players[orig(direction)-1].body.bodyHeight <= point[::input_n-1].position.col
::players[orig(direction)-1].body.bodyHeight <= point[::input_n-1].position.row
::players[orig(direction)-1].body.bodyHeight < point[::input_n-1].aspect
::players[orig(direction)-1].body.bodyHeight != point[::new_input].aspect
::players[orig(direction)-1].body.bodyHeight <= point[orig(direction)-1].position.col
::players[orig(direction)-1].body.bodyHeight <= point[orig(direction)-1].position.row
::players[orig(direction)-1].body.bodyHeight <= point[orig(direction)-1].aspect
::players[orig(direction)-1].body.bodyHeight <= orig(point[::input_n-1].position.col)
::players[orig(direction)-1].body.bodyHeight < orig(point[::input_n-1].position.row)
::players[orig(direction)-1].body.bodyHeight != orig(point[::new_input].position.row)
::players[orig(direction)-1].body.bodyHeight <= orig(point[direction-1].position.row)
::players[::input_n-1].body.color >= ::players[::new_input].body.color
::players[::input_n-1].body.color != ::players[orig(direction)].body.color
::players[::input_n-1].body.color >= ::players[orig(direction)-1].body.color
::players[::input_n-1].body.color != ::players[::new_input].basePosition.col
::players[::input_n-1].body.color != ::players[orig(direction)].basePosition.col
::players[::input_n-1].body.color < ::players[::new_input].basePosition.row
::players[::input_n-1].body.color < ::players[orig(direction)].basePosition.row
::players[::input_n-1].body.color < ::players[orig(direction)-1].basePosition.row
::players[::input_n-1].body.color > ::players[orig(direction)].impulse[3][0]
::players[::input_n-1].body.color > ::players[orig(direction)-1].impulse[3][0]
::players[::input_n-1].body.color > ::players[::new_input].direction
::players[::input_n-1].body.color >= ::players[orig(direction)].direction
::players[::input_n-1].body.color >= ::players[orig(direction)-1].direction
::players[::input_n-1].body.color != ::players[::new_input].stepCounter
::players[::input_n-1].body.color < ::players[orig(direction)].stepCounter
::players[::input_n-1].body.color != ::players[orig(direction)-1].stepCounter
::players[::input_n-1].body.color != point[::input_n].position.col
::players[::input_n-1].body.color <= point[::input_n-1].position.col
::players[::input_n-1].body.color != point[::input_n].position.row
::players[::input_n-1].body.color != point[::input_n].aspect
::players[::input_n-1].body.color < point[::input_n-1].aspect
::players[::input_n-1].body.color != point[::new_input].aspect
::players[::input_n-1].body.color != point[orig(direction)].position.col
::players[::input_n-1].body.color != point[orig(direction)-1].position.col
::players[::input_n-1].body.color != point[orig(direction)].position.row
::players[::input_n-1].body.color != point[orig(direction)-1].position.row
::players[::input_n-1].body.color != point[orig(direction)].aspect
::players[::input_n-1].body.color != point[orig(direction)-1].aspect
::players[::input_n-1].body.color != orig(point[::input_n-1].position.col)
::players[::input_n-1].body.color != orig(point[::input_n-1].position.row)
::players[::input_n-1].body.color != orig(point[::new_input].position.col)
::players[::input_n-1].body.color != orig(point[::new_input].position.row)
::players[::input_n-1].body.color != orig(point[direction-1].position.row)
::players[::new_input].body.color < ::players[::input_n-1].basePosition.col
::players[::new_input].body.color < ::players[::input_n].basePosition.row
::players[::new_input].body.color < ::players[::new_input].basePosition.row
::players[::new_input].body.color < ::players[orig(direction)].basePosition.row
::players[::new_input].body.color < ::players[orig(direction)-1].basePosition.row
::players[::new_input].body.color >= ::players[orig(direction)].impulse[3][0]
::players[::new_input].body.color >= ::players[orig(direction)-1].impulse[3][0]
::players[::new_input].body.color >= ::players[::new_input].direction
::players[::new_input].body.color >= ::players[orig(direction)].direction
::players[::new_input].body.color < ::players[::input_n].stepCounter
::players[::new_input].body.color != ::players[::new_input].stepCounter
::players[::new_input].body.color < ::players[orig(direction)].stepCounter
::players[::new_input].body.color <= point[::input_n-1].position.col
::players[::new_input].body.color < point[::input_n-1].aspect
::players[::new_input].body.color <= point[::new_input].position.col
::players[::new_input].body.color <= point[::new_input].aspect
::players[::new_input].body.color != point[orig(direction)-1].position.col
::players[::new_input].body.color != point[orig(direction)-1].position.row
::players[::new_input].body.color != point[orig(direction)-1].aspect
::players[::new_input].body.color != orig(point[::input_n-1].position.col)
::players[::new_input].body.color != orig(point[::input_n-1].position.row)
::players[::new_input].body.color != orig(point[direction-1].position.row)
::players[orig(direction)].body.color != ::players[orig(direction)-1].body.color
::players[orig(direction)].body.color < ::players[::input_n-1].basePosition.col
::players[orig(direction)].body.color <= ::players[::new_input].basePosition.col
::players[orig(direction)].body.color <= ::players[orig(direction)-1].basePosition.col
::players[orig(direction)].body.color < ::players[::input_n].basePosition.row
::players[orig(direction)].body.color < ::players[::new_input].basePosition.row
::players[orig(direction)].body.color < ::players[orig(direction)].basePosition.row
::players[orig(direction)].body.color < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].body.color >= ::players[orig(direction)].impulse[3][0]
::players[orig(direction)].body.color >= ::players[orig(direction)-1].impulse[3][0]
::players[orig(direction)].body.color != ::players[orig(direction)-1].direction
::players[orig(direction)].body.color < ::players[::input_n].stepCounter
::players[orig(direction)].body.color < ::players[orig(direction)].stepCounter
::players[orig(direction)].body.color <= ::players[orig(direction)-1].stepCounter
::players[orig(direction)].body.color <= point[::input_n-1].position.col
::players[orig(direction)].body.color != point[::input_n-1].position.row
::players[orig(direction)].body.color < point[::input_n-1].aspect
::players[orig(direction)].body.color <= point[::new_input].position.col
::players[orig(direction)].body.color <= point[::new_input].aspect
::players[orig(direction)].body.color != point[orig(direction)-1].position.col
::players[orig(direction)].body.color != point[orig(direction)-1].position.row
::players[orig(direction)].body.color != point[orig(direction)-1].aspect
::players[orig(direction)].body.color <= orig(point[::input_n-1].position.col)
::players[orig(direction)].body.color != orig(point[::input_n-1].position.row)
::players[orig(direction)].body.color <= orig(point[::new_input].position.col)
::players[orig(direction)].body.color != orig(point[direction-1].position.row)
::players[orig(direction)-1].body.color < ::players[::input_n-1].basePosition.col
::players[orig(direction)-1].body.color != ::players[::new_input].basePosition.col
::players[orig(direction)-1].body.color != ::players[orig(direction)].basePosition.col
::players[orig(direction)-1].body.color < ::players[orig(direction)-1].basePosition.col
::players[orig(direction)-1].body.color < ::players[::input_n].basePosition.row
::players[orig(direction)-1].body.color < ::players[::new_input].basePosition.row
::players[orig(direction)-1].body.color < ::players[orig(direction)].basePosition.row
::players[orig(direction)-1].body.color < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)-1].body.color >= ::players[orig(direction)].impulse[3][0]
::players[orig(direction)-1].body.color >= ::players[orig(direction)-1].impulse[3][0]
::players[orig(direction)-1].body.color >= ::players[::new_input].direction
::players[orig(direction)-1].body.color != ::players[orig(direction)].direction
::players[orig(direction)-1].body.color < ::players[::input_n].stepCounter
::players[orig(direction)-1].body.color != ::players[::new_input].stepCounter
::players[orig(direction)-1].body.color < ::players[orig(direction)].stepCounter
::players[orig(direction)-1].body.color != ::players[orig(direction)-1].stepCounter
::players[orig(direction)-1].body.color != point[::input_n].position.col
::players[orig(direction)-1].body.color < point[::input_n-1].position.col
::players[orig(direction)-1].body.color != point[::input_n].position.row
::players[orig(direction)-1].body.color != point[::input_n].aspect
::players[orig(direction)-1].body.color < point[::input_n-1].aspect
::players[orig(direction)-1].body.color != point[::new_input].position.col
::players[orig(direction)-1].body.color != point[::new_input].aspect
::players[orig(direction)-1].body.color != point[orig(direction)].position.col
::players[orig(direction)-1].body.color != point[orig(direction)-1].position.col
::players[orig(direction)-1].body.color != point[orig(direction)].position.row
::players[orig(direction)-1].body.color != point[orig(direction)-1].position.row
::players[orig(direction)-1].body.color != point[orig(direction)].aspect
::players[orig(direction)-1].body.color != point[orig(direction)-1].aspect
::players[orig(direction)-1].body.color < orig(point[::input_n-1].position.col)
::players[orig(direction)-1].body.color != orig(point[::input_n-1].position.row)
::players[orig(direction)-1].body.color != orig(point[::new_input].position.col)
::players[orig(direction)-1].body.color != orig(point[::new_input].position.row)
::players[orig(direction)-1].body.color != orig(point[direction-1].position.row)
::players[::input_n-1].basePosition.col >= ::players[::new_input].basePosition.col
::players[::input_n-1].basePosition.col > ::players[orig(direction)].basePosition.col
::players[::input_n-1].basePosition.col >= ::players[orig(direction)-1].basePosition.col
::players[::input_n-1].basePosition.col > ::players[::new_input].basePosition.row
::players[::input_n-1].basePosition.col > ::players[orig(direction)].basePosition.row
::players[::input_n-1].basePosition.col > ::players[orig(direction)-1].basePosition.row
::players[::input_n-1].basePosition.col > ::players[orig(direction)].impulse[3][0]
::players[::input_n-1].basePosition.col > ::players[orig(direction)-1].impulse[3][0]
::players[::input_n-1].basePosition.col > ::players[::new_input].direction
::players[::input_n-1].basePosition.col > ::players[orig(direction)].direction
::players[::input_n-1].basePosition.col > ::players[orig(direction)-1].direction
::players[::input_n-1].basePosition.col > ::players[::new_input].stepCounter
::players[::input_n-1].basePosition.col > ::players[orig(direction)].stepCounter
::players[::input_n-1].basePosition.col > ::players[orig(direction)-1].stepCounter
::players[::input_n-1].basePosition.col > point[::input_n].position.row
::players[::input_n-1].basePosition.col > point[::input_n-1].position.row
::players[::input_n-1].basePosition.col != point[::input_n].aspect
::players[::input_n-1].basePosition.col != point[::input_n-1].aspect
::players[::input_n-1].basePosition.col > point[::new_input].position.row
::players[::input_n-1].basePosition.col != point[::new_input].aspect
::players[::input_n-1].basePosition.col > point[orig(direction)].position.row
::players[::input_n-1].basePosition.col > point[orig(direction)-1].position.row
::players[::input_n-1].basePosition.col != point[orig(direction)].aspect
::players[::input_n-1].basePosition.col != point[orig(direction)-1].aspect
::players[::input_n-1].basePosition.col > orig(point[::input_n-1].position.row)
::players[::input_n-1].basePosition.col > orig(point[::new_input].position.row)
::players[::input_n-1].basePosition.col > orig(point[direction-1].position.row)
::players[::new_input].basePosition.col >= ::players[orig(direction)].basePosition.col
::players[::new_input].basePosition.col != ::players[::input_n].basePosition.row
::players[::new_input].basePosition.col != ::players[::new_input].basePosition.row
::players[::new_input].basePosition.col != ::players[orig(direction)].basePosition.row
::players[::new_input].basePosition.col != ::players[orig(direction)-1].basePosition.row
::players[::new_input].basePosition.col >= ::players[orig(direction)].impulse[3][0]
::players[::new_input].basePosition.col >= ::players[orig(direction)-1].impulse[3][0]
::players[::new_input].basePosition.col >= ::players[::new_input].direction
::players[::new_input].basePosition.col >= ::players[orig(direction)].direction
::players[::new_input].basePosition.col != ::players[orig(direction)-1].direction
::players[::new_input].basePosition.col != ::players[::input_n].stepCounter
::players[::new_input].basePosition.col != ::players[::new_input].stepCounter
::players[::new_input].basePosition.col != ::players[orig(direction)].stepCounter
::players[::new_input].basePosition.col >= ::players[orig(direction)-1].stepCounter
::players[::new_input].basePosition.col != point[::input_n-1].position.col
::players[::new_input].basePosition.col != point[::input_n-1].position.row
::players[::new_input].basePosition.col != point[::input_n-1].aspect
::players[::new_input].basePosition.col != point[orig(direction)-1].position.col
::players[::new_input].basePosition.col != point[orig(direction)-1].position.row
::players[::new_input].basePosition.col != point[orig(direction)-1].aspect
::players[::new_input].basePosition.col != orig(point[::input_n-1].position.col)
::players[::new_input].basePosition.col != orig(point[::input_n-1].position.row)
::players[::new_input].basePosition.col != orig(point[direction-1].position.row)
::players[orig(direction)].basePosition.col != ::players[orig(direction)-1].basePosition.col
::players[orig(direction)].basePosition.col < ::players[::input_n].basePosition.row
::players[orig(direction)].basePosition.col < ::players[::new_input].basePosition.row
::players[orig(direction)].basePosition.col < ::players[orig(direction)].basePosition.row
::players[orig(direction)].basePosition.col < ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].basePosition.col >= ::players[orig(direction)-1].impulse[3][0]
::players[orig(direction)].basePosition.col >= ::players[orig(direction)].direction
::players[orig(direction)].basePosition.col != ::players[orig(direction)-1].direction
::players[orig(direction)].basePosition.col < ::players[::input_n].stepCounter
::players[orig(direction)].basePosition.col <= ::players[orig(direction)].stepCounter
::players[orig(direction)].basePosition.col < point[::input_n-1].aspect
::players[orig(direction)].basePosition.col <= point[::new_input].aspect
::players[orig(direction)].basePosition.col != point[orig(direction)-1].position.col
::players[orig(direction)].basePosition.col != point[orig(direction)-1].aspect
::players[orig(direction)-1].basePosition.col != ::players[::input_n].basePosition.row
::players[orig(direction)-1].basePosition.col != ::players[::new_input].basePosition.row
::players[orig(direction)-1].basePosition.col != ::players[orig(direction)].basePosition.row
::players[orig(direction)-1].basePosition.col != ::players[orig(direction)-1].basePosition.row
::players[orig(direction)-1].basePosition.col > ::players[orig(direction)].impulse[3][0]
::players[orig(direction)-1].basePosition.col > ::players[orig(direction)-1].impulse[3][0]
::players[orig(direction)-1].basePosition.col > ::players[::new_input].direction
::players[orig(direction)-1].basePosition.col >= ::players[orig(direction)].direction
::players[orig(direction)-1].basePosition.col != ::players[::input_n].stepCounter
::players[orig(direction)-1].basePosition.col > ::players[::new_input].stepCounter
::players[orig(direction)-1].basePosition.col != ::players[orig(direction)].stepCounter
::players[orig(direction)-1].basePosition.col != ::players[orig(direction)-1].stepCounter
::players[orig(direction)-1].basePosition.col != point[::input_n-1].position.row
::players[orig(direction)-1].basePosition.col != point[::input_n].aspect
::players[orig(direction)-1].basePosition.col != point[::input_n-1].aspect
::players[orig(direction)-1].basePosition.col != point[::new_input].position.row
::players[orig(direction)-1].basePosition.col != point[::new_input].aspect
::players[orig(direction)-1].basePosition.col != point[orig(direction)].aspect
::players[orig(direction)-1].basePosition.col != point[orig(direction)-1].aspect
::players[::input_n].basePosition.row >= ::players[::new_input].basePosition.row
::players[::input_n].basePosition.row <= ::players[orig(direction)].basePosition.row
::players[::input_n].basePosition.row != ::players[orig(direction)-1].basePosition.row
::players[::input_n].basePosition.row > ::players[orig(direction)].impulse[3][0]
::players[::input_n].basePosition.row > ::players[orig(direction)-1].impulse[3][0]
::players[::input_n].basePosition.row > ::players[::new_input].direction
::players[::input_n].basePosition.row > ::players[orig(direction)].direction
::players[::input_n].basePosition.row > ::players[orig(direction)-1].direction
::players[::input_n].basePosition.row > ::players[::new_input].stepCounter
::players[::input_n].basePosition.row > ::players[orig(direction)].stepCounter
::players[::input_n].basePosition.row > ::players[orig(direction)-1].stepCounter
::players[::input_n].basePosition.row != point[::input_n].aspect
::players[::input_n].basePosition.row < point[::input_n-1].aspect
::players[::input_n].basePosition.row != point[::new_input].aspect
::players[::input_n].basePosition.row != point[orig(direction)].aspect
::players[::input_n].basePosition.row != point[orig(direction)-1].aspect
::players[::new_input].basePosition.row <= ::players[orig(direction)].basePosition.row
::players[::new_input].basePosition.row > ::players[orig(direction)].impulse[3][0]
::players[::new_input].basePosition.row > ::players[orig(direction)-1].impulse[3][0]
::players[::new_input].basePosition.row > ::players[::new_input].direction
::players[::new_input].basePosition.row > ::players[orig(direction)].direction
::players[::new_input].basePosition.row > ::players[orig(direction)-1].direction
::players[::new_input].basePosition.row >= ::players[::input_n].stepCounter
::players[::new_input].basePosition.row > ::players[::new_input].stepCounter
::players[::new_input].basePosition.row >= ::players[orig(direction)].stepCounter
::players[::new_input].basePosition.row > ::players[orig(direction)-1].stepCounter
::players[::new_input].basePosition.row != point[::input_n].aspect
::players[::new_input].basePosition.row < point[::input_n-1].aspect
::players[::new_input].basePosition.row != point[::new_input].aspect
::players[::new_input].basePosition.row != point[orig(direction)].aspect
::players[::new_input].basePosition.row != point[orig(direction)-1].aspect
::players[orig(direction)].basePosition.row >= ::players[orig(direction)-1].basePosition.row
::players[orig(direction)].basePosition.row > ::players[orig(direction)].impulse[3][0]
::players[orig(direction)].basePosition.row > ::players[orig(direction)-1].impulse[3][0]
::players[orig(direction)].basePosition.row > ::players[::new_input].direction
::players[orig(direction)].basePosition.row > ::players[orig(direction)].direction
::players[orig(direction)].basePosition.row > ::players[orig(direction)-1].direction
::players[orig(direction)].basePosition.row > ::players[::input_n].stepCounter
::players[orig(direction)].basePosition.row > ::players[::new_input].stepCounter
::players[orig(direction)].basePosition.row > ::players[orig(direction)].stepCounter
::players[orig(direction)].basePosition.row > ::players[orig(direction)-1].stepCounter
::players[orig(direction)].basePosition.row != point[::input_n].aspect
::players[orig(direction)].basePosition.row < point[::input_n-1].aspect
::players[orig(direction)].basePosition.row != point[::new_input].aspect
::players[orig(direction)].basePosition.row != point[orig(direction)].aspect
::players[orig(direction)].basePosition.row != point[orig(direction)-1].aspect
::players[orig(direction)-1].basePosition.row > ::players[orig(direction)].impulse[3][0]
::players[orig(direction)-1].basePosition.row > ::players[orig(direction)-1].impulse[3][0]
::players[orig(direction)-1].basePosition.row > ::players[::new_input].direction
::players[orig(direction)-1].basePosition.row > ::players[orig(direction)].direction
::players[orig(direction)-1].basePosition.row > ::players[orig(direction)-1].direction
::players[orig(direction)-1].basePosition.row >= ::players[::input_n].stepCounter
::players[::new_input].stepCounter % ::players[orig(direction)-1].basePosition.row == 0
::players[orig(direction)-1].basePosition.row >= ::players[::new_input].stepCounter
::players[orig(direction)-1].basePosition.row >= ::players[orig(direction)].stepCounter
::players[orig(direction)-1].basePosition.row > ::players[orig(direction)-1].stepCounter
::players[orig(direction)-1].basePosition.row != point[::input_n].aspect
::players[orig(direction)-1].basePosition.row < point[::input_n-1].aspect
::players[orig(direction)-1].basePosition.row != point[::new_input].aspect
::players[orig(direction)-1].basePosition.row != point[orig(direction)].aspect
::players[orig(direction)-1].basePosition.row != point[orig(direction)-1].aspect
::players[orig(direction)].impulse[3][0] >= ::players[orig(direction)-1].impulse[3][0]
::players[orig(direction)].impulse[3][0] <= ::players[::new_input].direction
::players[orig(direction)].impulse[3][0] < ::players[orig(direction)-1].direction
::players[orig(direction)].impulse[3][0] < ::players[::input_n].stepCounter
::players[orig(direction)].impulse[3][0] < ::players[orig(direction)].stepCounter
::players[orig(direction)].impulse[3][0] <= ::players[orig(direction)-1].stepCounter
::players[orig(direction)].impulse[3][0] < point[::input_n-1].position.col
::players[orig(direction)].impulse[3][0] < point[::input_n-1].position.row
::players[orig(direction)].impulse[3][0] <= point[::input_n].aspect
::players[orig(direction)].impulse[3][0] < point[::input_n-1].aspect
::players[orig(direction)].impulse[3][0] <= point[::new_input].position.col
::players[orig(direction)].impulse[3][0] <= point[::new_input].position.row
::players[orig(direction)].impulse[3][0] <= point[::new_input].aspect
::players[orig(direction)].impulse[3][0] <= point[orig(direction)].aspect
::players[orig(direction)].impulse[3][0] <= point[orig(direction)-1].aspect
::players[orig(direction)].impulse[3][0] < orig(point[::input_n-1].position.col)
::players[orig(direction)].impulse[3][0] < orig(point[::input_n-1].position.row)
::players[orig(direction)].impulse[3][0] <= orig(point[::new_input].position.col)
::players[orig(direction)].impulse[3][0] <= orig(point[::new_input].position.row)
::players[orig(direction)-1].impulse[3][0] <= ::players[::new_input].direction
::players[orig(direction)-1].impulse[3][0] < ::players[orig(direction)-1].direction
::players[orig(direction)-1].impulse[3][0] < ::players[::input_n].stepCounter
::players[orig(direction)-1].impulse[3][0] < ::players[orig(direction)].stepCounter
::players[orig(direction)-1].impulse[3][0] < point[::input_n-1].position.col
::players[orig(direction)-1].impulse[3][0] < point[::input_n-1].position.row
::players[orig(direction)-1].impulse[3][0] <= point[::input_n].aspect
::players[orig(direction)-1].impulse[3][0] < point[::input_n-1].aspect
::players[orig(direction)-1].impulse[3][0] <= point[::new_input].position.col
::players[orig(direction)-1].impulse[3][0] <= point[::new_input].position.row
::players[orig(direction)-1].impulse[3][0] <= point[::new_input].aspect
::players[orig(direction)-1].impulse[3][0] <= point[orig(direction)].aspect
::players[orig(direction)-1].impulse[3][0] <= point[orig(direction)-1].aspect
::players[orig(direction)-1].impulse[3][0] < orig(point[::input_n-1].position.col)
::players[orig(direction)-1].impulse[3][0] < orig(point[::input_n-1].position.row)
::players[orig(direction)-1].impulse[3][0] <= orig(point[::new_input].position.col)
::players[orig(direction)-1].impulse[3][0] <= orig(point[::new_input].position.row)
::players[::new_input].direction <= ::players[orig(direction)-1].direction
::players[::new_input].direction < ::players[::input_n].stepCounter
::players[::new_input].direction != ::players[::new_input].stepCounter
::players[::new_input].direction < ::players[orig(direction)].stepCounter
::players[::new_input].direction < point[::input_n-1].position.col
::players[::new_input].direction < point[::input_n-1].position.row
::players[::new_input].direction < point[::input_n-1].aspect
::players[::new_input].direction <= point[::new_input].position.col
::players[::new_input].direction <= point[::new_input].position.row
::players[::new_input].direction <= point[::new_input].aspect
::players[::new_input].direction != point[orig(direction)-1].position.col
::players[::new_input].direction != point[orig(direction)-1].position.row
::players[::new_input].direction != point[orig(direction)-1].aspect
::players[::new_input].direction < orig(point[::input_n-1].position.col)
::players[::new_input].direction <= orig(point[::input_n-1].position.row)
::players[::new_input].direction <= orig(point[::new_input].position.col)
::players[::new_input].direction <= orig(point[::new_input].position.row)
::players[::new_input].direction != orig(point[direction-1].position.row)
::players[orig(direction)].direction <= ::players[orig(direction)-1].direction
::players[orig(direction)].direction < ::players[::input_n].stepCounter
::players[orig(direction)].direction < ::players[orig(direction)].stepCounter
::players[orig(direction)].direction <= ::players[orig(direction)-1].stepCounter
::players[orig(direction)].direction < point[::input_n-1].position.col
::players[orig(direction)].direction < point[::input_n-1].position.row
::players[orig(direction)].direction < point[::input_n-1].aspect
::players[orig(direction)].direction <= point[::new_input].position.col
::players[orig(direction)].direction <= point[::new_input].position.row
::players[orig(direction)].direction <= point[::new_input].aspect
::players[orig(direction)].direction != point[orig(direction)-1].aspect
::players[orig(direction)].direction < orig(point[::input_n-1].position.col)
::players[orig(direction)].direction <= orig(point[::input_n-1].position.row)
::players[orig(direction)].direction <= orig(point[::new_input].position.col)
::players[orig(direction)].direction <= orig(point[::new_input].position.row)
::players[orig(direction)-1].direction < ::players[::input_n].stepCounter
::players[orig(direction)-1].direction != ::players[::new_input].stepCounter
::players[orig(direction)-1].direction < ::players[orig(direction)].stepCounter
::players[orig(direction)-1].direction != ::players[orig(direction)-1].stepCounter
::players[orig(direction)-1].direction != point[::input_n].position.col
::players[orig(direction)-1].direction <= point[::input_n-1].position.col
::players[orig(direction)-1].direction != point[::input_n].position.row
::players[orig(direction)-1].direction != point[::input_n].aspect
::players[orig(direction)-1].direction < point[::input_n-1].aspect
::players[orig(direction)-1].direction != point[::new_input].aspect
::players[orig(direction)-1].direction != point[orig(direction)].position.col
::players[orig(direction)-1].direction != point[orig(direction)-1].position.col
::players[orig(direction)-1].direction != point[orig(direction)].position.row
::players[orig(direction)-1].direction != point[orig(direction)-1].position.row
::players[orig(direction)-1].direction != point[orig(direction)].aspect
::players[orig(direction)-1].direction != point[orig(direction)-1].aspect
::players[orig(direction)-1].direction != orig(point[::input_n-1].position.col)
::players[orig(direction)-1].direction != orig(point[::input_n-1].position.row)
::players[orig(direction)-1].direction != orig(point[::new_input].position.col)
::players[orig(direction)-1].direction != orig(point[::new_input].position.row)
::players[orig(direction)-1].direction != orig(point[direction-1].position.row)
::players[::input_n].stepCounter >= ::players[::new_input].stepCounter
::players[::input_n].stepCounter >= ::players[orig(direction)].stepCounter
::players[::input_n].stepCounter > ::players[orig(direction)-1].stepCounter
::players[::input_n].stepCounter != point[::input_n].aspect
::players[::input_n].stepCounter < point[::input_n-1].aspect
::players[::input_n].stepCounter != point[::new_input].aspect
::players[::input_n].stepCounter != point[orig(direction)].aspect
::players[::input_n].stepCounter != point[orig(direction)-1].aspect
::players[::new_input].stepCounter % ::players[orig(direction)].stepCounter == 0
::players[::new_input].stepCounter <= ::players[orig(direction)].stepCounter
::players[::new_input].stepCounter < point[::input_n-1].position.col
::players[::new_input].stepCounter <= point[::input_n-1].position.row
::players[::new_input].stepCounter < point[::input_n-1].aspect
::players[::new_input].stepCounter != point[::new_input].position.col
::players[::new_input].stepCounter != point[::new_input].position.row
::players[::new_input].stepCounter != point[::new_input].aspect
::players[::new_input].stepCounter <= point[orig(direction)-1].position.col
::players[::new_input].stepCounter <= point[orig(direction)-1].position.row
::players[::new_input].stepCounter <= point[orig(direction)-1].aspect
::players[::new_input].stepCounter < orig(point[::input_n-1].position.col)
::players[::new_input].stepCounter < orig(point[::input_n-1].position.row)
::players[::new_input].stepCounter != orig(point[::new_input].position.col)
::players[::new_input].stepCounter != orig(point[::new_input].position.row)
::players[::new_input].stepCounter <= orig(point[direction-1].position.row)
::players[orig(direction)].stepCounter >= ::players[orig(direction)-1].stepCounter
::players[orig(direction)].stepCounter != point[::input_n].aspect
::players[orig(direction)].stepCounter < point[::input_n-1].aspect
::players[orig(direction)].stepCounter != point[::new_input].aspect
::players[orig(direction)].stepCounter != point[orig(direction)].aspect
::players[orig(direction)].stepCounter != point[orig(direction)-1].aspect
::players[orig(direction)-1].stepCounter != point[::input_n-1].position.row
::players[orig(direction)-1].stepCounter < point[::input_n-1].aspect
::players[orig(direction)-1].stepCounter <= point[::new_input].aspect
::players[orig(direction)-1].stepCounter != point[orig(direction)-1].position.col
::players[orig(direction)-1].stepCounter != point[orig(direction)-1].position.row
::players[orig(direction)-1].stepCounter != point[orig(direction)-1].aspect
::players[orig(direction)-1].stepCounter != orig(point[::input_n-1].position.row)
::players[orig(direction)-1].stepCounter != orig(point[direction-1].position.row)
point[::input_n].position.col != point[::input_n-1].position.col
point[::input_n].position.col != orig(point[::input_n-1].position.col)
point[::input_n-1].position.col != point[::input_n-1].aspect
point[::input_n-1].position.col != point[orig(direction)].position.col
point[::input_n-1].position.col != point[orig(direction)-1].aspect
point[::input_n].position.row <= point[::input_n].aspect
point[::input_n].position.row < point[::input_n-1].aspect
point[::input_n].position.row <= point[::new_input].aspect
point[::input_n-1].position.row != point[::input_n].aspect
point[::input_n-1].position.row < point[::input_n-1].aspect
point[::input_n-1].position.row != point[::new_input].aspect
point[::input_n-1].position.row >= point[orig(direction)-1].position.row
point[::input_n-1].position.row != point[orig(direction)].aspect
point[::input_n-1].position.row != point[orig(direction)-1].aspect
point[::input_n].aspect >= point[orig(direction)].position.row
point[::input_n].aspect != orig(point[::input_n-1].position.row)
point[::input_n-1].aspect > point[::new_input].position.row
point[::input_n-1].aspect != point[orig(direction)-1].position.col
point[::input_n-1].aspect > point[orig(direction)].position.row
point[::input_n-1].aspect > point[orig(direction)-1].position.row
point[::input_n-1].aspect != orig(point[::input_n-1].position.col)
point[::input_n-1].aspect > orig(point[::input_n-1].position.row)
point[::input_n-1].aspect > orig(point[::new_input].position.row)
point[::input_n-1].aspect > orig(point[direction-1].position.row)
point[::new_input].position.row <= point[::new_input].aspect
point[::new_input].position.row != point[orig(direction)-1].aspect
point[::new_input].aspect >= point[orig(direction)].position.row
point[::new_input].aspect != point[orig(direction)-1].position.row
point[::new_input].aspect != orig(point[::input_n-1].position.row)
point[::new_input].aspect >= orig(point[::new_input].position.row)
point[::new_input].aspect != orig(point[direction-1].position.row)
point[orig(direction)].position.col != orig(point[::input_n-1].position.col)
point[orig(direction)].position.row <= point[orig(direction)].aspect
point[orig(direction)].position.row <= point[orig(direction)-1].aspect
point[orig(direction)-1].position.row <= point[orig(direction)-1].aspect
point[orig(direction)-1].position.row <= orig(point[direction-1].position.row)
point[orig(direction)].aspect != orig(point[::input_n-1].position.row)
point[orig(direction)-1].aspect != orig(point[::input_n-1].position.col)
point[orig(direction)-1].aspect != orig(point[::input_n-1].position.row)
point[orig(direction)-1].aspect != orig(point[::new_input].position.row)
point[orig(direction)-1].aspect >= orig(point[direction-1].position.row)
orig(direction) - 2 * point[::input_n-1].position.row + 2 * orig(point[::input_n-1].position.row) - 3 == 0
::players[orig(direction)-1].body.type - point[orig(direction)-1].position.row + orig(point[direction-1].position.row) - 1 == 0
::players[orig(direction)-1].body.bodyPoints->aspect + 11 * point[orig(direction)-1].position.row - 11 * orig(point[direction-1].position.row) - 35 == 0
::players[orig(direction)-1].body.bodyMapsSize + 3 * point[orig(direction)-1].position.row - 3 * orig(point[direction-1].position.row) - 1 == 0
::players[orig(direction)-1].body.bodySize + 27 * point[orig(direction)-1].position.row - 27 * orig(point[direction-1].position.row) - 1 == 0
::players[orig(direction)-1].body.bodyWidth + 8 * point[orig(direction)-1].position.row - 8 * orig(point[direction-1].position.row) == 0
::players[orig(direction)-1].body.bodyHeight + 4 * point[orig(direction)-1].position.row - 4 * orig(point[direction-1].position.row) == 0
::players[orig(direction)].body.color - 2 * point[::input_n-1].position.row + 2 * orig(point[::input_n-1].position.row) - 2 == 0
::players[orig(direction)-1].body.color + 2 * point[::input_n-1].position.col - 2 * orig(point[::input_n-1].position.col) - 3 == 0
::players[orig(direction)-1].body.color + 2 * point[::new_input].position.col - 2 * orig(point[::new_input].position.col) - 3 == 0
::players[orig(direction)-1].basePosition.row - 2 * point[::input_n-1].position.row + 2 * orig(point[::input_n-1].position.row) - 11 == 0
::players[orig(direction)-1].direction - 2 * point[orig(direction)-1].position.row + 2 * orig(point[direction-1].position.row) - 3 == 0
===========================================================================
..moveSolidPlayer():::ENTER
::crashedPlayers[].start == ::crashedPlayers[].end
::crashedPlayers[].start == ::playerSpace[].playerNodes->start->prev
::crashedPlayers[].start == ::playerSpace[].playerNodes->end->next
::crashedPlayers[].start == ::playerSpace[].guideNodes->start
::crashedPlayers[].start == ::playerSpace[].guideNodes->end
::crashedPlayers[].start == space[].playerNodes->start->prev
::crashedPlayers[].start == space[].playerNodes->end->next
::crashedPlayers[].start == space[].guideNodes->start
::crashedPlayers[].start == space[].guideNodes->end
::playerSpace == space
::playerSpace[] == space[]
::playerSpace[].playerNodes == space[].playerNodes
::playerSpace[].playerNodes[0] == space[].playerNodes[0]
::playerSpace[].playerNodes->start == space[].playerNodes->start
::playerSpace[].playerNodes->start[0] == space[].playerNodes->start[0]
::playerSpace[].playerNodes->start->next == space[].playerNodes->start->next
::playerSpace[].playerNodes->start->next[0] == space[].playerNodes->start->next[0]
::playerSpace[].playerNodes->start->data == space[].playerNodes->start->data
::playerSpace[].playerNodes->end == space[].playerNodes->end
::playerSpace[].playerNodes->end[0] == space[].playerNodes->end[0]
::playerSpace[].playerNodes->end->data == space[].playerNodes->end->data
::playerSpace[].playerNodes->end->prev == space[].playerNodes->end->prev
::playerSpace[].playerNodes->end->prev[0] == space[].playerNodes->end->prev[0]
::playerSpace[].playerMap == space[].playerMap
::playerSpace[].guideNodes == space[].guideNodes
::playerSpace[].guideNodes[0] == space[].guideNodes[0]
::playerSpace[].groundMap == space[].groundMap
::playerSpace[].actionGroup == space[].actionGroup
::playerSpace[].actionGroup[0] == space[].actionGroup[0]
::playerSpace[].actionGroup->numActions == space[].actionGroup->numActions
::players == ::players[::input_n-1].body.bodyPoints->player
::players[].id == ::players[].type
::players[].id == ::players[].retired
::players[].id == ::players[].impulse[2][0]
::players[].id == ::players[].impulse[4][0]
::players[].id == ::players[].impulse[6][0]
::players[].id == ::players[].impulse[8][0]
::players[].body.visible == ::players[].body.tangible
::input_n == ::input_i
::input_n == size(::crashedPlayers[])
::input_n == size(::playerSpace[])
::input_n == size(::playerSpace[].playerNodes[0])
::input_n == size(::playerSpace[].playerNodes->start[0])
::input_n == size(::playerSpace[].playerNodes->start->next[0])
::input_n == size(::playerSpace[].playerNodes->end[0])
::input_n == size(::playerSpace[].playerNodes->end->prev[0])
::input_n == size(::playerSpace[].guideNodes[0])
::input_n == size(::playerSpace[].actionGroup[0])
::input_n == size(space[])
::input_n == size(space[].playerNodes[0])
::input_n == size(space[].playerNodes->start[0])
::input_n == size(space[].playerNodes->start->next[0])
::input_n == size(space[].playerNodes->end[0])
::input_n == size(space[].playerNodes->end->prev[0])
::input_n == size(space[].guideNodes[0])
::input_n == size(space[].actionGroup[0])
::input_n == ::players[::input_n].body.type
::input_n == ::players[::input_i].body.type
::input_n == ::players[::input_n].body.visible
::input_n == ::players[::input_n-1].body.visible
::input_n == ::players[::input_i].body.visible
::input_n == ::players[::input_i-1].body.visible
::input_n == ::players[::new_input].body.visible
::input_n == ::players[::input_n].body.tangible
::input_n == ::players[::input_n-1].body.tangible
::input_n == ::players[::input_i].body.tangible
::input_n == ::players[::input_i-1].body.tangible
::input_n == ::players[::new_input].body.tangible
::input_n == ::players[::input_n].body.bodyMapsSize
::input_n == ::players[::input_i].body.bodyMapsSize
::input_n == ::players[::input_n].body.bodySize
::input_n == ::players[::input_i].body.bodySize
::input_n == ::players[::input_n-1].direction
::input_n == ::players[::input_i-1].direction
::input_n == player[::input_n-1].body.visible
::input_n == player[::input_n-1].body.tangible
::input_n == player[::input_i-1].body.visible
::input_n == player[::input_i-1].body.tangible
::input_n == player[::new_input].body.visible
::input_n == player[::new_input].body.tangible
::input_n == player[::new_input].body.bodyMapsSize
::new_input == ::players[::new_input].body.type
::new_input == ::players[::input_n].impulse[0][0]
::new_input == ::players[::input_i].impulse[0][0]
::new_input == ::players[::new_input].impulse[0][0]
::new_input == ::players[::input_n-1].impulse[1][0]
::new_input == ::players[::input_i-1].impulse[1][0]
::new_input == player[::input_n].body.type
::new_input == player[::input_n].impulse[0][0]
::new_input == player[::input_i].body.type
::new_input == player[::input_i].impulse[0][0]
::new_input == player[::new_input].body.type
::new_input == player[::new_input].impulse[0][0]
player == player[::input_n-1].body.bodyPoints->player
player == player[::input_i-1].body.bodyPoints->player
player[].id == player[].type
player[].id == player[].retired
player[].id == player[].impulse[2][0]
player[].id == player[].impulse[4][0]
player[].id == player[].impulse[6][0]
player[].id == player[].impulse[8][0]
player[].body.visible == player[].body.tangible
size(::crashedPlayers[])-1 == ::playerSpace[::input_n-1].actionGroup->numActions
size(::crashedPlayers[])-1 == ::playerSpace[::input_i-1].actionGroup->numActions
size(::crashedPlayers[])-1 == ::players[::input_n].id
size(::crashedPlayers[])-1 == ::players[::input_n-1].id
size(::crashedPlayers[])-1 == ::players[::input_i].id
size(::crashedPlayers[])-1 == ::players[::input_i-1].id
size(::crashedPlayers[])-1 == ::players[::new_input].id
size(::crashedPlayers[])-1 == ::players[::input_n].type
size(::crashedPlayers[])-1 == ::players[::input_n-1].type
size(::crashedPlayers[])-1 == ::players[::input_i].type
size(::crashedPlayers[])-1 == ::players[::input_i-1].type
size(::crashedPlayers[])-1 == ::players[::new_input].type
size(::crashedPlayers[])-1 == ::players[::input_n].retired
size(::crashedPlayers[])-1 == ::players[::input_n-1].retired
size(::crashedPlayers[])-1 == ::players[::input_i].retired
size(::crashedPlayers[])-1 == ::players[::input_i-1].retired
size(::crashedPlayers[])-1 == ::players[::new_input].retired
size(::crashedPlayers[])-1 == ::players[::input_n-1].body.type
size(::crashedPlayers[])-1 == ::players[::input_i-1].body.type
size(::crashedPlayers[])-1 == ::players[::input_n].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[::input_i].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[::input_n].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[::input_i].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[::input_n].body.color
size(::crashedPlayers[])-1 == ::players[::input_i].body.color
size(::crashedPlayers[])-1 == ::players[::input_n].basePosition.col
size(::crashedPlayers[])-1 == ::players[::input_i].basePosition.col
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_n].direction
size(::crashedPlayers[])-1 == ::players[::input_i].direction
size(::crashedPlayers[])-1 == ::players[::input_n-1].stepCounter
size(::crashedPlayers[])-1 == ::players[::input_i-1].stepCounter
size(::crashedPlayers[])-1 == space[::input_n-1].actionGroup->numActions
size(::crashedPlayers[])-1 == player[::input_n].id
size(::crashedPlayers[])-1 == player[::input_n-1].id
size(::crashedPlayers[])-1 == player[::input_n].type
size(::crashedPlayers[])-1 == player[::input_n-1].type
size(::crashedPlayers[])-1 == player[::input_n].retired
size(::crashedPlayers[])-1 == player[::input_n-1].retired
size(::crashedPlayers[])-1 == player[::input_n-1].body.type
size(::crashedPlayers[])-1 == player[::input_n].body.color
size(::crashedPlayers[])-1 == player[::input_n-1].impulse[0][0]
size(::crashedPlayers[])-1 == player[::input_n].impulse[1][0]
size(::crashedPlayers[])-1 == player[::input_n].impulse[2][0]
size(::crashedPlayers[])-1 == player[::input_n-1].impulse[2][0]
size(::crashedPlayers[])-1 == player[::input_n-1].impulse[3][0]
size(::crashedPlayers[])-1 == player[::input_n].impulse[4][0]
size(::crashedPlayers[])-1 == player[::input_n-1].impulse[4][0]
size(::crashedPlayers[])-1 == player[::input_n].impulse[5][0]
size(::crashedPlayers[])-1 == player[::input_n].impulse[6][0]
size(::crashedPlayers[])-1 == player[::input_n-1].impulse[6][0]
size(::crashedPlayers[])-1 == player[::input_n-1].impulse[7][0]
size(::crashedPlayers[])-1 == player[::input_n].impulse[8][0]
size(::crashedPlayers[])-1 == player[::input_n-1].impulse[8][0]
size(::crashedPlayers[])-1 == player[::input_n].direction
size(::crashedPlayers[])-1 == space[::input_i-1].actionGroup->numActions
size(::crashedPlayers[])-1 == player[::input_i].id
size(::crashedPlayers[])-1 == player[::input_i-1].id
size(::crashedPlayers[])-1 == player[::input_i].type
size(::crashedPlayers[])-1 == player[::input_i-1].type
size(::crashedPlayers[])-1 == player[::input_i].retired
size(::crashedPlayers[])-1 == player[::input_i-1].retired
size(::crashedPlayers[])-1 == player[::input_i-1].body.type
size(::crashedPlayers[])-1 == player[::input_i].body.color
size(::crashedPlayers[])-1 == player[::input_i-1].impulse[0][0]
size(::crashedPlayers[])-1 == player[::input_i].impulse[1][0]
size(::crashedPlayers[])-1 == player[::input_i].impulse[2][0]
size(::crashedPlayers[])-1 == player[::input_i-1].impulse[2][0]
size(::crashedPlayers[])-1 == player[::input_i-1].impulse[3][0]
size(::crashedPlayers[])-1 == player[::input_i].impulse[4][0]
size(::crashedPlayers[])-1 == player[::input_i-1].impulse[4][0]
size(::crashedPlayers[])-1 == player[::input_i].impulse[5][0]
size(::crashedPlayers[])-1 == player[::input_i].impulse[6][0]
size(::crashedPlayers[])-1 == player[::input_i-1].impulse[6][0]
size(::crashedPlayers[])-1 == player[::input_i-1].impulse[7][0]
size(::crashedPlayers[])-1 == player[::input_i].impulse[8][0]
size(::crashedPlayers[])-1 == player[::input_i-1].impulse[8][0]
size(::crashedPlayers[])-1 == player[::input_i].direction
size(::crashedPlayers[])-1 == player[::new_input].id
size(::crashedPlayers[])-1 == player[::new_input].type
size(::crashedPlayers[])-1 == player[::new_input].retired
size(::crashedPlayers[])-1 == player[::new_input].impulse[2][0]
size(::crashedPlayers[])-1 == player[::new_input].impulse[3][0]
size(::crashedPlayers[])-1 == player[::new_input].impulse[4][0]
size(::crashedPlayers[])-1 == player[::new_input].impulse[6][0]
size(::crashedPlayers[])-1 == player[::new_input].impulse[7][0]
size(::crashedPlayers[])-1 == player[::new_input].impulse[8][0]
size(::players[]) == size(::players[].body.bodyPoints[0])
size(::players[]) == size(::players[].body.bodyPoints->player[0])
size(::players[]) == size(::players[].impulse[0])
size(::players[]) == size(::players[].impulse[0][0])
size(::players[]) == size(::players[].impulse[1])
size(::players[]) == size(::players[].impulse[1][0])
size(::players[]) == size(::players[].impulse[2])
size(::players[]) == size(::players[].impulse[2][0])
size(::players[]) == size(::players[].impulse[3])
size(::players[]) == size(::players[].impulse[3][0])
size(::players[]) == size(::players[].impulse[4])
size(::players[]) == size(::players[].impulse[4][0])
size(::players[]) == size(::players[].impulse[5])
size(::players[]) == size(::players[].impulse[5][0])
size(::players[]) == size(::players[].impulse[6])
size(::players[]) == size(::players[].impulse[6][0])
size(::players[]) == size(::players[].impulse[7])
size(::players[]) == size(::players[].impulse[7][0])
size(::players[]) == size(::players[].impulse[8])
size(::players[]) == size(::players[].impulse[8][0])
size(::players[]) == size(::players[].magnetos[0])
size(player[]) == size(player[].body.bodyPoints[0])
size(player[]) == size(player[].body.bodyPoints->player[0])
size(player[]) == size(player[].impulse[0])
size(player[]) == size(player[].impulse[0][0])
size(player[]) == size(player[].impulse[1])
size(player[]) == size(player[].impulse[1][0])
size(player[]) == size(player[].impulse[2])
size(player[]) == size(player[].impulse[2][0])
size(player[]) == size(player[].impulse[3])
size(player[]) == size(player[].impulse[3][0])
size(player[]) == size(player[].impulse[4])
size(player[]) == size(player[].impulse[4][0])
size(player[]) == size(player[].impulse[5])
size(player[]) == size(player[].impulse[5][0])
size(player[]) == size(player[].impulse[6])
size(player[]) == size(player[].impulse[6][0])
size(player[]) == size(player[].impulse[7])
size(player[]) == size(player[].impulse[7][0])
size(player[]) == size(player[].impulse[8])
size(player[]) == size(player[].impulse[8][0])
size(player[]) == size(player[].magnetos[0])
::players[::input_n] == ::players[::input_n].body.bodyPoints->player[0]
::players[::input_n] == ::players[::input_i].body.bodyPoints->player[0]
::players[::input_n-1] == ::players[::input_n-1].body.bodyPoints->player[0]
::players[::input_n-1] == ::players[::input_i-1].body.bodyPoints->player[0]
::players[::new_input] == ::players[::new_input].body.bodyPoints->player[0]
::players[::input_n-1].body.bodyMapsSize == ::players[::input_n-1].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize == ::players[::input_i-1].body.bodyHeight
::players[::input_n-1].basePosition.row == ::players[::new_input].basePosition.row
::players[::input_i-1].basePosition.row == ::players[::new_input].basePosition.row
::players[::input_n].onPushed == ::players[::input_n-1].onPushed
::players[::input_n].onPushed == ::players[::input_i-1].onPushed
::players[::input_n].onPushed == ::players[::new_input].onPushed
::players[::input_n].onPushed == player[::input_n-1].onPushed
::players[::input_n].onPushed == player[::input_i-1].onPushed
::players[::input_n].onPushed == player[::new_input].onPushed
player[::input_n-1] == player[::input_n-1].body.bodyPoints->player[0]
player[::input_n-1] == player[::input_i-1].body.bodyPoints->player[0]
player[::input_n].body.visible == player[::input_n].body.bodyMapsSize
player[::input_n].body.visible == player[::input_n-1].impulse[1][0]
player[::input_n].body.visible == player[::input_i].body.bodyMapsSize
player[::input_n].body.visible == player[::input_i-1].impulse[1][0]
player[::input_n-1].basePosition.row == player[::new_input].basePosition.row
player[::input_n].impulse[3][0] == player[::input_n].impulse[7][0]
player[::input_n].impulse[3][0] == player[::input_i].impulse[7][0]
player[::input_n].impulse[3][0] == player[::new_input].impulse[1][0]
player[::input_n-1].impulse[5][0] == player[::new_input].impulse[5][0]
player[::input_i-1].basePosition.row == player[::new_input].basePosition.row
player[::input_i-1].impulse[5][0] == player[::new_input].impulse[5][0]
player[::new_input] == player[::new_input].body.bodyPoints->player[0]
::crashedPlayers has only one value
::crashedPlayers[] contains no nulls and has only one value, of length 1
::crashedPlayers[] elements has only one value
::crashedPlayers[].start == [null]
::crashedPlayers[].start elements == null
::playerSpace has only one value
::playerSpace[] contains no nulls and has only one value, of length 1
::playerSpace[] elements has only one value
::playerSpace[].playerNodes contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes elements has only one value
::playerSpace[].playerNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes[0] elements has only one value
::playerSpace[].playerNodes->start contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start elements has only one value
::playerSpace[].playerNodes->start[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start[0] elements has only one value
::playerSpace[].playerNodes->start->next contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next elements has only one value
::playerSpace[].playerNodes->start->next[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next[0] elements has only one value
::playerSpace[].playerNodes->start->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->data elements has only one value
::playerSpace[].playerNodes->end contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end elements has only one value
::playerSpace[].playerNodes->end[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end[0] elements has only one value
::playerSpace[].playerNodes->end->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->data elements has only one value
::playerSpace[].playerNodes->end->prev contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->prev elements has only one value
::playerSpace[].playerNodes->end->prev[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->prev[0] elements has only one value
::playerSpace[].playerMap contains no nulls and has only one value, of length 1
::playerSpace[].playerMap elements has only one value
::playerSpace[].guideNodes contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes elements has only one value
::playerSpace[].guideNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes[0] elements has only one value
::playerSpace[].groundMap contains no nulls and has only one value, of length 1
::playerSpace[].groundMap elements has only one value
::playerSpace[].actionGroup contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup elements has only one value
::playerSpace[].actionGroup[0] contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup[0] elements has only one value
::playerSpace[].actionGroup->numActions == [0]
::playerSpace[].actionGroup->numActions elements == 0
::players has only one value
::players[] contains no nulls and has only one value, of length 100
::players[].id == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].id elements == 0
::players[].body contains no nulls and has only one value, of length 100
::players[].body.type == [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.type elements one of { 0, 1 }
::players[].body.visible == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.visible elements one of { 0, 1 }
::players[].body.bodyPoints contains no nulls and has only one value, of length 100
::players[].body.bodyPoints[0] contains no nulls and has only one value, of length 100
::players[].body.bodyPoints->position contains no nulls and has only one value, of length 100
::players[].body.bodyPoints->player has only one value, of length 100
::players[].body.bodyPoints->player[0] has only one value, of length 100
::players[].body.bodyPoints->aspect == [46, 35, 35, 35, 35, 35, 86, 86, 86, 86, 86, 88, 91, 91, 91, 91, 91, 91, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyPoints->aspect elements >= 0
::players[].body.bodyMaps contains no nulls and has only one value, of length 100
::players[].body.bodyMapsSize == [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyMapsSize elements one of { 0, 1, 4 }
::players[].body.bodySize == [28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodySize elements >= 0
::players[].body.bodyWidth == [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyWidth elements one of { 0, 8, 14 }
::players[].body.bodyHeight == [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyHeight elements one of { 0, 4, 6 }
::players[].body.color == [3, 0, 1, 2, 3, 4, 0, 2, 4, 6, 8, 2, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.color elements >= 0
::players[].basePosition contains no nulls and has only one value, of length 100
::players[].basePosition.col one of { [40, 0, 2, 4, 6, 8, 0, 4, 8, 12, 16, 4, 10, 18, 26, 34, 42, 50, 58, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [40, 0, 3, 5, 7, 8, 0, 4, 8, 12, 16, 4, 10, 18, 26, 34, 42, 50, 58, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].basePosition.col elements >= 0
::players[].basePosition.row one of { [9, 10, 11, 12, 13, 13, 0, 2, 3, 3, 4, 4, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 10, 11, 12, 13, 13, 0, 2, 3, 3, 4, 5, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [10, 10, 11, 12, 13, 14, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].basePosition.row elements >= 0
::players[].impulse[0] contains no nulls and has only one value, of length 100
::players[].impulse[0][0] elements one of { 0, 1 }
::players[].impulse[0][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[1] contains no nulls and has only one value, of length 100
::players[].impulse[1][0] elements one of { 0, 1, 5 }
::players[].impulse[1][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[2] contains no nulls and has only one value, of length 100
::players[].impulse[3] contains no nulls and has only one value, of length 100
::players[].impulse[3][0] elements one of { 0, 1 }
::players[].impulse[3][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[4] contains no nulls and has only one value, of length 100
::players[].impulse[5] contains no nulls and has only one value, of length 100
::players[].impulse[5][0] elements one of { 0, 1 }
::players[].impulse[5][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[6] contains no nulls and has only one value, of length 100
::players[].impulse[7] contains no nulls and has only one value, of length 100
::players[].impulse[7][0] elements one of { 0, 1 }
::players[].impulse[7][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[8] contains no nulls and has only one value, of length 100
::players[].direction one of { [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 3, 3, 3, 1, 0, 5, 5, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 3, 3, 3, 1, 0, 5, 5, 3, 0, 1, 0, 3, 2, 2, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].direction elements >= 0
::players[].magnetos has only one value, of length 100
::players[].magnetos[0] has only one value, of length 100
::players[].stepCounter one of { [0, 9, 7, 7, 4, 8, 9, 1, 8, 7, 1, 4, 8, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 9, 7, 7, 4, 8, 9, 1, 8, 7, 1, 4, 8, 2, 10, 4, 2, 9, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].stepCounter elements >= 0
::players[].pilot has only one value, of length 100
::players[].onCrash has only one value, of length 100
::players[].onPushed has only one value, of length 100
::snakeBodyMap has only one value
::trainBodyMap has only one value
::giantBodyMap has only one value
::squareBodyMap has only one value
::circleBodyMap has only one value
::input_n == 1
::new_input one of { 0, 1 }
::input_key == "k"
::trace_pos one of { "(40, 10) -> ", "(40, 10) -> (40, 9)\n" }
player[].id elements == 0
player[].id one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].body.type elements one of { 0, 1 }
player[].body.type one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].body.visible elements one of { 0, 1 }
player[].body.visible one of { [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].body.bodyPoints->aspect one of { [46, 35, 35, 35, 35, 35, 86, 86, 86, 86, 86, 88, 91, 91, 91, 91, 91, 91, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [88, 91, 91, 91, 91, 91, 91, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].body.bodyPoints->aspect elements >= 0
player[].body.bodyMapsSize elements one of { 0, 1, 4 }
player[].body.bodyMapsSize one of { [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].body.bodySize one of { [24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [44, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].body.bodySize elements >= 0
player[].body.bodyWidth elements one of { 0, 8, 14 }
player[].body.bodyWidth one of { [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [14, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].body.bodyHeight elements one of { 0, 4, 6 }
player[].body.bodyHeight one of { [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].body.color one of { [2, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 2, 3, 4, 0, 2, 4, 6, 8, 2, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].body.color elements >= 0
player[].basePosition.col one of { [4, 10, 18, 26, 34, 42, 50, 58, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [40, 0, 2, 4, 6, 8, 0, 4, 8, 12, 16, 4, 10, 18, 26, 34, 42, 50, 58, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].basePosition.col elements >= 0
player[].basePosition.row one of { [5, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [10, 10, 11, 12, 13, 14, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].basePosition.row elements >= 0
player[].impulse[0][0] elements one of { 0, 1 }
player[].impulse[0][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].impulse[1][0] elements one of { 0, 1, 5 }
player[].impulse[1][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].impulse[3][0] elements one of { 0, 1 }
player[].impulse[3][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].impulse[5][0] elements one of { 0, 1 }
player[].impulse[5][0] one of { [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].impulse[7][0] elements one of { 0, 1 }
player[].impulse[7][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].direction elements one of { 0, 1, 5 }
player[].direction one of { [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].stepCounter one of { [0, 9, 7, 7, 4, 8, 9, 1, 8, 7, 1, 4, 8, 2, 10, 4, 2, 9, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 8, 2, 10, 4, 2, 9, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].stepCounter elements >= 0
size(::players[]) == 100
size(player[]) one of { 81, 89, 100 }
::players[::input_n] has only one value
::players[::input_n-1] has only one value
::players[::input_n].body has only one value
::players[::input_n-1].body has only one value
::players[::input_n].body.bodyPoints has only one value
::players[::input_n-1].body.bodyPoints has only one value
::players[::input_n].body.bodyPoints[0] has only one value
::players[::input_n-1].body.bodyPoints[0] has only one value
::players[::input_n].body.bodyPoints->position has only one value
::players[::input_n-1].body.bodyPoints->position has only one value
::players[::input_n].body.bodyPoints->player has only one value
::players[::input_n-1].body.bodyPoints->player has only one value
::players[::input_n].body.bodyPoints->aspect == 35
::players[::input_n-1].body.bodyPoints->aspect == 46
::players[::new_input].body.bodyPoints->aspect one of { 35, 46 }
::players[::input_n].body.bodyMaps has only one value
::players[::input_n-1].body.bodyMaps has only one value
::players[::input_n-1].body.bodyMapsSize == 4
::players[::new_input].body.bodyMapsSize one of { 1, 4 }
::players[::input_n-1].body.bodySize == 28
::players[::new_input].body.bodySize one of { 1, 28 }
::players[::input_n-1].body.bodyWidth == 8
::players[::new_input].body.bodyWidth one of { 0, 8 }
::players[::new_input].body.bodyHeight one of { 0, 4 }
::players[::input_n-1].body.color == 3
::players[::new_input].body.color one of { 0, 3 }
::players[::input_n].basePosition has only one value
::players[::input_n-1].basePosition has only one value
::players[::input_n-1].basePosition.col == 40
::players[::new_input].basePosition.col one of { 0, 40 }
::players[::input_n].basePosition.row == 10
::players[::new_input].basePosition.row one of { 9, 10 }
::players[::input_n].impulse[0] has only one value
::players[::input_n-1].impulse[0] has only one value
::players[::input_n].impulse[1] has only one value
::players[::input_n-1].impulse[1] has only one value
::players[::input_n].impulse[2] has only one value
::players[::input_n-1].impulse[2] has only one value
::players[::input_n].impulse[3] has only one value
::players[::input_n-1].impulse[3] has only one value
::players[::input_n].impulse[4] has only one value
::players[::input_n-1].impulse[4] has only one value
::players[::input_n].impulse[5] has only one value
::players[::input_n-1].impulse[5] has only one value
::players[::input_n].impulse[6] has only one value
::players[::input_n-1].impulse[6] has only one value
::players[::input_n].impulse[7] has only one value
::players[::input_n-1].impulse[7] has only one value
::players[::input_n].impulse[8] has only one value
::players[::input_n-1].impulse[8] has only one value
::players[::new_input].direction one of { 0, 1 }
::players[::input_n].magnetos has only one value
::players[::input_n-1].magnetos has only one value
::players[::input_n].magnetos[0] has only one value
::players[::input_n-1].magnetos[0] has only one value
::players[::input_n].stepCounter == 9
::players[::new_input].stepCounter one of { 0, 9 }
::players[::input_n].pilot has only one value
::players[::input_n-1].pilot has only one value
::players[::input_n].onCrash == null
::players[::input_n-1].onCrash has only one value
::players[::input_n].onPushed has only one value
player[::input_n].body.bodyPoints->aspect one of { 0, 35, 91 }
player[::input_n-1].body.bodyPoints->aspect one of { 46, 88, 91 }
player[::input_n-1].body.bodyMapsSize one of { 1, 4 }
player[::input_n].body.bodySize one of { 0, 1, 24 }
player[::input_n-1].body.bodySize one of { 24, 28, 44 }
player[::input_n].body.bodyWidth one of { 0, 8 }
player[::input_n-1].body.bodyWidth one of { 8, 14 }
player[::input_n].body.bodyHeight one of { 0, 4 }
player[::input_n-1].body.bodyHeight one of { 4, 6 }
player[::input_n-1].body.color one of { 2, 3, 7 }
player[::input_n].basePosition.col one of { 0, 10 }
player[::input_n-1].basePosition.col one of { 4, 40, 66 }
player[::input_n].basePosition.row one of { 0, 10 }
player[::input_n-1].direction one of { 1, 5 }
player[::input_n].stepCounter one of { 0, 8, 9 }
player[::input_n-1].stepCounter one of { 0, 1, 4 }
player[::new_input].body.bodyPoints->aspect one of { 35, 88, 91 }
player[::new_input].body.bodySize one of { 1, 24, 44 }
player[::new_input].body.color one of { 0, 2, 7 }
player[::new_input].basePosition.col one of { 0, 4, 66 }
player[::new_input].basePosition.row one of { 5, 7, 10 }
player[::new_input].stepCounter one of { 1, 4, 9 }
::crashedPlayers[] elements == ::crashedPlayers[::input_n-1]
::crashedPlayers[].start elements == ::crashedPlayers[::input_n-1].start
::playerSpace[] elements == ::playerSpace[::input_n-1]
::playerSpace[].playerNodes elements == ::playerSpace[::input_n-1].playerNodes
::playerSpace[].playerNodes[0] elements == ::playerSpace[::input_n-1].playerNodes[0]
::playerSpace[].playerNodes->start elements == ::playerSpace[::input_n-1].playerNodes->start
::playerSpace[].playerNodes->start[0] elements == ::playerSpace[::input_n-1].playerNodes->start[0]
::playerSpace[].playerNodes->start->next elements == ::playerSpace[::input_n-1].playerNodes->start->next
::playerSpace[].playerNodes->start->next[0] elements == ::playerSpace[::input_n-1].playerNodes->start->next[0]
::playerSpace[].playerNodes->start->data elements == ::playerSpace[::input_n-1].playerNodes->start->data
::playerSpace[].playerNodes->end elements == ::playerSpace[::input_n-1].playerNodes->end
::playerSpace[].playerNodes->end[0] elements == ::playerSpace[::input_n-1].playerNodes->end[0]
::playerSpace[].playerNodes->end->data elements == ::playerSpace[::input_n-1].playerNodes->end->data
::playerSpace[].playerNodes->end->prev elements == ::playerSpace[::input_n-1].playerNodes->end->prev
::playerSpace[].playerNodes->end->prev[0] elements == ::playerSpace[::input_n-1].playerNodes->end->prev[0]
::playerSpace[].playerMap elements == ::playerSpace[::input_n-1].playerMap
::playerSpace[].guideNodes elements == ::playerSpace[::input_n-1].guideNodes
::playerSpace[].guideNodes[0] elements == ::playerSpace[::input_n-1].guideNodes[0]
::playerSpace[].groundMap elements == ::playerSpace[::input_n-1].groundMap
::playerSpace[].actionGroup elements == ::playerSpace[::input_n-1].actionGroup
::playerSpace[].actionGroup[0] elements == ::playerSpace[::input_n-1].actionGroup[0]
::playerSpace[].actionGroup->numActions elements == size(::crashedPlayers[])-1
::players in ::players[].body.bodyPoints->player
player[::input_n] in ::players[]
player[::input_n-1] in ::players[]
player[::new_input] in ::players[]
::players[].id elements == size(::crashedPlayers[])-1
player[::input_n].body in ::players[].body
player[::input_n-1].body in ::players[].body
player[::new_input].body in ::players[].body
::players[::new_input].direction in ::players[].body.type
player[::input_n].body.visible in ::players[].body.type
player[::input_n].impulse[3][0] in ::players[].body.type
player[::new_input].impulse[5][0] in ::players[].body.type
::new_input in ::players[].body.visible
size(::crashedPlayers[])-1 in ::players[].body.visible
::players[::new_input].direction in ::players[].body.visible
player[::input_n].body.visible in ::players[].body.visible
player[::input_n].impulse[3][0] in ::players[].body.visible
player[::new_input].impulse[5][0] in ::players[].body.visible
player[::input_n].body.bodyPoints in ::players[].body.bodyPoints
player[::input_n-1].body.bodyPoints in ::players[].body.bodyPoints
player[::new_input].body.bodyPoints in ::players[].body.bodyPoints
player[::input_n].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
player[::input_n-1].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
player[::new_input].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
::players[].body.bodyPoints->position - ::players[].basePosition + 7304 == 0
player[::input_n].body.bodyPoints->position in ::players[].body.bodyPoints->position
player[::input_n-1].body.bodyPoints->position in ::players[].body.bodyPoints->position
player[::new_input].body.bodyPoints->position in ::players[].body.bodyPoints->position
player in ::players[].body.bodyPoints->player
player[::input_n].body.bodyPoints->player in ::players[].body.bodyPoints->player
player[::new_input].body.bodyPoints->player in ::players[].body.bodyPoints->player
player[::input_n-1] in ::players[].body.bodyPoints->player[0]
player[::input_n].body.bodyPoints->player[0] in ::players[].body.bodyPoints->player[0]
player[::new_input] in ::players[].body.bodyPoints->player[0]
size(::crashedPlayers[])-1 in ::players[].body.bodyPoints->aspect
player[::input_n].body.bodyPoints->aspect in ::players[].body.bodyPoints->aspect
player[::input_n-1].body.bodyPoints->aspect in ::players[].body.bodyPoints->aspect
player[::new_input].body.bodyPoints->aspect in ::players[].body.bodyPoints->aspect
player[::input_n].body.bodyMaps in ::players[].body.bodyMaps
player[::input_n-1].body.bodyMaps in ::players[].body.bodyMaps
player[::new_input].body.bodyMaps in ::players[].body.bodyMaps
::new_input in ::players[].body.bodyMapsSize
size(::crashedPlayers[])-1 in ::players[].body.bodyMapsSize
::players[::new_input].body.bodyHeight in ::players[].body.bodyMapsSize
::players[::new_input].direction in ::players[].body.bodyMapsSize
player[::input_n].body.visible in ::players[].body.bodyMapsSize
player[::input_n-1].body.bodyMapsSize in ::players[].body.bodyMapsSize
player[::input_n].body.bodyHeight in ::players[].body.bodyMapsSize
player[::input_n].impulse[3][0] in ::players[].body.bodyMapsSize
player[::input_n-1].stepCounter in ::players[].body.bodyMapsSize
player[::new_input].impulse[5][0] in ::players[].body.bodyMapsSize
::new_input in ::players[].body.bodySize
size(::crashedPlayers[])-1 in ::players[].body.bodySize
::players[::new_input].direction in ::players[].body.bodySize
player[::input_n].body.visible in ::players[].body.bodySize
player[::input_n].body.bodySize in ::players[].body.bodySize
player[::input_n-1].body.bodySize in ::players[].body.bodySize
player[::input_n].impulse[3][0] in ::players[].body.bodySize
player[::new_input].body.bodySize in ::players[].body.bodySize
player[::new_input].impulse[5][0] in ::players[].body.bodySize
player[::input_n].body.bodyWidth in ::players[].body.bodyWidth
player[::input_n-1].body.bodyWidth in ::players[].body.bodyWidth
player[::new_input].body.bodyWidth in ::players[].body.bodyWidth
player[::input_n].body.bodyHeight in ::players[].body.bodyHeight
player[::input_n-1].body.bodyHeight in ::players[].body.bodyHeight
player[::new_input].body.bodyHeight in ::players[].body.bodyHeight
::input_n in ::players[].body.color
::new_input in ::players[].body.color
::players[::input_n-1].body.bodyMapsSize in ::players[].body.color
::players[::new_input].body.bodyMapsSize in ::players[].body.color
::players[::input_n-1].body.bodyWidth in ::players[].body.color
::players[::new_input].body.bodyWidth in ::players[].body.color
::players[::new_input].body.bodyHeight in ::players[].body.color
::players[::new_input].direction in ::players[].body.color
player[::input_n].body.visible in ::players[].body.color
player[::input_n-1].body.bodyMapsSize in ::players[].body.color
player[::input_n].body.bodyWidth in ::players[].body.color
player[::input_n].body.bodyHeight in ::players[].body.color
player[::input_n-1].body.bodyHeight in ::players[].body.color
player[::input_n-1].body.color in ::players[].body.color
player[::input_n].impulse[3][0] in ::players[].body.color
player[::input_n-1].direction in ::players[].body.color
player[::input_n-1].stepCounter in ::players[].body.color
player[::new_input].body.bodyHeight in ::players[].body.color
player[::new_input].body.color in ::players[].body.color
player[::new_input].impulse[5][0] in ::players[].body.color
player[::new_input].direction in ::players[].body.color
player[::input_n].basePosition in ::players[].basePosition
player[::input_n-1].basePosition in ::players[].basePosition
player[::new_input].basePosition in ::players[].basePosition
::players[::input_n-1].body.bodyMapsSize in ::players[].basePosition.col
::players[::input_n-1].body.bodyWidth in ::players[].basePosition.col
::players[::new_input].body.bodyWidth in ::players[].basePosition.col
::players[::new_input].body.bodyHeight in ::players[].basePosition.col
::players[::new_input].body.color in ::players[].basePosition.col
::players[::input_n].basePosition.row in ::players[].basePosition.col
player[::input_n].body.bodyWidth in ::players[].basePosition.col
player[::input_n].body.bodyHeight in ::players[].basePosition.col
player[::input_n].basePosition.col in ::players[].basePosition.col
player[::input_n-1].basePosition.col in ::players[].basePosition.col
player[::input_n].basePosition.row in ::players[].basePosition.col
player[::new_input].basePosition.col in ::players[].basePosition.col
player[::new_input].basePosition.row in ::players[].basePosition.col
::input_n in ::players[].basePosition.row
::new_input in ::players[].basePosition.row
size(::crashedPlayers[])-1 in ::players[].basePosition.row
::players[::input_n-1].body.bodyMapsSize in ::players[].basePosition.row
::players[::new_input].body.bodyMapsSize in ::players[].basePosition.row
::players[::new_input].body.bodyHeight in ::players[].basePosition.row
::players[::input_n-1].body.color in ::players[].basePosition.row
::players[::new_input].body.color in ::players[].basePosition.row
::players[::new_input].direction in ::players[].basePosition.row
player[::input_n].body.visible in ::players[].basePosition.row
player[::input_n-1].body.bodyMapsSize in ::players[].basePosition.row
player[::input_n].body.bodyHeight in ::players[].basePosition.row
player[::input_n-1].body.bodyHeight in ::players[].basePosition.row
player[::input_n-1].body.color in ::players[].basePosition.row
player[::input_n].basePosition.col in ::players[].basePosition.row
player[::input_n].basePosition.row in ::players[].basePosition.row
player[::input_n].impulse[3][0] in ::players[].basePosition.row
player[::input_n-1].direction in ::players[].basePosition.row
player[::input_n-1].stepCounter in ::players[].basePosition.row
player[::new_input].body.bodyHeight in ::players[].basePosition.row
player[::new_input].body.color in ::players[].basePosition.row
player[::new_input].basePosition.row in ::players[].basePosition.row
player[::new_input].impulse[5][0] in ::players[].basePosition.row
player[::new_input].direction in ::players[].basePosition.row
::players[].impulse[0] - ::players[].impulse[1] + 4 == 0
::players[].impulse[0] - ::players[].impulse[2] + 8 == 0
::players[].impulse[0] - ::players[].impulse[3] + 12 == 0
::players[].impulse[0] - ::players[].impulse[4] + 16 == 0
::players[].impulse[0] - ::players[].impulse[5] + 20 == 0
::players[].impulse[0] - ::players[].impulse[6] + 24 == 0
::players[].impulse[0] - ::players[].impulse[7] + 28 == 0
::players[].impulse[0] - ::players[].impulse[8] + 32 == 0
player[::input_n].impulse[0] in ::players[].impulse[0]
player[::input_n-1].impulse[0] in ::players[].impulse[0]
player[::new_input].impulse[0] in ::players[].impulse[0]
::players[].impulse[1] - ::players[].impulse[2] + 4 == 0
::players[].impulse[1] - ::players[].impulse[3] + 8 == 0
::players[].impulse[1] - ::players[].impulse[4] + 12 == 0
::players[].impulse[1] - ::players[].impulse[5] + 16 == 0
::players[].impulse[1] - ::players[].impulse[6] + 20 == 0
::players[].impulse[1] - ::players[].impulse[7] + 24 == 0
::players[].impulse[1] - ::players[].impulse[8] + 28 == 0
player[::input_n].impulse[1] in ::players[].impulse[1]
player[::input_n-1].impulse[1] in ::players[].impulse[1]
player[::new_input].impulse[1] in ::players[].impulse[1]
player[::input_n].body.visible in ::players[].impulse[1][0]
player[::input_n].impulse[3][0] in ::players[].impulse[1][0]
::players[].impulse[2] - ::players[].impulse[3] + 4 == 0
::players[].impulse[2] - ::players[].impulse[4] + 8 == 0
::players[].impulse[2] - ::players[].impulse[5] + 12 == 0
::players[].impulse[2] - ::players[].impulse[6] + 16 == 0
::players[].impulse[2] - ::players[].impulse[7] + 20 == 0
::players[].impulse[2] - ::players[].impulse[8] + 24 == 0
player[::input_n].impulse[2] in ::players[].impulse[2]
player[::input_n-1].impulse[2] in ::players[].impulse[2]
player[::new_input].impulse[2] in ::players[].impulse[2]
::players[].impulse[3] - ::players[].impulse[4] + 4 == 0
::players[].impulse[3] - ::players[].impulse[5] + 8 == 0
::players[].impulse[3] - ::players[].impulse[6] + 12 == 0
::players[].impulse[3] - ::players[].impulse[7] + 16 == 0
::players[].impulse[3] - ::players[].impulse[8] + 20 == 0
player[::input_n].impulse[3] in ::players[].impulse[3]
player[::input_n-1].impulse[3] in ::players[].impulse[3]
player[::new_input].impulse[3] in ::players[].impulse[3]
::new_input in ::players[].impulse[3][0]
player[::input_n].body.visible in ::players[].impulse[3][0]
player[::input_n].impulse[3][0] in ::players[].impulse[3][0]
::players[].impulse[4] - ::players[].impulse[5] + 4 == 0
::players[].impulse[4] - ::players[].impulse[6] + 8 == 0
::players[].impulse[4] - ::players[].impulse[7] + 12 == 0
::players[].impulse[4] - ::players[].impulse[8] + 16 == 0
player[::input_n].impulse[4] in ::players[].impulse[4]
player[::input_n-1].impulse[4] in ::players[].impulse[4]
player[::new_input].impulse[4] in ::players[].impulse[4]
::players[].impulse[5] - ::players[].impulse[6] + 4 == 0
::players[].impulse[5] - ::players[].impulse[7] + 8 == 0
::players[].impulse[5] - ::players[].impulse[8] + 12 == 0
player[::input_n].impulse[5] in ::players[].impulse[5]
player[::input_n-1].impulse[5] in ::players[].impulse[5]
player[::new_input].impulse[5] in ::players[].impulse[5]
::input_n in ::players[].impulse[5][0]
::new_input in ::players[].impulse[5][0]
::players[::new_input].direction in ::players[].impulse[5][0]
player[::input_n].body.visible in ::players[].impulse[5][0]
player[::input_n].impulse[3][0] in ::players[].impulse[5][0]
player[::new_input].impulse[5][0] in ::players[].impulse[5][0]
::players[].impulse[6] - ::players[].impulse[7] + 4 == 0
::players[].impulse[6] - ::players[].impulse[8] + 8 == 0
player[::input_n].impulse[6] in ::players[].impulse[6]
player[::input_n-1].impulse[6] in ::players[].impulse[6]
player[::new_input].impulse[6] in ::players[].impulse[6]
::players[].impulse[7] - ::players[].impulse[8] + 4 == 0
player[::input_n].impulse[7] in ::players[].impulse[7]
player[::input_n-1].impulse[7] in ::players[].impulse[7]
player[::new_input].impulse[7] in ::players[].impulse[7]
::new_input in ::players[].impulse[7][0]
player[::input_n].body.visible in ::players[].impulse[7][0]
player[::input_n].impulse[3][0] in ::players[].impulse[7][0]
player[::input_n].impulse[8] in ::players[].impulse[8]
player[::input_n-1].impulse[8] in ::players[].impulse[8]
player[::new_input].impulse[8] in ::players[].impulse[8]
::new_input in ::players[].direction
::players[::new_input].body.color in ::players[].direction
player[::input_n].body.visible in ::players[].direction
player[::input_n].impulse[3][0] in ::players[].direction
player[::input_n-1].direction in ::players[].direction
player[::new_input].impulse[5][0] in ::players[].direction
player[::new_input].direction in ::players[].direction
player[::input_n].magnetos in ::players[].magnetos
player[::input_n-1].magnetos in ::players[].magnetos
player[::new_input].magnetos in ::players[].magnetos
player[::input_n].magnetos[0] in ::players[].magnetos[0]
player[::input_n-1].magnetos[0] in ::players[].magnetos[0]
player[::new_input].magnetos[0] in ::players[].magnetos[0]
::input_n in ::players[].stepCounter
::new_input in ::players[].stepCounter
::players[::input_n-1].body.bodyMapsSize in ::players[].stepCounter
::players[::new_input].body.bodyMapsSize in ::players[].stepCounter
::players[::input_n-1].body.bodyWidth in ::players[].stepCounter
::players[::new_input].body.bodyWidth in ::players[].stepCounter
::players[::new_input].body.bodyHeight in ::players[].stepCounter
::players[::new_input].basePosition.row in ::players[].stepCounter
::players[::new_input].direction in ::players[].stepCounter
player[::input_n].body.visible in ::players[].stepCounter
player[::input_n-1].body.bodyMapsSize in ::players[].stepCounter
player[::input_n].body.bodyWidth in ::players[].stepCounter
player[::input_n].body.bodyHeight in ::players[].stepCounter
player[::input_n].basePosition.col in ::players[].stepCounter
player[::input_n].basePosition.row in ::players[].stepCounter
player[::input_n].impulse[3][0] in ::players[].stepCounter
player[::input_n].stepCounter in ::players[].stepCounter
player[::input_n-1].stepCounter in ::players[].stepCounter
player[::new_input].body.color in ::players[].stepCounter
player[::new_input].basePosition.row in ::players[].stepCounter
player[::new_input].impulse[5][0] in ::players[].stepCounter
player[::new_input].stepCounter in ::players[].stepCounter
::players[::input_n].onCrash in ::players[].pilot
player[::input_n].pilot in ::players[].pilot
player[::input_n-1].pilot in ::players[].pilot
player[::new_input].pilot in ::players[].pilot
player[::input_n].onCrash in ::players[].onCrash
player[::input_n-1].onCrash in ::players[].onCrash
player[::new_input].onCrash in ::players[].onCrash
::players[::input_n].onCrash in ::players[].onPushed
player[::input_n].onPushed in ::players[].onPushed
::input_n in player[].impulse[5][0]
::input_n in player[].stepCounter
::new_input in player[].body.visible
::new_input in player[].body.bodyMapsSize
::new_input in player[].body.bodySize
::new_input in player[].body.color
::new_input in player[].basePosition.row
::new_input in player[].impulse[1][0]
::new_input in player[].impulse[3][0]
::new_input in player[].impulse[5][0]
::new_input in player[].impulse[7][0]
::new_input in player[].direction
::new_input in player[].stepCounter
player[].id elements == size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in player[].body.visible
::players[::new_input].direction in player[].body.visible
player[::input_n].impulse[3][0] in player[].body.visible
player[::new_input].impulse[5][0] in player[].body.visible
player[].body.bodyPoints->position - player[].basePosition + 7304 == 0
size(::crashedPlayers[])-1 in player[].body.bodyPoints->aspect
size(::crashedPlayers[])-1 in player[].body.bodyMapsSize
::players[::new_input].direction in player[].body.bodyMapsSize
player[::input_n].impulse[3][0] in player[].body.bodyMapsSize
player[::new_input].impulse[5][0] in player[].body.bodyMapsSize
size(::crashedPlayers[])-1 in player[].body.bodySize
size(::crashedPlayers[])-1 in player[].body.bodyWidth
::players[::input_n-1].body.bodyWidth in player[].body.bodyWidth
::players[::new_input].body.bodyWidth in player[].body.bodyWidth
size(::crashedPlayers[])-1 in player[].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize in player[].body.bodyHeight
::players[::new_input].body.bodyHeight in player[].body.bodyHeight
player[::input_n].body.visible in player[].body.color
player[::input_n].body.bodyHeight in player[].body.color
player[::input_n].impulse[3][0] in player[].body.color
size(::crashedPlayers[])-1 in player[].basePosition.col
player[::input_n].body.bodyHeight in player[].basePosition.col
player[::input_n].basePosition.row in player[].basePosition.col
size(::crashedPlayers[])-1 in player[].basePosition.row
player[::input_n].body.visible in player[].basePosition.row
player[::input_n].body.bodyHeight in player[].basePosition.row
player[::input_n-1].body.color in player[].basePosition.row
player[::input_n].impulse[3][0] in player[].basePosition.row
player[::new_input].body.color in player[].basePosition.row
player[].impulse[0] - player[].impulse[1] + 4 == 0
player[].impulse[0] - player[].impulse[2] + 8 == 0
player[].impulse[0] - player[].impulse[3] + 12 == 0
player[].impulse[0] - player[].impulse[4] + 16 == 0
player[].impulse[0] - player[].impulse[5] + 20 == 0
player[].impulse[0] - player[].impulse[6] + 24 == 0
player[].impulse[0] - player[].impulse[7] + 28 == 0
player[].impulse[0] - player[].impulse[8] + 32 == 0
player[].impulse[1] - player[].impulse[2] + 4 == 0
player[].impulse[1] - player[].impulse[3] + 8 == 0
player[].impulse[1] - player[].impulse[4] + 12 == 0
player[].impulse[1] - player[].impulse[5] + 16 == 0
player[].impulse[1] - player[].impulse[6] + 20 == 0
player[].impulse[1] - player[].impulse[7] + 24 == 0
player[].impulse[1] - player[].impulse[8] + 28 == 0
player[].impulse[2] - player[].impulse[3] + 4 == 0
player[].impulse[2] - player[].impulse[4] + 8 == 0
player[].impulse[2] - player[].impulse[5] + 12 == 0
player[].impulse[2] - player[].impulse[6] + 16 == 0
player[].impulse[2] - player[].impulse[7] + 20 == 0
player[].impulse[2] - player[].impulse[8] + 24 == 0
player[].impulse[3] - player[].impulse[4] + 4 == 0
player[].impulse[3] - player[].impulse[5] + 8 == 0
player[].impulse[3] - player[].impulse[6] + 12 == 0
player[].impulse[3] - player[].impulse[7] + 16 == 0
player[].impulse[3] - player[].impulse[8] + 20 == 0
player[::input_n].body.visible in player[].impulse[3][0]
player[].impulse[4] - player[].impulse[5] + 4 == 0
player[].impulse[4] - player[].impulse[6] + 8 == 0
player[].impulse[4] - player[].impulse[7] + 12 == 0
player[].impulse[4] - player[].impulse[8] + 16 == 0
player[].impulse[5] - player[].impulse[6] + 4 == 0
player[].impulse[5] - player[].impulse[7] + 8 == 0
player[].impulse[5] - player[].impulse[8] + 12 == 0
::players[::new_input].direction in player[].impulse[5][0]
player[::input_n].body.visible in player[].impulse[5][0]
player[::input_n].impulse[3][0] in player[].impulse[5][0]
player[].impulse[6] - player[].impulse[7] + 4 == 0
player[].impulse[6] - player[].impulse[8] + 8 == 0
player[].impulse[7] - player[].impulse[8] + 4 == 0
player[::input_n].body.visible in player[].impulse[7][0]
player[::input_n].body.visible in player[].direction
player[::input_n].impulse[3][0] in player[].direction
size(::crashedPlayers[])-1 in player[].stepCounter
::players[::new_input].direction in player[].stepCounter
::players[::new_input].stepCounter in player[].stepCounter
player[::input_n].body.visible in player[].stepCounter
player[::input_n-1].body.bodyMapsSize in player[].stepCounter
player[::input_n].body.bodyWidth in player[].stepCounter
player[::input_n].body.bodyHeight in player[].stepCounter
player[::input_n].basePosition.col in player[].stepCounter
player[::input_n].basePosition.row in player[].stepCounter
player[::input_n].impulse[3][0] in player[].stepCounter
player[::new_input].impulse[5][0] in player[].stepCounter
::players[::input_n].pilot in player[].pilot
::players[::input_n].onCrash in player[].pilot
::players[::input_n].onCrash in player[].onCrash
::players[::input_n-1].onCrash in player[].onCrash
::players[::new_input].onCrash in player[].onCrash
::players[::input_n].onCrash in player[].onPushed
===========================================================================
..moveSolidPlayer():::EXIT
::crashedPlayers == orig(::crashedPlayers)
::crashedPlayers[] == orig(::crashedPlayers[])
::crashedPlayers[].start == ::crashedPlayers[].end
::crashedPlayers[].start == ::playerSpace[].playerNodes->start->prev
::crashedPlayers[].start == ::playerSpace[].playerNodes->end->next
::crashedPlayers[].start == ::playerSpace[].guideNodes->start
::crashedPlayers[].start == ::playerSpace[].guideNodes->end
::crashedPlayers[].start == space[].playerNodes->start->prev
::crashedPlayers[].start == space[].playerNodes->end->next
::crashedPlayers[].start == space[].guideNodes->start
::crashedPlayers[].start == space[].guideNodes->end
::crashedPlayers[].start == orig(::crashedPlayers[].start)
::crashedPlayers[].start == orig(::crashedPlayers[].end)
::crashedPlayers[].start == orig(::playerSpace[].playerNodes->start->prev)
::crashedPlayers[].start == orig(::playerSpace[].playerNodes->end->next)
::crashedPlayers[].start == orig(::playerSpace[].guideNodes->start)
::crashedPlayers[].start == orig(::playerSpace[].guideNodes->end)
::crashedPlayers[].start == orig(space[].playerNodes->start->prev)
::crashedPlayers[].start == orig(space[].playerNodes->end->next)
::crashedPlayers[].start == orig(space[].guideNodes->start)
::crashedPlayers[].start == orig(space[].guideNodes->end)
::playerSpace == orig(::playerSpace)
::playerSpace == orig(space)
::playerSpace[] == space[]
::playerSpace[] == orig(::playerSpace[])
::playerSpace[] == orig(space[])
::playerSpace[].playerNodes == space[].playerNodes
::playerSpace[].playerNodes == orig(::playerSpace[].playerNodes)
::playerSpace[].playerNodes == orig(space[].playerNodes)
::playerSpace[].playerNodes[0] == space[].playerNodes[0]
::playerSpace[].playerNodes[0] == orig(::playerSpace[].playerNodes[0])
::playerSpace[].playerNodes[0] == orig(space[].playerNodes[0])
::playerSpace[].playerNodes->start == space[].playerNodes->start
::playerSpace[].playerNodes->start == orig(::playerSpace[].playerNodes->start)
::playerSpace[].playerNodes->start == orig(space[].playerNodes->start)
::playerSpace[].playerNodes->start[0] == space[].playerNodes->start[0]
::playerSpace[].playerNodes->start[0] == orig(::playerSpace[].playerNodes->start[0])
::playerSpace[].playerNodes->start[0] == orig(space[].playerNodes->start[0])
::playerSpace[].playerNodes->start->next == space[].playerNodes->start->next
::playerSpace[].playerNodes->start->next == orig(::playerSpace[].playerNodes->start->next)
::playerSpace[].playerNodes->start->next == orig(space[].playerNodes->start->next)
::playerSpace[].playerNodes->start->next[0] == space[].playerNodes->start->next[0]
::playerSpace[].playerNodes->start->next[0] == orig(::playerSpace[].playerNodes->start->next[0])
::playerSpace[].playerNodes->start->next[0] == orig(space[].playerNodes->start->next[0])
::playerSpace[].playerNodes->start->data == space[].playerNodes->start->data
::playerSpace[].playerNodes->start->data == orig(::playerSpace[].playerNodes->start->data)
::playerSpace[].playerNodes->start->data == orig(space[].playerNodes->start->data)
::playerSpace[].playerNodes->end == space[].playerNodes->end
::playerSpace[].playerNodes->end == orig(::playerSpace[].playerNodes->end)
::playerSpace[].playerNodes->end == orig(space[].playerNodes->end)
::playerSpace[].playerNodes->end[0] == space[].playerNodes->end[0]
::playerSpace[].playerNodes->end[0] == orig(::playerSpace[].playerNodes->end[0])
::playerSpace[].playerNodes->end[0] == orig(space[].playerNodes->end[0])
::playerSpace[].playerNodes->end->data == space[].playerNodes->end->data
::playerSpace[].playerNodes->end->data == orig(::playerSpace[].playerNodes->end->data)
::playerSpace[].playerNodes->end->data == orig(space[].playerNodes->end->data)
::playerSpace[].playerNodes->end->prev == space[].playerNodes->end->prev
::playerSpace[].playerNodes->end->prev == orig(::playerSpace[].playerNodes->end->prev)
::playerSpace[].playerNodes->end->prev == orig(space[].playerNodes->end->prev)
::playerSpace[].playerNodes->end->prev[0] == space[].playerNodes->end->prev[0]
::playerSpace[].playerNodes->end->prev[0] == orig(::playerSpace[].playerNodes->end->prev[0])
::playerSpace[].playerNodes->end->prev[0] == orig(space[].playerNodes->end->prev[0])
::playerSpace[].playerMap == space[].playerMap
::playerSpace[].playerMap == orig(::playerSpace[].playerMap)
::playerSpace[].playerMap == orig(space[].playerMap)
::playerSpace[].guideNodes == space[].guideNodes
::playerSpace[].guideNodes == orig(::playerSpace[].guideNodes)
::playerSpace[].guideNodes == orig(space[].guideNodes)
::playerSpace[].guideNodes[0] == space[].guideNodes[0]
::playerSpace[].guideNodes[0] == orig(::playerSpace[].guideNodes[0])
::playerSpace[].guideNodes[0] == orig(space[].guideNodes[0])
::playerSpace[].groundMap == space[].groundMap
::playerSpace[].groundMap == orig(::playerSpace[].groundMap)
::playerSpace[].groundMap == orig(space[].groundMap)
::playerSpace[].actionGroup == space[].actionGroup
::playerSpace[].actionGroup == orig(::playerSpace[].actionGroup)
::playerSpace[].actionGroup == orig(space[].actionGroup)
::playerSpace[].actionGroup[0] == space[].actionGroup[0]
::playerSpace[].actionGroup[0] == orig(::playerSpace[].actionGroup[0])
::playerSpace[].actionGroup[0] == orig(space[].actionGroup[0])
::playerSpace[].actionGroup->numActions == space[].actionGroup->numActions
::playerSpace[].actionGroup->numActions == orig(::playerSpace[].actionGroup->numActions)
::playerSpace[].actionGroup->numActions == orig(space[].actionGroup->numActions)
::players == orig(::players)
::players == ::players[::input_n-1].body.bodyPoints->player
::players[] == orig(::players[])
::players[].id == ::players[].type
::players[].id == ::players[].retired
::players[].id == ::players[].impulse[2][0]
::players[].id == ::players[].impulse[4][0]
::players[].id == ::players[].impulse[6][0]
::players[].id == ::players[].impulse[8][0]
::players[].id == orig(::players[].id)
::players[].id == orig(::players[].type)
::players[].id == orig(::players[].retired)
::players[].id == orig(::players[].impulse[2][0])
::players[].id == orig(::players[].impulse[4][0])
::players[].id == orig(::players[].impulse[6][0])
::players[].id == orig(::players[].impulse[8][0])
::players[].body == orig(::players[].body)
::players[].body.type == orig(::players[].body.type)
::players[].body.visible == ::players[].body.tangible
::players[].body.visible == orig(::players[].body.visible)
::players[].body.visible == orig(::players[].body.tangible)
::players[].body.bodyPoints == orig(::players[].body.bodyPoints)
::players[].body.bodyPoints[0] == orig(::players[].body.bodyPoints[0])
::players[].body.bodyPoints->position == orig(::players[].body.bodyPoints->position)
::players[].body.bodyPoints->player == orig(::players[].body.bodyPoints->player)
::players[].body.bodyPoints->player[0] == orig(::players[].body.bodyPoints->player[0])
::players[].body.bodyPoints->aspect == orig(::players[].body.bodyPoints->aspect)
::players[].body.bodyMaps == orig(::players[].body.bodyMaps)
::players[].body.bodyMapsSize == orig(::players[].body.bodyMapsSize)
::players[].body.bodySize == orig(::players[].body.bodySize)
::players[].body.bodyWidth == orig(::players[].body.bodyWidth)
::players[].body.bodyHeight == orig(::players[].body.bodyHeight)
::players[].body.color == orig(::players[].body.color)
::players[].basePosition == orig(::players[].basePosition)
::players[].basePosition.col == orig(::players[].basePosition.col)
::players[].impulse[0] == orig(::players[].impulse[0])
::players[].impulse[0][0] == orig(::players[].impulse[0][0])
::players[].impulse[1] == orig(::players[].impulse[1])
::players[].impulse[1][0] == orig(::players[].impulse[1][0])
::players[].impulse[2] == orig(::players[].impulse[2])
::players[].impulse[3] == orig(::players[].impulse[3])
::players[].impulse[3][0] == orig(::players[].impulse[3][0])
::players[].impulse[4] == orig(::players[].impulse[4])
::players[].impulse[5] == orig(::players[].impulse[5])
::players[].impulse[5][0] == orig(::players[].impulse[5][0])
::players[].impulse[6] == orig(::players[].impulse[6])
::players[].impulse[7] == orig(::players[].impulse[7])
::players[].impulse[7][0] == orig(::players[].impulse[7][0])
::players[].impulse[8] == orig(::players[].impulse[8])
::players[].direction == orig(::players[].direction)
::players[].magnetos == orig(::players[].magnetos)
::players[].magnetos[0] == orig(::players[].magnetos[0])
::players[].stepCounter == orig(::players[].stepCounter)
::players[].pilot == orig(::players[].pilot)
::players[].onCrash == orig(::players[].onCrash)
::players[].onPushed == orig(::players[].onPushed)
::snakeBodyMap == orig(::snakeBodyMap)
::trainBodyMap == orig(::trainBodyMap)
::giantBodyMap == orig(::giantBodyMap)
::squareBodyMap == orig(::squareBodyMap)
::circleBodyMap == orig(::circleBodyMap)
::input_n == ::input_i
::input_n == orig(::input_n)
::input_n == orig(::input_i)
::input_n == size(::crashedPlayers[])
::input_n == size(::playerSpace[])
::input_n == size(::playerSpace[].playerNodes[0])
::input_n == size(::playerSpace[].playerNodes->start[0])
::input_n == size(::playerSpace[].playerNodes->start->next[0])
::input_n == size(::playerSpace[].playerNodes->end[0])
::input_n == size(::playerSpace[].playerNodes->end->prev[0])
::input_n == size(::playerSpace[].guideNodes[0])
::input_n == size(::playerSpace[].actionGroup[0])
::input_n == orig(size(::crashedPlayers[]))
::input_n == orig(size(::playerSpace[]))
::input_n == orig(size(::playerSpace[].playerNodes[0]))
::input_n == orig(size(::playerSpace[].playerNodes->start[0]))
::input_n == orig(size(::playerSpace[].playerNodes->start->next[0]))
::input_n == orig(size(::playerSpace[].playerNodes->end[0]))
::input_n == orig(size(::playerSpace[].playerNodes->end->prev[0]))
::input_n == orig(size(::playerSpace[].guideNodes[0]))
::input_n == orig(size(::playerSpace[].actionGroup[0]))
::input_n == orig(size(space[]))
::input_n == orig(size(space[].playerNodes[0]))
::input_n == orig(size(space[].playerNodes->start[0]))
::input_n == orig(size(space[].playerNodes->start->next[0]))
::input_n == orig(size(space[].playerNodes->end[0]))
::input_n == orig(size(space[].playerNodes->end->prev[0]))
::input_n == orig(size(space[].guideNodes[0]))
::input_n == orig(size(space[].actionGroup[0]))
::input_n == ::players[::input_n].body.type
::input_n == ::players[::input_i].body.type
::input_n == ::players[orig(::input_n)].body.type
::input_n == ::players[orig(::input_i)].body.type
::input_n == ::players[::input_n].body.visible
::input_n == ::players[::input_n-1].body.visible
::input_n == ::players[::input_i].body.visible
::input_n == ::players[::input_i-1].body.visible
::input_n == ::players[::new_input].body.visible
::input_n == ::players[orig(::input_n)].body.visible
::input_n == ::players[orig(::input_n)-1].body.visible
::input_n == ::players[orig(::input_i)].body.visible
::input_n == ::players[orig(::input_i)-1].body.visible
::input_n == ::players[orig(::new_input)].body.visible
::input_n == ::players[::input_n].body.tangible
::input_n == ::players[::input_n-1].body.tangible
::input_n == ::players[::input_i].body.tangible
::input_n == ::players[::input_i-1].body.tangible
::input_n == ::players[::new_input].body.tangible
::input_n == ::players[orig(::input_n)].body.tangible
::input_n == ::players[orig(::input_n)-1].body.tangible
::input_n == ::players[orig(::input_i)].body.tangible
::input_n == ::players[orig(::input_i)-1].body.tangible
::input_n == ::players[orig(::new_input)].body.tangible
::input_n == ::players[::input_n].body.bodyMapsSize
::input_n == ::players[::input_i].body.bodyMapsSize
::input_n == ::players[orig(::input_n)].body.bodyMapsSize
::input_n == ::players[orig(::input_i)].body.bodyMapsSize
::input_n == ::players[::input_n].body.bodySize
::input_n == ::players[::input_i].body.bodySize
::input_n == ::players[orig(::input_n)].body.bodySize
::input_n == ::players[orig(::input_i)].body.bodySize
::input_n == ::players[::input_n-1].direction
::input_n == ::players[::input_i-1].direction
::input_n == ::players[orig(::input_n)-1].direction
::input_n == ::players[orig(::input_i)-1].direction
::input_n == player[::input_n-1].body.visible
::input_n == player[::input_n-1].body.tangible
::input_n == orig(::players[post(::input_n)].body.type)
::input_n == orig(::players[post(::input_n)].body.visible)
::input_n == orig(::players[post(::input_n)-1].body.visible)
::input_n == orig(::players[post(::input_n)].body.tangible)
::input_n == orig(::players[post(::input_n)-1].body.tangible)
::input_n == orig(::players[post(::input_n)].body.bodyMapsSize)
::input_n == orig(::players[post(::input_n)].body.bodySize)
::input_n == orig(::players[post(::input_n)-1].direction)
::input_n == orig(player[post(::input_n)-1].body.visible)
::input_n == orig(player[post(::input_n)-1].body.tangible)
::input_n == player[::input_i-1].body.visible
::input_n == player[::input_i-1].body.tangible
::input_n == orig(::players[post(::input_i)].body.type)
::input_n == orig(::players[post(::input_i)].body.visible)
::input_n == orig(::players[post(::input_i)-1].body.visible)
::input_n == orig(::players[post(::input_i)].body.tangible)
::input_n == orig(::players[post(::input_i)-1].body.tangible)
::input_n == orig(::players[post(::input_i)].body.bodyMapsSize)
::input_n == orig(::players[post(::input_i)].body.bodySize)
::input_n == orig(::players[post(::input_i)-1].direction)
::input_n == orig(player[post(::input_i)-1].body.visible)
::input_n == orig(player[post(::input_i)-1].body.tangible)
::input_n == player[::new_input].body.visible
::input_n == player[::new_input].body.tangible
::input_n == player[::new_input].body.bodyMapsSize
::input_n == orig(::players[post(::new_input)].body.visible)
::input_n == orig(::players[post(::new_input)].body.tangible)
::input_n == orig(player[post(::new_input)].body.visible)
::input_n == orig(player[post(::new_input)].body.tangible)
::input_n == orig(player[post(::new_input)].body.bodyMapsSize)
::input_n == player[orig(::input_n)-1].body.visible
::input_n == player[orig(::input_i)-1].body.visible
::input_n == player[orig(::new_input)].body.visible
::input_n == player[orig(::input_n)-1].body.tangible
::input_n == player[orig(::input_i)-1].body.tangible
::input_n == player[orig(::new_input)].body.tangible
::input_n == player[orig(::new_input)].body.bodyMapsSize
::input_n == orig(::players[::input_n].body.type)
::input_n == orig(::players[::input_i].body.type)
::input_n == orig(::players[::input_n].body.visible)
::input_n == orig(::players[::input_n-1].body.visible)
::input_n == orig(::players[::input_i].body.visible)
::input_n == orig(::players[::input_i-1].body.visible)
::input_n == orig(::players[::new_input].body.visible)
::input_n == orig(::players[::input_n].body.tangible)
::input_n == orig(::players[::input_n-1].body.tangible)
::input_n == orig(::players[::input_i].body.tangible)
::input_n == orig(::players[::input_i-1].body.tangible)
::input_n == orig(::players[::new_input].body.tangible)
::input_n == orig(::players[::input_n].body.bodyMapsSize)
::input_n == orig(::players[::input_i].body.bodyMapsSize)
::input_n == orig(::players[::input_n].body.bodySize)
::input_n == orig(::players[::input_i].body.bodySize)
::input_n == orig(::players[::input_n-1].direction)
::input_n == orig(::players[::input_i-1].direction)
::input_n == orig(player[::input_n-1].body.visible)
::input_n == orig(player[::input_n-1].body.tangible)
::input_n == orig(player[::input_i-1].body.visible)
::input_n == orig(player[::input_i-1].body.tangible)
::input_n == orig(player[::new_input].body.visible)
::input_n == orig(player[::new_input].body.tangible)
::input_n == orig(player[::new_input].body.bodyMapsSize)
::new_input == orig(::new_input)
::new_input == ::players[::new_input].body.type
::new_input == ::players[orig(::new_input)].body.type
::new_input == ::players[::input_n].impulse[0][0]
::new_input == ::players[::input_i].impulse[0][0]
::new_input == ::players[::new_input].impulse[0][0]
::new_input == ::players[orig(::input_n)].impulse[0][0]
::new_input == ::players[orig(::input_i)].impulse[0][0]
::new_input == ::players[orig(::new_input)].impulse[0][0]
::new_input == ::players[::input_n-1].impulse[1][0]
::new_input == ::players[::input_i-1].impulse[1][0]
::new_input == ::players[orig(::input_n)-1].impulse[1][0]
::new_input == ::players[orig(::input_i)-1].impulse[1][0]
::new_input == player[::input_n].body.type
::new_input == player[::input_n].impulse[0][0]
::new_input == orig(::players[post(::input_n)].impulse[0][0])
::new_input == orig(::players[post(::input_n)-1].impulse[1][0])
::new_input == orig(player[post(::input_n)].body.type)
::new_input == orig(player[post(::input_n)].impulse[0][0])
::new_input == player[::input_i].body.type
::new_input == player[::input_i].impulse[0][0]
::new_input == orig(::players[post(::input_i)].impulse[0][0])
::new_input == orig(::players[post(::input_i)-1].impulse[1][0])
::new_input == orig(player[post(::input_i)].body.type)
::new_input == orig(player[post(::input_i)].impulse[0][0])
::new_input == player[::new_input].body.type
::new_input == player[::new_input].impulse[0][0]
::new_input == orig(::players[post(::new_input)].body.type)
::new_input == orig(::players[post(::new_input)].impulse[0][0])
::new_input == orig(player[post(::new_input)].body.type)
::new_input == orig(player[post(::new_input)].impulse[0][0])
::new_input == player[orig(::input_n)].body.type
::new_input == player[orig(::input_i)].body.type
::new_input == player[orig(::new_input)].body.type
::new_input == player[orig(::input_n)].impulse[0][0]
::new_input == player[orig(::input_i)].impulse[0][0]
::new_input == player[orig(::new_input)].impulse[0][0]
::new_input == orig(::players[::new_input].body.type)
::new_input == orig(::players[::input_n].impulse[0][0])
::new_input == orig(::players[::input_i].impulse[0][0])
::new_input == orig(::players[::new_input].impulse[0][0])
::new_input == orig(::players[::input_n-1].impulse[1][0])
::new_input == orig(::players[::input_i-1].impulse[1][0])
::new_input == orig(player[::input_n].body.type)
::new_input == orig(player[::input_n].impulse[0][0])
::new_input == orig(player[::input_i].body.type)
::new_input == orig(player[::input_i].impulse[0][0])
::new_input == orig(player[::new_input].body.type)
::new_input == orig(player[::new_input].impulse[0][0])
::input_key == orig(::input_key)
::trace_pos == orig(::trace_pos)
player[] == orig(player[])
player[].id == player[].type
player[].id == player[].retired
player[].id == player[].impulse[2][0]
player[].id == player[].impulse[4][0]
player[].id == player[].impulse[6][0]
player[].id == player[].impulse[8][0]
player[].id == orig(player[].id)
player[].id == orig(player[].type)
player[].id == orig(player[].retired)
player[].id == orig(player[].impulse[2][0])
player[].id == orig(player[].impulse[4][0])
player[].id == orig(player[].impulse[6][0])
player[].id == orig(player[].impulse[8][0])
player[].body == orig(player[].body)
player[].body.type == orig(player[].body.type)
player[].body.visible == player[].body.tangible
player[].body.visible == orig(player[].body.visible)
player[].body.visible == orig(player[].body.tangible)
player[].body.bodyPoints == orig(player[].body.bodyPoints)
player[].body.bodyPoints[0] == orig(player[].body.bodyPoints[0])
player[].body.bodyPoints->position == orig(player[].body.bodyPoints->position)
player[].body.bodyPoints->player == orig(player[].body.bodyPoints->player)
player[].body.bodyPoints->player[0] == orig(player[].body.bodyPoints->player[0])
player[].body.bodyPoints->aspect == orig(player[].body.bodyPoints->aspect)
player[].body.bodyMaps == orig(player[].body.bodyMaps)
player[].body.bodyMapsSize == orig(player[].body.bodyMapsSize)
player[].body.bodySize == orig(player[].body.bodySize)
player[].body.bodyWidth == orig(player[].body.bodyWidth)
player[].body.bodyHeight == orig(player[].body.bodyHeight)
player[].body.color == orig(player[].body.color)
player[].basePosition == orig(player[].basePosition)
player[].basePosition.col == orig(player[].basePosition.col)
player[].impulse[0] == orig(player[].impulse[0])
player[].impulse[0][0] == orig(player[].impulse[0][0])
player[].impulse[1] == orig(player[].impulse[1])
player[].impulse[1][0] == orig(player[].impulse[1][0])
player[].impulse[2] == orig(player[].impulse[2])
player[].impulse[3] == orig(player[].impulse[3])
player[].impulse[3][0] == orig(player[].impulse[3][0])
player[].impulse[4] == orig(player[].impulse[4])
player[].impulse[5] == orig(player[].impulse[5])
player[].impulse[5][0] == orig(player[].impulse[5][0])
player[].impulse[6] == orig(player[].impulse[6])
player[].impulse[7] == orig(player[].impulse[7])
player[].impulse[7][0] == orig(player[].impulse[7][0])
player[].impulse[8] == orig(player[].impulse[8])
player[].direction == orig(player[].direction)
player[].magnetos == orig(player[].magnetos)
player[].magnetos[0] == orig(player[].magnetos[0])
player[].stepCounter == orig(player[].stepCounter)
player[].pilot == orig(player[].pilot)
player[].onCrash == orig(player[].onCrash)
player[].onPushed == orig(player[].onPushed)
orig(player) == player[::input_n-1].body.bodyPoints->player
orig(player) == orig(player[post(::input_n)-1].body.bodyPoints->player)
orig(player) == player[::input_i-1].body.bodyPoints->player
orig(player) == orig(player[post(::input_i)-1].body.bodyPoints->player)
orig(player) == player[orig(::input_n)-1].body.bodyPoints->player
orig(player) == player[orig(::input_i)-1].body.bodyPoints->player
size(::crashedPlayers[])-1 == ::playerSpace[::input_n-1].actionGroup->numActions
size(::crashedPlayers[])-1 == ::playerSpace[::input_i-1].actionGroup->numActions
size(::crashedPlayers[])-1 == ::playerSpace[orig(::input_n)-1].actionGroup->numActions
size(::crashedPlayers[])-1 == ::playerSpace[orig(::input_i)-1].actionGroup->numActions
size(::crashedPlayers[])-1 == ::players[::input_n].id
size(::crashedPlayers[])-1 == ::players[::input_n-1].id
size(::crashedPlayers[])-1 == ::players[::input_i].id
size(::crashedPlayers[])-1 == ::players[::input_i-1].id
size(::crashedPlayers[])-1 == ::players[::new_input].id
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].id
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].id
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].id
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].id
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].id
size(::crashedPlayers[])-1 == ::players[::input_n].type
size(::crashedPlayers[])-1 == ::players[::input_n-1].type
size(::crashedPlayers[])-1 == ::players[::input_i].type
size(::crashedPlayers[])-1 == ::players[::input_i-1].type
size(::crashedPlayers[])-1 == ::players[::new_input].type
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].type
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].type
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].type
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].type
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].type
size(::crashedPlayers[])-1 == ::players[::input_n].retired
size(::crashedPlayers[])-1 == ::players[::input_n-1].retired
size(::crashedPlayers[])-1 == ::players[::input_i].retired
size(::crashedPlayers[])-1 == ::players[::input_i-1].retired
size(::crashedPlayers[])-1 == ::players[::new_input].retired
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].retired
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].retired
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].retired
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].retired
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].retired
size(::crashedPlayers[])-1 == ::players[::input_n-1].body.type
size(::crashedPlayers[])-1 == ::players[::input_i-1].body.type
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].body.type
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].body.type
size(::crashedPlayers[])-1 == ::players[::input_n].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[::input_i].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].body.bodyWidth
size(::crashedPlayers[])-1 == ::players[::input_n].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[::input_i].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].body.bodyHeight
size(::crashedPlayers[])-1 == ::players[::input_n].body.color
size(::crashedPlayers[])-1 == ::players[::input_i].body.color
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].body.color
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].body.color
size(::crashedPlayers[])-1 == ::players[::input_n].basePosition.col
size(::crashedPlayers[])-1 == ::players[::input_i].basePosition.col
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].basePosition.col
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].basePosition.col
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[0][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[1][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[2][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[3][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[4][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[5][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[6][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[7][0]
size(::crashedPlayers[])-1 == ::players[::input_n].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_n-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_i].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_i-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::new_input].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[orig(::new_input)].impulse[8][0]
size(::crashedPlayers[])-1 == ::players[::input_n].direction
size(::crashedPlayers[])-1 == ::players[::input_i].direction
size(::crashedPlayers[])-1 == ::players[orig(::input_n)].direction
size(::crashedPlayers[])-1 == ::players[orig(::input_i)].direction
size(::crashedPlayers[])-1 == ::players[::input_n-1].stepCounter
size(::crashedPlayers[])-1 == ::players[::input_i-1].stepCounter
size(::crashedPlayers[])-1 == ::players[orig(::input_n)-1].stepCounter
size(::crashedPlayers[])-1 == ::players[orig(::input_i)-1].stepCounter
size(::crashedPlayers[])-1 == space[::input_n-1].actionGroup->numActions
size(::crashedPlayers[])-1 == player[::input_n].id
size(::crashedPlayers[])-1 == player[::input_n-1].id
size(::crashedPlayers[])-1 == player[::input_n].type
size(::crashedPlayers[])-1 == player[::input_n-1].type
size(::crashedPlayers[])-1 == player[::input_n].retired
size(::crashedPlayers[])-1 == player[::input_n-1].retired
size(::crashedPlayers[])-1 == player[::input_n-1].body.type
size(::crashedPlayers[])-1 == player[::input_n].body.color
size(::crashedPlayers[])-1 == player[::input_n-1].impulse[0][0]
size(::crashedPlayers[])-1 == player[::input_n].impulse[1][0]
size(::crashedPlayers[])-1 == player[::input_n].impulse[2][0]
size(::crashedPlayers[])-1 == player[::input_n-1].impulse[2][0]
size(::crashedPlayers[])-1 == player[::input_n-1].impulse[3][0]
size(::crashedPlayers[])-1 == player[::input_n].impulse[4][0]
size(::crashedPlayers[])-1 == player[::input_n-1].impulse[4][0]
size(::crashedPlayers[])-1 == player[::input_n].impulse[5][0]
size(::crashedPlayers[])-1 == player[::input_n].impulse[6][0]
size(::crashedPlayers[])-1 == player[::input_n-1].impulse[6][0]
size(::crashedPlayers[])-1 == player[::input_n-1].impulse[7][0]
size(::crashedPlayers[])-1 == player[::input_n].impulse[8][0]
size(::crashedPlayers[])-1 == player[::input_n-1].impulse[8][0]
size(::crashedPlayers[])-1 == player[::input_n].direction
size(::crashedPlayers[])-1 == orig(::playerSpace[post(::input_n)-1].actionGroup->numActions)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].id)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].id)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].type)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].type)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].retired)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].retired)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].body.type)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].body.bodyWidth)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].body.bodyHeight)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].body.color)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].basePosition.col)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[0][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)].direction)
size(::crashedPlayers[])-1 == orig(::players[post(::input_n)-1].stepCounter)
size(::crashedPlayers[])-1 == orig(space[post(::input_n)-1].actionGroup->numActions)
size(::crashedPlayers[])-1 == orig(player[post(::input_n)].id)
size(::crashedPlayers[])-1 == orig(player[post(::input_n)-1].id)
size(::crashedPlayers[])-1 == orig(player[post(::input_n)].type)
size(::crashedPlayers[])-1 == orig(player[post(::input_n)-1].type)
size(::crashedPlayers[])-1 == orig(player[post(::input_n)].retired)
size(::crashedPlayers[])-1 == orig(player[post(::input_n)-1].retired)
size(::crashedPlayers[])-1 == orig(player[post(::input_n)-1].body.type)
size(::crashedPlayers[])-1 == orig(player[post(::input_n)].body.color)
size(::crashedPlayers[])-1 == orig(player[post(::input_n)-1].impulse[0][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_n)].impulse[1][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_n)].impulse[2][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_n)-1].impulse[2][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_n)-1].impulse[3][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_n)].impulse[4][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_n)-1].impulse[4][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_n)].impulse[5][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_n)].impulse[6][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_n)-1].impulse[6][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_n)-1].impulse[7][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_n)].impulse[8][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_n)-1].impulse[8][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_n)].direction)
size(::crashedPlayers[])-1 == space[::input_i-1].actionGroup->numActions
size(::crashedPlayers[])-1 == player[::input_i].id
size(::crashedPlayers[])-1 == player[::input_i-1].id
size(::crashedPlayers[])-1 == player[::input_i].type
size(::crashedPlayers[])-1 == player[::input_i-1].type
size(::crashedPlayers[])-1 == player[::input_i].retired
size(::crashedPlayers[])-1 == player[::input_i-1].retired
size(::crashedPlayers[])-1 == player[::input_i-1].body.type
size(::crashedPlayers[])-1 == player[::input_i].body.color
size(::crashedPlayers[])-1 == player[::input_i-1].impulse[0][0]
size(::crashedPlayers[])-1 == player[::input_i].impulse[1][0]
size(::crashedPlayers[])-1 == player[::input_i].impulse[2][0]
size(::crashedPlayers[])-1 == player[::input_i-1].impulse[2][0]
size(::crashedPlayers[])-1 == player[::input_i-1].impulse[3][0]
size(::crashedPlayers[])-1 == player[::input_i].impulse[4][0]
size(::crashedPlayers[])-1 == player[::input_i-1].impulse[4][0]
size(::crashedPlayers[])-1 == player[::input_i].impulse[5][0]
size(::crashedPlayers[])-1 == player[::input_i].impulse[6][0]
size(::crashedPlayers[])-1 == player[::input_i-1].impulse[6][0]
size(::crashedPlayers[])-1 == player[::input_i-1].impulse[7][0]
size(::crashedPlayers[])-1 == player[::input_i].impulse[8][0]
size(::crashedPlayers[])-1 == player[::input_i-1].impulse[8][0]
size(::crashedPlayers[])-1 == player[::input_i].direction
size(::crashedPlayers[])-1 == orig(::playerSpace[post(::input_i)-1].actionGroup->numActions)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].id)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].id)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].type)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].type)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].retired)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].retired)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].body.type)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].body.bodyWidth)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].body.bodyHeight)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].body.color)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].basePosition.col)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[0][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)].direction)
size(::crashedPlayers[])-1 == orig(::players[post(::input_i)-1].stepCounter)
size(::crashedPlayers[])-1 == orig(space[post(::input_i)-1].actionGroup->numActions)
size(::crashedPlayers[])-1 == orig(player[post(::input_i)].id)
size(::crashedPlayers[])-1 == orig(player[post(::input_i)-1].id)
size(::crashedPlayers[])-1 == orig(player[post(::input_i)].type)
size(::crashedPlayers[])-1 == orig(player[post(::input_i)-1].type)
size(::crashedPlayers[])-1 == orig(player[post(::input_i)].retired)
size(::crashedPlayers[])-1 == orig(player[post(::input_i)-1].retired)
size(::crashedPlayers[])-1 == orig(player[post(::input_i)-1].body.type)
size(::crashedPlayers[])-1 == orig(player[post(::input_i)].body.color)
size(::crashedPlayers[])-1 == orig(player[post(::input_i)-1].impulse[0][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_i)].impulse[1][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_i)].impulse[2][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_i)-1].impulse[2][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_i)-1].impulse[3][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_i)].impulse[4][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_i)-1].impulse[4][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_i)].impulse[5][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_i)].impulse[6][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_i)-1].impulse[6][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_i)-1].impulse[7][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_i)].impulse[8][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_i)-1].impulse[8][0])
size(::crashedPlayers[])-1 == orig(player[post(::input_i)].direction)
size(::crashedPlayers[])-1 == player[::new_input].id
size(::crashedPlayers[])-1 == player[::new_input].type
size(::crashedPlayers[])-1 == player[::new_input].retired
size(::crashedPlayers[])-1 == player[::new_input].impulse[2][0]
size(::crashedPlayers[])-1 == player[::new_input].impulse[3][0]
size(::crashedPlayers[])-1 == player[::new_input].impulse[4][0]
size(::crashedPlayers[])-1 == player[::new_input].impulse[6][0]
size(::crashedPlayers[])-1 == player[::new_input].impulse[7][0]
size(::crashedPlayers[])-1 == player[::new_input].impulse[8][0]
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].id)
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].type)
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].retired)
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[post(::new_input)].impulse[8][0])
size(::crashedPlayers[])-1 == orig(player[post(::new_input)].id)
size(::crashedPlayers[])-1 == orig(player[post(::new_input)].type)
size(::crashedPlayers[])-1 == orig(player[post(::new_input)].retired)
size(::crashedPlayers[])-1 == orig(player[post(::new_input)].impulse[2][0])
size(::crashedPlayers[])-1 == orig(player[post(::new_input)].impulse[3][0])
size(::crashedPlayers[])-1 == orig(player[post(::new_input)].impulse[4][0])
size(::crashedPlayers[])-1 == orig(player[post(::new_input)].impulse[6][0])
size(::crashedPlayers[])-1 == orig(player[post(::new_input)].impulse[7][0])
size(::crashedPlayers[])-1 == orig(player[post(::new_input)].impulse[8][0])
size(::crashedPlayers[])-1 == space[orig(::input_n)-1].actionGroup->numActions
size(::crashedPlayers[])-1 == space[orig(::input_i)-1].actionGroup->numActions
size(::crashedPlayers[])-1 == player[orig(::input_n)].id
size(::crashedPlayers[])-1 == player[orig(::input_n)-1].id
size(::crashedPlayers[])-1 == player[orig(::input_i)].id
size(::crashedPlayers[])-1 == player[orig(::input_i)-1].id
size(::crashedPlayers[])-1 == player[orig(::new_input)].id
size(::crashedPlayers[])-1 == player[orig(::input_n)].type
size(::crashedPlayers[])-1 == player[orig(::input_n)-1].type
size(::crashedPlayers[])-1 == player[orig(::input_i)].type
size(::crashedPlayers[])-1 == player[orig(::input_i)-1].type
size(::crashedPlayers[])-1 == player[orig(::new_input)].type
size(::crashedPlayers[])-1 == player[orig(::input_n)].retired
size(::crashedPlayers[])-1 == player[orig(::input_n)-1].retired
size(::crashedPlayers[])-1 == player[orig(::input_i)].retired
size(::crashedPlayers[])-1 == player[orig(::input_i)-1].retired
size(::crashedPlayers[])-1 == player[orig(::new_input)].retired
size(::crashedPlayers[])-1 == player[orig(::input_n)-1].body.type
size(::crashedPlayers[])-1 == player[orig(::input_i)-1].body.type
size(::crashedPlayers[])-1 == player[orig(::input_n)].body.color
size(::crashedPlayers[])-1 == player[orig(::input_i)].body.color
size(::crashedPlayers[])-1 == player[orig(::input_n)-1].impulse[0][0]
size(::crashedPlayers[])-1 == player[orig(::input_i)-1].impulse[0][0]
size(::crashedPlayers[])-1 == player[orig(::input_n)].impulse[1][0]
size(::crashedPlayers[])-1 == player[orig(::input_i)].impulse[1][0]
size(::crashedPlayers[])-1 == player[orig(::input_n)].impulse[2][0]
size(::crashedPlayers[])-1 == player[orig(::input_n)-1].impulse[2][0]
size(::crashedPlayers[])-1 == player[orig(::input_i)].impulse[2][0]
size(::crashedPlayers[])-1 == player[orig(::input_i)-1].impulse[2][0]
size(::crashedPlayers[])-1 == player[orig(::new_input)].impulse[2][0]
size(::crashedPlayers[])-1 == player[orig(::input_n)-1].impulse[3][0]
size(::crashedPlayers[])-1 == player[orig(::input_i)-1].impulse[3][0]
size(::crashedPlayers[])-1 == player[orig(::new_input)].impulse[3][0]
size(::crashedPlayers[])-1 == player[orig(::input_n)].impulse[4][0]
size(::crashedPlayers[])-1 == player[orig(::input_n)-1].impulse[4][0]
size(::crashedPlayers[])-1 == player[orig(::input_i)].impulse[4][0]
size(::crashedPlayers[])-1 == player[orig(::input_i)-1].impulse[4][0]
size(::crashedPlayers[])-1 == player[orig(::new_input)].impulse[4][0]
size(::crashedPlayers[])-1 == player[orig(::input_n)].impulse[5][0]
size(::crashedPlayers[])-1 == player[orig(::input_i)].impulse[5][0]
size(::crashedPlayers[])-1 == player[orig(::input_n)].impulse[6][0]
size(::crashedPlayers[])-1 == player[orig(::input_n)-1].impulse[6][0]
size(::crashedPlayers[])-1 == player[orig(::input_i)].impulse[6][0]
size(::crashedPlayers[])-1 == player[orig(::input_i)-1].impulse[6][0]
size(::crashedPlayers[])-1 == player[orig(::new_input)].impulse[6][0]
size(::crashedPlayers[])-1 == player[orig(::input_n)-1].impulse[7][0]
size(::crashedPlayers[])-1 == player[orig(::input_i)-1].impulse[7][0]
size(::crashedPlayers[])-1 == player[orig(::new_input)].impulse[7][0]
size(::crashedPlayers[])-1 == player[orig(::input_n)].impulse[8][0]
size(::crashedPlayers[])-1 == player[orig(::input_n)-1].impulse[8][0]
size(::crashedPlayers[])-1 == player[orig(::input_i)].impulse[8][0]
size(::crashedPlayers[])-1 == player[orig(::input_i)-1].impulse[8][0]
size(::crashedPlayers[])-1 == player[orig(::new_input)].impulse[8][0]
size(::crashedPlayers[])-1 == player[orig(::input_n)].direction
size(::crashedPlayers[])-1 == player[orig(::input_i)].direction
size(::crashedPlayers[])-1 == orig(::playerSpace[::input_n-1].actionGroup->numActions)
size(::crashedPlayers[])-1 == orig(::playerSpace[::input_i-1].actionGroup->numActions)
size(::crashedPlayers[])-1 == orig(::players[::input_n].id)
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].id)
size(::crashedPlayers[])-1 == orig(::players[::input_i].id)
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].id)
size(::crashedPlayers[])-1 == orig(::players[::new_input].id)
size(::crashedPlayers[])-1 == orig(::players[::input_n].type)
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].type)
size(::crashedPlayers[])-1 == orig(::players[::input_i].type)
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].type)
size(::crashedPlayers[])-1 == orig(::players[::new_input].type)
size(::crashedPlayers[])-1 == orig(::players[::input_n].retired)
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].retired)
size(::crashedPlayers[])-1 == orig(::players[::input_i].retired)
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].retired)
size(::crashedPlayers[])-1 == orig(::players[::new_input].retired)
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].body.type)
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].body.type)
size(::crashedPlayers[])-1 == orig(::players[::input_n].body.bodyWidth)
size(::crashedPlayers[])-1 == orig(::players[::input_i].body.bodyWidth)
size(::crashedPlayers[])-1 == orig(::players[::input_n].body.bodyHeight)
size(::crashedPlayers[])-1 == orig(::players[::input_i].body.bodyHeight)
size(::crashedPlayers[])-1 == orig(::players[::input_n].body.color)
size(::crashedPlayers[])-1 == orig(::players[::input_i].body.color)
size(::crashedPlayers[])-1 == orig(::players[::input_n].basePosition.col)
size(::crashedPlayers[])-1 == orig(::players[::input_i].basePosition.col)
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[0][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[0][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[1][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[2][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[3][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[4][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[5][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[6][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[7][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[::new_input].impulse[8][0])
size(::crashedPlayers[])-1 == orig(::players[::input_n].direction)
size(::crashedPlayers[])-1 == orig(::players[::input_i].direction)
size(::crashedPlayers[])-1 == orig(::players[::input_n-1].stepCounter)
size(::crashedPlayers[])-1 == orig(::players[::input_i-1].stepCounter)
size(::crashedPlayers[])-1 == orig(space[::input_n-1].actionGroup->numActions)
size(::crashedPlayers[])-1 == orig(player[::input_n].id)
size(::crashedPlayers[])-1 == orig(player[::input_n-1].id)
size(::crashedPlayers[])-1 == orig(player[::input_n].type)
size(::crashedPlayers[])-1 == orig(player[::input_n-1].type)
size(::crashedPlayers[])-1 == orig(player[::input_n].retired)
size(::crashedPlayers[])-1 == orig(player[::input_n-1].retired)
size(::crashedPlayers[])-1 == orig(player[::input_n-1].body.type)
size(::crashedPlayers[])-1 == orig(player[::input_n].body.color)
size(::crashedPlayers[])-1 == orig(player[::input_n-1].impulse[0][0])
size(::crashedPlayers[])-1 == orig(player[::input_n].impulse[1][0])
size(::crashedPlayers[])-1 == orig(player[::input_n].impulse[2][0])
size(::crashedPlayers[])-1 == orig(player[::input_n-1].impulse[2][0])
size(::crashedPlayers[])-1 == orig(player[::input_n-1].impulse[3][0])
size(::crashedPlayers[])-1 == orig(player[::input_n].impulse[4][0])
size(::crashedPlayers[])-1 == orig(player[::input_n-1].impulse[4][0])
size(::crashedPlayers[])-1 == orig(player[::input_n].impulse[5][0])
size(::crashedPlayers[])-1 == orig(player[::input_n].impulse[6][0])
size(::crashedPlayers[])-1 == orig(player[::input_n-1].impulse[6][0])
size(::crashedPlayers[])-1 == orig(player[::input_n-1].impulse[7][0])
size(::crashedPlayers[])-1 == orig(player[::input_n].impulse[8][0])
size(::crashedPlayers[])-1 == orig(player[::input_n-1].impulse[8][0])
size(::crashedPlayers[])-1 == orig(player[::input_n].direction)
size(::crashedPlayers[])-1 == orig(space[::input_i-1].actionGroup->numActions)
size(::crashedPlayers[])-1 == orig(player[::input_i].id)
size(::crashedPlayers[])-1 == orig(player[::input_i-1].id)
size(::crashedPlayers[])-1 == orig(player[::input_i].type)
size(::crashedPlayers[])-1 == orig(player[::input_i-1].type)
size(::crashedPlayers[])-1 == orig(player[::input_i].retired)
size(::crashedPlayers[])-1 == orig(player[::input_i-1].retired)
size(::crashedPlayers[])-1 == orig(player[::input_i-1].body.type)
size(::crashedPlayers[])-1 == orig(player[::input_i].body.color)
size(::crashedPlayers[])-1 == orig(player[::input_i-1].impulse[0][0])
size(::crashedPlayers[])-1 == orig(player[::input_i].impulse[1][0])
size(::crashedPlayers[])-1 == orig(player[::input_i].impulse[2][0])
size(::crashedPlayers[])-1 == orig(player[::input_i-1].impulse[2][0])
size(::crashedPlayers[])-1 == orig(player[::input_i-1].impulse[3][0])
size(::crashedPlayers[])-1 == orig(player[::input_i].impulse[4][0])
size(::crashedPlayers[])-1 == orig(player[::input_i-1].impulse[4][0])
size(::crashedPlayers[])-1 == orig(player[::input_i].impulse[5][0])
size(::crashedPlayers[])-1 == orig(player[::input_i].impulse[6][0])
size(::crashedPlayers[])-1 == orig(player[::input_i-1].impulse[6][0])
size(::crashedPlayers[])-1 == orig(player[::input_i-1].impulse[7][0])
size(::crashedPlayers[])-1 == orig(player[::input_i].impulse[8][0])
size(::crashedPlayers[])-1 == orig(player[::input_i-1].impulse[8][0])
size(::crashedPlayers[])-1 == orig(player[::input_i].direction)
size(::crashedPlayers[])-1 == orig(player[::new_input].id)
size(::crashedPlayers[])-1 == orig(player[::new_input].type)
size(::crashedPlayers[])-1 == orig(player[::new_input].retired)
size(::crashedPlayers[])-1 == orig(player[::new_input].impulse[2][0])
size(::crashedPlayers[])-1 == orig(player[::new_input].impulse[3][0])
size(::crashedPlayers[])-1 == orig(player[::new_input].impulse[4][0])
size(::crashedPlayers[])-1 == orig(player[::new_input].impulse[6][0])
size(::crashedPlayers[])-1 == orig(player[::new_input].impulse[7][0])
size(::crashedPlayers[])-1 == orig(player[::new_input].impulse[8][0])
size(::players[]) == size(::players[].body.bodyPoints[0])
size(::players[]) == size(::players[].body.bodyPoints->player[0])
size(::players[]) == size(::players[].impulse[0])
size(::players[]) == size(::players[].impulse[0][0])
size(::players[]) == size(::players[].impulse[1])
size(::players[]) == size(::players[].impulse[1][0])
size(::players[]) == size(::players[].impulse[2])
size(::players[]) == size(::players[].impulse[2][0])
size(::players[]) == size(::players[].impulse[3])
size(::players[]) == size(::players[].impulse[3][0])
size(::players[]) == size(::players[].impulse[4])
size(::players[]) == size(::players[].impulse[4][0])
size(::players[]) == size(::players[].impulse[5])
size(::players[]) == size(::players[].impulse[5][0])
size(::players[]) == size(::players[].impulse[6])
size(::players[]) == size(::players[].impulse[6][0])
size(::players[]) == size(::players[].impulse[7])
size(::players[]) == size(::players[].impulse[7][0])
size(::players[]) == size(::players[].impulse[8])
size(::players[]) == size(::players[].impulse[8][0])
size(::players[]) == size(::players[].magnetos[0])
size(::players[]) == orig(size(::players[].body.bodyPoints[0]))
size(::players[]) == orig(size(::players[].body.bodyPoints->player[0]))
size(::players[]) == orig(size(::players[].impulse[0]))
size(::players[]) == orig(size(::players[].impulse[0][0]))
size(::players[]) == orig(size(::players[].impulse[1]))
size(::players[]) == orig(size(::players[].impulse[1][0]))
size(::players[]) == orig(size(::players[].impulse[2]))
size(::players[]) == orig(size(::players[].impulse[2][0]))
size(::players[]) == orig(size(::players[].impulse[3]))
size(::players[]) == orig(size(::players[].impulse[3][0]))
size(::players[]) == orig(size(::players[].impulse[4]))
size(::players[]) == orig(size(::players[].impulse[4][0]))
size(::players[]) == orig(size(::players[].impulse[5]))
size(::players[]) == orig(size(::players[].impulse[5][0]))
size(::players[]) == orig(size(::players[].impulse[6]))
size(::players[]) == orig(size(::players[].impulse[6][0]))
size(::players[]) == orig(size(::players[].impulse[7]))
size(::players[]) == orig(size(::players[].impulse[7][0]))
size(::players[]) == orig(size(::players[].impulse[8]))
size(::players[]) == orig(size(::players[].impulse[8][0]))
size(::players[]) == orig(size(::players[].magnetos[0]))
::players[::input_n] == ::players[::input_n].body.bodyPoints->player[0]
::players[::input_n] == ::players[::input_i].body.bodyPoints->player[0]
::players[::input_n] == ::players[orig(::input_n)].body.bodyPoints->player[0]
::players[::input_n] == ::players[orig(::input_i)].body.bodyPoints->player[0]
::players[::input_n] == orig(::players[post(::input_n)].body.bodyPoints->player[0])
::players[::input_n] == orig(::players[post(::input_i)].body.bodyPoints->player[0])
::players[::input_n] == orig(::players[::input_n].body.bodyPoints->player[0])
::players[::input_n] == orig(::players[::input_i].body.bodyPoints->player[0])
::players[::input_n-1] == ::players[::input_n-1].body.bodyPoints->player[0]
::players[::input_n-1] == ::players[::input_i-1].body.bodyPoints->player[0]
::players[::input_n-1] == ::players[orig(::input_n)-1].body.bodyPoints->player[0]
::players[::input_n-1] == ::players[orig(::input_i)-1].body.bodyPoints->player[0]
::players[::input_n-1] == orig(::players[post(::input_n)-1].body.bodyPoints->player[0])
::players[::input_n-1] == orig(::players[post(::input_i)-1].body.bodyPoints->player[0])
::players[::input_n-1] == orig(::players[::input_n-1].body.bodyPoints->player[0])
::players[::input_n-1] == orig(::players[::input_i-1].body.bodyPoints->player[0])
::players[::new_input] == ::players[::new_input].body.bodyPoints->player[0]
::players[::new_input] == ::players[orig(::new_input)].body.bodyPoints->player[0]
::players[::new_input] == orig(::players[post(::new_input)].body.bodyPoints->player[0])
::players[::new_input] == orig(::players[::new_input].body.bodyPoints->player[0])
::players[::input_n-1].body.bodyMapsSize == ::players[::input_n-1].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize == ::players[::input_i-1].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize == ::players[orig(::input_n)-1].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize == ::players[orig(::input_i)-1].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize == orig(::players[post(::input_n)-1].body.bodyHeight)
::players[::input_n-1].body.bodyMapsSize == orig(::players[post(::input_i)-1].body.bodyHeight)
::players[::input_n-1].body.bodyMapsSize == orig(::players[::input_n-1].body.bodyHeight)
::players[::input_n-1].body.bodyMapsSize == orig(::players[::input_i-1].body.bodyHeight)
::players[::input_n].basePosition.row == orig(::players[post(::input_n)].basePosition.row)
::players[::input_n].basePosition.row == orig(::players[post(::input_i)].basePosition.row)
::players[::input_n].basePosition.row == orig(::players[::input_n].basePosition.row)
::players[::input_n].basePosition.row == orig(::players[::input_i].basePosition.row)
::players[::input_n-1].basePosition.row == ::players[::input_n].stepCounter
::players[::input_i-1].basePosition.row == ::players[::input_n].stepCounter
::players[::new_input].basePosition.row == orig(::players[post(::input_n)-1].basePosition.row)
::players[::new_input].basePosition.row == orig(::players[post(::input_i)-1].basePosition.row)
::players[::new_input].basePosition.row == orig(::players[post(::new_input)].basePosition.row)
::players[::new_input].basePosition.row == orig(::players[::input_n-1].basePosition.row)
::players[::new_input].basePosition.row == orig(::players[::input_i-1].basePosition.row)
::players[::new_input].basePosition.row == orig(::players[::new_input].basePosition.row)
::players[orig(::input_n)-1].basePosition.row == ::players[::input_n].stepCounter
::players[orig(::input_i)-1].basePosition.row == ::players[::input_n].stepCounter
::players[::input_n].onPushed == ::players[::input_n-1].onPushed
::players[::input_n].onPushed == ::players[::input_i-1].onPushed
::players[::input_n].onPushed == ::players[::new_input].onPushed
::players[::input_n].onPushed == ::players[orig(::input_n)-1].onPushed
::players[::input_n].onPushed == ::players[orig(::input_i)-1].onPushed
::players[::input_n].onPushed == ::players[orig(::new_input)].onPushed
::players[::input_n].onPushed == player[::input_n-1].onPushed
::players[::input_n].onPushed == orig(::players[post(::input_n)-1].onPushed)
::players[::input_n].onPushed == orig(player[post(::input_n)-1].onPushed)
::players[::input_n].onPushed == player[::input_i-1].onPushed
::players[::input_n].onPushed == orig(::players[post(::input_i)-1].onPushed)
::players[::input_n].onPushed == orig(player[post(::input_i)-1].onPushed)
::players[::input_n].onPushed == player[::new_input].onPushed
::players[::input_n].onPushed == orig(::players[post(::new_input)].onPushed)
::players[::input_n].onPushed == orig(player[post(::new_input)].onPushed)
::players[::input_n].onPushed == player[orig(::input_n)-1].onPushed
::players[::input_n].onPushed == player[orig(::input_i)-1].onPushed
::players[::input_n].onPushed == player[orig(::new_input)].onPushed
::players[::input_n].onPushed == orig(::players[::input_n-1].onPushed)
::players[::input_n].onPushed == orig(::players[::input_i-1].onPushed)
::players[::input_n].onPushed == orig(::players[::new_input].onPushed)
::players[::input_n].onPushed == orig(player[::input_n-1].onPushed)
::players[::input_n].onPushed == orig(player[::input_i-1].onPushed)
::players[::input_n].onPushed == orig(player[::new_input].onPushed)
player[::input_n-1] == player[::input_n-1].body.bodyPoints->player[0]
player[::input_n-1] == orig(player[post(::input_n)-1].body.bodyPoints->player[0])
player[::input_n-1] == player[::input_i-1].body.bodyPoints->player[0]
player[::input_n-1] == orig(player[post(::input_i)-1].body.bodyPoints->player[0])
player[::input_n-1] == player[orig(::input_n)-1].body.bodyPoints->player[0]
player[::input_n-1] == player[orig(::input_i)-1].body.bodyPoints->player[0]
player[::input_n-1] == orig(player[::input_n-1].body.bodyPoints->player[0])
player[::input_n-1] == orig(player[::input_i-1].body.bodyPoints->player[0])
player[::input_n].body.visible == player[::input_n].body.bodyMapsSize
player[::input_n].body.visible == player[::input_n-1].impulse[1][0]
player[::input_n].body.visible == orig(player[post(::input_n)].body.bodyMapsSize)
player[::input_n].body.visible == orig(player[post(::input_n)-1].impulse[1][0])
player[::input_n].body.visible == player[::input_i].body.bodyMapsSize
player[::input_n].body.visible == player[::input_i-1].impulse[1][0]
player[::input_n].body.visible == orig(player[post(::input_i)].body.bodyMapsSize)
player[::input_n].body.visible == orig(player[post(::input_i)-1].impulse[1][0])
player[::input_n].body.visible == player[orig(::input_n)].body.bodyMapsSize
player[::input_n].body.visible == player[orig(::input_i)].body.bodyMapsSize
player[::input_n].body.visible == player[orig(::input_n)-1].impulse[1][0]
player[::input_n].body.visible == player[orig(::input_i)-1].impulse[1][0]
player[::input_n].body.visible == orig(player[::input_n].body.bodyMapsSize)
player[::input_n].body.visible == orig(player[::input_n-1].impulse[1][0])
player[::input_n].body.visible == orig(player[::input_i].body.bodyMapsSize)
player[::input_n].body.visible == orig(player[::input_i-1].impulse[1][0])
player[::input_n].basePosition.row == orig(player[post(::input_n)].basePosition.row)
player[::input_n].basePosition.row == orig(player[post(::input_i)].basePosition.row)
player[::input_n].basePosition.row == orig(player[::input_n].basePosition.row)
player[::input_n].basePosition.row == orig(player[::input_i].basePosition.row)
player[::input_n].impulse[3][0] == player[::input_n].impulse[7][0]
player[::input_n].impulse[3][0] == orig(player[post(::input_n)].impulse[7][0])
player[::input_n].impulse[3][0] == player[::input_i].impulse[7][0]
player[::input_n].impulse[3][0] == orig(player[post(::input_i)].impulse[7][0])
player[::input_n].impulse[3][0] == player[::new_input].impulse[1][0]
player[::input_n].impulse[3][0] == orig(player[post(::new_input)].impulse[1][0])
player[::input_n].impulse[3][0] == player[orig(::new_input)].impulse[1][0]
player[::input_n].impulse[3][0] == player[orig(::input_n)].impulse[7][0]
player[::input_n].impulse[3][0] == player[orig(::input_i)].impulse[7][0]
player[::input_n].impulse[3][0] == orig(player[::input_n].impulse[7][0])
player[::input_n].impulse[3][0] == orig(player[::input_i].impulse[7][0])
player[::input_n].impulse[3][0] == orig(player[::new_input].impulse[1][0])
player[::input_n-1].impulse[5][0] == player[::new_input].impulse[5][0]
orig(player[post(::input_n)-1].basePosition.row) == orig(player[::new_input].basePosition.row)
orig(player[post(::input_n)-1].impulse[5][0]) == player[::new_input].impulse[5][0]
player[::input_i-1].impulse[5][0] == player[::new_input].impulse[5][0]
orig(player[post(::input_i)-1].basePosition.row) == orig(player[::new_input].basePosition.row)
orig(player[post(::input_i)-1].impulse[5][0]) == player[::new_input].impulse[5][0]
player[::new_input] == player[::new_input].body.bodyPoints->player[0]
player[::new_input] == orig(player[post(::new_input)].body.bodyPoints->player[0])
player[::new_input] == player[orig(::new_input)].body.bodyPoints->player[0]
player[::new_input] == orig(player[::new_input].body.bodyPoints->player[0])
player[::new_input].impulse[5][0] == player[orig(::input_n)-1].impulse[5][0]
player[::new_input].impulse[5][0] == player[orig(::input_i)-1].impulse[5][0]
player[::new_input].impulse[5][0] == orig(player[::input_n-1].impulse[5][0])
player[::new_input].impulse[5][0] == orig(player[::input_i-1].impulse[5][0])
::crashedPlayers has only one value
::crashedPlayers[] contains no nulls and has only one value, of length 1
::crashedPlayers[] elements has only one value
::crashedPlayers[].start == [null]
::crashedPlayers[].start elements == null
::playerSpace has only one value
::playerSpace[] contains no nulls and has only one value, of length 1
::playerSpace[] elements has only one value
::playerSpace[].playerNodes contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes elements has only one value
::playerSpace[].playerNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes[0] elements has only one value
::playerSpace[].playerNodes->start contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start elements has only one value
::playerSpace[].playerNodes->start[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start[0] elements has only one value
::playerSpace[].playerNodes->start->next contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next elements has only one value
::playerSpace[].playerNodes->start->next[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next[0] elements has only one value
::playerSpace[].playerNodes->start->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->data elements has only one value
::playerSpace[].playerNodes->end contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end elements has only one value
::playerSpace[].playerNodes->end[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end[0] elements has only one value
::playerSpace[].playerNodes->end->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->data elements has only one value
::playerSpace[].playerNodes->end->prev contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->prev elements has only one value
::playerSpace[].playerNodes->end->prev[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->end->prev[0] elements has only one value
::playerSpace[].playerMap contains no nulls and has only one value, of length 1
::playerSpace[].playerMap elements has only one value
::playerSpace[].guideNodes contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes elements has only one value
::playerSpace[].guideNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes[0] elements has only one value
::playerSpace[].groundMap contains no nulls and has only one value, of length 1
::playerSpace[].groundMap elements has only one value
::playerSpace[].actionGroup contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup elements has only one value
::playerSpace[].actionGroup[0] contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup[0] elements has only one value
::playerSpace[].actionGroup->numActions == [0]
::playerSpace[].actionGroup->numActions elements == 0
::players has only one value
::players[] contains no nulls and has only one value, of length 100
::players[].id == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].id elements == 0
::players[].body contains no nulls and has only one value, of length 100
::players[].body.type == [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.type elements one of { 0, 1 }
::players[].body.visible == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.visible elements one of { 0, 1 }
::players[].body.bodyPoints contains no nulls and has only one value, of length 100
::players[].body.bodyPoints[0] contains no nulls and has only one value, of length 100
::players[].body.bodyPoints->position contains no nulls and has only one value, of length 100
::players[].body.bodyPoints->player has only one value, of length 100
::players[].body.bodyPoints->player[0] has only one value, of length 100
::players[].body.bodyPoints->aspect == [46, 35, 35, 35, 35, 35, 86, 86, 86, 86, 86, 88, 91, 91, 91, 91, 91, 91, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyPoints->aspect elements >= 0
::players[].body.bodyMaps contains no nulls and has only one value, of length 100
::players[].body.bodyMapsSize == [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyMapsSize elements one of { 0, 1, 4 }
::players[].body.bodySize == [28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodySize elements >= 0
::players[].body.bodyWidth == [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyWidth elements one of { 0, 8, 14 }
::players[].body.bodyHeight == [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.bodyHeight elements one of { 0, 4, 6 }
::players[].body.color == [3, 0, 1, 2, 3, 4, 0, 2, 4, 6, 8, 2, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].body.color elements >= 0
::players[].basePosition contains no nulls and has only one value, of length 100
::players[].basePosition.col one of { [40, 0, 2, 4, 6, 8, 0, 4, 8, 12, 16, 4, 10, 18, 26, 34, 42, 50, 58, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [40, 0, 3, 5, 7, 8, 0, 4, 8, 12, 16, 4, 10, 18, 26, 34, 42, 50, 58, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].basePosition.col elements >= 0
::players[].basePosition.row one of { [9, 10, 11, 12, 13, 13, 0, 2, 3, 3, 4, 4, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 10, 11, 12, 13, 13, 0, 2, 3, 3, 4, 4, 0, 1, 2, 3, 4, 5, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 10, 11, 12, 13, 14, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].basePosition.row elements >= 0
::players[].impulse[0] contains no nulls and has only one value, of length 100
::players[].impulse[0][0] elements one of { 0, 1 }
::players[].impulse[0][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[1] contains no nulls and has only one value, of length 100
::players[].impulse[1][0] elements one of { 0, 1, 5 }
::players[].impulse[1][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[2] contains no nulls and has only one value, of length 100
::players[].impulse[3] contains no nulls and has only one value, of length 100
::players[].impulse[3][0] elements one of { 0, 1 }
::players[].impulse[3][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[4] contains no nulls and has only one value, of length 100
::players[].impulse[5] contains no nulls and has only one value, of length 100
::players[].impulse[5][0] elements one of { 0, 1 }
::players[].impulse[5][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[6] contains no nulls and has only one value, of length 100
::players[].impulse[7] contains no nulls and has only one value, of length 100
::players[].impulse[7][0] elements one of { 0, 1 }
::players[].impulse[7][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].impulse[8] contains no nulls and has only one value, of length 100
::players[].direction one of { [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 3, 3, 3, 1, 0, 5, 5, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 3, 3, 3, 1, 0, 5, 5, 3, 0, 1, 0, 3, 2, 2, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].direction elements >= 0
::players[].magnetos has only one value, of length 100
::players[].magnetos[0] has only one value, of length 100
::players[].stepCounter one of { [0, 9, 7, 7, 4, 8, 9, 1, 8, 7, 1, 4, 8, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 9, 7, 7, 4, 8, 9, 1, 8, 7, 1, 4, 8, 2, 10, 4, 2, 9, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
::players[].stepCounter elements >= 0
::players[].pilot has only one value, of length 100
::players[].onCrash has only one value, of length 100
::players[].onPushed has only one value, of length 100
::snakeBodyMap has only one value
::trainBodyMap has only one value
::giantBodyMap has only one value
::squareBodyMap has only one value
::circleBodyMap has only one value
::input_n == 1
::new_input one of { 0, 1 }
::input_key == "k"
::trace_pos one of { "(40, 10) -> ", "(40, 10) -> (40, 9)\n" }
player[].id elements == 0
player[].id one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].body.type elements one of { 0, 1 }
player[].body.type one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].body.visible elements one of { 0, 1 }
player[].body.visible one of { [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].body.bodyPoints->aspect one of { [46, 35, 35, 35, 35, 35, 86, 86, 86, 86, 86, 88, 91, 91, 91, 91, 91, 91, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [88, 91, 91, 91, 91, 91, 91, 91, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].body.bodyPoints->aspect elements >= 0
player[].body.bodyMapsSize elements one of { 0, 1, 4 }
player[].body.bodyMapsSize one of { [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].body.bodySize one of { [24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [28, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [44, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].body.bodySize elements >= 0
player[].body.bodyWidth elements one of { 0, 8, 14 }
player[].body.bodyWidth one of { [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [14, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].body.bodyHeight elements one of { 0, 4, 6 }
player[].body.bodyHeight one of { [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].body.color one of { [2, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 2, 3, 4, 0, 2, 4, 6, 8, 2, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].body.color elements >= 0
player[].basePosition.col one of { [4, 10, 18, 26, 34, 42, 50, 58, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [40, 0, 2, 4, 6, 8, 0, 4, 8, 12, 16, 4, 10, 18, 26, 34, 42, 50, 58, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].basePosition.col elements >= 0
player[].basePosition.row one of { [4, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 10, 11, 12, 13, 14, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].basePosition.row elements >= 0
player[].impulse[0][0] elements one of { 0, 1 }
player[].impulse[0][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].impulse[1][0] elements one of { 0, 1, 5 }
player[].impulse[1][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].impulse[3][0] elements one of { 0, 1 }
player[].impulse[3][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].impulse[5][0] elements one of { 0, 1 }
player[].impulse[5][0] one of { [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].impulse[7][0] elements one of { 0, 1 }
player[].impulse[7][0] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].direction elements one of { 0, 1, 5 }
player[].direction one of { [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].stepCounter one of { [0, 9, 7, 7, 4, 8, 9, 1, 8, 7, 1, 4, 8, 2, 10, 4, 2, 9, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 8, 2, 10, 4, 2, 9, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
player[].stepCounter elements >= 0
size(::players[]) == 100
::players[::input_n] has only one value
::players[::input_n-1] has only one value
::players[::input_n].body has only one value
::players[::input_n-1].body has only one value
::players[::input_n].body.bodyPoints has only one value
::players[::input_n-1].body.bodyPoints has only one value
::players[::input_n].body.bodyPoints[0] has only one value
::players[::input_n-1].body.bodyPoints[0] has only one value
::players[::input_n].body.bodyPoints->position has only one value
::players[::input_n-1].body.bodyPoints->position has only one value
::players[::input_n].body.bodyPoints->player has only one value
::players[::input_n-1].body.bodyPoints->player has only one value
::players[::input_n].body.bodyPoints->aspect == 35
::players[::input_n-1].body.bodyPoints->aspect == 46
::players[::new_input].body.bodyPoints->aspect one of { 35, 46 }
::players[::input_n].body.bodyMaps has only one value
::players[::input_n-1].body.bodyMaps has only one value
::players[::input_n-1].body.bodyMapsSize == 4
::players[::new_input].body.bodyMapsSize one of { 1, 4 }
::players[::input_n-1].body.bodySize == 28
::players[::new_input].body.bodySize one of { 1, 28 }
::players[::input_n-1].body.bodyWidth == 8
::players[::new_input].body.bodyWidth one of { 0, 8 }
::players[::new_input].body.bodyHeight one of { 0, 4 }
::players[::input_n-1].body.color == 3
::players[::new_input].body.color one of { 0, 3 }
::players[::input_n].basePosition has only one value
::players[::input_n-1].basePosition has only one value
::players[::input_n-1].basePosition.col == 40
::players[::new_input].basePosition.col one of { 0, 40 }
::players[::input_n].basePosition.row == 10
::players[::new_input].basePosition.row one of { 9, 10 }
::players[::input_n].impulse[0] has only one value
::players[::input_n-1].impulse[0] has only one value
::players[::input_n].impulse[1] has only one value
::players[::input_n-1].impulse[1] has only one value
::players[::input_n].impulse[2] has only one value
::players[::input_n-1].impulse[2] has only one value
::players[::input_n].impulse[3] has only one value
::players[::input_n-1].impulse[3] has only one value
::players[::input_n].impulse[4] has only one value
::players[::input_n-1].impulse[4] has only one value
::players[::input_n].impulse[5] has only one value
::players[::input_n-1].impulse[5] has only one value
::players[::input_n].impulse[6] has only one value
::players[::input_n-1].impulse[6] has only one value
::players[::input_n].impulse[7] has only one value
::players[::input_n-1].impulse[7] has only one value
::players[::input_n].impulse[8] has only one value
::players[::input_n-1].impulse[8] has only one value
::players[::new_input].direction one of { 0, 1 }
::players[::input_n].magnetos has only one value
::players[::input_n-1].magnetos has only one value
::players[::input_n].magnetos[0] has only one value
::players[::input_n-1].magnetos[0] has only one value
::players[::input_n].stepCounter == 9
::players[::new_input].stepCounter one of { 0, 9 }
::players[::input_n].pilot has only one value
::players[::input_n-1].pilot has only one value
::players[::input_n].onCrash == null
::players[::input_n-1].onCrash has only one value
::players[::input_n].onPushed has only one value
player[::input_n].body.bodyPoints->aspect one of { 0, 35, 91 }
player[::input_n-1].body.bodyPoints->aspect one of { 46, 88, 91 }
player[::input_n-1].body.bodyMapsSize one of { 1, 4 }
player[::input_n].body.bodySize one of { 0, 1, 24 }
player[::input_n-1].body.bodySize one of { 24, 28, 44 }
player[::input_n].body.bodyWidth one of { 0, 8 }
player[::input_n-1].body.bodyWidth one of { 8, 14 }
player[::input_n].body.bodyHeight one of { 0, 4 }
player[::input_n-1].body.bodyHeight one of { 4, 6 }
player[::input_n-1].body.color one of { 2, 3, 7 }
player[::input_n].basePosition.col one of { 0, 10 }
player[::input_n-1].basePosition.col one of { 4, 40, 66 }
player[::input_n].basePosition.row one of { 0, 10 }
player[::input_n-1].basePosition.row one of { 4, 8, 9 }
player[::input_n-1].direction one of { 1, 5 }
player[::input_n].stepCounter one of { 0, 8, 9 }
player[::input_n-1].stepCounter one of { 0, 1, 4 }
player[::new_input].body.bodyPoints->aspect one of { 35, 88, 91 }
player[::new_input].body.bodySize one of { 1, 24, 44 }
player[::new_input].body.color one of { 0, 2, 7 }
player[::new_input].basePosition.col one of { 0, 4, 66 }
player[::new_input].basePosition.row one of { 4, 8, 10 }
player[::new_input].stepCounter one of { 1, 4, 9 }
::crashedPlayers[] elements == ::crashedPlayers[::input_n-1]
::crashedPlayers[].start elements == ::crashedPlayers[::input_n-1].start
::playerSpace[] elements == ::playerSpace[::input_n-1]
::playerSpace[].playerNodes elements == ::playerSpace[::input_n-1].playerNodes
::playerSpace[].playerNodes[0] elements == ::playerSpace[::input_n-1].playerNodes[0]
::playerSpace[].playerNodes->start elements == ::playerSpace[::input_n-1].playerNodes->start
::playerSpace[].playerNodes->start[0] elements == ::playerSpace[::input_n-1].playerNodes->start[0]
::playerSpace[].playerNodes->start->next elements == ::playerSpace[::input_n-1].playerNodes->start->next
::playerSpace[].playerNodes->start->next[0] elements == ::playerSpace[::input_n-1].playerNodes->start->next[0]
::playerSpace[].playerNodes->start->data elements == ::playerSpace[::input_n-1].playerNodes->start->data
::playerSpace[].playerNodes->end elements == ::playerSpace[::input_n-1].playerNodes->end
::playerSpace[].playerNodes->end[0] elements == ::playerSpace[::input_n-1].playerNodes->end[0]
::playerSpace[].playerNodes->end->data elements == ::playerSpace[::input_n-1].playerNodes->end->data
::playerSpace[].playerNodes->end->prev elements == ::playerSpace[::input_n-1].playerNodes->end->prev
::playerSpace[].playerNodes->end->prev[0] elements == ::playerSpace[::input_n-1].playerNodes->end->prev[0]
::playerSpace[].playerMap elements == ::playerSpace[::input_n-1].playerMap
::playerSpace[].guideNodes elements == ::playerSpace[::input_n-1].guideNodes
::playerSpace[].guideNodes[0] elements == ::playerSpace[::input_n-1].guideNodes[0]
::playerSpace[].groundMap elements == ::playerSpace[::input_n-1].groundMap
::playerSpace[].actionGroup elements == ::playerSpace[::input_n-1].actionGroup
::playerSpace[].actionGroup[0] elements == ::playerSpace[::input_n-1].actionGroup[0]
::playerSpace[].actionGroup->numActions elements == size(::crashedPlayers[])-1
::players in ::players[].body.bodyPoints->player
player[::input_n] in ::players[]
player[::input_n-1] in ::players[]
player[::new_input] in ::players[]
::players[].id elements == size(::crashedPlayers[])-1
player[::input_n].body in ::players[].body
player[::input_n-1].body in ::players[].body
player[::new_input].body in ::players[].body
::players[::new_input].direction in ::players[].body.type
player[::input_n].body.visible in ::players[].body.type
player[::input_n].impulse[3][0] in ::players[].body.type
player[::new_input].impulse[5][0] in ::players[].body.type
::new_input in ::players[].body.visible
size(::crashedPlayers[])-1 in ::players[].body.visible
::players[::new_input].direction in ::players[].body.visible
player[::input_n].body.visible in ::players[].body.visible
player[::input_n].impulse[3][0] in ::players[].body.visible
player[::new_input].impulse[5][0] in ::players[].body.visible
player[::input_n].body.bodyPoints in ::players[].body.bodyPoints
player[::input_n-1].body.bodyPoints in ::players[].body.bodyPoints
player[::new_input].body.bodyPoints in ::players[].body.bodyPoints
player[::input_n].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
player[::input_n-1].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
player[::new_input].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
::players[].body.bodyPoints->position - ::players[].basePosition + 7304 == 0
player[::input_n].body.bodyPoints->position in ::players[].body.bodyPoints->position
player[::input_n-1].body.bodyPoints->position in ::players[].body.bodyPoints->position
player[::new_input].body.bodyPoints->position in ::players[].body.bodyPoints->position
orig(player) in ::players[].body.bodyPoints->player
player[::input_n].body.bodyPoints->player in ::players[].body.bodyPoints->player
player[::new_input].body.bodyPoints->player in ::players[].body.bodyPoints->player
player[::input_n-1] in ::players[].body.bodyPoints->player[0]
player[::input_n].body.bodyPoints->player[0] in ::players[].body.bodyPoints->player[0]
player[::new_input] in ::players[].body.bodyPoints->player[0]
size(::crashedPlayers[])-1 in ::players[].body.bodyPoints->aspect
player[::input_n].body.bodyPoints->aspect in ::players[].body.bodyPoints->aspect
player[::input_n-1].body.bodyPoints->aspect in ::players[].body.bodyPoints->aspect
player[::new_input].body.bodyPoints->aspect in ::players[].body.bodyPoints->aspect
player[::input_n].body.bodyMaps in ::players[].body.bodyMaps
player[::input_n-1].body.bodyMaps in ::players[].body.bodyMaps
player[::new_input].body.bodyMaps in ::players[].body.bodyMaps
::new_input in ::players[].body.bodyMapsSize
size(::crashedPlayers[])-1 in ::players[].body.bodyMapsSize
::players[::new_input].body.bodyHeight in ::players[].body.bodyMapsSize
::players[::new_input].direction in ::players[].body.bodyMapsSize
player[::input_n].body.visible in ::players[].body.bodyMapsSize
player[::input_n-1].body.bodyMapsSize in ::players[].body.bodyMapsSize
player[::input_n].body.bodyHeight in ::players[].body.bodyMapsSize
player[::input_n].impulse[3][0] in ::players[].body.bodyMapsSize
player[::input_n-1].stepCounter in ::players[].body.bodyMapsSize
player[::new_input].impulse[5][0] in ::players[].body.bodyMapsSize
::new_input in ::players[].body.bodySize
size(::crashedPlayers[])-1 in ::players[].body.bodySize
::players[::new_input].direction in ::players[].body.bodySize
player[::input_n].body.visible in ::players[].body.bodySize
player[::input_n].body.bodySize in ::players[].body.bodySize
player[::input_n-1].body.bodySize in ::players[].body.bodySize
player[::input_n].impulse[3][0] in ::players[].body.bodySize
player[::new_input].body.bodySize in ::players[].body.bodySize
player[::new_input].impulse[5][0] in ::players[].body.bodySize
player[::input_n].body.bodyWidth in ::players[].body.bodyWidth
player[::input_n-1].body.bodyWidth in ::players[].body.bodyWidth
player[::new_input].body.bodyWidth in ::players[].body.bodyWidth
player[::input_n].body.bodyHeight in ::players[].body.bodyHeight
player[::input_n-1].body.bodyHeight in ::players[].body.bodyHeight
player[::new_input].body.bodyHeight in ::players[].body.bodyHeight
::input_n in ::players[].body.color
::new_input in ::players[].body.color
::players[::input_n-1].body.bodyMapsSize in ::players[].body.color
::players[::new_input].body.bodyMapsSize in ::players[].body.color
::players[::input_n-1].body.bodyWidth in ::players[].body.color
::players[::new_input].body.bodyWidth in ::players[].body.color
::players[::new_input].body.bodyHeight in ::players[].body.color
::players[::new_input].direction in ::players[].body.color
player[::input_n].body.visible in ::players[].body.color
player[::input_n-1].body.bodyMapsSize in ::players[].body.color
player[::input_n].body.bodyWidth in ::players[].body.color
player[::input_n].body.bodyHeight in ::players[].body.color
player[::input_n-1].body.bodyHeight in ::players[].body.color
player[::input_n-1].body.color in ::players[].body.color
player[::input_n].impulse[3][0] in ::players[].body.color
player[::input_n-1].direction in ::players[].body.color
player[::input_n-1].stepCounter in ::players[].body.color
player[::new_input].body.bodyHeight in ::players[].body.color
player[::new_input].body.color in ::players[].body.color
player[::new_input].impulse[5][0] in ::players[].body.color
player[::new_input].direction in ::players[].body.color
player[::input_n].basePosition in ::players[].basePosition
player[::input_n-1].basePosition in ::players[].basePosition
player[::new_input].basePosition in ::players[].basePosition
::players[::input_n-1].body.bodyMapsSize in ::players[].basePosition.col
::players[::input_n-1].body.bodyWidth in ::players[].basePosition.col
::players[::new_input].body.bodyWidth in ::players[].basePosition.col
::players[::new_input].body.bodyHeight in ::players[].basePosition.col
::players[::new_input].body.color in ::players[].basePosition.col
::players[::input_n].basePosition.row in ::players[].basePosition.col
player[::input_n].body.bodyWidth in ::players[].basePosition.col
player[::input_n].body.bodyHeight in ::players[].basePosition.col
player[::input_n].basePosition.col in ::players[].basePosition.col
player[::input_n-1].basePosition.col in ::players[].basePosition.col
player[::input_n].basePosition.row in ::players[].basePosition.col
player[::new_input].basePosition.col in ::players[].basePosition.col
player[::new_input].basePosition.row in ::players[].basePosition.col
orig(player[::new_input].basePosition.row) in ::players[].basePosition.col
::input_n in ::players[].basePosition.row
::new_input in ::players[].basePosition.row
size(::crashedPlayers[])-1 in ::players[].basePosition.row
::players[::input_n-1].body.bodyMapsSize in ::players[].basePosition.row
::players[::new_input].body.bodyMapsSize in ::players[].basePosition.row
::players[::new_input].body.bodyHeight in ::players[].basePosition.row
::players[::input_n-1].body.color in ::players[].basePosition.row
::players[::new_input].body.color in ::players[].basePosition.row
::players[::new_input].direction in ::players[].basePosition.row
::players[::new_input].stepCounter in ::players[].basePosition.row
player[::input_n].body.visible in ::players[].basePosition.row
player[::input_n-1].body.bodyMapsSize in ::players[].basePosition.row
player[::input_n].body.bodyHeight in ::players[].basePosition.row
player[::input_n-1].body.bodyHeight in ::players[].basePosition.row
player[::input_n].basePosition.col in ::players[].basePosition.row
player[::input_n].basePosition.row in ::players[].basePosition.row
player[::input_n-1].basePosition.row in ::players[].basePosition.row
player[::input_n].impulse[3][0] in ::players[].basePosition.row
player[::input_n-1].direction in ::players[].basePosition.row
player[::input_n-1].stepCounter in ::players[].basePosition.row
player[::new_input].body.bodyHeight in ::players[].basePosition.row
player[::new_input].basePosition.row in ::players[].basePosition.row
player[::new_input].impulse[5][0] in ::players[].basePosition.row
player[::new_input].direction in ::players[].basePosition.row
player[::new_input].stepCounter in ::players[].basePosition.row
::players[].impulse[0] - ::players[].impulse[1] + 4 == 0
::players[].impulse[0] - ::players[].impulse[2] + 8 == 0
::players[].impulse[0] - ::players[].impulse[3] + 12 == 0
::players[].impulse[0] - ::players[].impulse[4] + 16 == 0
::players[].impulse[0] - ::players[].impulse[5] + 20 == 0
::players[].impulse[0] - ::players[].impulse[6] + 24 == 0
::players[].impulse[0] - ::players[].impulse[7] + 28 == 0
::players[].impulse[0] - ::players[].impulse[8] + 32 == 0
player[::input_n].impulse[0] in ::players[].impulse[0]
player[::input_n-1].impulse[0] in ::players[].impulse[0]
player[::new_input].impulse[0] in ::players[].impulse[0]
::players[].impulse[1] - ::players[].impulse[2] + 4 == 0
::players[].impulse[1] - ::players[].impulse[3] + 8 == 0
::players[].impulse[1] - ::players[].impulse[4] + 12 == 0
::players[].impulse[1] - ::players[].impulse[5] + 16 == 0
::players[].impulse[1] - ::players[].impulse[6] + 20 == 0
::players[].impulse[1] - ::players[].impulse[7] + 24 == 0
::players[].impulse[1] - ::players[].impulse[8] + 28 == 0
player[::input_n].impulse[1] in ::players[].impulse[1]
player[::input_n-1].impulse[1] in ::players[].impulse[1]
player[::new_input].impulse[1] in ::players[].impulse[1]
player[::input_n].body.visible in ::players[].impulse[1][0]
player[::input_n].impulse[3][0] in ::players[].impulse[1][0]
::players[].impulse[2] - ::players[].impulse[3] + 4 == 0
::players[].impulse[2] - ::players[].impulse[4] + 8 == 0
::players[].impulse[2] - ::players[].impulse[5] + 12 == 0
::players[].impulse[2] - ::players[].impulse[6] + 16 == 0
::players[].impulse[2] - ::players[].impulse[7] + 20 == 0
::players[].impulse[2] - ::players[].impulse[8] + 24 == 0
player[::input_n].impulse[2] in ::players[].impulse[2]
player[::input_n-1].impulse[2] in ::players[].impulse[2]
player[::new_input].impulse[2] in ::players[].impulse[2]
::players[].impulse[3] - ::players[].impulse[4] + 4 == 0
::players[].impulse[3] - ::players[].impulse[5] + 8 == 0
::players[].impulse[3] - ::players[].impulse[6] + 12 == 0
::players[].impulse[3] - ::players[].impulse[7] + 16 == 0
::players[].impulse[3] - ::players[].impulse[8] + 20 == 0
player[::input_n].impulse[3] in ::players[].impulse[3]
player[::input_n-1].impulse[3] in ::players[].impulse[3]
player[::new_input].impulse[3] in ::players[].impulse[3]
::new_input in ::players[].impulse[3][0]
player[::input_n].body.visible in ::players[].impulse[3][0]
player[::input_n].impulse[3][0] in ::players[].impulse[3][0]
::players[].impulse[4] - ::players[].impulse[5] + 4 == 0
::players[].impulse[4] - ::players[].impulse[6] + 8 == 0
::players[].impulse[4] - ::players[].impulse[7] + 12 == 0
::players[].impulse[4] - ::players[].impulse[8] + 16 == 0
player[::input_n].impulse[4] in ::players[].impulse[4]
player[::input_n-1].impulse[4] in ::players[].impulse[4]
player[::new_input].impulse[4] in ::players[].impulse[4]
::players[].impulse[5] - ::players[].impulse[6] + 4 == 0
::players[].impulse[5] - ::players[].impulse[7] + 8 == 0
::players[].impulse[5] - ::players[].impulse[8] + 12 == 0
player[::input_n].impulse[5] in ::players[].impulse[5]
player[::input_n-1].impulse[5] in ::players[].impulse[5]
player[::new_input].impulse[5] in ::players[].impulse[5]
::input_n in ::players[].impulse[5][0]
::new_input in ::players[].impulse[5][0]
::players[::new_input].direction in ::players[].impulse[5][0]
player[::input_n].body.visible in ::players[].impulse[5][0]
player[::input_n].impulse[3][0] in ::players[].impulse[5][0]
player[::new_input].impulse[5][0] in ::players[].impulse[5][0]
::players[].impulse[6] - ::players[].impulse[7] + 4 == 0
::players[].impulse[6] - ::players[].impulse[8] + 8 == 0
player[::input_n].impulse[6] in ::players[].impulse[6]
player[::input_n-1].impulse[6] in ::players[].impulse[6]
player[::new_input].impulse[6] in ::players[].impulse[6]
::players[].impulse[7] - ::players[].impulse[8] + 4 == 0
player[::input_n].impulse[7] in ::players[].impulse[7]
player[::input_n-1].impulse[7] in ::players[].impulse[7]
player[::new_input].impulse[7] in ::players[].impulse[7]
::new_input in ::players[].impulse[7][0]
player[::input_n].body.visible in ::players[].impulse[7][0]
player[::input_n].impulse[3][0] in ::players[].impulse[7][0]
player[::input_n].impulse[8] in ::players[].impulse[8]
player[::input_n-1].impulse[8] in ::players[].impulse[8]
player[::new_input].impulse[8] in ::players[].impulse[8]
::new_input in ::players[].direction
::players[::new_input].body.color in ::players[].direction
player[::input_n].body.visible in ::players[].direction
player[::input_n].impulse[3][0] in ::players[].direction
player[::input_n-1].direction in ::players[].direction
player[::new_input].impulse[5][0] in ::players[].direction
player[::new_input].direction in ::players[].direction
player[::input_n].magnetos in ::players[].magnetos
player[::input_n-1].magnetos in ::players[].magnetos
player[::new_input].magnetos in ::players[].magnetos
player[::input_n].magnetos[0] in ::players[].magnetos[0]
player[::input_n-1].magnetos[0] in ::players[].magnetos[0]
player[::new_input].magnetos[0] in ::players[].magnetos[0]
::input_n in ::players[].stepCounter
::new_input in ::players[].stepCounter
::players[::input_n-1].body.bodyMapsSize in ::players[].stepCounter
::players[::new_input].body.bodyMapsSize in ::players[].stepCounter
::players[::input_n-1].body.bodyWidth in ::players[].stepCounter
::players[::new_input].body.bodyWidth in ::players[].stepCounter
::players[::new_input].body.bodyHeight in ::players[].stepCounter
::players[::new_input].basePosition.row in ::players[].stepCounter
::players[::new_input].direction in ::players[].stepCounter
player[::input_n].body.visible in ::players[].stepCounter
player[::input_n-1].body.bodyMapsSize in ::players[].stepCounter
player[::input_n].body.bodyWidth in ::players[].stepCounter
player[::input_n].body.bodyHeight in ::players[].stepCounter
player[::input_n].basePosition.col in ::players[].stepCounter
player[::input_n].basePosition.row in ::players[].stepCounter
player[::input_n-1].basePosition.row in ::players[].stepCounter
player[::input_n].impulse[3][0] in ::players[].stepCounter
player[::input_n].stepCounter in ::players[].stepCounter
player[::input_n-1].stepCounter in ::players[].stepCounter
player[::new_input].body.color in ::players[].stepCounter
player[::new_input].basePosition.row in ::players[].stepCounter
player[::new_input].impulse[5][0] in ::players[].stepCounter
player[::new_input].stepCounter in ::players[].stepCounter
orig(player[::new_input].basePosition.row) in ::players[].stepCounter
::players[::input_n].onCrash in ::players[].pilot
player[::input_n].pilot in ::players[].pilot
player[::input_n-1].pilot in ::players[].pilot
player[::new_input].pilot in ::players[].pilot
player[::input_n].onCrash in ::players[].onCrash
player[::input_n-1].onCrash in ::players[].onCrash
player[::new_input].onCrash in ::players[].onCrash
::players[::input_n].onCrash in ::players[].onPushed
player[::input_n].onPushed in ::players[].onPushed
::input_n in player[].impulse[5][0]
::input_n in player[].stepCounter
::input_n in orig(::players[].basePosition.row)
::new_input in player[].body.visible
::new_input in player[].body.bodyMapsSize
::new_input in player[].body.bodySize
::new_input in player[].body.color
::new_input in player[].basePosition.row
::new_input in player[].impulse[1][0]
::new_input in player[].impulse[3][0]
::new_input in player[].impulse[5][0]
::new_input in player[].impulse[7][0]
::new_input in player[].direction
::new_input in player[].stepCounter
::new_input in orig(::players[].basePosition.row)
::new_input in orig(player[].basePosition.row)
player[].id elements == size(::crashedPlayers[])-1
size(::crashedPlayers[])-1 in player[].body.visible
::players[::new_input].direction in player[].body.visible
player[::input_n].impulse[3][0] in player[].body.visible
player[::new_input].impulse[5][0] in player[].body.visible
player[].body.bodyPoints->position - player[].basePosition + 7304 == 0
size(::crashedPlayers[])-1 in player[].body.bodyPoints->aspect
size(::crashedPlayers[])-1 in player[].body.bodyMapsSize
::players[::new_input].direction in player[].body.bodyMapsSize
player[::input_n].impulse[3][0] in player[].body.bodyMapsSize
player[::new_input].impulse[5][0] in player[].body.bodyMapsSize
size(::crashedPlayers[])-1 in player[].body.bodySize
size(::crashedPlayers[])-1 in player[].body.bodyWidth
::players[::input_n-1].body.bodyWidth in player[].body.bodyWidth
::players[::new_input].body.bodyWidth in player[].body.bodyWidth
size(::crashedPlayers[])-1 in player[].body.bodyHeight
::players[::input_n-1].body.bodyMapsSize in player[].body.bodyHeight
::players[::new_input].body.bodyHeight in player[].body.bodyHeight
player[::input_n].body.visible in player[].body.color
player[::input_n].body.bodyHeight in player[].body.color
player[::input_n].impulse[3][0] in player[].body.color
size(::crashedPlayers[])-1 in player[].basePosition.col
player[::input_n].body.bodyHeight in player[].basePosition.col
player[::input_n].basePosition.row in player[].basePosition.col
size(::crashedPlayers[])-1 in player[].basePosition.row
::players[::new_input].stepCounter in player[].basePosition.row
player[::input_n].body.visible in player[].basePosition.row
player[::input_n].body.bodyHeight in player[].basePosition.row
player[::input_n].impulse[3][0] in player[].basePosition.row
player[].impulse[0] - player[].impulse[1] + 4 == 0
player[].impulse[0] - player[].impulse[2] + 8 == 0
player[].impulse[0] - player[].impulse[3] + 12 == 0
player[].impulse[0] - player[].impulse[4] + 16 == 0
player[].impulse[0] - player[].impulse[5] + 20 == 0
player[].impulse[0] - player[].impulse[6] + 24 == 0
player[].impulse[0] - player[].impulse[7] + 28 == 0
player[].impulse[0] - player[].impulse[8] + 32 == 0
player[].impulse[1] - player[].impulse[2] + 4 == 0
player[].impulse[1] - player[].impulse[3] + 8 == 0
player[].impulse[1] - player[].impulse[4] + 12 == 0
player[].impulse[1] - player[].impulse[5] + 16 == 0
player[].impulse[1] - player[].impulse[6] + 20 == 0
player[].impulse[1] - player[].impulse[7] + 24 == 0
player[].impulse[1] - player[].impulse[8] + 28 == 0
player[].impulse[2] - player[].impulse[3] + 4 == 0
player[].impulse[2] - player[].impulse[4] + 8 == 0
player[].impulse[2] - player[].impulse[5] + 12 == 0
player[].impulse[2] - player[].impulse[6] + 16 == 0
player[].impulse[2] - player[].impulse[7] + 20 == 0
player[].impulse[2] - player[].impulse[8] + 24 == 0
player[].impulse[3] - player[].impulse[4] + 4 == 0
player[].impulse[3] - player[].impulse[5] + 8 == 0
player[].impulse[3] - player[].impulse[6] + 12 == 0
player[].impulse[3] - player[].impulse[7] + 16 == 0
player[].impulse[3] - player[].impulse[8] + 20 == 0
player[::input_n].body.visible in player[].impulse[3][0]
player[].impulse[4] - player[].impulse[5] + 4 == 0
player[].impulse[4] - player[].impulse[6] + 8 == 0
player[].impulse[4] - player[].impulse[7] + 12 == 0
player[].impulse[4] - player[].impulse[8] + 16 == 0
player[].impulse[5] - player[].impulse[6] + 4 == 0
player[].impulse[5] - player[].impulse[7] + 8 == 0
player[].impulse[5] - player[].impulse[8] + 12 == 0
::players[::new_input].direction in player[].impulse[5][0]
player[::input_n].body.visible in player[].impulse[5][0]
player[::input_n].impulse[3][0] in player[].impulse[5][0]
player[].impulse[6] - player[].impulse[7] + 4 == 0
player[].impulse[6] - player[].impulse[8] + 8 == 0
player[].impulse[7] - player[].impulse[8] + 4 == 0
player[::input_n].body.visible in player[].impulse[7][0]
player[::input_n].body.visible in player[].direction
player[::input_n].impulse[3][0] in player[].direction
size(::crashedPlayers[])-1 in player[].stepCounter
::players[::new_input].direction in player[].stepCounter
::players[::new_input].stepCounter in player[].stepCounter
player[::input_n].body.visible in player[].stepCounter
player[::input_n-1].body.bodyMapsSize in player[].stepCounter
player[::input_n].body.bodyWidth in player[].stepCounter
player[::input_n].body.bodyHeight in player[].stepCounter
player[::input_n].basePosition.col in player[].stepCounter
player[::input_n].basePosition.row in player[].stepCounter
player[::input_n].impulse[3][0] in player[].stepCounter
player[::new_input].impulse[5][0] in player[].stepCounter
::players[::input_n].pilot in player[].pilot
::players[::input_n].onCrash in player[].pilot
::players[::input_n].onCrash in player[].onCrash
::players[::input_n-1].onCrash in player[].onCrash
::players[::new_input].onCrash in player[].onCrash
::players[::input_n].onCrash in player[].onPushed
size(::crashedPlayers[])-1 in orig(::players[].basePosition.row)
::players[::input_n-1].body.bodyMapsSize in orig(::players[].basePosition.row)
::players[::new_input].body.bodyMapsSize in orig(::players[].basePosition.row)
::players[::new_input].body.bodyHeight in orig(::players[].basePosition.row)
::players[::input_n-1].body.color in orig(::players[].basePosition.row)
::players[::new_input].body.color in orig(::players[].basePosition.row)
::players[::new_input].direction in orig(::players[].basePosition.row)
player[::input_n].body.visible in orig(::players[].basePosition.row)
player[::input_n-1].body.bodyMapsSize in orig(::players[].basePosition.row)
player[::input_n].body.bodyHeight in orig(::players[].basePosition.row)
player[::input_n-1].body.bodyHeight in orig(::players[].basePosition.row)
player[::input_n-1].body.color in orig(::players[].basePosition.row)
player[::input_n].basePosition.col in orig(::players[].basePosition.row)
player[::input_n].basePosition.row in orig(::players[].basePosition.row)
player[::input_n].impulse[3][0] in orig(::players[].basePosition.row)
player[::input_n-1].direction in orig(::players[].basePosition.row)
player[::input_n-1].stepCounter in orig(::players[].basePosition.row)
player[::new_input].body.bodyHeight in orig(::players[].basePosition.row)
player[::new_input].body.color in orig(::players[].basePosition.row)
player[::new_input].impulse[5][0] in orig(::players[].basePosition.row)
player[::new_input].direction in orig(::players[].basePosition.row)
size(::crashedPlayers[])-1 in orig(player[].basePosition.row)
player[::input_n].body.visible in orig(player[].basePosition.row)
player[::input_n].body.bodyHeight in orig(player[].basePosition.row)
player[::input_n-1].body.color in orig(player[].basePosition.row)
player[::input_n].impulse[3][0] in orig(player[].basePosition.row)
player[::new_input].body.color in orig(player[].basePosition.row)
===========================================================================
..setupPlayer():::ENTER
::crashedPlayers[].start == ::crashedPlayers[].end
::crashedPlayers[].start == ::playerSpace[].guideNodes->start
::crashedPlayers[].start == ::playerSpace[].guideNodes->end
::crashedPlayers[].start == space[].guideNodes->start
::crashedPlayers[].start == space[].guideNodes->end
::playerSpace == space
::playerSpace[] == space[]
::playerSpace[].playerNodes == space[].playerNodes
::playerSpace[].playerNodes[0] == space[].playerNodes[0]
::playerSpace[].playerNodes->start == space[].playerNodes->start
::playerSpace[].playerNodes->start[0] == space[].playerNodes->start[0]
::playerSpace[].playerNodes->start->next == space[].playerNodes->start->next
::playerSpace[].playerNodes->start->next[0] == space[].playerNodes->start->next[0]
::playerSpace[].playerNodes->start->data == space[].playerNodes->start->data
::playerSpace[].playerNodes->start->prev == ::playerSpace[].playerNodes->end->next
::playerSpace[].playerNodes->start->prev == space[].playerNodes->start->prev
::playerSpace[].playerNodes->start->prev == space[].playerNodes->end->next
::playerSpace[].playerNodes->end == space[].playerNodes->end
::playerSpace[].playerNodes->end[0] == space[].playerNodes->end[0]
::playerSpace[].playerNodes->end->data == space[].playerNodes->end->data
::playerSpace[].playerNodes->end->prev == space[].playerNodes->end->prev
::playerSpace[].playerNodes->end->prev[0] == space[].playerNodes->end->prev[0]
::playerSpace[].playerMap == space[].playerMap
::playerSpace[].guideNodes == space[].guideNodes
::playerSpace[].guideNodes[0] == space[].guideNodes[0]
::playerSpace[].groundMap == space[].groundMap
::playerSpace[].actionGroup == space[].actionGroup
::playerSpace[].actionGroup[0] == space[].actionGroup[0]
::playerSpace[].actionGroup->numActions == space[].actionGroup->numActions
::players[].id == ::players[].type
::players[].id == ::players[].retired
::players[].id == ::players[].impulse[0][0]
::players[].id == ::players[].impulse[1][0]
::players[].id == ::players[].impulse[2][0]
::players[].id == ::players[].impulse[3][0]
::players[].id == ::players[].impulse[4][0]
::players[].id == ::players[].impulse[5][0]
::players[].id == ::players[].impulse[6][0]
::players[].id == ::players[].impulse[7][0]
::players[].id == ::players[].impulse[8][0]
::players[].id == ::players[].direction
::players[].id == ::players[].stepCounter
::players[].body.visible == ::players[].body.tangible
::input_n == size(::crashedPlayers[])
::input_n == size(::playerSpace[])
::input_n == size(::playerSpace[].playerNodes[0])
::input_n == size(::playerSpace[].playerNodes->start[0])
::input_n == size(::playerSpace[].playerNodes->start->next[0])
::input_n == size(::playerSpace[].guideNodes[0])
::input_n == size(::playerSpace[].actionGroup[0])
::input_n == size(space[])
::input_n == size(space[].playerNodes[0])
::input_n == size(space[].guideNodes[0])
::input_n == size(space[].actionGroup[0])
::input_i == ::new_input
::input_i == size(::crashedPlayers[])-1
::input_i == size(::playerSpace[])-1
::input_i == size(::playerSpace[].playerNodes[0])-1
::input_i == size(::playerSpace[].guideNodes[0])-1
::input_i == size(::playerSpace[].actionGroup[0])-1
::input_i == size(space[])-1
::input_i == size(space[].playerNodes[0])-1
::input_i == size(space[].guideNodes[0])-1
::input_i == size(space[].actionGroup[0])-1
::input_i == ::playerSpace[::input_n-1].actionGroup->numActions
::input_i == ::playerSpace[::input_i].actionGroup->numActions
::input_i == ::playerSpace[::new_input].actionGroup->numActions
::input_i == ::players[::input_n].id
::input_i == ::players[::input_n-1].id
::input_i == ::players[::input_i].id
::input_i == ::players[::new_input].id
::input_i == ::players[bodyType].id
::input_i == ::players[bodyColor].id
::input_i == ::players[col].id
::input_i == ::players[row].id
::input_i == ::players[::input_n].type
::input_i == ::players[::input_n-1].type
::input_i == ::players[::input_i].type
::input_i == ::players[::new_input].type
::input_i == ::players[bodyType].type
::input_i == ::players[bodyColor].type
::input_i == ::players[col].type
::input_i == ::players[row].type
::input_i == ::players[::input_n].retired
::input_i == ::players[::input_n-1].retired
::input_i == ::players[::input_i].retired
::input_i == ::players[::new_input].retired
::input_i == ::players[bodyType].retired
::input_i == ::players[bodyColor].retired
::input_i == ::players[col].retired
::input_i == ::players[row].retired
::input_i == ::players[::input_n-1].body.type
::input_i == ::players[::input_i].body.type
::input_i == ::players[::new_input].body.type
::input_i == ::players[::input_n].body.bodyWidth
::input_i == ::players[::input_n].body.bodyHeight
::input_i == ::players[::input_n].body.color
::input_i == ::players[::input_n].basePosition.col
::input_i == ::players[::input_n].impulse[0][0]
::input_i == ::players[::input_n-1].impulse[0][0]
::input_i == ::players[::input_i].impulse[0][0]
::input_i == ::players[::new_input].impulse[0][0]
::input_i == ::players[bodyType].impulse[0][0]
::input_i == ::players[bodyColor].impulse[0][0]
::input_i == ::players[col].impulse[0][0]
::input_i == ::players[row].impulse[0][0]
::input_i == ::players[::input_n].impulse[1][0]
::input_i == ::players[::input_n-1].impulse[1][0]
::input_i == ::players[::input_i].impulse[1][0]
::input_i == ::players[::new_input].impulse[1][0]
::input_i == ::players[bodyType].impulse[1][0]
::input_i == ::players[bodyColor].impulse[1][0]
::input_i == ::players[col].impulse[1][0]
::input_i == ::players[row].impulse[1][0]
::input_i == ::players[::input_n].impulse[2][0]
::input_i == ::players[::input_n-1].impulse[2][0]
::input_i == ::players[::input_i].impulse[2][0]
::input_i == ::players[::new_input].impulse[2][0]
::input_i == ::players[bodyType].impulse[2][0]
::input_i == ::players[bodyColor].impulse[2][0]
::input_i == ::players[col].impulse[2][0]
::input_i == ::players[row].impulse[2][0]
::input_i == ::players[::input_n].impulse[3][0]
::input_i == ::players[::input_n-1].impulse[3][0]
::input_i == ::players[::input_i].impulse[3][0]
::input_i == ::players[::new_input].impulse[3][0]
::input_i == ::players[bodyType].impulse[3][0]
::input_i == ::players[bodyColor].impulse[3][0]
::input_i == ::players[col].impulse[3][0]
::input_i == ::players[row].impulse[3][0]
::input_i == ::players[::input_n].impulse[4][0]
::input_i == ::players[::input_n-1].impulse[4][0]
::input_i == ::players[::input_i].impulse[4][0]
::input_i == ::players[::new_input].impulse[4][0]
::input_i == ::players[bodyType].impulse[4][0]
::input_i == ::players[bodyColor].impulse[4][0]
::input_i == ::players[col].impulse[4][0]
::input_i == ::players[row].impulse[4][0]
::input_i == ::players[::input_n].impulse[5][0]
::input_i == ::players[::input_n-1].impulse[5][0]
::input_i == ::players[::input_i].impulse[5][0]
::input_i == ::players[::new_input].impulse[5][0]
::input_i == ::players[bodyType].impulse[5][0]
::input_i == ::players[bodyColor].impulse[5][0]
::input_i == ::players[col].impulse[5][0]
::input_i == ::players[row].impulse[5][0]
::input_i == ::players[::input_n].impulse[6][0]
::input_i == ::players[::input_n-1].impulse[6][0]
::input_i == ::players[::input_i].impulse[6][0]
::input_i == ::players[::new_input].impulse[6][0]
::input_i == ::players[bodyType].impulse[6][0]
::input_i == ::players[bodyColor].impulse[6][0]
::input_i == ::players[col].impulse[6][0]
::input_i == ::players[row].impulse[6][0]
::input_i == ::players[::input_n].impulse[7][0]
::input_i == ::players[::input_n-1].impulse[7][0]
::input_i == ::players[::input_i].impulse[7][0]
::input_i == ::players[::new_input].impulse[7][0]
::input_i == ::players[bodyType].impulse[7][0]
::input_i == ::players[bodyColor].impulse[7][0]
::input_i == ::players[col].impulse[7][0]
::input_i == ::players[row].impulse[7][0]
::input_i == ::players[::input_n].impulse[8][0]
::input_i == ::players[::input_n-1].impulse[8][0]
::input_i == ::players[::input_i].impulse[8][0]
::input_i == ::players[::new_input].impulse[8][0]
::input_i == ::players[bodyType].impulse[8][0]
::input_i == ::players[bodyColor].impulse[8][0]
::input_i == ::players[col].impulse[8][0]
::input_i == ::players[row].impulse[8][0]
::input_i == ::players[::input_n].direction
::input_i == ::players[::input_n-1].direction
::input_i == ::players[::input_i].direction
::input_i == ::players[::new_input].direction
::input_i == ::players[bodyType].direction
::input_i == ::players[bodyColor].direction
::input_i == ::players[col].direction
::input_i == ::players[row].direction
::input_i == ::players[::input_n].stepCounter
::input_i == ::players[::input_n-1].stepCounter
::input_i == ::players[::input_i].stepCounter
::input_i == ::players[::new_input].stepCounter
::input_i == ::players[bodyType].stepCounter
::input_i == ::players[bodyColor].stepCounter
::input_i == ::players[col].stepCounter
::input_i == ::players[row].stepCounter
::input_i == space[::input_n-1].actionGroup->numActions
::input_i == player[::input_n].id
::input_i == player[::input_n-1].id
::input_i == player[::input_n].type
::input_i == player[::input_n-1].type
::input_i == player[::input_n].retired
::input_i == player[::input_n-1].retired
::input_i == player[::input_n].body.type
::input_i == player[::input_n-1].body.type
::input_i == player[::input_n].body.visible
::input_i == player[::input_n-1].body.visible
::input_i == player[::input_n].body.tangible
::input_i == player[::input_n-1].body.tangible
::input_i == player[::input_n].body.bodyPoints->aspect
::input_i == player[::input_n-1].body.bodyPoints->aspect
::input_i == player[::input_n].body.bodyMapsSize
::input_i == player[::input_n-1].body.bodyMapsSize
::input_i == player[::input_n].body.bodySize
::input_i == player[::input_n-1].body.bodySize
::input_i == player[::input_n].body.bodyWidth
::input_i == player[::input_n-1].body.bodyWidth
::input_i == player[::input_n].body.bodyHeight
::input_i == player[::input_n-1].body.bodyHeight
::input_i == player[::input_n].body.color
::input_i == player[::input_n-1].body.color
::input_i == player[::input_n].basePosition.col
::input_i == player[::input_n-1].basePosition.col
::input_i == player[::input_n].basePosition.row
::input_i == player[::input_n-1].basePosition.row
::input_i == player[::input_n].impulse[0][0]
::input_i == player[::input_n-1].impulse[0][0]
::input_i == player[::input_n].impulse[1][0]
::input_i == player[::input_n-1].impulse[1][0]
::input_i == player[::input_n].impulse[2][0]
::input_i == player[::input_n-1].impulse[2][0]
::input_i == player[::input_n].impulse[3][0]
::input_i == player[::input_n-1].impulse[3][0]
::input_i == player[::input_n].impulse[4][0]
::input_i == player[::input_n-1].impulse[4][0]
::input_i == player[::input_n].impulse[5][0]
::input_i == player[::input_n-1].impulse[5][0]
::input_i == player[::input_n].impulse[6][0]
::input_i == player[::input_n-1].impulse[6][0]
::input_i == player[::input_n].impulse[7][0]
::input_i == player[::input_n-1].impulse[7][0]
::input_i == player[::input_n].impulse[8][0]
::input_i == player[::input_n-1].impulse[8][0]
::input_i == player[::input_n].direction
::input_i == player[::input_n-1].direction
::input_i == player[::input_n].stepCounter
::input_i == player[::input_n-1].stepCounter
::input_i == space[::input_i].actionGroup->numActions
::input_i == player[::input_i].id
::input_i == player[::input_i].type
::input_i == player[::input_i].retired
::input_i == player[::input_i].body.type
::input_i == player[::input_i].body.visible
::input_i == player[::input_i].body.tangible
::input_i == player[::input_i].body.bodyPoints->aspect
::input_i == player[::input_i].body.bodyMapsSize
::input_i == player[::input_i].body.bodySize
::input_i == player[::input_i].body.bodyWidth
::input_i == player[::input_i].body.bodyHeight
::input_i == player[::input_i].body.color
::input_i == player[::input_i].basePosition.col
::input_i == player[::input_i].basePosition.row
::input_i == player[::input_i].impulse[0][0]
::input_i == player[::input_i].impulse[1][0]
::input_i == player[::input_i].impulse[2][0]
::input_i == player[::input_i].impulse[3][0]
::input_i == player[::input_i].impulse[4][0]
::input_i == player[::input_i].impulse[5][0]
::input_i == player[::input_i].impulse[6][0]
::input_i == player[::input_i].impulse[7][0]
::input_i == player[::input_i].impulse[8][0]
::input_i == player[::input_i].direction
::input_i == player[::input_i].stepCounter
::input_i == space[::new_input].actionGroup->numActions
::input_i == player[::new_input].id
::input_i == player[::new_input].type
::input_i == player[::new_input].retired
::input_i == player[::new_input].body.type
::input_i == player[::new_input].body.visible
::input_i == player[::new_input].body.tangible
::input_i == player[::new_input].body.bodyPoints->aspect
::input_i == player[::new_input].body.bodyMapsSize
::input_i == player[::new_input].body.bodySize
::input_i == player[::new_input].body.bodyWidth
::input_i == player[::new_input].body.bodyHeight
::input_i == player[::new_input].body.color
::input_i == player[::new_input].basePosition.col
::input_i == player[::new_input].basePosition.row
::input_i == player[::new_input].impulse[0][0]
::input_i == player[::new_input].impulse[1][0]
::input_i == player[::new_input].impulse[2][0]
::input_i == player[::new_input].impulse[3][0]
::input_i == player[::new_input].impulse[4][0]
::input_i == player[::new_input].impulse[5][0]
::input_i == player[::new_input].impulse[6][0]
::input_i == player[::new_input].impulse[7][0]
::input_i == player[::new_input].impulse[8][0]
::input_i == player[::new_input].direction
::input_i == player[::new_input].stepCounter
::input_i == player[bodyType].id
::input_i == player[bodyColor].id
::input_i == player[col].id
::input_i == player[row].id
::input_i == player[bodyType].type
::input_i == player[bodyColor].type
::input_i == player[col].type
::input_i == player[row].type
::input_i == player[bodyType].retired
::input_i == player[bodyColor].retired
::input_i == player[col].retired
::input_i == player[row].retired
::input_i == player[bodyType].body.type
::input_i == player[bodyColor].body.type
::input_i == player[col].body.type
::input_i == player[row].body.type
::input_i == player[bodyType].body.visible
::input_i == player[bodyColor].body.visible
::input_i == player[col].body.visible
::input_i == player[row].body.visible
::input_i == player[bodyType].body.tangible
::input_i == player[bodyColor].body.tangible
::input_i == player[col].body.tangible
::input_i == player[row].body.tangible
::input_i == player[bodyType].body.bodyPoints->aspect
::input_i == player[bodyColor].body.bodyPoints->aspect
::input_i == player[col].body.bodyPoints->aspect
::input_i == player[row].body.bodyPoints->aspect
::input_i == player[bodyType].body.bodyMapsSize
::input_i == player[bodyColor].body.bodyMapsSize
::input_i == player[col].body.bodyMapsSize
::input_i == player[row].body.bodyMapsSize
::input_i == player[bodyType].body.bodySize
::input_i == player[bodyColor].body.bodySize
::input_i == player[col].body.bodySize
::input_i == player[row].body.bodySize
::input_i == player[bodyType].body.bodyWidth
::input_i == player[bodyColor].body.bodyWidth
::input_i == player[col].body.bodyWidth
::input_i == player[row].body.bodyWidth
::input_i == player[bodyType].body.bodyHeight
::input_i == player[bodyColor].body.bodyHeight
::input_i == player[col].body.bodyHeight
::input_i == player[row].body.bodyHeight
::input_i == player[bodyType].body.color
::input_i == player[bodyColor].body.color
::input_i == player[col].body.color
::input_i == player[row].body.color
::input_i == player[bodyType].basePosition.col
::input_i == player[bodyColor].basePosition.col
::input_i == player[col].basePosition.col
::input_i == player[row].basePosition.col
::input_i == player[bodyType].basePosition.row
::input_i == player[bodyColor].basePosition.row
::input_i == player[col].basePosition.row
::input_i == player[row].basePosition.row
::input_i == player[bodyType].impulse[0][0]
::input_i == player[bodyColor].impulse[0][0]
::input_i == player[col].impulse[0][0]
::input_i == player[row].impulse[0][0]
::input_i == player[bodyType].impulse[1][0]
::input_i == player[bodyColor].impulse[1][0]
::input_i == player[col].impulse[1][0]
::input_i == player[row].impulse[1][0]
::input_i == player[bodyType].impulse[2][0]
::input_i == player[bodyColor].impulse[2][0]
::input_i == player[col].impulse[2][0]
::input_i == player[row].impulse[2][0]
::input_i == player[bodyType].impulse[3][0]
::input_i == player[bodyColor].impulse[3][0]
::input_i == player[col].impulse[3][0]
::input_i == player[row].impulse[3][0]
::input_i == player[bodyType].impulse[4][0]
::input_i == player[bodyColor].impulse[4][0]
::input_i == player[col].impulse[4][0]
::input_i == player[row].impulse[4][0]
::input_i == player[bodyType].impulse[5][0]
::input_i == player[bodyColor].impulse[5][0]
::input_i == player[col].impulse[5][0]
::input_i == player[row].impulse[5][0]
::input_i == player[bodyType].impulse[6][0]
::input_i == player[bodyColor].impulse[6][0]
::input_i == player[col].impulse[6][0]
::input_i == player[row].impulse[6][0]
::input_i == player[bodyType].impulse[7][0]
::input_i == player[bodyColor].impulse[7][0]
::input_i == player[col].impulse[7][0]
::input_i == player[row].impulse[7][0]
::input_i == player[bodyType].impulse[8][0]
::input_i == player[bodyColor].impulse[8][0]
::input_i == player[col].impulse[8][0]
::input_i == player[row].impulse[8][0]
::input_i == player[bodyType].direction
::input_i == player[bodyColor].direction
::input_i == player[col].direction
::input_i == player[row].direction
::input_i == player[bodyType].stepCounter
::input_i == player[bodyColor].stepCounter
::input_i == player[col].stepCounter
::input_i == player[row].stepCounter
player[].id == player[].type
player[].id == player[].retired
player[].id == player[].body.type
player[].id == player[].body.visible
player[].id == player[].body.tangible
player[].id == player[].body.bodyPoints->aspect
player[].id == player[].body.bodyMapsSize
player[].id == player[].body.bodySize
player[].id == player[].body.bodyWidth
player[].id == player[].body.bodyHeight
player[].id == player[].body.color
player[].id == player[].basePosition.col
player[].id == player[].basePosition.row
player[].id == player[].impulse[0][0]
player[].id == player[].impulse[1][0]
player[].id == player[].impulse[2][0]
player[].id == player[].impulse[3][0]
player[].id == player[].impulse[4][0]
player[].id == player[].impulse[5][0]
player[].id == player[].impulse[6][0]
player[].id == player[].impulse[7][0]
player[].id == player[].impulse[8][0]
player[].id == player[].direction
player[].id == player[].stepCounter
player[].pilot == player[].onCrash
player[].pilot == player[].onPushed
size(::playerSpace[].playerNodes->start[0]) == size(::playerSpace[].playerNodes->start->next[0])
size(::playerSpace[].playerNodes->start[0]) == size(::playerSpace[].playerNodes->end[0])
size(::playerSpace[].playerNodes->start[0]) == size(space[].playerNodes->end[0])
size(::playerSpace[].playerNodes->start[0]) == size(bodyMap[])-1
size(::playerSpace[].playerNodes->start[0]) == ::players[::input_i].body.visible
size(::playerSpace[].playerNodes->start->next[0]) == size(::playerSpace[].playerNodes->end->prev[0])
size(::playerSpace[].playerNodes->start->next[0]) == size(space[].playerNodes->end->prev[0])
size(::playerSpace[].playerNodes->start->next[0]) == size(bodyMap[])-1
size(::playerSpace[].playerNodes->start->next[0]) == ::players[::input_n].body.type
size(::playerSpace[].playerNodes->start->next[0]) == ::players[::input_i].body.visible
size(::players[]) == size(::players[].body.bodyPoints[0])
size(::players[]) == size(::players[].impulse[0])
size(::players[]) == size(::players[].impulse[0][0])
size(::players[]) == size(::players[].impulse[1])
size(::players[]) == size(::players[].impulse[1][0])
size(::players[]) == size(::players[].impulse[2])
size(::players[]) == size(::players[].impulse[2][0])
size(::players[]) == size(::players[].impulse[3])
size(::players[]) == size(::players[].impulse[3][0])
size(::players[]) == size(::players[].impulse[4])
size(::players[]) == size(::players[].impulse[4][0])
size(::players[]) == size(::players[].impulse[5])
size(::players[]) == size(::players[].impulse[5][0])
size(::players[]) == size(::players[].impulse[6])
size(::players[]) == size(::players[].impulse[6][0])
size(::players[]) == size(::players[].impulse[7])
size(::players[]) == size(::players[].impulse[7][0])
size(::players[]) == size(::players[].impulse[8])
size(::players[]) == size(::players[].impulse[8][0])
size(::players[]) == size(::players[].magnetos[0])
size(::players[].body.bodyPoints->player[0]) == size(::players[].magnetos[0])
size(player[]) == size(player[].body.bodyPoints[0])
size(player[]) == size(player[].impulse[0])
size(player[]) == size(player[].impulse[0][0])
size(player[]) == size(player[].impulse[1])
size(player[]) == size(player[].impulse[1][0])
size(player[]) == size(player[].impulse[2])
size(player[]) == size(player[].impulse[2][0])
size(player[]) == size(player[].impulse[3])
size(player[]) == size(player[].impulse[3][0])
size(player[]) == size(player[].impulse[4])
size(player[]) == size(player[].impulse[4][0])
size(player[]) == size(player[].impulse[5])
size(player[]) == size(player[].impulse[5][0])
size(player[]) == size(player[].impulse[6])
size(player[]) == size(player[].impulse[6][0])
size(player[]) == size(player[].impulse[7])
size(player[]) == size(player[].impulse[7][0])
size(player[]) == size(player[].impulse[8])
size(player[]) == size(player[].impulse[8][0])
::crashedPlayers[::input_n-1] == ::crashedPlayers[::input_i]
::crashedPlayers[::input_n-1].start == ::crashedPlayers[::input_i].start
::crashedPlayers[::input_i].start == ::crashedPlayers[::input_n-1].end
::crashedPlayers[::input_i].start == ::playerSpace[::input_n-1].guideNodes->start
::crashedPlayers[::input_i].start == ::playerSpace[::input_n-1].guideNodes->end
::crashedPlayers[::input_i].start == space[::input_n-1].guideNodes->start
::crashedPlayers[::input_i].start == space[::input_n-1].guideNodes->end
::playerSpace[::input_n-1] == ::playerSpace[::input_i]
::playerSpace[::input_i] == space[::input_n-1]
::playerSpace[::input_n-1].playerNodes == ::playerSpace[::input_i].playerNodes
::playerSpace[::input_i].playerNodes == space[::input_n-1].playerNodes
::playerSpace[::input_n-1].playerNodes[0] == ::playerSpace[::input_i].playerNodes[0]
::playerSpace[::input_i].playerNodes[0] == space[::input_n-1].playerNodes[0]
::playerSpace[::input_n-1].playerNodes->start == ::playerSpace[::input_i].playerNodes->start
::playerSpace[::input_i].playerNodes->start == space[::input_n-1].playerNodes->start
::playerSpace[::input_n-1].playerNodes->start[0] == ::playerSpace[::input_i].playerNodes->start[0]
::playerSpace[::input_i].playerNodes->start[0] == space[::input_n-1].playerNodes->start[0]
::playerSpace[::input_n-1].playerNodes->start->next == ::playerSpace[::input_i].playerNodes->start->next
::playerSpace[::input_i].playerNodes->start->next == space[::input_n-1].playerNodes->start->next
::playerSpace[::input_n-1].playerNodes->start->next[0] == ::playerSpace[::input_i].playerNodes->start->next[0]
::playerSpace[::input_i].playerNodes->start->next[0] == space[::input_n-1].playerNodes->start->next[0]
::playerSpace[::input_n-1].playerNodes->start->data == ::playerSpace[::input_i].playerNodes->start->data
::playerSpace[::input_i].playerNodes->start->data == space[::input_n-1].playerNodes->start->data
::playerSpace[::input_n-1].playerNodes->start->prev == ::playerSpace[::input_i].playerNodes->start->prev
::playerSpace[::input_i].playerNodes->start->prev == ::playerSpace[::input_n-1].playerNodes->end->next
::playerSpace[::input_i].playerNodes->start->prev == space[::input_n-1].playerNodes->start->prev
::playerSpace[::input_i].playerNodes->start->prev == space[::input_n-1].playerNodes->end->next
::playerSpace[::input_n-1].playerNodes->end == ::playerSpace[::input_i].playerNodes->end
::playerSpace[::input_i].playerNodes->end == space[::input_n-1].playerNodes->end
::playerSpace[::input_n-1].playerNodes->end[0] == ::playerSpace[::input_i].playerNodes->end[0]
::playerSpace[::input_i].playerNodes->end[0] == space[::input_n-1].playerNodes->end[0]
::playerSpace[::input_n-1].playerNodes->end->data == ::playerSpace[::input_i].playerNodes->end->data
::playerSpace[::input_i].playerNodes->end->data == space[::input_n-1].playerNodes->end->data
::playerSpace[::input_n-1].playerNodes->end->prev == ::playerSpace[::input_i].playerNodes->end->prev
::playerSpace[::input_i].playerNodes->end->prev == space[::input_n-1].playerNodes->end->prev
::playerSpace[::input_n-1].playerNodes->end->prev[0] == ::playerSpace[::input_i].playerNodes->end->prev[0]
::playerSpace[::input_i].playerNodes->end->prev[0] == space[::input_n-1].playerNodes->end->prev[0]
::playerSpace[::input_n-1].playerMap == ::playerSpace[::input_i].playerMap
::playerSpace[::input_i].playerMap == space[::input_n-1].playerMap
::playerSpace[::input_n-1].guideNodes == ::playerSpace[::input_i].guideNodes
::playerSpace[::input_i].guideNodes == space[::input_n-1].guideNodes
::playerSpace[::input_n-1].guideNodes[0] == ::playerSpace[::input_i].guideNodes[0]
::playerSpace[::input_i].guideNodes[0] == space[::input_n-1].guideNodes[0]
::playerSpace[::input_n-1].groundMap == ::playerSpace[::input_i].groundMap
::playerSpace[::input_i].groundMap == space[::input_n-1].groundMap
::playerSpace[::input_n-1].actionGroup == ::playerSpace[::input_i].actionGroup
::playerSpace[::input_i].actionGroup == space[::input_n-1].actionGroup
::playerSpace[::input_n-1].actionGroup[0] == ::playerSpace[::input_i].actionGroup[0]
::playerSpace[::input_i].actionGroup[0] == space[::input_n-1].actionGroup[0]
::players[::input_n-1] == ::players[::input_i]
::players[::input_i] == ::players[::input_i].body.bodyPoints->player[0]
::players[bodyColor] == ::players[bodyColor].body.bodyPoints->player[0]
::players[::input_n-1].body == ::players[::input_i].body
::players[::input_n].body.type == ::players[::input_n].body.visible
::players[::input_n].body.type == ::players[bodyType].body.visible
::players[::input_n].body.type == ::players[::input_n].body.tangible
::players[::input_n].body.type == ::players[bodyType].body.tangible
::players[::input_n].body.type == ::players[::input_n].body.bodyMapsSize
::players[::input_n].body.type == ::players[::input_n].body.bodySize
::players[::input_n-1].body.visible == ::players[::input_i].body.visible
::players[::input_i].body.visible == ::players[bodyColor].body.visible
::players[::input_i].body.visible == ::players[::input_n-1].body.tangible
::players[::input_i].body.visible == ::players[bodyColor].body.tangible
::players[::input_n-1].body.bodyPoints == ::players[::input_i].body.bodyPoints
::players[::input_n-1].body.bodyPoints[0] == ::players[::input_i].body.bodyPoints[0]
::players[::input_n-1].body.bodyPoints->position == ::players[::input_i].body.bodyPoints->position
::players[::input_n-1].body.bodyPoints->player == ::players[::input_i].body.bodyPoints->player
::players[::input_n-1].body.bodyPoints->player[0] == ::players[::input_i].body.bodyPoints->player[0]
::players[::input_n-1].body.bodyPoints->aspect == ::players[::input_i].body.bodyPoints->aspect
::players[::input_n-1].body.bodyMaps == ::players[::input_i].body.bodyMaps
::players[::input_n-1].body.bodyMapsSize == ::players[::input_i].body.bodyMapsSize
::players[::input_i].body.bodyMapsSize == ::players[::input_n-1].body.bodyHeight
::players[::input_i].body.bodyMapsSize == ::players[::input_i].body.bodyHeight
::players[::input_i].body.bodyMapsSize == ::players[::new_input].body.bodyHeight
::players[::input_n-1].body.bodySize == ::players[::input_i].body.bodySize
::players[::input_n-1].body.bodyWidth == ::players[::input_i].body.bodyWidth
::players[::input_n-1].body.color == ::players[::input_i].body.color
::players[::input_n-1].basePosition == ::players[::input_i].basePosition
::players[::input_n-1].basePosition.col == ::players[::input_i].basePosition.col
::players[::input_n].basePosition.row == ::players[bodyType].basePosition.row
::players[::input_n-1].basePosition.row == ::players[::input_i].basePosition.row
::players[::input_n-1].impulse[0] == ::players[::input_i].impulse[0]
::players[::input_n-1].impulse[1] == ::players[::input_i].impulse[1]
::players[::input_n-1].impulse[2] == ::players[::input_i].impulse[2]
::players[::input_n-1].impulse[3] == ::players[::input_i].impulse[3]
::players[::input_n-1].impulse[4] == ::players[::input_i].impulse[4]
::players[::input_n-1].impulse[5] == ::players[::input_i].impulse[5]
::players[::input_n-1].impulse[6] == ::players[::input_i].impulse[6]
::players[::input_n-1].impulse[7] == ::players[::input_i].impulse[7]
::players[::input_n-1].impulse[8] == ::players[::input_i].impulse[8]
::players[::input_n-1].magnetos == ::players[::input_i].magnetos
::players[::input_n-1].magnetos[0] == ::players[::input_i].magnetos[0]
::players[::input_n-1].pilot == ::players[::input_i].pilot
::players[::input_n].onCrash == player[::input_n].pilot
::players[::input_n].onCrash == player[::input_n-1].pilot
::players[::input_n].onCrash == player[::input_n].onCrash
::players[::input_n].onCrash == player[::input_n-1].onCrash
::players[::input_n].onCrash == player[::input_n].onPushed
::players[::input_n].onCrash == player[::input_n-1].onPushed
::players[::input_n].onCrash == player[::input_i].pilot
::players[::input_n].onCrash == player[::input_i].onCrash
::players[::input_n].onCrash == player[::input_i].onPushed
::players[::input_n].onCrash == player[::new_input].pilot
::players[::input_n].onCrash == player[::new_input].onCrash
::players[::input_n].onCrash == player[::new_input].onPushed
::players[::input_n].onCrash == player[bodyType].pilot
::players[::input_n].onCrash == player[bodyColor].pilot
::players[::input_n].onCrash == player[col].pilot
::players[::input_n].onCrash == player[row].pilot
::players[::input_n].onCrash == player[bodyType].onCrash
::players[::input_n].onCrash == player[bodyColor].onCrash
::players[::input_n].onCrash == player[col].onCrash
::players[::input_n].onCrash == player[row].onCrash
::players[::input_n].onCrash == player[bodyType].onPushed
::players[::input_n].onCrash == player[bodyColor].onPushed
::players[::input_n].onCrash == player[col].onPushed
::players[::input_n].onCrash == player[row].onPushed
::players[::input_n-1].onCrash == ::players[::input_i].onCrash
::players[::input_n].onPushed == ::players[bodyType].onPushed
::players[::input_n-1].onPushed == ::players[::input_i].onPushed
::players[::input_i].onPushed == ::players[bodyColor].onPushed
player[::input_n-1] == player[::input_i]
player[::input_n-1].body == player[::input_i].body
player[::input_n-1].body.bodyPoints == player[::input_i].body.bodyPoints
player[::input_n-1].body.bodyPoints[0] == player[::input_i].body.bodyPoints[0]
player[::input_n-1].body.bodyPoints->position == player[::input_i].body.bodyPoints->position
player[::input_n].body.bodyPoints->player == player[::input_n-1].body.bodyPoints->player
player[::input_n].body.bodyPoints->player == player[::input_i].body.bodyPoints->player
player[::input_n].body.bodyPoints->player == player[::new_input].body.bodyPoints->player
player[::input_n].body.bodyPoints->player == player[bodyType].body.bodyPoints->player
player[::input_n].body.bodyPoints->player == player[bodyColor].body.bodyPoints->player
player[::input_n].body.bodyPoints->player == player[col].body.bodyPoints->player
player[::input_n].body.bodyPoints->player == player[row].body.bodyPoints->player
player[::input_n-1].body.bodyMaps == player[::input_i].body.bodyMaps
player[::input_n-1].basePosition == player[::input_i].basePosition
player[::input_n-1].impulse[0] == player[::input_i].impulse[0]
player[::input_n-1].impulse[1] == player[::input_i].impulse[1]
player[::input_n-1].impulse[2] == player[::input_i].impulse[2]
player[::input_n-1].impulse[3] == player[::input_i].impulse[3]
player[::input_n-1].impulse[4] == player[::input_i].impulse[4]
player[::input_n-1].impulse[5] == player[::input_i].impulse[5]
player[::input_n-1].impulse[6] == player[::input_i].impulse[6]
player[::input_n-1].impulse[7] == player[::input_i].impulse[7]
player[::input_n-1].impulse[8] == player[::input_i].impulse[8]
player[::input_n].magnetos == player[::input_n-1].magnetos
player[::input_n].magnetos == player[::input_i].magnetos
player[::input_n].magnetos == player[::new_input].magnetos
player[::input_n].magnetos == player[bodyType].magnetos
player[::input_n].magnetos == player[bodyColor].magnetos
player[::input_n].magnetos == player[col].magnetos
player[::input_n].magnetos == player[row].magnetos
bodyMap[::input_n-1] == bodyMap[::input_i]
::crashedPlayers has only one value
::crashedPlayers != null
::crashedPlayers[] contains no nulls and has only one value, of length 1
::crashedPlayers[] elements has only one value
::crashedPlayers[] elements != null
::crashedPlayers[].start == [null]
::crashedPlayers[].start elements == null
::playerSpace has only one value
::playerSpace != null
::playerSpace[] contains no nulls and has only one value, of length 1
::playerSpace[] elements has only one value
::playerSpace[] elements != null
::playerSpace[].playerNodes contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes elements has only one value
::playerSpace[].playerNodes elements != null
::playerSpace[].playerNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes[0] elements has only one value
::playerSpace[].playerNodes[0] elements != null
::playerSpace[].playerNodes->start[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start[0] elements has only one value
::playerSpace[].playerNodes->start[0] elements != null
::playerSpace[].playerNodes->start->next[0] contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->next[0] elements has only one value
::playerSpace[].playerNodes->start->next[0] elements != null
::playerSpace[].playerNodes->start->data contains no nulls and has only one value, of length 1
::playerSpace[].playerNodes->start->data elements has only one value
::playerSpace[].playerNodes->start->data elements != null
::playerSpace[].playerNodes->start->prev == [null]
::playerSpace[].playerNodes->start->prev elements == null
::playerSpace[].playerNodes->end[0] elements != null
::playerSpace[].playerNodes->end->data elements != null
::playerSpace[].playerNodes->end->prev[0] elements != null
::playerSpace[].playerMap contains no nulls and has only one value, of length 1
::playerSpace[].playerMap elements has only one value
::playerSpace[].playerMap elements != null
::playerSpace[].guideNodes contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes elements has only one value
::playerSpace[].guideNodes elements != null
::playerSpace[].guideNodes[0] contains no nulls and has only one value, of length 1
::playerSpace[].guideNodes[0] elements has only one value
::playerSpace[].guideNodes[0] elements != null
::playerSpace[].groundMap contains no nulls and has only one value, of length 1
::playerSpace[].groundMap elements has only one value
::playerSpace[].groundMap elements != null
::playerSpace[].actionGroup contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup elements has only one value
::playerSpace[].actionGroup elements != null
::playerSpace[].actionGroup[0] contains no nulls and has only one value, of length 1
::playerSpace[].actionGroup[0] elements has only one value
::playerSpace[].actionGroup[0] elements != null
::playerSpace[].actionGroup->numActions == [0]
::playerSpace[].actionGroup->numActions elements == 0
::players has only one value
::players[] contains no nulls and has only one value, of length 100
::players[] elements != null
::players[].id == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::players[].id elements == 0
::players[].body contains no nulls and has only one value, of length 100
::players[].body elements != null
::players[].body.type elements one of { 0, 1 }
::players[].body.visible elements one of { 0, 1 }
::players[].body.visible sorted by >=
::players[].body.bodyPoints contains no nulls and has only one value, of length 100
::players[].body.bodyPoints elements != null
::players[].body.bodyPoints[0] contains no nulls and has only one value, of length 100
::players[].body.bodyPoints[0] elements != null
::players[].body.bodyPoints->position contains no nulls and has only one value, of length 100
::players[].body.bodyPoints->position elements != null
::players[].body.bodyPoints->aspect elements >= 0
::players[].body.bodyMaps contains no nulls and has only one value, of length 100
::players[].body.bodyMaps elements != null
::players[].body.bodyMapsSize elements one of { 0, 1, 4 }
::players[].body.bodyMapsSize sorted by >=
::players[].body.bodySize elements >= 0
::players[].body.bodyWidth elements one of { 0, 8, 14 }
::players[].body.bodyHeight elements one of { 0, 4, 6 }
::players[].body.color elements >= 0
::players[].basePosition contains no nulls and has only one value, of length 100
::players[].basePosition elements != null
::players[].basePosition.col elements >= 0
::players[].basePosition.row elements >= 0
::players[].impulse[0] contains no nulls and has only one value, of length 100
::players[].impulse[0] elements != null
::players[].impulse[1] contains no nulls and has only one value, of length 100
::players[].impulse[1] elements != null
::players[].impulse[2] contains no nulls and has only one value, of length 100
::players[].impulse[2] elements != null
::players[].impulse[3] contains no nulls and has only one value, of length 100
::players[].impulse[3] elements != null
::players[].impulse[4] contains no nulls and has only one value, of length 100
::players[].impulse[4] elements != null
::players[].impulse[5] contains no nulls and has only one value, of length 100
::players[].impulse[5] elements != null
::players[].impulse[6] contains no nulls and has only one value, of length 100
::players[].impulse[6] elements != null
::players[].impulse[7] contains no nulls and has only one value, of length 100
::players[].impulse[7] elements != null
::players[].impulse[8] contains no nulls and has only one value, of length 100
::players[].impulse[8] elements != null
::snakeBodyMap has only one value
::trainBodyMap has only one value
::giantBodyMap has only one value
::squareBodyMap has only one value
::circleBodyMap has only one value
::input_n == 1
::input_key == "k"
::trace_pos == ""
player != null
player[] elements != null
player[].id elements == 0
player[].body elements != null
player[].body.bodyPoints elements != null
player[].body.bodyPoints[0] elements != null
player[].body.bodyPoints->position elements != null
player[].body.bodyPoints->player elements == null
player[].body.bodyMaps elements != null
player[].basePosition elements != null
player[].impulse[0] elements != null
player[].impulse[1] elements != null
player[].impulse[2] elements != null
player[].impulse[3] elements != null
player[].impulse[4] elements != null
player[].impulse[5] elements != null
player[].impulse[6] elements != null
player[].impulse[7] elements != null
player[].impulse[8] elements != null
player[].magnetos elements == null
player[].pilot elements == null
bodyType one of { 0, 1 }
bodyColor >= 0
pilot != null
onPushed has only one value
onPushed != null
bodyMap != null
size(::playerSpace[].playerNodes->start[0]) == 1
size(::playerSpace[].playerNodes->start->next[0]) == 1
size(::players[]) == 100
size(::players[].magnetos[0]) == 100
size(bodyMap[]) one of { 2, 5 }
::players[::input_n] has only one value
::players[::input_i] has only one value
::players[::input_n].body has only one value
::players[::input_i].body has only one value
::players[::input_n].body.bodyPoints has only one value
::players[::input_i].body.bodyPoints has only one value
::players[::input_n].body.bodyPoints[0] has only one value
::players[::input_i].body.bodyPoints[0] has only one value
::players[::input_n].body.bodyPoints->position has only one value
::players[::input_i].body.bodyPoints->position has only one value
::players[::input_i].body.bodyPoints->player[0] has only one value
::players[::input_i].body.bodyPoints->player[0] != null
::players[bodyColor].body.bodyPoints->player[0] != null
::players[::input_n].body.bodyPoints->aspect one of { 0, 35 }
::players[::input_i].body.bodyPoints->aspect one of { 0, 46 }
::players[bodyType].body.bodyPoints->aspect one of { 0, 35, 46 }
::players[::input_n].body.bodyMaps has only one value
::players[::input_i].body.bodyMaps has only one value
::players[::input_i].body.bodyMapsSize one of { 0, 4 }
::players[::input_i].body.bodySize one of { 0, 28 }
::players[bodyType].body.bodySize one of { 0, 1, 28 }
::players[bodyColor].body.bodySize one of { 0, 1, 28 }
::players[col].body.bodySize one of { 0, 1, 28 }
::players[row].body.bodySize one of { 0, 1, 28 }
::players[::input_i].body.bodyWidth one of { 0, 8 }
::players[bodyType].body.bodyWidth one of { 0, 8 }
::players[bodyColor].body.bodyWidth one of { 0, 8 }
::players[col].body.bodyWidth one of { 0, 8 }
::players[row].body.bodyWidth one of { 0, 8 }
::players[bodyType].body.bodyHeight one of { 0, 4 }
::players[bodyColor].body.bodyHeight one of { 0, 4 }
::players[col].body.bodyHeight one of { 0, 4 }
::players[row].body.bodyHeight one of { 0, 4 }
::players[::input_i].body.color one of { 0, 3 }
::players[bodyType].body.color one of { 0, 3 }
::players[col].body.color one of { 0, 3, 8 }
::players[::input_n].basePosition has only one value
::players[::input_i].basePosition has only one value
::players[::input_i].basePosition.col one of { 0, 40 }
::players[bodyType].basePosition.col one of { 0, 40 }
::players[::input_n].basePosition.row one of { 0, 10 }
::players[::input_i].basePosition.row one of { 0, 10 }
::players[::input_n].impulse[0] has only one value
::players[::input_i].impulse[0] has only one value
::players[::input_n].impulse[1] has only one value
::players[::input_i].impulse[1] has only one value
::players[::input_n].impulse[2] has only one value
::players[::input_i].impulse[2] has only one value
::players[::input_n].impulse[3] has only one value
::players[::input_i].impulse[3] has only one value
::players[::input_n].impulse[4] has only one value
::players[::input_i].impulse[4] has only one value
::players[::input_n].impulse[5] has only one value
::players[::input_i].impulse[5] has only one value
::players[::input_n].impulse[6] has only one value
::players[::input_i].impulse[6] has only one value
::players[::input_n].impulse[7] has only one value
::players[::input_i].impulse[7] has only one value
::players[::input_n].impulse[8] has only one value
::players[::input_i].impulse[8] has only one value
::players[::input_i].magnetos[0] has only one value
::players[::input_i].magnetos[0] != null
::players[bodyColor].magnetos[0] != null
::players[::input_n].onCrash == null
bodyMap[::input_i] != null
::crashedPlayers[] elements == ::crashedPlayers[::input_i]
::crashedPlayers[].start == ::playerSpace[].playerNodes->start->prev (elementwise)
::crashedPlayers[].start is the reverse of ::playerSpace[].playerNodes->start->prev
::crashedPlayers[].start elements == ::crashedPlayers[::input_i].start
::crashedPlayers[].start elements == ::playerSpace[::input_i].playerNodes->start->prev
::playerSpace[::input_i].playerNodes->start->prev in ::crashedPlayers[].start
::playerSpace[] elements == ::playerSpace[::input_i]
::playerSpace[].playerNodes elements == ::playerSpace[::input_i].playerNodes
::playerSpace[].playerNodes[0] elements == ::playerSpace[::input_i].playerNodes[0]
::playerSpace[].playerNodes->start elements == ::playerSpace[::input_i].playerNodes->start
::playerSpace[].playerNodes->start[0] elements == ::playerSpace[::input_i].playerNodes->start[0]
::playerSpace[].playerNodes->start->next elements == ::playerSpace[::input_i].playerNodes->start->next
::playerSpace[].playerNodes->start->next[0] elements == ::playerSpace[::input_i].playerNodes->start->next[0]
::playerSpace[].playerNodes->start->data elements == ::playerSpace[::input_i].playerNodes->start->data
::crashedPlayers[::input_i].start in ::playerSpace[].playerNodes->start->prev
::playerSpace[].playerNodes->start->prev elements == ::crashedPlayers[::input_i].start
::playerSpace[].playerNodes->start->prev elements == ::playerSpace[::input_i].playerNodes->start->prev
::playerSpace[].playerNodes->end elements == ::playerSpace[::input_i].playerNodes->end
::playerSpace[].playerNodes->end[0] elements == ::playerSpace[::input_i].playerNodes->end[0]
::playerSpace[].playerNodes->end->data elements == ::playerSpace[::input_i].playerNodes->end->data
::playerSpace[].playerNodes->end->prev elements == ::playerSpace[::input_i].playerNodes->end->prev
::playerSpace[].playerNodes->end->prev[0] elements == ::playerSpace[::input_i].playerNodes->end->prev[0]
::playerSpace[].playerMap elements == ::playerSpace[::input_i].playerMap
::playerSpace[].guideNodes elements == ::playerSpace[::input_i].guideNodes
::playerSpace[].guideNodes[0] elements == ::playerSpace[::input_i].guideNodes[0]
::playerSpace[].groundMap elements == ::playerSpace[::input_i].groundMap
::playerSpace[].actionGroup elements == ::playerSpace[::input_i].actionGroup
::playerSpace[].actionGroup[0] elements == ::playerSpace[::input_i].actionGroup[0]
::playerSpace[].actionGroup->numActions < ::players[].body.type (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].body.type (lexically)
::playerSpace[].actionGroup->numActions < ::players[].body.visible (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].body.visible (lexically)
::playerSpace[].actionGroup->numActions < ::players[].body.bodyPoints->aspect (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].body.bodyPoints->aspect (lexically)
::playerSpace[].actionGroup->numActions < ::players[].body.bodyMapsSize (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].body.bodyMapsSize (lexically)
::playerSpace[].actionGroup->numActions < ::players[].body.bodySize (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].body.bodySize (lexically)
::playerSpace[].actionGroup->numActions < ::players[].body.bodyWidth (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].body.bodyWidth (lexically)
::playerSpace[].actionGroup->numActions < ::players[].body.bodyHeight (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].body.bodyHeight (lexically)
::playerSpace[].actionGroup->numActions < ::players[].body.color (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].body.color (lexically)
::playerSpace[].actionGroup->numActions < ::players[].basePosition.col (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].basePosition.col (lexically)
::playerSpace[].actionGroup->numActions < ::players[].basePosition.row (lexically)
::playerSpace[].actionGroup->numActions <= ::players[].basePosition.row (lexically)
::playerSpace[].actionGroup->numActions elements == ::input_i
::playerSpace[].actionGroup->numActions < player[].id (lexically)
::playerSpace[].actionGroup->numActions <= player[].id (lexically)
::playerSpace[].actionGroup->numActions elements == size(::playerSpace[].playerNodes->start[0])-1
size(::playerSpace[].playerNodes->start[0])-1 in ::playerSpace[].actionGroup->numActions
::playerSpace[].actionGroup->numActions elements == size(::playerSpace[].playerNodes->start->next[0])-1
size(::playerSpace[].playerNodes->start->next[0])-1 in ::playerSpace[].actionGroup->numActions
::players[::input_i].body.bodyPoints->player[0] in ::players[]
::players[bodyColor].body.bodyPoints->player[0] in ::players[]
player[::input_n] in ::players[]
player[::input_i] in ::players[]
player[bodyType] in ::players[]
player[bodyColor] in ::players[]
player[col] in ::players[]
player[row] in ::players[]
::players[].id <= ::players[].body.type (elementwise)
::players[].id <= ::players[].body.visible (elementwise)
::players[].id <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].id <= ::players[].body.bodyMapsSize (elementwise)
::players[].id <= ::players[].body.bodySize (elementwise)
::players[].id <= ::players[].body.bodyWidth (elementwise)
::players[].id <= ::players[].body.bodyHeight (elementwise)
::players[].id <= ::players[].body.color (elementwise)
::players[].id <= ::players[].basePosition.col (elementwise)
::players[].id <= ::players[].basePosition.row (elementwise)
::players[].id elements == ::input_i
::players[].id >= player[].id (lexically)
::players[].id elements == size(::playerSpace[].playerNodes->start[0])-1
size(::playerSpace[].playerNodes->start[0])-1 in ::players[].id
::players[].id elements == size(::playerSpace[].playerNodes->start->next[0])-1
size(::playerSpace[].playerNodes->start->next[0])-1 in ::players[].id
player[::input_n].body in ::players[].body
player[::input_i].body in ::players[].body
player[bodyType].body in ::players[].body
player[bodyColor].body in ::players[].body
player[col].body in ::players[].body
player[row].body in ::players[].body
::players[].body.type <= ::players[].body.visible (elementwise)
::players[].body.type <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].body.type <= ::players[].body.bodyMapsSize (elementwise)
::players[].body.type <= ::players[].body.bodySize (elementwise)
::players[].body.type <= ::players[].body.bodyWidth (lexically)
::players[].body.type <= ::players[].body.bodyHeight (lexically)
::players[].body.type <= ::players[].body.color (lexically)
::players[].body.type <= ::players[].basePosition.col (lexically)
::players[].body.type <= ::players[].basePosition.row (lexically)
::players[].body.type elements <= ::input_n
::players[].body.type elements >= ::input_i
::players[].body.type >= player[].id (lexically)
::players[].body.type elements <= size(::playerSpace[].playerNodes->start[0])
::players[].body.type elements >= size(::playerSpace[].playerNodes->start[0])-1
size(::playerSpace[].playerNodes->start[0])-1 in ::players[].body.type
::players[].body.type elements <= size(::playerSpace[].playerNodes->start->next[0])
size(::playerSpace[].playerNodes->start->next[0]) in ::players[].body.type
::players[].body.type elements >= size(::playerSpace[].playerNodes->start->next[0])-1
size(::playerSpace[].playerNodes->start->next[0])-1 in ::players[].body.type
::players[].body.type elements < size(::players[])-1
::players[].body.type elements < size(::players[].magnetos[0])-1
::players[].body.type elements < size(player[])-1
::players[].body.type elements <= size(bodyMap[])-1
::players[].body.type elements <= ::players[::input_n].body.type
::players[].body.type elements <= ::players[::input_i].body.visible
::players[row].body.visible in ::players[].body.type
::players[].body.type elements <= ::players[::input_n].body.bodyPoints->aspect
::players[].body.type elements <= ::players[::input_i].body.bodyPoints->aspect
::players[].body.type elements <= ::players[bodyType].body.bodyPoints->aspect
::players[].body.type elements <= ::players[bodyColor].body.bodyPoints->aspect
::players[].body.type elements <= ::players[::input_i].body.bodyMapsSize
::players[].body.type elements <= ::players[bodyType].body.bodyMapsSize
::players[].body.type elements <= ::players[bodyColor].body.bodyMapsSize
::players[].body.type elements <= ::players[::input_i].body.bodySize
::players[].body.type elements <= ::players[bodyType].body.bodySize
::players[].body.type elements <= ::players[bodyColor].body.bodySize
::players[].body.type elements <= ::players[::input_i].body.bodyWidth
::players[].body.type elements <= ::players[::input_i].body.color
::players[].body.type elements <= ::players[::input_i].basePosition.col
::players[].body.type elements <= ::players[::input_n].basePosition.row
::players[].body.type elements <= ::players[::input_i].basePosition.row
::players[].body.visible <= ::players[].body.bodyPoints->aspect (elementwise)
::players[].body.visible <= ::players[].body.bodyMapsSize (elementwise)
::players[].body.visible <= ::players[].body.bodySize (elementwise)
::players[].body.visible <= ::players[].body.bodyWidth (lexically)
::players[].body.visible <= ::players[].body.bodyHeight (lexically)
::players[].body.visible <= ::players[].body.color (lexically)
::players[].body.visible <= ::players[].basePosition.col (lexically)
::players[].body.visible <= ::players[].basePosition.row (lexically)
::players[].body.visible elements <= ::input_n
::input_i in ::players[].body.visible
::players[].body.visible elements >= ::input_i
::players[].body.visible >= player[].id (lexically)
bodyType in ::players[].body.visible
::players[].body.visible elements <= size(::playerSpace[].playerNodes->start[0])
size(::playerSpace[].playerNodes->start[0]) in ::players[].body.visible
::players[].body.visible elements >= size(::playerSpace[].playerNodes->start[0])-1
size(::playerSpace[].playerNodes->start[0])-1 in ::players[].body.visible
::players[].body.visible elements <= size(::playerSpace[].playerNodes->start->next[0])
size(::playerSpace[].playerNodes->start->next[0]) in ::players[].body.visible
::players[].body.visible elements >= size(::playerSpace[].playerNodes->start->next[0])-1
size(::playerSpace[].playerNodes->start->next[0])-1 in ::players[].body.visible
::players[].body.visible elements < size(::players[])-1
::players[].body.visible elements < size(::players[].magnetos[0])-1
::players[].body.visible elements < size(player[])-1
::players[].body.visible elements <= size(bodyMap[])-1
::players[bodyType].body.type in ::players[].body.visible
::players[bodyColor].body.type in ::players[].body.visible
::players[col].body.type in ::players[].body.visible
::players[row].body.type in ::players[].body.visible
::players[].body.visible elements <= ::players[::input_i].body.visible
::players[].body.visible elements <= ::players[::input_i].body.bodyPoints->aspect
::players[].body.visible elements <= ::players[bodyColor].body.bodyPoints->aspect
::players[].body.visible elements <= ::players[::input_i].body.bodyMapsSize
::players[].body.visible elements <= ::players[bodyColor].body.bodyMapsSize
::players[].body.visible elements <= ::players[::input_i].body.bodySize
::players[].body.visible elements <= ::players[bodyColor].body.bodySize
::players[].body.visible elements <= ::players[::input_i].body.bodyWidth
::players[].body.visible elements <= ::players[::input_i].body.color
::players[].body.visible elements <= ::players[::input_i].basePosition.col
::players[].body.visible elements <= ::players[::input_i].basePosition.row
player[::input_n].body.bodyPoints in ::players[].body.bodyPoints
player[::input_i].body.bodyPoints in ::players[].body.bodyPoints
player[bodyType].body.bodyPoints in ::players[].body.bodyPoints
player[bodyColor].body.bodyPoints in ::players[].body.bodyPoints
player[col].body.bodyPoints in ::players[].body.bodyPoints
player[row].body.bodyPoints in ::players[].body.bodyPoints
player[::input_n].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
player[::input_i].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
player[bodyType].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
player[bodyColor].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
player[col].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
player[row].body.bodyPoints[0] in ::players[].body.bodyPoints[0]
::players[].body.bodyPoints->position - ::players[].basePosition + 7304 == 0
player[::input_n].body.bodyPoints->position in ::players[].body.bodyPoints->position
player[::input_i].body.bodyPoints->position in ::players[].body.bodyPoints->position
player[bodyType].body.bodyPoints->position in ::players[].body.bodyPoints->position
player[bodyColor].body.bodyPoints->position in ::players[].body.bodyPoints->position
player[col].body.bodyPoints->position in ::players[].body.bodyPoints->position
player[row].body.bodyPoints->position in ::players[].body.bodyPoints->position
player[::input_n].body.bodyPoints->player in ::players[].body.bodyPoints->player
::players[::input_i] in ::players[].body.bodyPoints->player[0]
::players[bodyColor] in ::players[].body.bodyPoints->player[0]
::players[].body.bodyPoints->aspect >= ::players[].body.bodyMapsSize (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodySize (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodyWidth (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].body.color (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].basePosition.col (elementwise)
::players[].body.bodyPoints->aspect >= ::players[].basePosition.row (elementwise)
::input_i in ::players[].body.bodyPoints->aspect
::players[].body.bodyPoints->aspect elements >= ::input_i
::players[].body.bodyPoints->aspect >= player[].id (lexically)
::players[].body.bodyPoints->aspect elements >= size(::playerSpace[].playerNodes->start[0])-1
size(::playerSpace[].playerNodes->start[0])-1 in ::players[].body.bodyPoints->aspect
::players[].body.bodyPoints->aspect elements >= size(::playerSpace[].playerNodes->start->next[0])-1
size(::playerSpace[].playerNodes->start->next[0])-1 in ::players[].body.bodyPoints->aspect
::players[].body.bodyPoints->aspect elements < size(::players[])-1
::players[].body.bodyPoints->aspect elements < size(::players[].magnetos[0])-1
player[::input_n].body.bodyMaps in ::players[].body.bodyMaps
player[::input_i].body.bodyMaps in ::players[].body.bodyMaps
player[bodyType].body.bodyMaps in ::players[].body.bodyMaps
player[bodyColor].body.bodyMaps in ::players[].body.bodyMaps
player[col].body.bodyMaps in ::players[].body.bodyMaps
player[row].body.bodyMaps in ::players[].body.bodyMaps
::players[].body.bodyMapsSize <= ::players[].body.bodySize (elementwise)
::players[].body.bodyMapsSize <= ::players[].body.bodyWidth (lexically)
::players[].body.bodyMapsSize >= ::players[].body.bodyHeight (lexically)
::players[].body.bodyMapsSize >= ::players[].body.color (lexically)
::players[].body.bodyMapsSize <= ::players[].basePosition.col (lexically)
::players[].body.bodyMapsSize <= ::players[].basePosition.row (lexically)
::input_i in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements >= ::input_i
::players[].body.bodyMapsSize >= player[].id (lexically)
::players[].body.bodyMapsSize elements >= size(::playerSpace[].playerNodes->start[0])-1
size(::playerSpace[].playerNodes->start[0])-1 in ::players[].body.bodyMapsSize
size(::playerSpace[].playerNodes->start->next[0]) in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements >= size(::playerSpace[].playerNodes->start->next[0])-1
size(::playerSpace[].playerNodes->start->next[0])-1 in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements < size(::players[])-1
::players[].body.bodyMapsSize elements < size(::players[].magnetos[0])-1
::players[].body.bodyMapsSize elements < size(player[])-1
::players[bodyType].body.type in ::players[].body.bodyMapsSize
::players[bodyColor].body.type in ::players[].body.bodyMapsSize
::players[col].body.type in ::players[].body.bodyMapsSize
::players[row].body.type in ::players[].body.bodyMapsSize
::players[row].body.visible in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements <= ::players[::input_i].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements <= ::players[bodyColor].body.bodyPoints->aspect
::players[].body.bodyMapsSize elements <= ::players[::input_i].body.bodyMapsSize
::players[].body.bodyMapsSize elements <= ::players[::input_i].body.bodySize
::players[].body.bodyMapsSize elements <= ::players[::input_i].body.bodyWidth
::players[bodyType].body.bodyHeight in ::players[].body.bodyMapsSize
::players[bodyColor].body.bodyHeight in ::players[].body.bodyMapsSize
::players[col].body.bodyHeight in ::players[].body.bodyMapsSize
::players[row].body.bodyHeight in ::players[].body.bodyMapsSize
::players[].body.bodyMapsSize elements <= ::players[::input_i].basePosition.col
::players[].body.bodyMapsSize elements <= ::players[::input_i].basePosition.row
::players[].body.bodySize >= ::players[].body.bodyWidth (elementwise)
::players[].body.bodySize >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodySize >= ::players[].body.color (lexically)
::players[].body.bodySize <= ::players[].basePosition.col (lexically)
::players[].body.bodySize >= ::players[].basePosition.row (lexically)
::input_i in ::players[].body.bodySize
::players[].body.bodySize elements >= ::input_i
::players[].body.bodySize >= player[].id (lexically)
::players[].body.bodySize elements >= size(::playerSpace[].playerNodes->start[0])-1
size(::playerSpace[].playerNodes->start[0])-1 in ::players[].body.bodySize
size(::playerSpace[].playerNodes->start->next[0]) in ::players[].body.bodySize
::players[].body.bodySize elements >= size(::playerSpace[].playerNodes->start->next[0])-1
size(::playerSpace[].playerNodes->start->next[0])-1 in ::players[].body.bodySize
::players[].body.bodySize elements < size(::players[])-1
::players[].body.bodySize elements < size(::players[].magnetos[0])-1
::players[].body.bodySize elements < size(player[])-1
::players[bodyType].body.type in ::players[].body.bodySize
::players[bodyColor].body.type in ::players[].body.bodySize
::players[col].body.type in ::players[].body.bodySize
::players[row].body.type in ::players[].body.bodySize
::players[row].body.visible in ::players[].body.bodySize
::players[].body.bodySize elements <= ::players[::input_i].body.bodyPoints->aspect
::players[].body.bodyWidth >= ::players[].body.bodyHeight (elementwise)
::players[].body.bodyWidth >= ::players[].body.color (lexically)
::players[].body.bodyWidth <= ::players[].basePosition.col (lexically)
::players[].body.bodyWidth <= ::players[].basePosition.row (lexically)
::players[].body.bodyWidth elements >= ::input_i
::players[].body.bodyWidth >= player[].id (lexically)
::players[].body.bodyWidth elements >= size(::playerSpace[].playerNodes->start[0])-1
size(::playerSpace[].playerNodes->start[0])-1 in ::players[].body.bodyWidth
::players[].body.bodyWidth elements >= size(::playerSpace[].playerNodes->start->next[0])-1
size(::playerSpace[].playerNodes->start->next[0])-1 in ::players[].body.bodyWidth
::players[].body.bodyWidth elements < size(::players[])-1
::players[].body.bodyWidth elements < size(::players[].magnetos[0])-1
::players[].body.bodyWidth elements < size(player[])-1
::players[].body.bodyWidth elements <= ::players[::input_i].body.bodyPoints->aspect
::players[].body.bodyWidth elements <= ::players[bodyColor].body.bodyPoints->aspect
::players[].body.bodyWidth elements <= ::players[::input_i].body.bodySize
::players[].body.bodyWidth elements <= ::players[::input_i].basePosition.col
::players[].body.bodyHeight >= ::players[].body.color (lexically)
::players[].body.bodyHeight <= ::players[].basePosition.col (lexically)
::players[].body.bodyHeight <= ::players[].basePosition.row (lexically)
::players[].body.bodyHeight elements >= ::input_i
::players[].body.bodyHeight >= player[].id (lexically)
::players[].body.bodyHeight elements >= size(::playerSpace[].playerNodes->start[0])-1
size(::playerSpace[].playerNodes->start[0])-1 in ::players[].body.bodyHeight
::players[].body.bodyHeight elements >= size(::playerSpace[].playerNodes->start->next[0])-1
size(::playerSpace[].playerNodes->start->next[0])-1 in ::players[].body.bodyHeight
::players[].body.bodyHeight elements < size(::players[])-1
::players[].body.bodyHeight elements < size(::players[].magnetos[0])-1
::players[].body.bodyHeight elements < size(player[])-1
::players[].body.bodyHeight elements <= ::players[::input_i].body.bodyPoints->aspect
::players[].body.bodyHeight elements <= ::players[bodyColor].body.bodyPoints->aspect
::players[].body.bodyHeight elements <= ::players[::input_i].body.bodySize
::players[].body.bodyHeight elements <= ::players[::input_i].body.bodyWidth
::players[].body.bodyHeight elements <= ::players[::input_i].basePosition.col
::players[].body.bodyHeight elements <= ::players[::input_i].basePosition.row
::players[].body.color <= ::players[].basePosition.col (elementwise)
::players[].body.color <= ::players[].basePosition.row (lexically)
::players[].body.color elements >= ::input_i
::players[].body.color >= player[].id (lexically)
::players[].body.color elements >= size(::playerSpace[].playerNodes->start[0])-1
size(::playerSpace[].playerNodes->start[0])-1 in ::players[].body.color
::players[].body.color elements >= size(::playerSpace[].playerNodes->start->next[0])-1
size(::playerSpace[].playerNodes->start->next[0])-1 in ::players[].body.color
::players[].body.color elements < size(::players[])-1
::players[].body.color elements < size(::players[].magnetos[0])-1
::players[].body.color elements < size(player[])-1
::players[col].body.type in ::players[].body.color
::players[row].body.type in ::players[].body.color
::players[row].body.visible in ::players[].body.color
::players[].body.color elements <= ::players[::input_i].body.bodyPoints->aspect
::players[].body.color elements <= ::players[bodyColor].body.bodyPoints->aspect
::players[row].body.bodyMapsSize in ::players[].body.color
::players[].body.color elements <= ::players[::input_i].body.bodySize
::players[].body.color elements <= ::players[::input_i].body.bodyWidth
::players[bodyType].body.bodyWidth in ::players[].body.color
::players[bodyType].body.bodyHeight in ::players[].body.color
::players[row].body.bodyHeight in ::players[].body.color
::players[].body.color elements <= ::players[::input_i].basePosition.col
::players[].body.color elements <= ::players[::input_i].basePosition.row
player[::input_n].basePosition in ::players[].basePosition
player[::input_i].basePosition in ::players[].basePosition
player[bodyType].basePosition in ::players[].basePosition
player[bodyColor].basePosition in ::players[].basePosition
player[col].basePosition in ::players[].basePosition
player[row].basePosition in ::players[].basePosition
::players[].basePosition.col >= ::players[].basePosition.row (lexically)
::players[].basePosition.col elements >= ::input_i
::players[].basePosition.col >= player[].id (lexically)
::players[].basePosition.col elements >= size(::playerSpace[].playerNodes->start[0])-1
size(::playerSpace[].playerNodes->start[0])-1 in ::players[].basePosition.col
::players[].basePosition.col elements >= size(::playerSpace[].playerNodes->start->next[0])-1
size(::playerSpace[].playerNodes->start->next[0])-1 in ::players[].basePosition.col
::players[].basePosition.col elements < size(::players[])-1
::players[].basePosition.col elements < size(::players[].magnetos[0])-1
::players[].basePosition.col elements < size(player[])-1
::players[bodyType].body.bodyWidth in ::players[].basePosition.col
::players[row].body.bodyWidth in ::players[].basePosition.col
::players[bodyType].body.bodyHeight in ::players[].basePosition.col
::players[row].body.bodyHeight in ::players[].basePosition.col
::input_i in ::players[].basePosition.row
::players[].basePosition.row elements >= ::input_i
::players[].basePosition.row >= player[].id (lexically)
::players[].basePosition.row elements >= size(::playerSpace[].playerNodes->start[0])-1
size(::playerSpace[].playerNodes->start[0])-1 in ::players[].basePosition.row
::players[].basePosition.row elements >= size(::playerSpace[].playerNodes->start->next[0])-1
size(::playerSpace[].playerNodes->start->next[0])-1 in ::players[].basePosition.row
::players[].basePosition.row elements < size(::players[])-1
::players[].basePosition.row elements < size(::players[].magnetos[0])-1
::players[].basePosition.row elements < size(player[])-1
::players[].basePosition.row elements <= ::players[::input_i].body.bodyPoints->aspect
::players[].basePosition.row elements <= ::players[bodyColor].body.bodyPoints->aspect
::players[].basePosition.row elements <= ::players[::input_i].body.bodySize
::players[bodyType].body.bodyHeight in ::players[].basePosition.row
::players[bodyType].body.color in ::players[].basePosition.row
::players[].basePosition.row elements <= ::players[::input_i].basePosition.col
::players[].impulse[0] - ::players[].impulse[1] + 4 == 0
::players[].impulse[0] - ::players[].impulse[2] + 8 == 0
::players[].impulse[0] - ::players[].impulse[3] + 12 == 0
::players[].impulse[0] - ::players[].impulse[4] + 16 == 0
::players[].impulse[0] - ::players[].impulse[5] + 20 == 0
::players[].impulse[0] - ::players[].impulse[6] + 24 == 0
::players[].impulse[0] - ::players[].impulse[7] + 28 == 0
::players[].impulse[0] - ::players[].impulse[8] + 32 == 0
player[::input_n].impulse[0] in ::players[].impulse[0]
player[::input_i].impulse[0] in ::players[].impulse[0]
player[bodyType].impulse[0] in ::players[].impulse[0]
player[bodyColor].impulse[0] in ::players[].impulse[0]
player[col].impulse[0] in ::players[].impulse[0]
player[row].impulse[0] in ::players[].impulse[0]
::players[].impulse[1] - ::players[].impulse[2] + 4 == 0
::players[].impulse[1] - ::players[].impulse[3] + 8 == 0
::players[].impulse[1] - ::players[].impulse[4] + 12 == 0
::players[].impulse[1] - ::players[].impulse[5] + 16 == 0
::players[].impulse[1] - ::players[].impulse[6] + 20 == 0
::players[].impulse[1] - ::players[].impulse[7] + 24 == 0
::players[].impulse[1] - ::players[].impulse[8] + 28 == 0
player[::input_n].impulse[1] in ::players[].impulse[1]
player[::input_i].impulse[1] in ::players[].impulse[1]
player[bodyType].impulse[1] in ::players[].impulse[1]
player[bodyColor].impulse[1] in ::players[].impulse[1]
player[col].impulse[1] in ::players[].impulse[1]
player[row].impulse[1] in ::players[].impulse[1]
::players[].impulse[2] - ::players[].impulse[3] + 4 == 0
::players[].impulse[2] - ::players[].impulse[4] + 8 == 0
::players[].impulse[2] - ::players[].impulse[5] + 12 == 0
::players[].impulse[2] - ::players[].impulse[6] + 16 == 0
::players[].impulse[2] - ::players[].impulse[7] + 20 == 0
::players[].impulse[2] - ::players[].impulse[8] + 24 == 0
player[::input_n].impulse[2] in ::players[].impulse[2]
player[::input_i].impulse[2] in ::players[].impulse[2]
player[bodyType].impulse[2] in ::players[].impulse[2]
player[bodyColor].impulse[2] in ::players[].impulse[2]
player[col].impulse[2] in ::players[].impulse[2]
player[row].impulse[2] in ::players[].impulse[2]
::players[].impulse[3] - ::players[].impulse[4] + 4 == 0
::players[].impulse[3] - ::players[].impulse[5] + 8 == 0
::players[].impulse[3] - ::players[].impulse[6] + 12 == 0
::players[].impulse[3] - ::players[].impulse[7] + 16 == 0
::players[].impulse[3] - ::players[].impulse[8] + 20 == 0
player[::input_n].impulse[3] in ::players[].impulse[3]
player[::input_i].impulse[3] in ::players[].impulse[3]
player[bodyType].impulse[3] in ::players[].impulse[3]
player[bodyColor].impulse[3] in ::players[].impulse[3]
player[col].impulse[3] in ::players[].impulse[3]
player[row].impulse[3] in ::players[].impulse[3]
::players[].impulse[4] - ::players[].impulse[5] + 4 == 0
::players[].impulse[4] - ::players[].impulse[6] + 8 == 0
::players[].impulse[4] - ::players[].impulse[7] + 12 == 0
::players[].impulse[4] - ::players[].impulse[8] + 16 == 0
player[::input_n].impulse[4] in ::players[].impulse[4]
player[::input_i].impulse[4] in ::players[].impulse[4]
player[bodyType].impulse[4] in ::players[].impulse[4]
player[bodyColor].impulse[4] in ::players[].impulse[4]
player[col].impulse[4] in ::players[].impulse[4]
player[row].impulse[4] in ::players[].impulse[4]
::players[].impulse[5] - ::players[].impulse[6] + 4 == 0
::players[].impulse[5] - ::players[].impulse[7] + 8 == 0
::players[].impulse[5] - ::players[].impulse[8] + 12 == 0
player[::input_n].impulse[5] in ::players[].impulse[5]
player[::input_i].impulse[5] in ::players[].impulse[5]
player[bodyType].impulse[5] in ::players[].impulse[5]
player[bodyColor].impulse[5] in ::players[].impulse[5]
player[col].impulse[5] in ::players[].impulse[5]
player[row].impulse[5] in ::players[].impulse[5]
::players[].impulse[6] - ::players[].impulse[7] + 4 == 0
::players[].impulse[6] - ::players[].impulse[8] + 8 == 0
player[::input_n].impulse[6] in ::players[].impulse[6]
player[::input_i].impulse[6] in ::players[].impulse[6]
player[bodyType].impulse[6] in ::players[].impulse[6]
player[bodyColor].impulse[6] in ::players[].impulse[6]
player[col].impulse[6] in ::players[].impulse[6]
player[row].impulse[6] in ::players[].impulse[6]
::players[].impulse[7] - ::players[].impulse[8] + 4 == 0
player[::input_n].impulse[7] in ::players[].impulse[7]
player[::input_i].impulse[7] in ::players[].impulse[7]
player[bodyType].impulse[7] in ::players[].impulse[7]
player[bodyColor].impulse[7] in ::players[].impulse[7]
player[col].impulse[7] in ::players[].impulse[7]
player[row].impulse[7] in ::players[].impulse[7]
player[::input_n].impulse[8] in ::players[].impulse[8]
player[::input_i].impulse[8] in ::players[].impulse[8]
player[bodyType].impulse[8] in ::players[].impulse[8]
player[bodyColor].impulse[8] in ::players[].impulse[8]
player[col].impulse[8] in ::players[].impulse[8]
player[row].impulse[8] in ::players[].impulse[8]
player[::input_n].magnetos in ::players[].magnetos
::players[::input_n].onCrash in ::players[].pilot
::players[::input_n].onCrash in ::players[].onPushed
::input_n >= bodyType
::input_n != col
::input_n < size(player[])-1
::input_n <= size(bodyMap[])-1
::input_n >= ::players[::input_n].body.type
::input_n >= ::players[bodyType].body.type
::input_n >= ::players[bodyColor].body.type
::input_n >= ::players[col].body.type
::input_n >= ::players[row].body.type
::input_n >= ::players[::input_i].body.visible
::input_n >= ::players[col].body.visible
::input_n >= ::players[row].body.visible
::input_n != ::players[::input_n].body.bodyPoints->aspect
::input_n != ::players[::input_i].body.bodyPoints->aspect
::input_n != ::players[bodyType].body.bodyPoints->aspect
::input_n != ::players[bodyColor].body.bodyPoints->aspect
::input_n != ::players[col].body.bodyPoints->aspect
::input_n != ::players[row].body.bodyPoints->aspect
::input_n != ::players[::input_i].body.bodyMapsSize
::input_n != ::players[::input_i].body.bodySize
::input_n != ::players[::input_i].body.bodyWidth
::input_n != ::players[bodyType].body.bodyWidth
::input_n != ::players[bodyColor].body.bodyWidth
::input_n != ::players[col].body.bodyWidth
::input_n != ::players[row].body.bodyWidth
::input_n != ::players[bodyType].body.bodyHeight
::input_n != ::players[bodyColor].body.bodyHeight
::input_n != ::players[col].body.bodyHeight
::input_n != ::players[row].body.bodyHeight
::input_n != ::players[::input_i].body.color
::input_n != ::players[bodyType].body.color
::input_n != ::players[col].body.color
::input_n != ::players[::input_i].basePosition.col
::input_n != ::players[bodyType].basePosition.col
::input_n != ::players[bodyColor].basePosition.col
::input_n != ::players[col].basePosition.col
::input_n != ::players[row].basePosition.col
::input_n != ::players[::input_n].basePosition.row
::input_n != ::players[::input_i].basePosition.row
::input_n != ::players[col].basePosition.row
player[].id elements == ::input_i
::input_i <= bodyType
::input_i <= bodyColor
::input_i <= col
::input_i <= row
::input_key > ::trace_pos
player[].id elements == size(::playerSpace[].playerNodes->start[0])-1
size(::playerSpace[].playerNodes->start[0])-1 in player[].id
player[].id elements == size(::playerSpace[].playerNodes->start->next[0])-1
size(::playerSpace[].playerNodes->start->next[0])-1 in player[].id
player[].body.bodyPoints->position - player[].basePosition + 7304 == 0
player[].body.bodyPoints->player elements == player[::input_n].body.bodyPoints->player
player[].impulse[0] - player[].impulse[1] + 4 == 0
player[].impulse[0] - player[].impulse[2] + 8 == 0
player[].impulse[0] - player[].impulse[3] + 12 == 0
player[].impulse[0] - player[].impulse[4] + 16 == 0
player[].impulse[0] - player[].impulse[5] + 20 == 0
player[].impulse[0] - player[].impulse[6] + 24 == 0
player[].impulse[0] - player[].impulse[7] + 28 == 0
player[].impulse[0] - player[].impulse[8] + 32 == 0
player[].impulse[1] - player[].impulse[2] + 4 == 0
player[].impulse[1] - player[].impulse[3] + 8 == 0
player[].impulse[1] - player[].impulse[4] + 12 == 0
player[].impulse[1] - player[].impulse[5] + 16 == 0
player[].impulse[1] - player[].impulse[6] + 20 == 0
player[].impulse[1] - player[].impulse[7] + 24 == 0
player[].impulse[1] - player[].impulse[8] + 28 == 0
player[].impulse[2] - player[].impulse[3] + 4 == 0
player[].impulse[2] - player[].impulse[4] + 8 == 0
player[].impulse[2] - player[].impulse[5] + 12 == 0
player[].impulse[2] - player[].impulse[6] + 16 == 0
player[].impulse[2] - player[].impulse[7] + 20 == 0
player[].impulse[2] - player[].impulse[8] + 24 == 0
player[].impulse[3] - player[].impulse[4] + 4 == 0
player[].impulse[3] - player[].impulse[5] + 8 == 0
player[].impulse[3] - player[].impulse[6] + 12 == 0
player[].impulse[3] - player[].impulse[7] + 16 == 0
player[].impulse[3] - player[].impulse[8] + 20 == 0
player[].impulse[4] - player[].impulse[5] + 4 == 0
player[].impulse[4] - player[].impulse[6] + 8 == 0
player[].impulse[4] - player[].impulse[7] + 12 == 0
player[].impulse[4] - player[].impulse[8] + 16 == 0
player[].impulse[5] - player[].impulse[6] + 4 == 0
player[].impulse[5] - player[].impulse[7] + 8 == 0
player[].impulse[5] - player[].impulse[8] + 12 == 0
player[].impulse[6] - player[].impulse[7] + 4 == 0
player[].impulse[6] - player[].impulse[8] + 8 == 0
player[].impulse[7] - player[].impulse[8] + 4 == 0
player[].magnetos elements == player[::input_n].magnetos
player[].pilot elements == ::players[::input_n].onCrash
bodyType != col
bodyType <= size(::playerSpace[].playerNodes->start[0])
bodyType >= size(::playerSpace[].playerNodes->start[0])-1
bodyType <= size(::playerSpace[].playerNodes->start->next[0])
bodyType >= size(::playerSpace[].playerNodes->start->next[0])-1
bodyType < size(::players[])-1
bodyType < size(::players[].magnetos[0])-1
bodyType < size(player[])-1
bodyType <= size(bodyMap[])-1
bodyType >= ::players[bodyType].body.type
bodyType <= ::players[::input_i].body.visible
bodyType <= ::players[::input_i].body.bodyPoints->aspect
bodyType <= ::players[bodyColor].body.bodyPoints->aspect
bodyType <= ::players[::input_i].body.bodyMapsSize
bodyType <= ::players[bodyColor].body.bodyMapsSize
bodyType <= ::players[::input_i].body.bodySize
bodyType <= ::players[bodyColor].body.bodySize
bodyType <= ::players[::input_i].body.bodyWidth
bodyType <= ::players[::input_i].body.color
bodyType <= ::players[::input_i].basePosition.col
bodyType <= ::players[::input_i].basePosition.row
bodyColor <= col
bodyColor >= size(::playerSpace[].playerNodes->start[0])-1
bodyColor >= size(::playerSpace[].playerNodes->start->next[0])-1
bodyColor < size(::players[])-1
bodyColor < size(::players[].magnetos[0])-1
bodyColor < size(player[])-1
bodyColor >= ::players[bodyColor].body.type
bodyColor >= ::players[row].body.type
bodyColor != ::players[col].body.visible
bodyColor != ::players[::input_i].body.bodyPoints->aspect
bodyColor != ::players[bodyColor].body.bodyPoints->aspect
bodyColor != ::players[col].body.bodyPoints->aspect
bodyColor != ::players[col].body.bodyMapsSize
bodyColor != ::players[::input_i].body.bodySize
bodyColor != ::players[col].body.bodySize
bodyColor != ::players[bodyColor].body.bodyWidth
bodyColor != ::players[bodyColor].body.bodyHeight
bodyColor != ::players[bodyColor].body.color
bodyColor != ::players[col].body.color
bodyColor != ::players[::input_i].basePosition.col
bodyColor != ::players[col].basePosition.col
bodyColor != ::players[::input_i].basePosition.row
bodyColor != ::players[bodyColor].basePosition.row
bodyColor != ::players[col].basePosition.row
col != size(::playerSpace[].playerNodes->start[0])
col >= size(::playerSpace[].playerNodes->start[0])-1
col != size(::playerSpace[].playerNodes->start->next[0])
col >= size(::playerSpace[].playerNodes->start->next[0])-1
col < size(::players[])-1
col < size(::players[].magnetos[0])-1
col < size(player[])-1
col % size(bodyMap[]) == 0
col != size(bodyMap[])-1
col % size(bodyMap[])-1 == 0
col >= ::players[bodyColor].body.type
col >= ::players[col].body.type
col >= ::players[row].body.type
col != ::players[::input_i].body.visible
col != ::players[col].body.visible
col != ::players[::input_i].body.bodyPoints->aspect
col != ::players[bodyColor].body.bodyPoints->aspect
col != ::players[col].body.bodyPoints->aspect
col != ::players[bodyColor].body.bodyMapsSize
col != ::players[col].body.bodyMapsSize
col != ::players[::input_i].body.bodySize
col != ::players[bodyColor].body.bodySize
col != ::players[col].body.bodySize
col != ::players[bodyColor].body.bodyWidth
col != ::players[col].body.bodyWidth
col >= ::players[bodyType].body.bodyHeight
col != ::players[bodyColor].body.bodyHeight
col != ::players[col].body.bodyHeight
col != ::players[::input_i].body.color
col >= ::players[bodyType].body.color
col != ::players[bodyColor].body.color
col != ::players[col].body.color
col != ::players[::input_i].basePosition.col
col != ::players[bodyColor].basePosition.col
col != ::players[col].basePosition.col
col != ::players[col].basePosition.row
row >= size(::playerSpace[].playerNodes->start[0])-1
row >= size(::playerSpace[].playerNodes->start->next[0])-1
row < size(::players[])-1
row < size(::players[].magnetos[0])-1
row < size(player[])-1
row >= ::players[bodyColor].body.type
row >= ::players[row].body.type
row != ::players[::input_n].body.bodyPoints->aspect
row != ::players[::input_i].body.bodyPoints->aspect
row != ::players[bodyType].body.bodyPoints->aspect
row != ::players[bodyColor].body.bodyPoints->aspect
row != ::players[col].body.bodyPoints->aspect
row != ::players[row].body.bodyPoints->aspect
row != ::players[::input_i].body.bodySize
row != ::players[::input_i].body.bodyWidth
row != ::players[bodyColor].body.bodyWidth
row != ::players[row].body.bodyWidth
row != ::players[bodyColor].body.bodyHeight
row != ::players[row].body.bodyHeight
row != ::players[col].body.color
row != ::players[row].body.color
row != ::players[::input_i].basePosition.col
row != ::players[col].basePosition.col
row != ::players[::input_n].basePosition.row
row != ::players[row].basePosition.row
size(::playerSpace[].playerNodes->start[0]) < size(player[])-1
size(::playerSpace[].playerNodes->start[0]) >= ::players[::input_n].body.type
size(::playerSpace[].playerNodes->start[0]) >= ::players[bodyType].body.type
size(::playerSpace[].playerNodes->start[0]) >= ::players[bodyColor].body.type
size(::playerSpace[].playerNodes->start[0]) >= ::players[col].body.type
size(::playerSpace[].playerNodes->start[0]) >= ::players[row].body.type
size(::playerSpace[].playerNodes->start[0]) >= ::players[col].body.visible
size(::playerSpace[].playerNodes->start[0]) >= ::players[row].body.visible
size(::playerSpace[].playerNodes->start[0]) != ::players[::input_n].body.bodyPoints->aspect
size(::playerSpace[].playerNodes->start[0]) < ::players[::input_i].body.bodyPoints->aspect
size(::playerSpace[].playerNodes->start[0]) != ::players[bodyType].body.bodyPoints->aspect
size(::playerSpace[].playerNodes->start[0]) < ::players[bodyColor].body.bodyPoints->aspect
size(::playerSpace[].playerNodes->start[0]) != ::players[col].body.bodyPoints->aspect
size(::playerSpace[].playerNodes->start[0]) != ::players[row].body.bodyPoints->aspect
size(::playerSpace[].playerNodes->start[0]) < ::players[::input_i].body.bodyMapsSize
size(::playerSpace[].playerNodes->start[0]) <= ::players[bodyColor].body.bodyMapsSize
size(::playerSpace[].playerNodes->start[0]) < ::players[::input_i].body.bodySize
size(::playerSpace[].playerNodes->start[0]) <= ::players[bodyColor].body.bodySize
size(::playerSpace[].playerNodes->start[0]) < ::players[::input_i].body.bodyWidth
size(::playerSpace[].playerNodes->start[0]) != ::players[bodyType].body.bodyWidth
size(::playerSpace[].playerNodes->start[0]) != ::players[bodyColor].body.bodyWidth
size(::playerSpace[].playerNodes->start[0]) != ::players[col].body.bodyWidth
size(::playerSpace[].playerNodes->start[0]) != ::players[row].body.bodyWidth
size(::playerSpace[].playerNodes->start[0]) != ::players[bodyType].body.bodyHeight
size(::playerSpace[].playerNodes->start[0]) != ::players[bodyColor].body.bodyHeight
size(::playerSpace[].playerNodes->start[0]) != ::players[col].body.bodyHeight
size(::playerSpace[].playerNodes->start[0]) != ::players[row].body.bodyHeight
size(::playerSpace[].playerNodes->start[0]) < ::players[::input_i].body.color
size(::playerSpace[].playerNodes->start[0]) != ::players[bodyType].body.color
size(::playerSpace[].playerNodes->start[0]) != ::players[col].body.color
size(::playerSpace[].playerNodes->start[0]) < ::players[::input_i].basePosition.col
size(::playerSpace[].playerNodes->start[0]) != ::players[bodyType].basePosition.col
size(::playerSpace[].playerNodes->start[0]) != ::players[bodyColor].basePosition.col
size(::playerSpace[].playerNodes->start[0]) != ::players[col].basePosition.col
size(::playerSpace[].playerNodes->start[0]) != ::players[row].basePosition.col
size(::playerSpace[].playerNodes->start[0]) != ::players[::input_n].basePosition.row
size(::playerSpace[].playerNodes->start[0]) < ::players[::input_i].basePosition.row
size(::playerSpace[].playerNodes->start[0]) != ::players[col].basePosition.row
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[::input_n].body.type
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[bodyType].body.type
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[bodyColor].body.type
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[col].body.type
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[row].body.type
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[col].body.visible
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[row].body.visible
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[::input_n].body.bodyPoints->aspect
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[bodyType].body.bodyPoints->aspect
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[col].body.bodyPoints->aspect
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[row].body.bodyPoints->aspect
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[bodyType].body.bodyMapsSize
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[col].body.bodyMapsSize
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[row].body.bodyMapsSize
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[bodyType].body.bodySize
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[col].body.bodySize
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[row].body.bodySize
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[bodyType].body.bodyWidth
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[bodyColor].body.bodyWidth
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[col].body.bodyWidth
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[row].body.bodyWidth
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[bodyType].body.bodyHeight
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[bodyColor].body.bodyHeight
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[col].body.bodyHeight
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[row].body.bodyHeight
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[bodyType].body.color
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[bodyColor].body.color
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[col].body.color
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[row].body.color
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[bodyType].basePosition.col
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[bodyColor].basePosition.col
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[col].basePosition.col
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[row].basePosition.col
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[::input_n].basePosition.row
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[bodyColor].basePosition.row
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[col].basePosition.row
size(::playerSpace[].playerNodes->start[0])-1 <= ::players[row].basePosition.row
size(::playerSpace[].playerNodes->start->next[0]) < size(player[])-1
size(::playerSpace[].playerNodes->start->next[0]) >= ::players[bodyType].body.type
size(::playerSpace[].playerNodes->start->next[0]) >= ::players[bodyColor].body.type
size(::playerSpace[].playerNodes->start->next[0]) >= ::players[col].body.type
size(::playerSpace[].playerNodes->start->next[0]) >= ::players[row].body.type
size(::playerSpace[].playerNodes->start->next[0]) >= ::players[col].body.visible
size(::playerSpace[].playerNodes->start->next[0]) >= ::players[row].body.visible
size(::playerSpace[].playerNodes->start->next[0]) < ::players[::input_n].body.bodyPoints->aspect
size(::playerSpace[].playerNodes->start->next[0]) < ::players[::input_i].body.bodyPoints->aspect
size(::playerSpace[].playerNodes->start->next[0]) < ::players[bodyType].body.bodyPoints->aspect
size(::playerSpace[].playerNodes->start->next[0]) < ::players[bodyColor].body.bodyPoints->aspect
size(::playerSpace[].playerNodes->start->next[0]) != ::players[col].body.bodyPoints->aspect
size(::playerSpace[].playerNodes->start->next[0]) != ::players[row].body.bodyPoints->aspect
size(::playerSpace[].playerNodes->start->next[0]) < ::players[::input_i].body.bodyMapsSize
size(::playerSpace[].playerNodes->start->next[0]) <= ::players[bodyType].body.bodyMapsSize
size(::playerSpace[].playerNodes->start->next[0]) <= ::players[bodyColor].body.bodyMapsSize
size(::playerSpace[].playerNodes->start->next[0]) < ::players[::input_i].body.bodySize
size(::playerSpace[].playerNodes->start->next[0]) <= ::players[bodyType].body.bodySize
size(::playerSpace[].playerNodes->start->next[0]) <= ::players[bodyColor].body.bodySize
size(::playerSpace[].playerNodes->start->next[0]) < ::players[::input_i].body.bodyWidth
size(::playerSpace[].playerNodes->start->next[0]) != ::players[bodyType].body.bodyWidth
size(::playerSpace[].playerNodes->start->next[0]) != ::players[bodyColor].body.bodyWidth
size(::playerSpace[].playerNodes->start->next[0]) != ::players[col].body.bodyWidth
size(::playerSpace[].playerNodes->start->next[0]) != ::players[row].body.bodyWidth
size(::playerSpace[].playerNodes->start->next[0]) != ::players[bodyType].body.bodyHeight
size(::playerSpace[].playerNodes->start->next[0]) != ::players[bodyColor].body.bodyHeight
size(::playerSpace[].playerNodes->start->next[0]) != ::players[col].body.bodyHeight
size(::playerSpace[].playerNodes->start->next[0]) != ::players[row].body.bodyHeight
size(::playerSpace[].playerNodes->start->next[0]) < ::players[::input_i].body.color
size(::playerSpace[].playerNodes->start->next[0]) != ::players[bodyType].body.color
size(::playerSpace[].playerNodes->start->next[0]) != ::players[col].body.color
size(::playerSpace[].playerNodes->start->next[0]) < ::players[::input_i].basePosition.col
size(::playerSpace[].playerNodes->start->next[0]) != ::players[bodyType].basePosition.col
size(::playerSpace[].playerNodes->start->next[0]) != ::players[bodyColor].basePosition.col
size(::playerSpace[].playerNodes->start->next[0]) != ::players[col].basePosition.col
size(::playerSpace[].playerNodes->start->next[0]) != ::players[row].basePosition.col
size(::playerSpace[].playerNodes->start->next[0]) < ::players[::input_n].basePosition.row
size(::playerSpace[].playerNodes->start->next[0]) < ::players[::input_i].basePosition.row
size(::playerSpace[].playerNodes->start->next[0]) != ::players[col].basePosition.row
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[bodyType].body.type
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[bodyColor].body.type
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[col].body.type
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[row].body.type
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[col].body.visible
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[row].body.visible
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[col].body.bodyPoints->aspect
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[row].body.bodyPoints->aspect
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[col].body.bodyMapsSize
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[row].body.bodyMapsSize
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[col].body.bodySize
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[row].body.bodySize
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[bodyType].body.bodyWidth
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[bodyColor].body.bodyWidth
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[col].body.bodyWidth
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[row].body.bodyWidth
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[bodyType].body.bodyHeight
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[bodyColor].body.bodyHeight
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[col].body.bodyHeight
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[row].body.bodyHeight
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[bodyType].body.color
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[bodyColor].body.color
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[col].body.color
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[row].body.color
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[bodyType].basePosition.col
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[bodyColor].basePosition.col
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[col].basePosition.col
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[row].basePosition.col
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[bodyColor].basePosition.row
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[col].basePosition.row
size(::playerSpace[].playerNodes->start->next[0])-1 <= ::players[row].basePosition.row
size(::players[]) >= size(player[])
size(::players[])-1 >= size(player[])-1
size(::players[])-1 > size(bodyMap[])
size(::players[])-1 > ::players[::input_n].body.type
size(::players[])-1 > ::players[bodyType].body.type
size(::players[])-1 > ::players[bodyColor].body.type
size(::players[])-1 > ::players[col].body.type
size(::players[])-1 > ::players[row].body.type
size(::players[])-1 > ::players[::input_i].body.visible
size(::players[])-1 > ::players[col].body.visible
size(::players[])-1 > ::players[row].body.visible
size(::players[])-1 > ::players[::input_n].body.bodyPoints->aspect
size(::players[])-1 > ::players[::input_i].body.bodyPoints->aspect
size(::players[])-1 > ::players[bodyType].body.bodyPoints->aspect
size(::players[])-1 > ::players[bodyColor].body.bodyPoints->aspect
size(::players[])-1 > ::players[col].body.bodyPoints->aspect
size(::players[])-1 > ::players[row].body.bodyPoints->aspect
size(::players[])-1 > ::players[::input_i].body.bodyMapsSize
size(::players[])-1 > ::players[bodyType].body.bodyMapsSize
size(::players[])-1 > ::players[bodyColor].body.bodyMapsSize
size(::players[])-1 > ::players[col].body.bodyMapsSize
size(::players[])-1 > ::players[row].body.bodyMapsSize
size(::players[])-1 > ::players[::input_i].body.bodySize
size(::players[])-1 > ::players[bodyType].body.bodySize
size(::players[])-1 > ::players[bodyColor].body.bodySize
size(::players[])-1 > ::players[col].body.bodySize
size(::players[])-1 > ::players[row].body.bodySize
size(::players[])-1 > ::players[::input_i].body.bodyWidth
size(::players[])-1 > ::players[bodyType].body.bodyWidth
size(::players[])-1 > ::players[bodyColor].body.bodyWidth
size(::players[])-1 > ::players[col].body.bodyWidth
size(::players[])-1 > ::players[row].body.bodyWidth
size(::players[])-1 > ::players[bodyType].body.bodyHeight
size(::players[])-1 > ::players[bodyColor].body.bodyHeight
size(::players[])-1 > ::players[col].body.bodyHeight
size(::players[])-1 > ::players[row].body.bodyHeight
size(::players[])-1 > ::players[::input_i].body.color
size(::players[])-1 > ::players[bodyType].body.color
size(::players[])-1 > ::players[bodyColor].body.color
size(::players[])-1 > ::players[col].body.color
size(::players[])-1 > ::players[row].body.color
size(::players[])-1 > ::players[::input_i].basePosition.col
size(::players[])-1 > ::players[bodyType].basePosition.col
size(::players[])-1 > ::players[bodyColor].basePosition.col
size(::players[])-1 > ::players[col].basePosition.col
size(::players[])-1 > ::players[row].basePosition.col
size(::players[])-1 > ::players[::input_n].basePosition.row
size(::players[])-1 > ::players[::input_i].basePosition.row
size(::players[])-1 > ::players[bodyColor].basePosition.row
size(::players[])-1 > ::players[col].basePosition.row
size(::players[])-1 > ::players[row].basePosition.row
size(::players[].magnetos[0])-1 >= size(player[])
size(::players[].magnetos[0])-1 > size(bodyMap[])
size(::players[].magnetos[0])-1 > ::players[::input_n].body.type
size(::players[].magnetos[0])-1 > ::players[bodyType].body.type
size(::players[].magnetos[0])-1 > ::players[bodyColor].body.type
size(::players[].magnetos[0])-1 > ::players[col].body.type
size(::players[].magnetos[0])-1 > ::players[row].body.type
size(::players[].magnetos[0])-1 > ::players[::input_i].body.visible
size(::players[].magnetos[0])-1 > ::players[col].body.visible
size(::players[].magnetos[0])-1 > ::players[row].body.visible
size(::players[].magnetos[0])-1 > ::players[::input_n].body.bodyPoints->aspect
size(::players[].magnetos[0])-1 > ::players[::input_i].body.bodyPoints->aspect
size(::players[].magnetos[0])-1 > ::players[bodyType].body.bodyPoints->aspect
size(::players[].magnetos[0])-1 > ::players[bodyColor].body.bodyPoints->aspect
size(::players[].magnetos[0])-1 > ::players[col].body.bodyPoints->aspect
size(::players[].magnetos[0])-1 > ::players[row].body.bodyPoints->aspect
size(::players[].magnetos[0])-1 > ::players[::input_i].body.bodyMapsSize
size(::players[].magnetos[0])-1 > ::players[bodyType].body.bodyMapsSize
size(::players[].magnetos[0])-1 > ::players[bodyColor].body.bodyMapsSize
size(::players[].magnetos[0])-1 > ::players[col].body.bodyMapsSize
size(::players[].magnetos[0])-1 > ::players[row].body.bodyMapsSize
size(::players[].magnetos[0])-1 > ::players[::input_i].body.bodySize
size(::players[].magnetos[0])-1 > ::players[bodyType].body.bodySize
size(::players[].magnetos[0])-1 > ::players[bodyColor].body.bodySize
size(::players[].magnetos[0])-1 > ::players[col].body.bodySize
size(::players[].magnetos[0])-1 > ::players[row].body.bodySize
size(::players[].magnetos[0])-1 > ::players[::input_i].body.bodyWidth
size(::players[].magnetos[0])-1 > ::players[bodyType].body.bodyWidth
size(::players[].magnetos[0])-1 > ::players[bodyColor].body.bodyWidth
size(::players[].magnetos[0])-1 > ::players[col].body.bodyWidth
size(::players[].magnetos[0])-1 > ::players[row].body.bodyWidth
size(::players[].magnetos[0])-1 > ::players[bodyType].body.bodyHeight
size(::players[].magnetos[0])-1 > ::players[bodyColor].body.bodyHeight
size(::players[].magnetos[0])-1 > ::players[col].body.bodyHeight
size(::players[].magnetos[0])-1 > ::players[row].body.bodyHeight
size(::players[].magnetos[0])-1 > ::players[::input_i].body.color
size(::players[].magnetos[0])-1 > ::players[bodyType].body.color
size(::players[].magnetos[0])-1 > ::players[bodyColor].body.color
size(::players[].magnetos[0])-1 > ::players[col].body.color
size(::players[].magnetos[0])-1 > ::players[row].body.color
size(::players[].magnetos[0])-1 > ::players[::input_i].basePosition.col
size(::players[].magnetos[0])-1 > ::players[bodyType].basePosition.col
size(::players[].magnetos[0])-1 > ::players[bodyColor].basePosition.col
size(::players[].magnetos[0])-1 > ::players[col].basePosition.col
size(::players[].magnetos[0])-1 > ::players[row].basePosition.col
size(::players[].magnetos[0])-1 > ::players[::input_n].basePosition.row
size(::players[].magnetos[0])-1 > ::players[::input_i].basePosition.row
size(::players[].magnetos[0])-1 > ::players[bodyColor].basePosition.row
size(::players[].magnetos[0])-1 > ::players[col].basePosition.row
size(::players[].magnetos[0])-1 > ::players[row].basePosition.row
size(player[]) % size(bodyMap[])-1 == 0
size(player[]) != ::players[bodyColor].body.bodyPoints->aspect
size(player[]) != ::players[row].body.bodyPoints->aspect
size(player[])-1 > size(bodyMap[])
size(player[])-1 > ::players[::input_n].body.type
size(player[])-1 > ::players[bodyType].body.type
size(player[])-1 > ::players[bodyColor].body.type
size(player[])-1 > ::players[col].body.type
size(player[])-1 > ::players[row].body.type
size(player[])-1 > ::players[::input_i].body.visible
size(player[])-1 > ::players[col].body.visible
size(player[])-1 > ::players[row].body.visible
size(player[])-1 > ::players[::input_n].body.bodyPoints->aspect
size(player[])-1 > ::players[::input_i].body.bodyPoints->aspect
size(player[])-1 > ::players[bodyType].body.bodyPoints->aspect
size(player[])-1 != ::players[bodyColor].body.bodyPoints->aspect
size(player[])-1 > ::players[col].body.bodyPoints->aspect
size(player[])-1 != ::players[row].body.bodyPoints->aspect
size(player[])-1 > ::players[::input_i].body.bodyMapsSize
size(player[])-1 > ::players[bodyType].body.bodyMapsSize
size(player[])-1 > ::players[bodyColor].body.bodyMapsSize
size(player[])-1 > ::players[col].body.bodyMapsSize
size(player[])-1 > ::players[row].body.bodyMapsSize
size(player[])-1 > ::players[::input_i].body.bodySize
size(player[])-1 > ::players[bodyType].body.bodySize
size(player[])-1 > ::players[bodyColor].body.bodySize
size(player[])-1 > ::players[col].body.bodySize
size(player[])-1 > ::players[row].body.bodySize
size(player[])-1 > ::players[::input_i].body.bodyWidth
size(player[])-1 > ::players[bodyType].body.bodyWidth
size(player[])-1 > ::players[bodyColor].body.bodyWidth
size(player[])-1 > ::players[col].body.bodyWidth
size(player[])-1 > ::players[row].body.bodyWidth
size(player[])-1 > ::players[bodyType].body.bodyHeight
size(player[])-1 > ::players[bodyColor].body.bodyHeight
size(player[])-1 > ::players[col].body.bodyHeight
size(player[])-1 > ::players[row].body.bodyHeight
size(player[])-1 > ::players[::input_i].body.color
size(player[])-1 > ::players[bodyType].body.color
size(player[])-1 > ::players[bodyColor].body.color
size(player[])-1 > ::players[col].body.color
size(player[])-1 > ::players[row].body.color
size(player[])-1 > ::players[::input_i].basePosition.col
size(player[])-1 > ::players[bodyType].basePosition.col
size(player[])-1 > ::players[bodyColor].basePosition.col
size(player[])-1 > ::players[col].basePosition.col
size(player[])-1 > ::players[row].basePosition.col
size(player[])-1 > ::players[::input_n].basePosition.row
size(player[])-1 > ::players[::input_i].basePosition.row
size(player[])-1 > ::players[bodyColor].basePosition.row
size(player[])-1 > ::players[col].basePosition.row
size(player[])-1 > ::players[row].basePosition.row
size(bodyMap[]) != ::players[::input_n].body.bodyPoints->aspect
size(bodyMap[]) != ::players[::input_i].body.bodyPoints->aspect
size(bodyMap[]) != ::players[bodyType].body.bodyPoints->aspect
size(bodyMap[]) != ::players[bodyColor].body.bodyPoints->aspect
size(bodyMap[]) != ::players[col].body.bodyPoints->aspect
size(bodyMap[]) != ::players[row].body.bodyPoints->aspect
size(bodyMap[]) != ::players[::input_i].body.bodyMapsSize
size(bodyMap[]) != ::players[bodyType].body.bodyMapsSize
size(bodyMap[]) != ::players[bodyColor].body.bodyMapsSize
size(bodyMap[]) != ::players[col].body.bodyMapsSize
size(bodyMap[]) != ::players[row].body.bodyMapsSize
size(bodyMap[]) != ::players[::input_i].body.bodySize
size(bodyMap[]) != ::players[bodyType].body.bodySize
size(bodyMap[]) != ::players[bodyColor].body.bodySize
size(bodyMap[]) != ::players[col].body.bodySize
size(bodyMap[]) != ::players[row].body.bodySize
size(bodyMap[]) != ::players[::input_i].body.bodyWidth
size(bodyMap[]) != ::players[bodyType].body.bodyWidth
size(bodyMap[]) != ::players[bodyColor].body.bodyWidth
size(bodyMap[]) != ::players[col].body.bodyWidth
size(bodyMap[]) != ::players[row].body.bodyWidth
size(bodyMap[]) != ::players[bodyType].body.bodyHeight
size(bodyMap[]) != ::players[bodyColor].body.bodyHeight
size(bodyMap[]) != ::players[col].body.bodyHeight
size(bodyMap[]) != ::players[row].body.bodyHeight
size(bodyMap[]) != ::players[::input_i].body.color
size(bodyMap[]) != ::players[bodyType].body.color
size(bodyMap[]) != ::players[col].body.color
size(bodyMap[]) != ::players[::input_i].basePosition.col
size(bodyMap[]) != ::players[bodyType].basePosition.col
::players[bodyColor].basePosition.col % size(bodyMap[]) == 0
::players[col].basePosition.col % size(bodyMap[]) == 0
size(bodyMap[]) != ::players[col].basePosition.col
::players[row].basePosition.col % size(bodyMap[]) == 0
size(bodyMap[]) != ::players[::input_n].basePosition.row
size(bodyMap[]) != ::players[::input_i].basePosition.row
size(bodyMap[]) != ::players[col].basePosition.row
size(bodyMap[]) != ::players[row].basePosition.row
size(bodyMap[])-1 >= ::players[::input_n].body.type
size(bodyMap[])-1 >= ::players[bodyType].body.type
size(bodyMap[])-1 >= ::players[bodyColor].body.type
size(bodyMap[])-1 >= ::players[col].body.type
size(bodyMap[])-1 >= ::players[row].body.type
size(bodyMap[])-1 >= ::players[::input_i].body.visible
size(bodyMap[])-1 >= ::players[col].body.visible
size(bodyMap[])-1 >= ::players[row].body.visible
size(bodyMap[])-1 != ::players[::input_n].body.bodyPoints->aspect
size(bodyMap[])-1 != ::players[::input_i].body.bodyPoints->aspect
::players[bodyType].body.bodyPoints->aspect % size(bodyMap[])-1 == 0
size(bodyMap[])-1 != ::players[bodyType].body.bodyPoints->aspect
::players[bodyColor].body.bodyPoints->aspect % size(bodyMap[])-1 == 0
size(bodyMap[])-1 != ::players[bodyColor].body.bodyPoints->aspect
::players[col].body.bodyPoints->aspect % size(bodyMap[])-1 == 0
size(bodyMap[])-1 != ::players[col].body.bodyPoints->aspect
::players[row].body.bodyPoints->aspect % size(bodyMap[])-1 == 0
size(bodyMap[])-1 != ::players[row].body.bodyPoints->aspect
size(bodyMap[])-1 != ::players[::input_i].body.bodyMapsSize
::players[bodyType].body.bodyMapsSize % size(bodyMap[])-1 == 0
::players[bodyColor].body.bodyMapsSize % size(bodyMap[])-1 == 0
::players[col].body.bodyMapsSize % size(bodyMap[])-1 == 0
::players[row].body.bodyMapsSize % size(bodyMap[])-1 == 0
size(bodyMap[])-1 != ::players[::input_i].body.bodySize
::players[bodyType].body.bodySize % size(bodyMap[])-1 == 0
::players[bodyColor].body.bodySize % size(bodyMap[])-1 == 0
::players[col].body.bodySize % size(bodyMap[])-1 == 0
::players[row].body.bodySize % size(bodyMap[])-1 == 0
size(bodyMap[])-1 != ::players[::input_i].body.bodyWidth
size(bodyMap[])-1 != ::players[bodyType].body.bodyWidth
size(bodyMap[])-1 != ::players[bodyColor].body.bodyWidth
size(bodyMap[])-1 != ::players[col].body.bodyWidth
size(bodyMap[])-1 != ::players[row].body.bodyWidth
size(bodyMap[])-1 != ::players[bodyType].body.bodyHeight
size(bodyMap[])-1 != ::players[bodyColor].body.bodyHeight
size(bodyMap[])-1 != ::players[col].body.bodyHeight
size(bodyMap[])-1 != ::players[row].body.bodyHeight
size(bodyMap[])-1 != ::players[::input_i].body.color
size(bodyMap[])-1 != ::players[bodyType].body.color
::players[bodyColor].body.color % size(bodyMap[])-1 == 0
::players[col].body.color % size(bodyMap[])-1 == 0
size(bodyMap[])-1 != ::players[col].body.color
::players[row].body.color % size(bodyMap[])-1 == 0
size(bodyMap[])-1 != ::players[::input_i].basePosition.col
size(bodyMap[])-1 != ::players[bodyType].basePosition.col
::players[bodyColor].basePosition.col % size(bodyMap[])-1 == 0
size(bodyMap[])-1 != ::players[bodyColor].basePosition.col
::players[col].basePosition.col % size(bodyMap[])-1 == 0
size(bodyMap[])-1 != ::players[col].basePosition.col
::players[row].basePosition.col % size(bodyMap[])-1 == 0
size(bodyMap[])-1 != ::players[row].basePosition.col
size(bodyMap[])-1 != ::players[::input_n].basePosition.row
size(bodyMap[])-1 != ::players[::input_i].basePosition.row
::players[bodyColor].basePosition.row % size(bodyMap[])-1 == 0
::players[col].basePosition.row % size(bodyMap[])-1 == 0
size(bodyMap[])-1 != ::players[col].basePosition.row
::players[row].basePosition.row % size(bodyMap[])-1 == 0
::players[::input_n].body.type >= ::players[bodyColor].body.type
::players[::input_n].body.type >= ::players[col].body.type
::players[::input_n].body.type >= ::players[row].body.type
::players[::input_n].body.type <= ::players[::input_i].body.visible
::players[::input_n].body.type >= ::players[row].body.visible
::players[::input_n].body.type <= ::players[::input_i].body.bodyPoints->aspect
::players[::input_n].body.type <= ::players[bodyColor].body.bodyPoints->aspect
::players[::input_n].body.type <= ::players[::input_i].body.bodyMapsSize
::players[::input_n].body.type <= ::players[bodyColor].body.bodyMapsSize
::players[::input_n].body.type <= ::players[::input_i].body.bodySize
::players[::input_n].body.type <= ::players[bodyColor].body.bodySize
::players[::input_n].body.type <= ::players[::input_i].body.bodyWidth
::players[::input_n].body.type <= ::players[::input_i].body.color
::players[::input_n].body.type <= ::players[::input_i].basePosition.col
::players[::input_n].body.type <= ::players[::input_n].basePosition.row
::players[::input_n].body.type <= ::players[::input_i].basePosition.row
::players[bodyType].body.type <= ::players[::input_i].body.visible
::players[bodyType].body.type <= ::players[::input_n].body.bodyPoints->aspect
::players[bodyType].body.type <= ::players[::input_i].body.bodyPoints->aspect
::players[bodyType].body.type <= ::players[bodyColor].body.bodyPoints->aspect
::players[bodyType].body.type <= ::players[::input_i].body.bodyMapsSize
::players[bodyType].body.type <= ::players[bodyColor].body.bodyMapsSize
::players[bodyType].body.type <= ::players[::input_i].body.bodySize
::players[bodyType].body.type <= ::players[bodyColor].body.bodySize
::players[bodyType].body.type <= ::players[::input_i].body.bodyWidth
::players[bodyType].body.type <= ::players[::input_i].body.color
::players[bodyType].body.type <= ::players[::input_i].basePosition.col
::players[bodyType].body.type <= ::players[::input_n].basePosition.row
::players[bodyType].body.type <= ::players[::input_i].basePosition.row
::players[bodyColor].body.type >= ::players[row].body.type
::players[bodyColor].body.type <= ::players[::input_n].body.bodyPoints->aspect
::players[bodyColor].body.type <= ::players[::input_i].body.bodyPoints->aspect
::players[bodyColor].body.type <= ::players[bodyType].body.bodyPoints->aspect
::players[bodyColor].body.type <= ::players[::input_i].body.bodyMapsSize
::players[bodyColor].body.type <= ::players[bodyType].body.bodyMapsSize
::players[bodyColor].body.type <= ::players[::input_i].body.bodySize
::players[bodyColor].body.type <= ::players[bodyType].body.bodySize
::players[bodyColor].body.type <= ::players[::input_i].body.bodyWidth
::players[bodyColor].body.type <= ::players[::input_i].body.color
::players[bodyColor].body.type <= ::players[::input_i].basePosition.col
::players[bodyColor].body.type <= ::players[::input_n].basePosition.row
::players[bodyColor].body.type <= ::players[::input_i].basePosition.row
::players[col].body.type <= ::players[::input_i].body.visible
::players[col].body.type <= ::players[row].body.visible
::players[col].body.type <= ::players[::input_n].body.bodyPoints->aspect
::players[col].body.type <= ::players[::input_i].body.bodyPoints->aspect
::players[col].body.type <= ::players[bodyType].body.bodyPoints->aspect
::players[col].body.type <= ::players[bodyColor].body.bodyPoints->aspect
::players[col].body.type <= ::players[row].body.bodyPoints->aspect
::players[col].body.type <= ::players[::input_i].body.bodyMapsSize
::players[col].body.type <= ::players[bodyType].body.bodyMapsSize
::players[col].body.type <= ::players[bodyColor].body.bodyMapsSize
::players[col].body.type <= ::players[row].body.bodyMapsSize
::players[col].body.type <= ::players[::input_i].body.bodySize
::players[col].body.type <= ::players[bodyType].body.bodySize
::players[col].body.type <= ::players[bodyColor].body.bodySize
::players[col].body.type <= ::players[row].body.bodySize
::players[col].body.type <= ::players[::input_i].body.bodyWidth
::players[col].body.type <= ::players[::input_i].body.color
::players[col].body.type <= ::players[bodyColor].body.color
::players[col].body.type <= ::players[col].body.color
::players[col].body.type <= ::players[::input_i].basePosition.col
::players[col].body.type <= ::players[bodyColor].basePosition.col
::players[col].body.type <= ::players[col].basePosition.col
::players[col].body.type <= ::players[::input_n].basePosition.row
::players[col].body.type <= ::players[::input_i].basePosition.row
::players[col].body.type <= ::players[bodyColor].basePosition.row
::players[col].body.type <= ::players[col].basePosition.row
::players[col].body.type <= ::players[row].basePosition.row
::players[row].body.type <= ::players[::input_i].body.visible
::players[row].body.type <= ::players[::input_n].body.bodyPoints->aspect
::players[row].body.type <= ::players[::input_i].body.bodyPoints->aspect
::players[row].body.type <= ::players[bodyType].body.bodyPoints->aspect
::players[row].body.type <= ::players[bodyColor].body.bodyPoints->aspect
::players[row].body.type <= ::players[::input_i].body.bodyMapsSize
::players[row].body.type <= ::players[bodyType].body.bodyMapsSize
::players[row].body.type <= ::players[bodyColor].body.bodyMapsSize
::players[row].body.type <= ::players[::input_i].body.bodySize
::players[row].body.type <= ::players[bodyType].body.bodySize
::players[row].body.type <= ::players[bodyColor].body.bodySize
::players[row].body.type <= ::players[::input_i].body.bodyWidth
::players[row].body.type <= ::players[::input_i].body.color
::players[row].body.type <= ::players[::input_i].basePosition.col
::players[row].body.type <= ::players[::input_n].basePosition.row
::players[row].body.type <= ::players[::input_i].basePosition.row
::players[::input_i].body.visible >= ::players[col].body.visible
::players[::input_i].body.visible >= ::players[row].body.visible
::players[::input_i].body.visible <= ::players[::input_i].body.bodyWidth
::players[::input_i].body.visible <= ::players[::input_i].body.color
::players[::input_i].body.visible <= ::players[::input_i].basePosition.col
::players[::input_i].body.visible <= ::players[::input_i].basePosition.row
::players[col].body.visible <= ::players[::input_i].body.bodyPoints->aspect
::players[col].body.visible <= ::players[bodyColor].body.bodyPoints->aspect
::players[col].body.visible <= ::players[::input_i].body.bodyMapsSize
::players[col].body.visible <= ::players[bodyColor].body.bodyMapsSize
::players[col].body.visible <= ::players[::input_i].body.bodySize
::players[col].body.visible <= ::players[bodyColor].body.bodySize
::players[col].body.visible <= ::players[::input_i].body.bodyWidth
::players[col].body.visible <= ::players[::input_i].body.color
::players[col].body.visible <= ::players[bodyColor].body.color
::players[col].body.visible <= ::players[col].body.color
::players[col].body.visible <= ::players[::input_i].basePosition.col
::players[col].body.visible <= ::players[bodyColor].basePosition.col
::players[col].body.visible <= ::players[col].basePosition.col
::players[col].body.visible <= ::players[::input_i].basePosition.row
::players[col].body.visible <= ::players[bodyColor].basePosition.row
::players[col].body.visible <= ::players[col].basePosition.row
::players[row].body.visible <= ::players[::input_n].body.bodyPoints->aspect
::players[row].body.visible <= ::players[::input_i].body.bodyPoints->aspect
::players[row].body.visible <= ::players[bodyType].body.bodyPoints->aspect
::players[row].body.visible <= ::players[bodyColor].body.bodyPoints->aspect
::players[row].body.visible <= ::players[::input_i].body.bodyMapsSize
::players[row].body.visible <= ::players[bodyType].body.bodyMapsSize
::players[row].body.visible <= ::players[bodyColor].body.bodyMapsSize
::players[row].body.visible <= ::players[::input_i].body.bodySize
::players[row].body.visible <= ::players[bodyType].body.bodySize
::players[row].body.visible <= ::players[bodyColor].body.bodySize
::players[row].body.visible <= ::players[::input_i].body.bodyWidth
::players[row].body.visible <= ::players[::input_i].body.color
::players[row].body.visible <= ::players[::input_i].basePosition.col
::players[row].body.visible <= ::players[::input_n].basePosition.row
::players[row].body.visible <= ::players[::input_i].basePosition.row
::players[::input_n].body.bodyPoints->aspect <= ::players[::input_i].body.bodyPoints->aspect
::players[::input_n].body.bodyPoints->aspect <= ::players[bodyType].body.bodyPoints->aspect
::players[::input_n].body.bodyPoints->aspect <= ::players[bodyColor].body.bodyPoints->aspect
::players[::input_n].body.bodyPoints->aspect >= ::players[bodyType].body.bodyMapsSize
::players[::input_n].body.bodyPoints->aspect >= ::players[row].body.bodyMapsSize
::players[::input_n].body.bodyPoints->aspect >= ::players[bodyType].body.bodySize
::players[::input_n].body.bodyPoints->aspect >= ::players[row].body.bodySize
::players[::input_n].body.bodyPoints->aspect >= ::players[bodyType].body.bodyWidth
::players[::input_n].body.bodyPoints->aspect >= ::players[row].body.bodyWidth
::players[::input_n].body.bodyPoints->aspect >= ::players[bodyType].body.bodyHeight
::players[::input_n].body.bodyPoints->aspect >= ::players[row].body.bodyHeight
::players[::input_n].body.bodyPoints->aspect >= ::players[bodyType].body.color
::players[::input_n].body.bodyPoints->aspect >= ::players[row].body.color
::players[::input_n].body.bodyPoints->aspect <= ::players[::input_i].basePosition.col
::players[::input_n].body.bodyPoints->aspect >= ::players[row].basePosition.row
::players[::input_i].body.bodyPoints->aspect >= ::players[bodyType].body.bodyPoints->aspect
::players[::input_i].body.bodyPoints->aspect >= ::players[bodyType].body.bodyMapsSize
::players[::input_i].body.bodyPoints->aspect >= ::players[bodyColor].body.bodyMapsSize
::players[::input_i].body.bodyPoints->aspect >= ::players[col].body.bodyMapsSize
::players[::input_i].body.bodyPoints->aspect >= ::players[row].body.bodyMapsSize
::players[::input_i].body.bodyPoints->aspect >= ::players[bodyType].body.bodySize
::players[::input_i].body.bodyPoints->aspect >= ::players[bodyColor].body.bodySize
::players[::input_i].body.bodyPoints->aspect >= ::players[col].body.bodySize
::players[::input_i].body.bodyPoints->aspect >= ::players[row].body.bodySize
::players[::input_i].body.bodyPoints->aspect >= ::players[bodyType].body.bodyWidth
::players[::input_i].body.bodyPoints->aspect >= ::players[bodyColor].body.bodyWidth
::players[::input_i].body.bodyPoints->aspect >= ::players[col].body.bodyWidth
::players[::input_i].body.bodyPoints->aspect >= ::players[row].body.bodyWidth
::players[::input_i].body.bodyPoints->aspect >= ::players[bodyType].body.bodyHeight
::players[::input_i].body.bodyPoints->aspect >= ::players[bodyColor].body.bodyHeight
::players[::input_i].body.bodyPoints->aspect >= ::players[col].body.bodyHeight
::players[::input_i].body.bodyPoints->aspect >= ::players[row].body.bodyHeight
::players[::input_i].body.bodyPoints->aspect >= ::players[bodyType].body.color
::players[::input_i].body.bodyPoints->aspect >= ::players[bodyColor].body.color
::players[::input_i].body.bodyPoints->aspect >= ::players[col].body.color
::players[::input_i].body.bodyPoints->aspect >= ::players[row].body.color
::players[::input_i].body.bodyPoints->aspect >= ::players[bodyType].basePosition.col
::players[::input_i].body.bodyPoints->aspect >= ::players[bodyColor].basePosition.col
::players[::input_i].body.bodyPoints->aspect >= ::players[col].basePosition.col
::players[::input_i].body.bodyPoints->aspect >= ::players[row].basePosition.col
::players[::input_i].body.bodyPoints->aspect >= ::players[::input_n].basePosition.row
::players[::input_i].body.bodyPoints->aspect >= ::players[bodyColor].basePosition.row
::players[::input_i].body.bodyPoints->aspect >= ::players[col].basePosition.row
::players[::input_i].body.bodyPoints->aspect >= ::players[row].basePosition.row
::players[bodyType].body.bodyPoints->aspect >= ::players[row].body.bodyMapsSize
::players[bodyType].body.bodyPoints->aspect >= ::players[row].body.bodySize
::players[bodyType].body.bodyPoints->aspect >= ::players[row].body.bodyWidth
::players[bodyType].body.bodyPoints->aspect >= ::players[row].body.bodyHeight
::players[bodyType].body.bodyPoints->aspect >= ::players[row].body.color
::players[bodyType].body.bodyPoints->aspect >= ::players[row].basePosition.row
::players[bodyColor].body.bodyPoints->aspect >= ::players[row].body.bodyPoints->aspect
::players[bodyColor].body.bodyPoints->aspect >= ::players[::input_i].body.bodyMapsSize
::players[bodyColor].body.bodyPoints->aspect >= ::players[bodyType].body.bodyMapsSize
::players[bodyColor].body.bodyPoints->aspect >= ::players[col].body.bodyMapsSize
::players[bodyColor].body.bodyPoints->aspect >= ::players[row].body.bodyMapsSize
::players[bodyColor].body.bodyPoints->aspect >= ::players[::input_i].body.bodySize
::players[bodyColor].body.bodyPoints->aspect >= ::players[bodyType].body.bodySize
::players[bodyColor].body.bodyPoints->aspect >= ::players[col].body.bodySize
::players[bodyColor].body.bodyPoints->aspect >= ::players[row].body.bodySize
::players[bodyColor].body.bodyPoints->aspect >= ::players[::input_i].body.bodyWidth
::players[bodyColor].body.bodyPoints->aspect >= ::players[bodyType].body.bodyWidth
::players[bodyColor].body.bodyPoints->aspect >= ::players[col].body.bodyWidth
::players[bodyColor].body.bodyPoints->aspect >= ::players[row].body.bodyWidth
::players[bodyColor].body.bodyPoints->aspect >= ::players[bodyType].body.bodyHeight
::players[bodyColor].body.bodyPoints->aspect >= ::players[col].body.bodyHeight
::players[bodyColor].body.bodyPoints->aspect >= ::players[row].body.bodyHeight
::players[bodyColor].body.bodyPoints->aspect >= ::players[::input_i].body.color
::players[bodyColor].body.bodyPoints->aspect >= ::players[bodyType].body.color
::players[bodyColor].body.bodyPoints->aspect >= ::players[col].body.color
::players[bodyColor].body.bodyPoints->aspect >= ::players[row].body.color
::players[bodyColor].body.bodyPoints->aspect >= ::players[col].basePosition.col
::players[bodyColor].body.bodyPoints->aspect >= ::players[row].basePosition.col
::players[bodyColor].body.bodyPoints->aspect >= ::players[::input_n].basePosition.row
::players[bodyColor].body.bodyPoints->aspect >= ::players[::input_i].basePosition.row
::players[bodyColor].body.bodyPoints->aspect >= ::players[col].basePosition.row
::players[bodyColor].body.bodyPoints->aspect >= ::players[row].basePosition.row
::players[col].body.bodyPoints->aspect >= ::players[bodyColor].body.bodyWidth
::players[col].body.bodyPoints->aspect >= ::players[row].body.bodyWidth
::players[col].body.bodyPoints->aspect >= ::players[bodyColor].body.bodyHeight
::players[col].body.bodyPoints->aspect >= ::players[row].body.bodyHeight
::players[row].body.bodyPoints->aspect >= ::players[bodyType].body.bodyWidth
::players[row].body.bodyPoints->aspect >= ::players[bodyType].body.bodyHeight
::players[row].body.bodyPoints->aspect >= ::players[bodyType].body.color
::players[::input_i].body.bodyMapsSize >= ::players[bodyType].body.bodyMapsSize
::players[::input_i].body.bodyMapsSize >= ::players[bodyColor].body.bodyMapsSize
::players[::input_i].body.bodyMapsSize >= ::players[col].body.bodyMapsSize
::players[::input_i].body.bodyMapsSize >= ::players[row].body.bodyMapsSize
::players[::input_i].body.bodyMapsSize >= ::players[bodyType].body.bodyHeight
::players[::input_i].body.bodyMapsSize >= ::players[bodyColor].body.bodyHeight
::players[::input_i].body.bodyMapsSize >= ::players[col].body.bodyHeight
::players[::input_i].body.bodyMapsSize >= ::players[row].body.bodyHeight
::players[::input_i].body.bodyMapsSize >= ::players[::input_i].body.color
::players[::input_i].body.bodyMapsSize >= ::players[bodyType].body.color
::players[::input_i].body.bodyMapsSize >= ::players[bodyColor].body.color
::players[::input_i].body.bodyMapsSize >= ::players[row].body.color
::players[::input_i].body.bodyMapsSize <= ::players[::input_i].basePosition.col
::players[::input_i].body.bodyMapsSize <= ::players[::input_i].basePosition.row
::players[bodyType].body.bodyMapsSize <= ::players[::input_i].body.bodySize
::players[bodyType].body.bodyMapsSize <= ::players[::input_i].body.bodyWidth
::players[bodyType].body.bodyMapsSize >= ::players[bodyType].body.bodyHeight
::players[bodyType].body.bodyMapsSize >= ::players[bodyType].body.color
::players[bodyType].body.bodyMapsSize <= ::players[::input_i].basePosition.col
::players[bodyType].body.bodyMapsSize <= ::players[::input_n].basePosition.row
::players[bodyType].body.bodyMapsSize <= ::players[::input_i].basePosition.row
::players[bodyColor].body.bodyMapsSize >= ::players[col].body.bodyMapsSize
::players[bodyColor].body.bodyMapsSize >= ::players[row].body.bodyMapsSize
::players[bodyColor].body.bodyMapsSize <= ::players[::input_i].body.bodySize
::players[bodyColor].body.bodyMapsSize <= ::players[::input_i].body.bodyWidth
::players[bodyColor].body.bodyMapsSize >= ::players[bodyColor].body.bodyHeight
::players[bodyColor].body.bodyMapsSize >= ::players[col].body.bodyHeight
::players[bodyColor].body.bodyMapsSize >= ::players[row].body.bodyHeight
::players[bodyColor].body.bodyMapsSize <= ::players[::input_i].basePosition.col
::players[bodyColor].body.bodyMapsSize <= ::players[::input_i].basePosition.row
::players[col].body.bodyMapsSize <= ::players[::input_i].body.bodySize
::players[col].body.bodyMapsSize <= ::players[bodyColor].body.bodySize
::players[col].body.bodyMapsSize <= ::players[::input_i].body.bodyWidth
::players[col].body.bodyMapsSize >= ::players[col].body.bodyHeight
::players[col].body.bodyMapsSize <= ::players[::input_i].basePosition.col
::players[col].body.bodyMapsSize <= ::players[bodyColor].basePosition.col
::players[col].body.bodyMapsSize <= ::players[col].basePosition.col
::players[col].body.bodyMapsSize <= ::players[::input_i].basePosition.row
::players[col].body.bodyMapsSize <= ::players[bodyColor].basePosition.row
::players[col].body.bodyMapsSize <= ::players[col].basePosition.row
::players[row].body.bodyMapsSize <= ::players[::input_i].body.bodySize
::players[row].body.bodyMapsSize <= ::players[bodyColor].body.bodySize
::players[row].body.bodyMapsSize <= ::players[::input_i].body.bodyWidth
::players[row].body.bodyMapsSize >= ::players[row].body.bodyHeight
::players[row].body.bodyMapsSize <= ::players[::input_i].basePosition.col
::players[row].body.bodyMapsSize <= ::players[::input_n].basePosition.row
::players[row].body.bodyMapsSize <= ::players[::input_i].basePosition.row
::players[::input_i].body.bodySize >= ::players[bodyType].body.bodySize
::players[::input_i].body.bodySize >= ::players[bodyColor].body.bodySize
::players[::input_i].body.bodySize >= ::players[col].body.bodySize
::players[::input_i].body.bodySize >= ::players[row].body.bodySize
::players[::input_i].body.bodySize >= ::players[bodyType].body.bodyWidth
::players[::input_i].body.bodySize >= ::players[bodyColor].body.bodyWidth
::players[::input_i].body.bodySize >= ::players[col].body.bodyWidth
::players[::input_i].body.bodySize >= ::players[row].body.bodyWidth
::players[::input_i].body.bodySize >= ::players[bodyType].body.bodyHeight
::players[::input_i].body.bodySize >= ::players[bodyColor].body.bodyHeight
::players[::input_i].body.bodySize >= ::players[col].body.bodyHeight
::players[::input_i].body.bodySize >= ::players[row].body.bodyHeight
::players[::input_i].body.bodySize >= ::players[::input_i].body.color
::players[::input_i].body.bodySize >= ::players[bodyType].body.color
::players[::input_i].body.bodySize >= ::players[bodyColor].body.color
::players[::input_i].body.bodySize >= ::players[col].body.color
::players[::input_i].body.bodySize >= ::players[row].body.color
::players[::input_i].body.bodySize <= ::players[::input_i].basePosition.col
::players[::input_i].body.bodySize >= ::players[::input_n].basePosition.row
::players[::input_i].body.bodySize >= ::players[::input_i].basePosition.row
::players[::input_i].body.bodySize >= ::players[bodyColor].basePosition.row
::players[::input_i].body.bodySize >= ::players[col].basePosition.row
::players[::input_i].body.bodySize >= ::players[row].basePosition.row
::players[bodyType].body.bodySize >= ::players[bodyType].body.color
::players[bodyType].body.bodySize <= ::players[::input_i].basePosition.col
::players[bodyColor].body.bodySize >= ::players[col].body.bodySize
::players[bodyColor].body.bodySize >= ::players[row].body.bodySize
::players[bodyColor].body.bodySize >= ::players[col].body.bodyWidth
::players[bodyColor].body.bodySize >= ::players[row].body.bodyWidth
::players[bodyColor].body.bodySize >= ::players[col].body.bodyHeight
::players[bodyColor].body.bodySize >= ::players[row].body.bodyHeight
::players[bodyColor].body.bodySize <= ::players[::input_i].basePosition.col
::players[col].body.bodySize <= ::players[::input_i].basePosition.col
::players[col].body.bodySize <= ::players[bodyColor].basePosition.col
::players[col].body.bodySize <= ::players[col].basePosition.col
::players[row].body.bodySize <= ::players[::input_i].basePosition.col
::players[::input_i].body.bodyWidth >= ::players[bodyType].body.bodyWidth
::players[::input_i].body.bodyWidth >= ::players[bodyColor].body.bodyWidth
::players[::input_i].body.bodyWidth >= ::players[col].body.bodyWidth
::players[::input_i].body.bodyWidth >= ::players[row].body.bodyWidth
::players[::input_i].body.bodyWidth >= ::players[bodyType].body.bodyHeight
::players[::input_i].body.bodyWidth >= ::players[bodyColor].body.bodyHeight
::players[::input_i].body.bodyWidth >= ::players[col].body.bodyHeight
::players[::input_i].body.bodyWidth >= ::players[row].body.bodyHeight
::players[::input_i].body.bodyWidth >= ::players[::input_i].body.color
::players[::input_i].body.bodyWidth >= ::players[bodyType].body.color
::players[::input_i].body.bodyWidth >= ::players[bodyColor].body.color
::players[::input_i].body.bodyWidth >= ::players[col].body.color
::players[::input_i].body.bodyWidth >= ::players[row].body.color
::players[::input_i].body.bodyWidth <= ::players[::input_i].basePosition.col
::players[::input_i].body.bodyWidth <= ::players[::input_i].basePosition.row
::players[bodyType].body.bodyWidth >= ::players[bodyType].body.color
::players[bodyType].body.bodyWidth <= ::players[::input_i].basePosition.col
::players[bodyType].body.bodyWidth <= ::players[bodyType].basePosition.col
::players[bodyType].body.bodyWidth <= ::players[::input_n].basePosition.row
::players[bodyType].body.bodyWidth <= ::players[::input_i].basePosition.row
::players[bodyColor].body.bodyWidth >= ::players[col].body.bodyWidth
::players[bodyColor].body.bodyWidth >= ::players[row].body.bodyWidth
::players[bodyColor].body.bodyWidth >= ::players[col].body.bodyHeight
::players[bodyColor].body.bodyWidth >= ::players[row].body.bodyHeight
::players[bodyColor].body.bodyWidth <= ::players[::input_i].basePosition.col
::players[bodyColor].body.bodyWidth <= ::players[bodyColor].basePosition.col
::players[bodyColor].body.bodyWidth <= ::players[col].basePosition.col
::players[bodyColor].body.bodyWidth <= ::players[::input_i].basePosition.row
::players[bodyColor].body.bodyWidth <= ::players[bodyColor].basePosition.row
::players[col].body.bodyWidth <= ::players[::input_i].basePosition.col
::players[col].body.bodyWidth <= ::players[bodyColor].basePosition.col
::players[col].body.bodyWidth <= ::players[col].basePosition.col
::players[col].body.bodyWidth <= ::players[::input_i].basePosition.row
::players[col].body.bodyWidth <= ::players[bodyColor].basePosition.row
::players[col].body.bodyWidth <= ::players[col].basePosition.row
::players[row].body.bodyWidth <= ::players[::input_i].basePosition.col
::players[row].body.bodyWidth <= ::players[bodyColor].basePosition.col
::players[row].body.bodyWidth <= ::players[col].basePosition.col
::players[row].body.bodyWidth <= ::players[row].basePosition.col
::players[row].body.bodyWidth <= ::players[::input_n].basePosition.row
::players[row].body.bodyWidth <= ::players[::input_i].basePosition.row
::players[row].body.bodyWidth <= ::players[bodyColor].basePosition.row
::players[row].body.bodyWidth <= ::players[row].basePosition.row
::players[bodyType].body.bodyHeight >= ::players[bodyType].body.color
::players[bodyType].body.bodyHeight <= ::players[::input_i].basePosition.col
::players[bodyType].body.bodyHeight <= ::players[bodyType].basePosition.col
::players[bodyType].body.bodyHeight <= ::players[::input_n].basePosition.row
::players[bodyType].body.bodyHeight <= ::players[::input_i].basePosition.row
::players[bodyColor].body.bodyHeight >= ::players[col].body.bodyHeight
::players[bodyColor].body.bodyHeight >= ::players[row].body.bodyHeight
::players[bodyColor].body.bodyHeight <= ::players[::input_i].basePosition.col
::players[bodyColor].body.bodyHeight <= ::players[bodyColor].basePosition.col
::players[bodyColor].body.bodyHeight <= ::players[col].basePosition.col
::players[bodyColor].body.bodyHeight <= ::players[::input_i].basePosition.row
::players[bodyColor].body.bodyHeight <= ::players[bodyColor].basePosition.row
::players[bodyColor].body.bodyHeight <= ::players[col].basePosition.row
::players[col].body.bodyHeight <= ::players[::input_i].basePosition.col
::players[col].body.bodyHeight <= ::players[bodyColor].basePosition.col
::players[col].body.bodyHeight <= ::players[col].basePosition.col
::players[col].body.bodyHeight <= ::players[::input_i].basePosition.row
::players[col].body.bodyHeight <= ::players[bodyColor].basePosition.row
::players[col].body.bodyHeight <= ::players[col].basePosition.row
::players[row].body.bodyHeight <= ::players[::input_i].basePosition.col
::players[row].body.bodyHeight <= ::players[bodyColor].basePosition.col
::players[row].body.bodyHeight <= ::players[col].basePosition.col
::players[row].body.bodyHeight <= ::players[row].basePosition.col
::players[row].body.bodyHeight <= ::players[::input_n].basePosition.row
::players[row].body.bodyHeight <= ::players[::input_i].basePosition.row
::players[row].body.bodyHeight <= ::players[bodyColor].basePosition.row
::players[row].body.bodyHeight <= ::players[col].basePosition.row
::players[row].body.bodyHeight <= ::players[row].basePosition.row
::players[::input_i].body.color >= ::players[bodyType].body.color
::players[::input_i].body.color <= ::players[::input_i].basePosition.row
::players[bodyType].body.color <= ::players[::input_i].basePosition.col
::players[bodyType].body.color <= ::players[::input_n].basePosition.row
::players[bodyType].body.color <= ::players[::input_i].basePosition.row
::players[bodyColor].body.color <= ::players[::input_i].basePosition.col
::players[bodyColor].body.color <= ::players[::input_i].basePosition.row
::players[col].body.color <= ::players[::input_i].basePosition.col
::players[col].body.color <= ::players[::input_i].basePosition.row
::players[col].body.color <= ::players[bodyColor].basePosition.row
::players[row].body.color <= ::players[::input_i].basePosition.col
::players[row].body.color <= ::players[::input_n].basePosition.row
::players[row].body.color <= ::players[::input_i].basePosition.row
::players[::input_i].basePosition.col >= ::players[bodyType].basePosition.col
::players[::input_i].basePosition.col >= ::players[bodyColor].basePosition.col
::players[::input_i].basePosition.col >= ::players[col].basePosition.col
::players[::input_i].basePosition.col >= ::players[row].basePosition.col
::players[::input_i].basePosition.col >= ::players[::input_n].basePosition.row
::players[::input_i].basePosition.col >= ::players[::input_i].basePosition.row
::players[::input_i].basePosition.col >= ::players[bodyColor].basePosition.row
::players[::input_i].basePosition.col >= ::players[col].basePosition.row
::players[::input_i].basePosition.col >= ::players[row].basePosition.row
::players[::input_n].basePosition.row <= ::players[::input_i].basePosition.row
17 * ::players[bodyColor].body.bodyWidth + 8 * ::players[bodyColor].body.color - 4 * ::players[bodyColor].basePosition.col == 0
17 * ::players[row].body.bodyWidth + 8 * ::players[row].body.color - 4 * ::players[row].basePosition.col == 0
17 * ::players[bodyColor].body.bodyHeight + 4 * ::players[bodyColor].body.color - 2 * ::players[bodyColor].basePosition.col == 0
17 * ::players[row].body.bodyHeight + 4 * ::players[row].body.color - 2 * ::players[row].basePosition.col == 0
===========================================================================
..setupPlayer():::EXIT
